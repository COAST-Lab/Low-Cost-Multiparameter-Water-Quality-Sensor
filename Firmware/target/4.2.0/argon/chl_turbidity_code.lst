
/Users/jessiewynne/chl_turbidity_code/target/4.2.0/argon/chl_turbidity_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003a54  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7a70  000b7a70  00007a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7a94  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e148  000b7a98  0001e148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000063c  2003e1b4  2003e1b4  0002e1b4  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b7b04  000b7b04  00027b04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b7b2c  000b7b2c  00027b2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00196b7e  00000000  00000000  00027b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001b3e5  00000000  00000000  001be6ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    00042a27  00000000  00000000  001d9a93  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003080  00000000  00000000  0021c4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000aee0  00000000  00000000  0021f53a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000492da  00000000  00000000  0022a41a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0005f432  00000000  00000000  002736f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00139b79  00000000  00000000  002d2b26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008b94  00000000  00000000  0040c6a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 fa25 	bl	b747c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 fa2d 	bl	b7498 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e148 	.word	0x2003e148
   b4048:	000b7a98 	.word	0x000b7a98
   b404c:	2003e1b4 	.word	0x2003e1b4
   b4050:	2003e1b4 	.word	0x2003e1b4
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f003 f8db 	bl	b7218 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7a44 	.word	0x000b7a44
   b407c:	000b7a68 	.word	0x000b7a68

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b890 	b.w	b41a4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f96d 	bl	b4364 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f003 b87b 	b.w	b7188 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f002 bba3 	b.w	b67dc <malloc>

000b4096 <_Znaj>:
   b4096:	f002 bba1 	b.w	b67dc <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f002 bba7 	b.w	b67ec <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr

000b40ae <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b40ae:	4770      	bx	lr

000b40b0 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   b40b0:	7c03      	ldrb	r3, [r0, #16]
   b40b2:	f013 0308 	ands.w	r3, r3, #8
   b40b6:	bf1e      	ittt	ne
   b40b8:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   b40ba:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   b40bc:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   b40be:	2b00      	cmp	r3, #0
  }
   b40c0:	bfac      	ite	ge
   b40c2:	4618      	movge	r0, r3
   b40c4:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   b40c8:	4770      	bx	lr

000b40ca <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   b40ca:	4770      	bx	lr

000b40cc <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b40cc:	b510      	push	{r4, lr}
  }
   b40ce:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b40d0:	4604      	mov	r4, r0
  }
   b40d2:	f7ff ffe2 	bl	b409a <_ZdlPvj>
   b40d6:	4620      	mov	r0, r4
   b40d8:	bd10      	pop	{r4, pc}

000b40da <_ZN4FileD0Ev>:
   b40da:	b510      	push	{r4, lr}
   b40dc:	2134      	movs	r1, #52	; 0x34
   b40de:	4604      	mov	r4, r0
   b40e0:	f7ff ffdb 	bl	b409a <_ZdlPvj>
   b40e4:	4620      	mov	r0, r4
   b40e6:	bd10      	pop	{r4, pc}

000b40e8 <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   b40e8:	3010      	adds	r0, #16
   b40ea:	f001 b875 	b.w	b51d8 <_ZN7FatFile4syncEv>

000b40ee <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   b40ee:	3010      	adds	r0, #16
   b40f0:	f000 bf93 	b.w	b501a <_ZN7FatFile4peekEv>

000b40f4 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   b40f4:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   b40f6:	2201      	movs	r2, #1
   b40f8:	f10d 0107 	add.w	r1, sp, #7
   b40fc:	3010      	adds	r0, #16
   b40fe:	f000 fede 	bl	b4ebe <_ZN7FatFile4readEPvj>
   b4102:	2801      	cmp	r0, #1
   b4104:	bf0c      	ite	eq
   b4106:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b410a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   b410e:	b003      	add	sp, #12
   b4110:	f85d fb04 	ldr.w	pc, [sp], #4

000b4114 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   b4114:	3010      	adds	r0, #16
   b4116:	f001 b8e9 	b.w	b52ec <_ZN7FatFile5writeEPKvj>

000b411a <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   b411a:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   b411c:	2201      	movs	r2, #1
   b411e:	f88d 1007 	strb.w	r1, [sp, #7]
   b4122:	3010      	adds	r0, #16
   b4124:	f10d 0107 	add.w	r1, sp, #7
   b4128:	f001 f8e0 	bl	b52ec <_ZN7FatFile5writeEPKvj>
  }
   b412c:	b003      	add	sp, #12
   b412e:	f85d fb04 	ldr.w	pc, [sp], #4

000b4132 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b4132:	b40e      	push	{r1, r2, r3}
   b4134:	b503      	push	{r0, r1, lr}
   b4136:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   b4138:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b413a:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b413e:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b4140:	f002 fdcd 	bl	b6cde <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   b4144:	b002      	add	sp, #8
   b4146:	f85d eb04 	ldr.w	lr, [sp], #4
   b414a:	b003      	add	sp, #12
   b414c:	4770      	bx	lr
	...

000b4150 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b4150:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4152:	4604      	mov	r4, r0
   b4154:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b4156:	7922      	ldrb	r2, [r4, #4]
   b4158:	68a3      	ldr	r3, [r4, #8]
   b415a:	b132      	cbz	r2, b416a <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b415c:	b9a3      	cbnz	r3, b4188 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b415e:	490b      	ldr	r1, [pc, #44]	; (b418c <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b4160:	b002      	add	sp, #8
   b4162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b4166:	f002 bd7d 	b.w	b6c64 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b416a:	4a09      	ldr	r2, [pc, #36]	; (b4190 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b416c:	7b26      	ldrb	r6, [r4, #12]
   b416e:	4d09      	ldr	r5, [pc, #36]	; (b4194 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b4170:	4909      	ldr	r1, [pc, #36]	; (b4198 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b4172:	7b64      	ldrb	r4, [r4, #13]
   b4174:	2e01      	cmp	r6, #1
   b4176:	bf18      	it	ne
   b4178:	4629      	movne	r1, r5
   b417a:	e9cd 1400 	strd	r1, r4, [sp]
   b417e:	4907      	ldr	r1, [pc, #28]	; (b419c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b4180:	f7ff ffd7 	bl	b4132 <_ZN5Print6printfEPKcz>
  }
   b4184:	b002      	add	sp, #8
   b4186:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b4188:	4a05      	ldr	r2, [pc, #20]	; (b41a0 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b418a:	e7ef      	b.n	b416c <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b418c:	000b7605 	.word	0x000b7605
   b4190:	000b75fc 	.word	0x000b75fc
   b4194:	000b7601 	.word	0x000b7601
   b4198:	000b75fd 	.word	0x000b75fd
   b419c:	000b761b 	.word	0x000b761b
   b41a0:	000b75f4 	.word	0x000b75f4

000b41a4 <setup>:
SdFat SD;

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   b41a4:	b570      	push	{r4, r5, r6, lr}
   b41a6:	b08e      	sub	sp, #56	; 0x38
  Serial.begin(9600);
   b41a8:	f002 ff68 	bl	b707c <_Z16_fetch_usbserialv>
   b41ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   b41b0:	f002 ff52 	bl	b7058 <_ZN9USBSerial5beginEl>

  // Wait for communication with the host computer serial monitor
  while (!Serial) {
   b41b4:	f002 ff62 	bl	b707c <_Z16_fetch_usbserialv>
   b41b8:	f002 ff55 	bl	b7066 <_ZN9USBSerialcvbEv>
   b41bc:	b918      	cbnz	r0, b41c6 <setup+0x22>
    delay(1);
   b41be:	2001      	movs	r0, #1
   b41c0:	f002 fb34 	bl	b682c <delay>
  while (!Serial) {
   b41c4:	e7f6      	b.n	b41b4 <setup+0x10>
  }
  
  if (!as7341.begin(0x39)){
   b41c6:	f003 f8dd 	bl	b7384 <_Z19__fetch_global_Wirev>
   b41ca:	2300      	movs	r3, #0
   b41cc:	4602      	mov	r2, r0
   b41ce:	2139      	movs	r1, #57	; 0x39
   b41d0:	4853      	ldr	r0, [pc, #332]	; (b4320 <setup+0x17c>)
   b41d2:	f000 f9a5 	bl	b4520 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>
   b41d6:	b940      	cbnz	r0, b41ea <setup+0x46>
    Serial.println("Could not find AS7341");
   b41d8:	f002 ff50 	bl	b707c <_Z16_fetch_usbserialv>
   b41dc:	4951      	ldr	r1, [pc, #324]	; (b4324 <setup+0x180>)
   b41de:	f002 fd54 	bl	b6c8a <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   b41e2:	200a      	movs	r0, #10
   b41e4:	f002 fb22 	bl	b682c <delay>
   b41e8:	e7fb      	b.n	b41e2 <setup+0x3e>
  }
  // // Configure the LED Register to turn off the onboard LED
  // as7341.writeRegister(AS7341_LED, 0x00);

  // use ATIME of 103, ASTEP of 3457, and GAIN of 512x for dark counts during optical calibration
  as7341.setATIME(255);      
   b41ea:	21ff      	movs	r1, #255	; 0xff
   b41ec:	484c      	ldr	r0, [pc, #304]	; (b4320 <setup+0x17c>)
   b41ee:	f000 f9ee 	bl	b45ce <_ZN15Adafruit_AS73418setATIMEEh>
  as7341.setASTEP(999);
   b41f2:	f240 31e7 	movw	r1, #999	; 0x3e7
   b41f6:	484a      	ldr	r0, [pc, #296]	; (b4320 <setup+0x17c>)
   b41f8:	f000 f9fc 	bl	b45f4 <_ZN15Adafruit_AS73418setASTEPEt>
  as7341.setGain(AS7341_GAIN_128X);
   b41fc:	4848      	ldr	r0, [pc, #288]	; (b4320 <setup+0x17c>)
   b41fe:	2108      	movs	r1, #8
   b4200:	f000 fa0c 	bl	b461c <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>

  if (! rtc.begin()) {
   b4204:	4848      	ldr	r0, [pc, #288]	; (b4328 <setup+0x184>)
   b4206:	f000 fdb7 	bl	b4d78 <_ZN11RTC_PCF85235beginEv>
   b420a:	b928      	cbnz	r0, b4218 <setup+0x74>
    Serial.println("Couldn't find RTC");
   b420c:	f002 ff36 	bl	b707c <_Z16_fetch_usbserialv>
   b4210:	4946      	ldr	r1, [pc, #280]	; (b432c <setup+0x188>)
   b4212:	f002 fd3a 	bl	b6c8a <_ZN5Print7printlnEPKc>
    while (1);
   b4216:	e7fe      	b.n	b4216 <setup+0x72>
  }

  if (! rtc.initialized()) {
   b4218:	4843      	ldr	r0, [pc, #268]	; (b4328 <setup+0x184>)
   b421a:	f000 fdaf 	bl	b4d7c <_ZN11RTC_PCF852311initializedEv>
   b421e:	b920      	cbnz	r0, b422a <setup+0x86>
    Serial.println("RTC is NOT running!");
   b4220:	f002 ff2c 	bl	b707c <_Z16_fetch_usbserialv>
   b4224:	4942      	ldr	r1, [pc, #264]	; (b4330 <setup+0x18c>)
   b4226:	f002 fd30 	bl	b6c8a <_ZN5Print7printlnEPKc>
    // This line sets the RTC with an explicit date & time, for example to set
    // January 21, 2014 at 3am you would call:
    // rtc.adjust(DateTime(2014, 1, 21, 3, 0, 0));
  }

  if (! aw.begin(0x58)) {
   b422a:	f003 f8ab 	bl	b7384 <_Z19__fetch_global_Wirev>
   b422e:	2158      	movs	r1, #88	; 0x58
   b4230:	4602      	mov	r2, r0
   b4232:	4840      	ldr	r0, [pc, #256]	; (b4334 <setup+0x190>)
   b4234:	f000 fa9d 	bl	b4772 <_ZN15Adafruit_AW95235beginEhP7TwoWire>
   b4238:	b940      	cbnz	r0, b424c <setup+0xa8>
    Serial.println("AW9523 not found? Check wiring!");
   b423a:	f002 ff1f 	bl	b707c <_Z16_fetch_usbserialv>
   b423e:	493e      	ldr	r1, [pc, #248]	; (b4338 <setup+0x194>)
   b4240:	f002 fd23 	bl	b6c8a <_ZN5Print7printlnEPKc>
    while (1) delay(10);  // halt forever
   b4244:	200a      	movs	r0, #10
   b4246:	f002 faf1 	bl	b682c <delay>
   b424a:	e7fb      	b.n	b4244 <setup+0xa0>
  }

  Serial.println("AW9523 found!");
   b424c:	f002 ff16 	bl	b707c <_Z16_fetch_usbserialv>
   b4250:	493a      	ldr	r1, [pc, #232]	; (b433c <setup+0x198>)
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   b4252:	4c3b      	ldr	r4, [pc, #236]	; (b4340 <setup+0x19c>)
   b4254:	f002 fd19 	bl	b6c8a <_ZN5Print7printlnEPKc>

  // Set pinMode for each LED pin
  for (int i = 0; i < NumLEDs; i++) {
    aw.pinMode(LedPins[i], AW9523_LED_MODE);
   b4258:	4836      	ldr	r0, [pc, #216]	; (b4334 <setup+0x190>)
   b425a:	2203      	movs	r2, #3
   b425c:	2101      	movs	r1, #1
   b425e:	f000 fa2d 	bl	b46bc <_ZN15Adafruit_AW95237pinModeEhh>
   b4262:	4834      	ldr	r0, [pc, #208]	; (b4334 <setup+0x190>)
   b4264:	2203      	movs	r2, #3
   b4266:	210a      	movs	r1, #10
   b4268:	f000 fa28 	bl	b46bc <_ZN15Adafruit_AW95237pinModeEhh>
   b426c:	4831      	ldr	r0, [pc, #196]	; (b4334 <setup+0x190>)
   b426e:	2203      	movs	r2, #3
   b4270:	2100      	movs	r1, #0
   b4272:	f000 fa23 	bl	b46bc <_ZN15Adafruit_AW95237pinModeEhh>
class SPISettings : public Printable {
   b4276:	4b33      	ldr	r3, [pc, #204]	; (b4344 <setup+0x1a0>)
   b4278:	9301      	str	r3, [sp, #4]
   b427a:	2300      	movs	r3, #0
   b427c:	f88d 3008 	strb.w	r3, [sp, #8]
   b4280:	f504 668c 	add.w	r6, r4, #1120	; 0x460
   b4284:	4b30      	ldr	r3, [pc, #192]	; (b4348 <setup+0x1a4>)
   b4286:	9303      	str	r3, [sp, #12]
   b4288:	2501      	movs	r5, #1
   b428a:	ab01      	add	r3, sp, #4
   b428c:	2205      	movs	r2, #5
   b428e:	f204 416c 	addw	r1, r4, #1132	; 0x46c
   b4292:	4630      	mov	r0, r6
   b4294:	f8ad 5010 	strh.w	r5, [sp, #16]
   b4298:	f001 fe72 	bl	b5f80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   b429c:	b1f8      	cbz	r0, b42de <setup+0x13a>
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
   b429e:	f204 403c 	addw	r0, r4, #1084	; 0x43c
    m_blockDev = blockDev;
   b42a2:	6026      	str	r6, [r4, #0]
    vwd()->close();
   b42a4:	f000 ffce 	bl	b5244 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   b42a8:	4629      	mov	r1, r5
   b42aa:	4620      	mov	r0, r4
   b42ac:	f001 fd12 	bl	b5cd4 <_ZN9FatVolume4initEh>
   b42b0:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   b42b4:	4601      	mov	r1, r0
   b42b6:	b168      	cbz	r0, b42d4 <setup+0x130>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   b42b8:	4921      	ldr	r1, [pc, #132]	; (b4340 <setup+0x19c>)
   b42ba:	f201 403c 	addw	r0, r1, #1084	; 0x43c
   b42be:	f000 fdf8 	bl	b4eb2 <_ZN7FatFile8openRootEP9FatVolume>
   b42c2:	b160      	cbz	r0, b42de <setup+0x13a>
    if (!dir->isDir()) {
   b42c4:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   b42c8:	f013 0f70 	tst.w	r3, #112	; 0x70
    m_cwd = dir;
   b42cc:	bf1c      	itt	ne
   b42ce:	4b1f      	ldrne	r3, [pc, #124]	; (b434c <setup+0x1a8>)
   b42d0:	601d      	strne	r5, [r3, #0]
    return true;
   b42d2:	e004      	b.n	b42de <setup+0x13a>
    return (part ? init(part) : init(1) || init(0))
   b42d4:	4620      	mov	r0, r4
   b42d6:	f001 fcfd 	bl	b5cd4 <_ZN9FatVolume4initEh>
   b42da:	2800      	cmp	r0, #0
   b42dc:	d1ec      	bne.n	b42b8 <setup+0x114>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b42de:	2300      	movs	r3, #0
   b42e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b42e4:	e9cd 3202 	strd	r3, r2, [sp, #8]
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b42e8:	9305      	str	r3, [sp, #20]
  File() {}
   b42ea:	4b19      	ldr	r3, [pc, #100]	; (b4350 <setup+0x1ac>)
   b42ec:	9301      	str	r3, [sp, #4]
   * \param[in] oflag open flags.
   * \return a File object.
   */
  File open(const char *path, oflag_t oflag = FILE_READ) {
    File tmpFile;
    tmpFile.open(vwd(), path, oflag);
   b42ee:	4a19      	ldr	r2, [pc, #100]	; (b4354 <setup+0x1b0>)
   b42f0:	4919      	ldr	r1, [pc, #100]	; (b4358 <setup+0x1b4>)
   b42f2:	f244 2302 	movw	r3, #16898	; 0x4202
   b42f6:	a805      	add	r0, sp, #20
   b42f8:	f000 ffab 	bl	b5252 <_ZN7FatFile4openEPS_PKci>

  SD.begin(SD_CHIP_SELECT);
 
  File file = SD.open("2_15_24_700ms_128x_through_hole_dilutions.csv", FILE_WRITE);

  if (file) {
   b42fc:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b4300:	b143      	cbz	r3, b4314 <setup+0x170>
    file.println("Date and Time,ASTEP,ATIME,GAIN,LED Status,LED Intensity,Test,Seconds,Milliseconds,Type,F1 (Basic),F2 (Basic),F3 (Basic),F4 (Basic),F5 (Basic),F6 (Basic),F7 (Basic),F8 (Basic),Clear (Basic),NIR (Basic),Type,F1 (Raw),F2 (Raw),F3 (Raw),F4 (Raw),F5 (Raw),F6 (Raw),F7 (Raw),F8 (Raw),Clear (Raw),NIR (Raw)"); // Headers
   b4302:	4916      	ldr	r1, [pc, #88]	; (b435c <setup+0x1b8>)
   b4304:	a801      	add	r0, sp, #4
   b4306:	f002 fcc0 	bl	b6c8a <_ZN5Print7printlnEPKc>
    file.close();
   b430a:	a805      	add	r0, sp, #20
   b430c:	f000 ff9a 	bl	b5244 <_ZN7FatFile5closeEv>
    } else {
    Serial.println(F("Error opening file!"));
  }
}
   b4310:	b00e      	add	sp, #56	; 0x38
   b4312:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println(F("Error opening file!"));
   b4314:	f002 feb2 	bl	b707c <_Z16_fetch_usbserialv>
   b4318:	4911      	ldr	r1, [pc, #68]	; (b4360 <setup+0x1bc>)
   b431a:	f002 fcc0 	bl	b6c9e <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   b431e:	e7f7      	b.n	b4310 <setup+0x16c>
   b4320:	2003e650 	.word	0x2003e650
   b4324:	000b7638 	.word	0x000b7638
   b4328:	2003e6b0 	.word	0x2003e6b0
   b432c:	000b764e 	.word	0x000b764e
   b4330:	000b7660 	.word	0x000b7660
   b4334:	2003e678 	.word	0x2003e678
   b4338:	000b7674 	.word	0x000b7674
   b433c:	000b7694 	.word	0x000b7694
   b4340:	2003e1c0 	.word	0x2003e1c0
   b4344:	000b7818 	.word	0x000b7818
   b4348:	02faf080 	.word	0x02faf080
   b434c:	2003e6b8 	.word	0x2003e6b8
   b4350:	000b782c 	.word	0x000b782c
   b4354:	000b76a2 	.word	0x000b76a2
   b4358:	2003e5fc 	.word	0x2003e5fc
   b435c:	000b76d0 	.word	0x000b76d0
   b4360:	000b77fc 	.word	0x000b77fc

000b4364 <loop>:

void loop() {
   b4364:	b538      	push	{r3, r4, r5, lr}
   b4366:	2404      	movs	r4, #4
  // Flash LED 1 four times
  for (int i = 0; i < 4; i++) {
    digitalWrite(LedPins[0], HIGH);
   b4368:	2101      	movs	r1, #1
   b436a:	4608      	mov	r0, r1
   b436c:	f002 ffd5 	bl	b731a <digitalWrite>
    delay(500);
   b4370:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4374:	f002 fa5a 	bl	b682c <delay>
    digitalWrite(LedPins[0], LOW);
   b4378:	2100      	movs	r1, #0
   b437a:	2001      	movs	r0, #1
   b437c:	f002 ffcd 	bl	b731a <digitalWrite>
    delay(500);
   b4380:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b4384:	f002 fa52 	bl	b682c <delay>
  for (int i = 0; i < 4; i++) {
   b4388:	3c01      	subs	r4, #1
   b438a:	d1ed      	bne.n	b4368 <loop+0x4>
  }

  // Turn off LED 1 and wait for a second
  digitalWrite(LedPins[0], LOW);
   b438c:	4621      	mov	r1, r4
   b438e:	2001      	movs	r0, #1
   b4390:	f002 ffc3 	bl	b731a <digitalWrite>
  delay(1000);
   b4394:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   b4398:	f002 fa48 	bl	b682c <delay>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b439c:	f002 f822 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>

  // Perform measurements with LED 10 for one minute
  unsigned long startTime = millis();
  while (millis() - startTime < 60000) {
   b43a0:	f64e 255f 	movw	r5, #59999	; 0xea5f
   b43a4:	4604      	mov	r4, r0
   b43a6:	f002 f81d 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
   b43aa:	1b03      	subs	r3, r0, r4
   b43ac:	42ab      	cmp	r3, r5
   b43ae:	d9fa      	bls.n	b43a6 <loop+0x42>
    // Measure with LED 10 here
  }
  digitalWrite(LedPins[1], LOW); // Turn off LED 10
   b43b0:	2100      	movs	r1, #0
   b43b2:	200a      	movs	r0, #10
   b43b4:	f002 ffb1 	bl	b731a <digitalWrite>

  // Flash LED 1 twice
  for (int i = 0; i < 2; i++) {
    digitalWrite(LedPins[0], HIGH);
   b43b8:	2101      	movs	r1, #1
   b43ba:	4608      	mov	r0, r1
   b43bc:	f002 ffad 	bl	b731a <digitalWrite>
    delay(500);
   b43c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43c4:	f002 fa32 	bl	b682c <delay>
    digitalWrite(LedPins[0], LOW);
   b43c8:	2100      	movs	r1, #0
   b43ca:	2001      	movs	r0, #1
   b43cc:	f002 ffa5 	bl	b731a <digitalWrite>
    delay(500);
   b43d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43d4:	f002 fa2a 	bl	b682c <delay>
    digitalWrite(LedPins[0], HIGH);
   b43d8:	2101      	movs	r1, #1
   b43da:	4608      	mov	r0, r1
   b43dc:	f002 ff9d 	bl	b731a <digitalWrite>
    delay(500);
   b43e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43e4:	f002 fa22 	bl	b682c <delay>
    digitalWrite(LedPins[0], LOW);
   b43e8:	2100      	movs	r1, #0
   b43ea:	2001      	movs	r0, #1
   b43ec:	f002 ff95 	bl	b731a <digitalWrite>
    delay(500);
   b43f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b43f4:	f002 fa1a 	bl	b682c <delay>
  }

  // Wait for 10 seconds
  delay(10000);
   b43f8:	f242 7010 	movw	r0, #10000	; 0x2710
   b43fc:	f002 fa16 	bl	b682c <delay>
   b4400:	2403      	movs	r4, #3

  // Flash LED 1 three times
  for (int i = 0; i < 3; i++) {
    digitalWrite(LedPins[0], HIGH);
   b4402:	2101      	movs	r1, #1
   b4404:	4608      	mov	r0, r1
   b4406:	f002 ff88 	bl	b731a <digitalWrite>
    delay(500);
   b440a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b440e:	f002 fa0d 	bl	b682c <delay>
    digitalWrite(LedPins[0], LOW);
   b4412:	2100      	movs	r1, #0
   b4414:	2001      	movs	r0, #1
   b4416:	f002 ff80 	bl	b731a <digitalWrite>
    delay(500);
   b441a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   b441e:	f002 fa05 	bl	b682c <delay>
  for (int i = 0; i < 3; i++) {
   b4422:	3c01      	subs	r4, #1
   b4424:	d1ed      	bne.n	b4402 <loop+0x9e>
  }

  // Turn on LED 9 and perform measurements for one minute
  digitalWrite(LedPins[2], HIGH);
   b4426:	4620      	mov	r0, r4
   b4428:	2101      	movs	r1, #1
   b442a:	f002 ff76 	bl	b731a <digitalWrite>
   b442e:	f001 ffd9 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
  startTime = millis();
  while (millis() - startTime < 60000) {
   b4432:	f64e 255f 	movw	r5, #59999	; 0xea5f
   b4436:	4604      	mov	r4, r0
   b4438:	f001 ffd4 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
   b443c:	1b03      	subs	r3, r0, r4
   b443e:	42ab      	cmp	r3, r5
   b4440:	d9fa      	bls.n	b4438 <loop+0xd4>
    // Measure with LED 9 here
  }
  digitalWrite(LedPins[2], LOW); // Turn off LED 9
   b4442:	2100      	movs	r1, #0
   b4444:	4608      	mov	r0, r1
   b4446:	f002 ff68 	bl	b731a <digitalWrite>

  // Turn on LED 1
  digitalWrite(LedPins[0], HIGH);
   b444a:	2101      	movs	r1, #1
  // Continue with other tasks or delay if needed
}
   b444c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  digitalWrite(LedPins[0], HIGH);
   b4450:	4608      	mov	r0, r1
   b4452:	f002 bf62 	b.w	b731a <digitalWrite>
	...

000b4458 <_GLOBAL__sub_I_as7341>:

  else {
    Serial.println(F("Error opening file!"));
  }

} 
   b4458:	b537      	push	{r0, r1, r2, r4, r5, lr}
Adafruit_AS7341 as7341;
   b445a:	4824      	ldr	r0, [pc, #144]	; (b44ec <_GLOBAL__sub_I_as7341+0x94>)
  SdFat() {
   b445c:	4c24      	ldr	r4, [pc, #144]	; (b44f0 <_GLOBAL__sub_I_as7341+0x98>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b445e:	4d25      	ldr	r5, [pc, #148]	; (b44f4 <_GLOBAL__sub_I_as7341+0x9c>)
   b4460:	f000 f856 	bl	b4510 <_ZN15Adafruit_AS7341C1Ev>
Adafruit_AW9523 aw;
   b4464:	4824      	ldr	r0, [pc, #144]	; (b44f8 <_GLOBAL__sub_I_as7341+0xa0>)
   b4466:	f000 f8ec 	bl	b4642 <_ZN15Adafruit_AW9523C1Ev>
    Print() : write_error(0) {}
   b446a:	4a24      	ldr	r2, [pc, #144]	; (b44fc <_GLOBAL__sub_I_as7341+0xa4>)
   b446c:	2300      	movs	r3, #0
   b446e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b4472:	e9c2 3101 	strd	r3, r1, [r2, #4]
   b4476:	4922      	ldr	r1, [pc, #136]	; (b4500 <_GLOBAL__sub_I_as7341+0xa8>)
   b4478:	6113      	str	r3, [r2, #16]
   b447a:	6011      	str	r1, [r2, #0]
   b447c:	2264      	movs	r2, #100	; 0x64
   b447e:	f8c4 2460 	str.w	r2, [r4, #1120]	; 0x460
  {
   b4482:	4a20      	ldr	r2, [pc, #128]	; (b4504 <_GLOBAL__sub_I_as7341+0xac>)
   b4484:	f8c4 2470 	str.w	r2, [r4, #1136]	; 0x470
   b4488:	2201      	movs	r2, #1
   b448a:	6063      	str	r3, [r4, #4]
   b448c:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
   b4490:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
   b4494:	f884 2474 	strb.w	r2, [r4, #1140]	; 0x474
   b4498:	f8c4 3478 	str.w	r3, [r4, #1144]	; 0x478
   b449c:	f8a4 347c 	strh.w	r3, [r4, #1148]	; 0x47c
   b44a0:	7829      	ldrb	r1, [r5, #0]
   b44a2:	f3bf 8f5b 	dmb	ish
   b44a6:	4011      	ands	r1, r2
   b44a8:	d10b      	bne.n	b44c2 <_GLOBAL__sub_I_as7341+0x6a>
   b44aa:	4628      	mov	r0, r5
   b44ac:	9101      	str	r1, [sp, #4]
   b44ae:	f7ff fdf6 	bl	b409e <__cxa_guard_acquire>
   b44b2:	9901      	ldr	r1, [sp, #4]
   b44b4:	b128      	cbz	r0, b44c2 <_GLOBAL__sub_I_as7341+0x6a>
   b44b6:	4814      	ldr	r0, [pc, #80]	; (b4508 <_GLOBAL__sub_I_as7341+0xb0>)
   b44b8:	f002 fc4e 	bl	b6d58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b44bc:	4628      	mov	r0, r5
   b44be:	f7ff fdf3 	bl	b40a8 <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   b44c2:	4b11      	ldr	r3, [pc, #68]	; (b4508 <_GLOBAL__sub_I_as7341+0xb0>)
   b44c4:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SYSTEM_THREAD(ENABLED);
   b44c8:	2100      	movs	r1, #0
   b44ca:	2001      	movs	r0, #1
   b44cc:	f002 f8fa 	bl	b66c4 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b44d0:	4b0e      	ldr	r3, [pc, #56]	; (b450c <_GLOBAL__sub_I_as7341+0xb4>)
   b44d2:	2200      	movs	r2, #0
   b44d4:	e9c3 2200 	strd	r2, r2, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b44d8:	2002      	movs	r0, #2
    SleepResult() {}
   b44da:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   b44de:	609a      	str	r2, [r3, #8]
} 
   b44e0:	b003      	add	sp, #12
   b44e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   b44e6:	f002 b8dd 	b.w	b66a4 <set_system_mode>
   b44ea:	bf00      	nop
   b44ec:	2003e650 	.word	0x2003e650
   b44f0:	2003e1c0 	.word	0x2003e1c0
   b44f4:	2003e1b4 	.word	0x2003e1b4
   b44f8:	2003e678 	.word	0x2003e678
   b44fc:	2003e67c 	.word	0x2003e67c
   b4500:	000b782c 	.word	0x000b782c
   b4504:	000b7818 	.word	0x000b7818
   b4508:	2003e1b8 	.word	0x2003e1b8
   b450c:	2003e644 	.word	0x2003e644

000b4510 <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {}
   b4510:	4a02      	ldr	r2, [pc, #8]	; (b451c <_ZN15Adafruit_AS7341C1Ev+0xc>)
   b4512:	6002      	str	r2, [r0, #0]
   b4514:	2200      	movs	r2, #0
   b4516:	7102      	strb	r2, [r0, #4]
   b4518:	6082      	str	r2, [r0, #8]
   b451a:	4770      	bx	lr
   b451c:	000b7854 	.word	0x000b7854

000b4520 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>:
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_AS7341::begin(uint8_t i2c_address, TwoWire *wire,
                            int32_t sensor_id) {
   b4520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4524:	4604      	mov	r4, r0
  if (i2c_dev) {
   b4526:	6880      	ldr	r0, [r0, #8]
                            int32_t sensor_id) {
   b4528:	460f      	mov	r7, r1
   b452a:	4690      	mov	r8, r2
   b452c:	461e      	mov	r6, r3
  if (i2c_dev) {
   b452e:	b110      	cbz	r0, b4536 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x16>
    delete i2c_dev; // remove old interface
   b4530:	2110      	movs	r1, #16
   b4532:	f7ff fdb2 	bl	b409a <_ZdlPvj>
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   b4536:	2010      	movs	r0, #16
   b4538:	f7ff fdab 	bl	b4092 <_Znwj>
   b453c:	4605      	mov	r5, r0
   b453e:	b118      	cbz	r0, b4548 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x28>
   b4540:	4642      	mov	r2, r8
   b4542:	4639      	mov	r1, r7
   b4544:	f000 fa48 	bl	b49d8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4548:	60a5      	str	r5, [r4, #8]

  if (!i2c_dev->begin()) {
   b454a:	2101      	movs	r1, #1
   b454c:	4628      	mov	r0, r5
   b454e:	f000 fa5f 	bl	b4a10 <_ZN18Adafruit_I2CDevice5beginEb>
   b4552:	b130      	cbz	r0, b4562 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x42>
    return false;
  }

  return _init(sensor_id);
   b4554:	6823      	ldr	r3, [r4, #0]
   b4556:	4631      	mov	r1, r6
   b4558:	4620      	mov	r0, r4
   b455a:	681b      	ldr	r3, [r3, #0]
}
   b455c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return _init(sensor_id);
   b4560:	4718      	bx	r3
}
   b4562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4566 <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b4566:	b570      	push	{r4, r5, r6, lr}
  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4568:	2501      	movs	r5, #1
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b456a:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b456c:	2600      	movs	r6, #0
   b456e:	e9cd 6500 	strd	r6, r5, [sp]
void Adafruit_AS7341::powerEnable(bool enable_power) {
   b4572:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   b4574:	462b      	mov	r3, r5
   b4576:	6881      	ldr	r1, [r0, #8]
   b4578:	2280      	movs	r2, #128	; 0x80
   b457a:	a804      	add	r0, sp, #16
   b457c:	f000 f937 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits pon_en =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 0);
   b4580:	4633      	mov	r3, r6
   b4582:	462a      	mov	r2, r5
   b4584:	a904      	add	r1, sp, #16
   b4586:	a802      	add	r0, sp, #8
   b4588:	f000 fa08 	bl	b499c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  pon_en.write(enable_power);
   b458c:	4621      	mov	r1, r4
   b458e:	a802      	add	r0, sp, #8
   b4590:	f000 fa09 	bl	b49a6 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b4594:	b00a      	add	sp, #40	; 0x28
   b4596:	bd70      	pop	{r4, r5, r6, pc}

000b4598 <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b4598:	b570      	push	{r4, r5, r6, lr}
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b459a:	2501      	movs	r5, #1
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b459c:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b459e:	2400      	movs	r4, #0
   b45a0:	e9cd 4500 	strd	r4, r5, [sp]
   b45a4:	462b      	mov	r3, r5
   b45a6:	6881      	ldr	r1, [r0, #8]
   b45a8:	2292      	movs	r2, #146	; 0x92
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   b45aa:	4606      	mov	r6, r0
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   b45ac:	a802      	add	r0, sp, #8
   b45ae:	f000 f91e 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() & 0xFC != AS7341_CHIP_ID << 2) {
   b45b2:	a802      	add	r0, sp, #8
   b45b4:	f000 f9d6 	bl	b4964 <_ZN23Adafruit_BusIO_Register4readEv>
   b45b8:	07c3      	lsls	r3, r0, #31
   b45ba:	d406      	bmi.n	b45ca <_ZN15Adafruit_AS73415_initEl+0x32>
  powerEnable(true);
   b45bc:	4630      	mov	r0, r6
   b45be:	4629      	mov	r1, r5
   b45c0:	f7ff ffd1 	bl	b4566 <_ZN15Adafruit_AS734111powerEnableEb>
  return true;
   b45c4:	4628      	mov	r0, r5
}
   b45c6:	b008      	add	sp, #32
   b45c8:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   b45ca:	4620      	mov	r0, r4
   b45cc:	e7fb      	b.n	b45c6 <_ZN15Adafruit_AS73415_initEl+0x2e>

000b45ce <_ZN15Adafruit_AS73418setATIMEEh>:
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @param atime_value The integration time step count
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b45ce:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b45d0:	2301      	movs	r3, #1
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b45d2:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b45d4:	2500      	movs	r5, #0
   b45d6:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   b45da:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   b45dc:	2281      	movs	r2, #129	; 0x81
   b45de:	6881      	ldr	r1, [r0, #8]
   b45e0:	a802      	add	r0, sp, #8
   b45e2:	f000 f904 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.write(atime_value);
   b45e6:	462a      	mov	r2, r5
   b45e8:	4621      	mov	r1, r4
   b45ea:	a802      	add	r0, sp, #8
   b45ec:	f000 f95a 	bl	b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b45f0:	b009      	add	sp, #36	; 0x24
   b45f2:	bd30      	pop	{r4, r5, pc}

000b45f4 <_ZN15Adafruit_AS73418setASTEPEt>:
 *
 * @param astep_value Integration time step size in 2.78 microsecon increments
 * Step size is `(astep_value+1) * 2.78 uS`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b45f4:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b45f6:	2301      	movs	r3, #1
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b45f8:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b45fa:	2500      	movs	r5, #0
   b45fc:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   b4600:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   b4602:	2302      	movs	r3, #2
   b4604:	6881      	ldr	r1, [r0, #8]
   b4606:	22ca      	movs	r2, #202	; 0xca
   b4608:	a802      	add	r0, sp, #8
   b460a:	f000 f8f0 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.write(astep_value);
   b460e:	462a      	mov	r2, r5
   b4610:	4621      	mov	r1, r4
   b4612:	a802      	add	r0, sp, #8
   b4614:	f000 f946 	bl	b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b4618:	b009      	add	sp, #36	; 0x24
   b461a:	bd30      	pop	{r4, r5, pc}

000b461c <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>:
 * @brief Sets the ADC gain multiplier
 *
 * @param gain_value The gain amount. must be an `as7341_gain_t`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b461c:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b461e:	2301      	movs	r3, #1
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b4620:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b4622:	2500      	movs	r5, #0
   b4624:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   b4628:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   b462a:	22aa      	movs	r2, #170	; 0xaa
   b462c:	6881      	ldr	r1, [r0, #8]
   b462e:	a802      	add	r0, sp, #8
   b4630:	f000 f8dd 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return cfg1_reg.write(gain_value);
   b4634:	462a      	mov	r2, r5
   b4636:	4621      	mov	r1, r4
   b4638:	a802      	add	r0, sp, #8
   b463a:	f000 f933 	bl	b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>
  // AGAIN bitfield is only[0:4] but the rest is empty
}
   b463e:	b009      	add	sp, #36	; 0x24
   b4640:	bd30      	pop	{r4, r5, pc}

000b4642 <_ZN15Adafruit_AW9523C1Ev>:
#include "Adafruit_AW9523.h"

/*!
 *    @brief  Instantiates a new AW9523 class
 */
Adafruit_AW9523::Adafruit_AW9523(void) {}
   b4642:	2200      	movs	r2, #0
   b4644:	6002      	str	r2, [r0, #0]
   b4646:	4770      	bx	lr

000b4648 <_ZN15Adafruit_AW95235resetEv>:

/*!
 *    @brief  Perform a soft reset over I2C
 *    @return True I2C reset command was acknowledged
 */
bool Adafruit_AW9523::reset(void) {
   b4648:	b510      	push	{r4, lr}
  Adafruit_I2CRegister resetreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   b464a:	2301      	movs	r3, #1
bool Adafruit_AW9523::reset(void) {
   b464c:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   b464e:	2400      	movs	r4, #0
   b4650:	e9cd 4300 	strd	r4, r3, [sp]
   b4654:	227f      	movs	r2, #127	; 0x7f
   b4656:	6801      	ldr	r1, [r0, #0]
   b4658:	a802      	add	r0, sp, #8
   b465a:	f000 f8c8 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return resetreg.write(0);
   b465e:	4622      	mov	r2, r4
   b4660:	4621      	mov	r1, r4
   b4662:	a802      	add	r0, sp, #8
   b4664:	f000 f91e 	bl	b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   b4668:	b008      	add	sp, #32
   b466a:	bd10      	pop	{r4, pc}

000b466c <_ZN15Adafruit_AW952319interruptEnableGPIOEt>:
/*!
 *    @brief  Sets interrupt watch for all 16 GPIO, 1 == enabled
 *    @param  pins 16-bits of pins we may want INT enabled
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b466c:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister int0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b466e:	2301      	movs	r3, #1
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b4670:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b4672:	2500      	movs	r5, #0
   b4674:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   b4678:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   b467a:	2302      	movs	r3, #2
   b467c:	6801      	ldr	r1, [r0, #0]
   b467e:	2206      	movs	r2, #6
   b4680:	a802      	add	r0, sp, #8
   b4682:	f000 f8b4 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!int0reg.write(~pins)) {
   b4686:	462a      	mov	r2, r5
   b4688:	43e1      	mvns	r1, r4
   b468a:	a802      	add	r0, sp, #8
   b468c:	f000 f90a 	bl	b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }
  return true;
}
   b4690:	b009      	add	sp, #36	; 0x24
   b4692:	bd30      	pop	{r4, r5, pc}

000b4694 <_ZN15Adafruit_AW952318configureDirectionEt>:
/*!
 *    @brief  Sets direction for all 16 GPIO, 1 == output, 0 == input
 *    @param  pins 16-bits of pins we want to set direction
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b4694:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b4696:	2301      	movs	r3, #1
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b4698:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b469a:	2500      	movs	r5, #0
   b469c:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   b46a0:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b46a2:	2302      	movs	r3, #2
   b46a4:	6801      	ldr	r1, [r0, #0]
   b46a6:	2204      	movs	r2, #4
   b46a8:	a802      	add	r0, sp, #8
   b46aa:	f000 f8a0 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!conf0reg.write(~pins)) {
   b46ae:	462a      	mov	r2, r5
   b46b0:	43e1      	mvns	r1, r4
   b46b2:	a802      	add	r0, sp, #8
   b46b4:	f000 f8f6 	bl	b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }

  return true;
}
   b46b8:	b009      	add	sp, #36	; 0x24
   b46ba:	bd30      	pop	{r4, r5, pc}

000b46bc <_ZN15Adafruit_AW95237pinModeEhh>:
 *    @brief  Sets pin mode / direction for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  mode Can be INPUT, OUTPUT for GPIO digital, or AW9523_LED_MODE for
 * constant current LED drive
 */
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b46bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // GPIO Direction
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b46c0:	2401      	movs	r4, #1
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b46c2:	b092      	sub	sp, #72	; 0x48
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b46c4:	2600      	movs	r6, #0
   b46c6:	e9cd 6400 	strd	r6, r4, [sp]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b46ca:	460f      	mov	r7, r1
   b46cc:	4680      	mov	r8, r0
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b46ce:	6801      	ldr	r1, [r0, #0]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   b46d0:	4615      	mov	r5, r2
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   b46d2:	2302      	movs	r3, #2
   b46d4:	2204      	movs	r2, #4
   b46d6:	a806      	add	r0, sp, #24
   b46d8:	f000 f889 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits confbit =
      Adafruit_I2CRegisterBits(&conf0reg, 1, pin); // # bits, bit_shift
   b46dc:	463b      	mov	r3, r7
   b46de:	4622      	mov	r2, r4
   b46e0:	a906      	add	r1, sp, #24
   b46e2:	a802      	add	r0, sp, #8
   b46e4:	f000 f95a 	bl	b499c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  // GPIO mode or LED mode?
  Adafruit_I2CRegister ledmodereg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_LEDMODE, 2, LSBFIRST);
   b46e8:	f8d8 1000 	ldr.w	r1, [r8]
   b46ec:	2302      	movs	r3, #2
   b46ee:	2212      	movs	r2, #18
   b46f0:	e9cd 6400 	strd	r6, r4, [sp]
   b46f4:	a80c      	add	r0, sp, #48	; 0x30
   b46f6:	f000 f87a 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits modebit =
      Adafruit_I2CRegisterBits(&ledmodereg, 1, pin); // # bits, bit_shift
   b46fa:	463b      	mov	r3, r7
   b46fc:	4622      	mov	r2, r4
   b46fe:	a90c      	add	r1, sp, #48	; 0x30
   b4700:	a804      	add	r0, sp, #16
   b4702:	f000 f94b 	bl	b499c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (mode == OUTPUT) {
   b4706:	42a5      	cmp	r5, r4
   b4708:	d10a      	bne.n	b4720 <_ZN15Adafruit_AW95237pinModeEhh+0x64>
    confbit.write(0);
   b470a:	4631      	mov	r1, r6
   b470c:	a802      	add	r0, sp, #8
   b470e:	f000 f94a 	bl	b49a6 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   b4712:	4629      	mov	r1, r5
    modebit.write(1);
  }

  if (mode == AW9523_LED_MODE) {
    confbit.write(0);
    modebit.write(0);
   b4714:	a804      	add	r0, sp, #16
   b4716:	f000 f946 	bl	b49a6 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  }
}
   b471a:	b012      	add	sp, #72	; 0x48
   b471c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (mode == INPUT) {
   b4720:	b13d      	cbz	r5, b4732 <_ZN15Adafruit_AW95237pinModeEhh+0x76>
  if (mode == AW9523_LED_MODE) {
   b4722:	2d03      	cmp	r5, #3
   b4724:	d1f9      	bne.n	b471a <_ZN15Adafruit_AW95237pinModeEhh+0x5e>
    confbit.write(0);
   b4726:	4631      	mov	r1, r6
   b4728:	a802      	add	r0, sp, #8
   b472a:	f000 f93c 	bl	b49a6 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(0);
   b472e:	4631      	mov	r1, r6
   b4730:	e7f0      	b.n	b4714 <_ZN15Adafruit_AW95237pinModeEhh+0x58>
    confbit.write(1);
   b4732:	4621      	mov	r1, r4
   b4734:	a802      	add	r0, sp, #8
   b4736:	f000 f936 	bl	b49a6 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   b473a:	4621      	mov	r1, r4
   b473c:	e7ea      	b.n	b4714 <_ZN15Adafruit_AW95237pinModeEhh+0x58>

000b473e <_ZN15Adafruit_AW952314openDrainPort0Eb>:
/*!
 *    @brief  Turns on/off open drain output for ALL port 0 pins (GPIO 0-7)
 *    @param  od True to enable open drain, False for push-pull
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b473e:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister gcrreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b4740:	2300      	movs	r3, #0
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b4742:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b4744:	2501      	movs	r5, #1
   b4746:	e9cd 3500 	strd	r3, r5, [sp]
bool Adafruit_AW9523::openDrainPort0(bool od) {
   b474a:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   b474c:	462b      	mov	r3, r5
   b474e:	6801      	ldr	r1, [r0, #0]
   b4750:	2211      	movs	r2, #17
   b4752:	a804      	add	r0, sp, #16
   b4754:	f000 f84b 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_I2CRegisterBits opendrain =
      Adafruit_I2CRegisterBits(&gcrreg, 1, 4); // # bits, bit_shift
   b4758:	2304      	movs	r3, #4
   b475a:	462a      	mov	r2, r5
   b475c:	a904      	add	r1, sp, #16
   b475e:	a802      	add	r0, sp, #8
   b4760:	f000 f91c 	bl	b499c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return opendrain.write(!od);
   b4764:	ea84 0105 	eor.w	r1, r4, r5
   b4768:	a802      	add	r0, sp, #8
   b476a:	f000 f91c 	bl	b49a6 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   b476e:	b00b      	add	sp, #44	; 0x2c
   b4770:	bd30      	pop	{r4, r5, pc}

000b4772 <_ZN15Adafruit_AW95235beginEhP7TwoWire>:
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   b4772:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4774:	4604      	mov	r4, r0
  if (i2c_dev) {
   b4776:	6800      	ldr	r0, [r0, #0]
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   b4778:	b089      	sub	sp, #36	; 0x24
   b477a:	460e      	mov	r6, r1
   b477c:	4617      	mov	r7, r2
  if (i2c_dev) {
   b477e:	b110      	cbz	r0, b4786 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x14>
    delete i2c_dev; // remove old interface
   b4780:	2110      	movs	r1, #16
   b4782:	f7ff fc8a 	bl	b409a <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, wire);
   b4786:	2010      	movs	r0, #16
   b4788:	f7ff fc83 	bl	b4092 <_Znwj>
   b478c:	4605      	mov	r5, r0
   b478e:	b118      	cbz	r0, b4798 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x26>
   b4790:	463a      	mov	r2, r7
   b4792:	4631      	mov	r1, r6
   b4794:	f000 f920 	bl	b49d8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   b4798:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   b479a:	2101      	movs	r1, #1
   b479c:	4628      	mov	r0, r5
   b479e:	f000 f937 	bl	b4a10 <_ZN18Adafruit_I2CDevice5beginEb>
   b47a2:	b918      	cbnz	r0, b47ac <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x3a>
    return false;
   b47a4:	2500      	movs	r5, #0
}
   b47a6:	4628      	mov	r0, r5
   b47a8:	b009      	add	sp, #36	; 0x24
   b47aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
   b47ac:	4620      	mov	r0, r4
   b47ae:	f7ff ff4b 	bl	b4648 <_ZN15Adafruit_AW95235resetEv>
   b47b2:	4605      	mov	r5, r0
   b47b4:	2800      	cmp	r0, #0
   b47b6:	d0f5      	beq.n	b47a4 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  Adafruit_I2CRegister idreg = Adafruit_I2CRegister(i2c_dev, AW9523_REG_CHIPID);
   b47b8:	2301      	movs	r3, #1
   b47ba:	2600      	movs	r6, #0
   b47bc:	e9cd 6300 	strd	r6, r3, [sp]
   b47c0:	6821      	ldr	r1, [r4, #0]
   b47c2:	2210      	movs	r2, #16
   b47c4:	a802      	add	r0, sp, #8
   b47c6:	f000 f812 	bl	b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (idreg.read() != 0x23) {
   b47ca:	a802      	add	r0, sp, #8
   b47cc:	f000 f8ca 	bl	b4964 <_ZN23Adafruit_BusIO_Register4readEv>
   b47d0:	2823      	cmp	r0, #35	; 0x23
   b47d2:	d1e7      	bne.n	b47a4 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  configureDirection(0x0); // all inputs!
   b47d4:	4631      	mov	r1, r6
   b47d6:	4620      	mov	r0, r4
   b47d8:	f7ff ff5c 	bl	b4694 <_ZN15Adafruit_AW952318configureDirectionEt>
  openDrainPort0(false);   // push pull default
   b47dc:	4631      	mov	r1, r6
   b47de:	4620      	mov	r0, r4
   b47e0:	f7ff ffad 	bl	b473e <_ZN15Adafruit_AW952314openDrainPort0Eb>
  interruptEnableGPIO(0);  // no interrupt
   b47e4:	4631      	mov	r1, r6
   b47e6:	4620      	mov	r0, r4
   b47e8:	f7ff ff40 	bl	b466c <_ZN15Adafruit_AW952319interruptEnableGPIOEt>
  return true;
   b47ec:	e7db      	b.n	b47a6 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>

000b47ee <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   b47ee:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   b47f0:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   b47f2:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   b47f6:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   b47f8:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   b47fc:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   b4800:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   b4802:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   b4804:	7382      	strb	r2, [r0, #14]
  _width = width;
   b4806:	7303      	strb	r3, [r0, #12]
}
   b4808:	bd30      	pop	{r4, r5, pc}

000b480a <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b480a:	b5f0      	push	{r4, r5, r6, r7, lr}

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b480c:	8945      	ldrh	r5, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b480e:	7a84      	ldrb	r4, [r0, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b4810:	b085      	sub	sp, #20
   b4812:	4603      	mov	r3, r0

  if (_i2cdevice) {
   b4814:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b4816:	f88d 400c 	strb.w	r4, [sp, #12]
   b481a:	0a2d      	lsrs	r5, r5, #8
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   b481c:	460e      	mov	r6, r1
   b481e:	4617      	mov	r7, r2
                           (uint8_t)(_address >> 8)};
   b4820:	f88d 500d 	strb.w	r5, [sp, #13]
  if (_i2cdevice) {
   b4824:	b140      	cbz	r0, b4838 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2e>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4826:	7b5b      	ldrb	r3, [r3, #13]
   b4828:	9301      	str	r3, [sp, #4]
   b482a:	ab03      	add	r3, sp, #12
   b482c:	9300      	str	r3, [sp, #0]
   b482e:	2301      	movs	r3, #1
   b4830:	f000 f8fd 	bl	b4a2e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   b4834:	b005      	add	sp, #20
   b4836:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   b4838:	6858      	ldr	r0, [r3, #4]
   b483a:	2800      	cmp	r0, #0
   b483c:	d0fa      	beq.n	b4834 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b483e:	f893 e008 	ldrb.w	lr, [r3, #8]
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   b4842:	f893 c00d 	ldrb.w	ip, [r3, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4846:	f1be 0f03 	cmp.w	lr, #3
   b484a:	d10c      	bne.n	b4866 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x5c>
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b484c:	f10c 0301 	add.w	r3, ip, #1
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   b4850:	f025 0501 	bic.w	r5, r5, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b4854:	9300      	str	r3, [sp, #0]
      addrbuffer[0] =
   b4856:	f88d 500c 	strb.w	r5, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b485a:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   b485e:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4860:	f000 fa1d 	bl	b4c9e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   b4864:	e7e6      	b.n	b4834 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2a>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4866:	f1be 0f00 	cmp.w	lr, #0
   b486a:	d109      	bne.n	b4880 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x76>
      addrbuffer[0] &= ~0x80;
   b486c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   b4870:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   b4874:	f8cd c000 	str.w	ip, [sp]
   b4878:	ab03      	add	r3, sp, #12
   b487a:	463a      	mov	r2, r7
   b487c:	4631      	mov	r1, r6
   b487e:	e7ef      	b.n	b4860 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4880:	f1be 0f02 	cmp.w	lr, #2
   b4884:	d102      	bne.n	b488c <_ZN23Adafruit_BusIO_Register5writeEPhh+0x82>
      addrbuffer[0] |= 0x80;
   b4886:	f064 047f 	orn	r4, r4, #127	; 0x7f
   b488a:	e7f1      	b.n	b4870 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x66>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b488c:	f1be 0f01 	cmp.w	lr, #1
      addrbuffer[0] &= ~0x80;
   b4890:	bf01      	itttt	eq
   b4892:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   b4896:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   b489a:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   b489e:	f88d 300c 	strbeq.w	r3, [sp, #12]
   b48a2:	e7e7      	b.n	b4874 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6a>

000b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   b48a4:	b4f0      	push	{r4, r5, r6, r7}
   b48a6:	460b      	mov	r3, r1
  if (numbytes == 0) {
   b48a8:	b902      	cbnz	r2, b48ac <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   b48aa:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   b48ac:	2a04      	cmp	r2, #4
   b48ae:	d814      	bhi.n	b48da <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   b48b0:	f100 050f 	add.w	r5, r0, #15
   b48b4:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   b48b6:	1884      	adds	r4, r0, r2
   b48b8:	4629      	mov	r1, r5
   b48ba:	4284      	cmp	r4, r0
   b48bc:	d009      	beq.n	b48d2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   b48be:	7b87      	ldrb	r7, [r0, #14]
      _buffer[i] = value & 0xFF;
   b48c0:	b2de      	uxtb	r6, r3
    if (_byteorder == LSBFIRST) {
   b48c2:	b927      	cbnz	r7, b48ce <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   b48c4:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   b48c6:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   b48c8:	3501      	adds	r5, #1
   b48ca:	3c01      	subs	r4, #1
   b48cc:	e7f5      	b.n	b48ba <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   b48ce:	73a6      	strb	r6, [r4, #14]
   b48d0:	e7f9      	b.n	b48c6 <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   b48d2:	4620      	mov	r0, r4
}
   b48d4:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   b48d6:	f7ff bf98 	b.w	b480a <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   b48da:	2000      	movs	r0, #0
   b48dc:	bcf0      	pop	{r4, r5, r6, r7}
   b48de:	4770      	bx	lr

000b48e0 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b48e0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   b48e2:	8946      	ldrh	r6, [r0, #10]
                           (uint8_t)(_address >> 8)};
   b48e4:	7a85      	ldrb	r5, [r0, #10]
   b48e6:	f88d 500c 	strb.w	r5, [sp, #12]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b48ea:	4604      	mov	r4, r0

  if (_i2cdevice) {
   b48ec:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   b48ee:	0a36      	lsrs	r6, r6, #8
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   b48f0:	460b      	mov	r3, r1
                           (uint8_t)(_address >> 8)};
   b48f2:	f88d 600d 	strb.w	r6, [sp, #13]
  if (_i2cdevice) {
   b48f6:	b140      	cbz	r0, b490a <_ZN23Adafruit_BusIO_Register4readEPhh+0x2a>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b48f8:	2100      	movs	r1, #0
   b48fa:	e9cd 2100 	strd	r2, r1, [sp]
   b48fe:	a903      	add	r1, sp, #12
   b4900:	7b62      	ldrb	r2, [r4, #13]
   b4902:	f000 f902 	bl	b4b0a <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   b4906:	b004      	add	sp, #16
   b4908:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   b490a:	6860      	ldr	r0, [r4, #4]
   b490c:	2800      	cmp	r0, #0
   b490e:	d0fa      	beq.n	b4906 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4910:	7a21      	ldrb	r1, [r4, #8]
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b4912:	7b64      	ldrb	r4, [r4, #13]
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   b4914:	2903      	cmp	r1, #3
   b4916:	d10d      	bne.n	b4934 <_ZN23Adafruit_BusIO_Register4readEPhh+0x54>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   b4918:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b491c:	21ff      	movs	r1, #255	; 0xff
   b491e:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   b4922:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   b4926:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   b492a:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b492c:	a903      	add	r1, sp, #12
   b492e:	f000 f9e8 	bl	b4d02 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   b4932:	e7e8      	b.n	b4906 <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   b4934:	b941      	cbnz	r1, b4948 <_ZN23Adafruit_BusIO_Register4readEPhh+0x68>
      addrbuffer[0] |= 0x80;
   b4936:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   b493a:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   b493e:	21ff      	movs	r1, #255	; 0xff
   b4940:	e9cd 2100 	strd	r2, r1, [sp]
   b4944:	4622      	mov	r2, r4
   b4946:	e7f1      	b.n	b492c <_ZN23Adafruit_BusIO_Register4readEPhh+0x4c>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   b4948:	2902      	cmp	r1, #2
   b494a:	d102      	bne.n	b4952 <_ZN23Adafruit_BusIO_Register4readEPhh+0x72>
      addrbuffer[0] &= ~0x80;
   b494c:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   b4950:	e7f3      	b.n	b493a <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   b4952:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   b4954:	bf02      	ittt	eq
   b4956:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   b495a:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   b495e:	f88d 100c 	strbeq.w	r1, [sp, #12]
   b4962:	e7ec      	b.n	b493e <_ZN23Adafruit_BusIO_Register4readEPhh+0x5e>

000b4964 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   b4964:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   b4966:	f100 050f 	add.w	r5, r0, #15
   b496a:	7b02      	ldrb	r2, [r0, #12]
   b496c:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   b496e:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   b4970:	f7ff ffb6 	bl	b48e0 <_ZN23Adafruit_BusIO_Register4readEPhh>
   b4974:	b178      	cbz	r0, b4996 <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   b4976:	7b22      	ldrb	r2, [r4, #12]
   b4978:	4629      	mov	r1, r5
   b497a:	4422      	add	r2, r4
  uint32_t value = 0;
   b497c:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   b497e:	42a2      	cmp	r2, r4
   b4980:	d00b      	beq.n	b499a <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   b4982:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   b4984:	7ba0      	ldrb	r0, [r4, #14]
   b4986:	b920      	cbnz	r0, b4992 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   b4988:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   b498a:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   b498c:	3a01      	subs	r2, #1
   b498e:	3101      	adds	r1, #1
   b4990:	e7f5      	b.n	b497e <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   b4992:	7808      	ldrb	r0, [r1, #0]
   b4994:	e7f9      	b.n	b498a <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   b4996:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b499a:	bd38      	pop	{r3, r4, r5, pc}

000b499c <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   b499c:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   b499e:	6001      	str	r1, [r0, #0]
  _bits = bits;
   b49a0:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   b49a2:	7143      	strb	r3, [r0, #5]
}
   b49a4:	bd10      	pop	{r4, pc}

000b49a6 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b49a6:	b570      	push	{r4, r5, r6, lr}
   b49a8:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   b49aa:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   b49ac:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   b49ae:	f7ff ffd9 	bl	b4964 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   b49b2:	7923      	ldrb	r3, [r4, #4]
  data &= mask;

  mask <<= _shift;
   b49b4:	7961      	ldrb	r1, [r4, #5]
  uint32_t mask = (1 << (_bits)) - 1;
   b49b6:	2201      	movs	r2, #1
   b49b8:	409a      	lsls	r2, r3
   b49ba:	1e53      	subs	r3, r2, #1
  mask <<= _shift;
   b49bc:	fa03 f501 	lsl.w	r5, r3, r1
  val &= ~mask;          // remove the current data at that spot
   b49c0:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   b49c4:	4033      	ands	r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   b49c6:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   b49c8:	fa03 f101 	lsl.w	r1, r3, r1
  return _register->write(val, _register->width());
   b49cc:	4329      	orrs	r1, r5
   b49ce:	7b02      	ldrb	r2, [r0, #12]
}
   b49d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   b49d4:	f7ff bf66 	b.w	b48a4 <_ZN23Adafruit_BusIO_Register5writeEmh>

000b49d8 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   b49d8:	6042      	str	r2, [r0, #4]
  _begun = false;
   b49da:	2200      	movs	r2, #0
   b49dc:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   b49de:	2220      	movs	r2, #32
  _addr = addr;
   b49e0:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   b49e2:	60c2      	str	r2, [r0, #12]
#endif
}
   b49e4:	4770      	bx	lr

000b49e6 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   b49e6:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   b49e8:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   b49ea:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   b49ec:	b153      	cbz	r3, b4a04 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   b49ee:	7821      	ldrb	r1, [r4, #0]
   b49f0:	6860      	ldr	r0, [r4, #4]
   b49f2:	f001 ffe1 	bl	b69b8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   b49f6:	6860      	ldr	r0, [r4, #4]
   b49f8:	f001 ffe9 	bl	b69ce <_ZN7TwoWire15endTransmissionEv>
   b49fc:	fab0 f080 	clz	r0, r0
   b4a00:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   b4a02:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   b4a04:	2101      	movs	r1, #1
   b4a06:	f000 f803 	bl	b4a10 <_ZN18Adafruit_I2CDevice5beginEb>
   b4a0a:	2800      	cmp	r0, #0
   b4a0c:	d1ef      	bne.n	b49ee <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   b4a0e:	e7f8      	b.n	b4a02 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000b4a10 <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4a10:	b538      	push	{r3, r4, r5, lr}
   b4a12:	4604      	mov	r4, r0
  _wire->begin();
   b4a14:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   b4a16:	460d      	mov	r5, r1
  _wire->begin();
   b4a18:	f001 ff9c 	bl	b6954 <_ZN7TwoWire5beginEv>
  _begun = true;
   b4a1c:	2001      	movs	r0, #1
   b4a1e:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   b4a20:	b125      	cbz	r5, b4a2c <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   b4a22:	4620      	mov	r0, r4
}
   b4a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   b4a28:	f7ff bfdd 	b.w	b49e6 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   b4a2c:	bd38      	pop	{r3, r4, r5, pc}

000b4a2e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   b4a2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4a32:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   b4a36:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   b4a38:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   b4a3a:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   b4a3c:	4432      	add	r2, r6
   b4a3e:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   b4a40:	4604      	mov	r4, r0
   b4a42:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   b4a44:	d902      	bls.n	b4a4c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   b4a46:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   b4a48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   b4a4c:	7801      	ldrb	r1, [r0, #0]
   b4a4e:	6840      	ldr	r0, [r0, #4]
   b4a50:	f001 ffb2 	bl	b69b8 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b4a54:	b97e      	cbnz	r6, b4a76 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   b4a56:	6860      	ldr	r0, [r4, #4]
   b4a58:	6803      	ldr	r3, [r0, #0]
   b4a5a:	462a      	mov	r2, r5
   b4a5c:	68db      	ldr	r3, [r3, #12]
   b4a5e:	4641      	mov	r1, r8
   b4a60:	4798      	blx	r3
   b4a62:	4285      	cmp	r5, r0
   b4a64:	d1ef      	bne.n	b4a46 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   b4a66:	6860      	ldr	r0, [r4, #4]
   b4a68:	4639      	mov	r1, r7
   b4a6a:	f001 ffac 	bl	b69c6 <_ZN7TwoWire15endTransmissionEh>
   b4a6e:	fab0 f080 	clz	r0, r0
   b4a72:	0940      	lsrs	r0, r0, #5
   b4a74:	e7e8      	b.n	b4a48 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   b4a76:	f1b9 0f00 	cmp.w	r9, #0
   b4a7a:	d0ec      	beq.n	b4a56 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   b4a7c:	6860      	ldr	r0, [r4, #4]
   b4a7e:	6803      	ldr	r3, [r0, #0]
   b4a80:	4632      	mov	r2, r6
   b4a82:	68db      	ldr	r3, [r3, #12]
   b4a84:	4649      	mov	r1, r9
   b4a86:	4798      	blx	r3
   b4a88:	4286      	cmp	r6, r0
   b4a8a:	d1dc      	bne.n	b4a46 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   b4a8c:	e7e3      	b.n	b4a56 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000b4a8e <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   b4a8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4a92:	4615      	mov	r5, r2
   b4a94:	4604      	mov	r4, r0
   b4a96:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   b4a98:	b2d2      	uxtb	r2, r2
   b4a9a:	7801      	ldrb	r1, [r0, #0]
   b4a9c:	6840      	ldr	r0, [r0, #4]
   b4a9e:	f001 ff76 	bl	b698e <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   b4aa2:	4285      	cmp	r5, r0
   b4aa4:	d10d      	bne.n	b4ac2 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   b4aa6:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   b4aa8:	fa1f f887 	uxth.w	r8, r7
   b4aac:	45a8      	cmp	r8, r5
   b4aae:	f107 0701 	add.w	r7, r7, #1
   b4ab2:	d209      	bcs.n	b4ac8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   b4ab4:	6860      	ldr	r0, [r4, #4]
   b4ab6:	6803      	ldr	r3, [r0, #0]
   b4ab8:	695b      	ldr	r3, [r3, #20]
   b4aba:	4798      	blx	r3
   b4abc:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   b4ac0:	e7f2      	b.n	b4aa8 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   b4ac2:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b4ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4ac8:	2001      	movs	r0, #1
   b4aca:	e7fb      	b.n	b4ac4 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000b4acc <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   b4acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4ad0:	4607      	mov	r7, r0
   b4ad2:	4688      	mov	r8, r1
   b4ad4:	4616      	mov	r6, r2
   b4ad6:	4699      	mov	r9, r3
  size_t pos = 0;
   b4ad8:	2500      	movs	r5, #0
  while (pos < len) {
   b4ada:	42b5      	cmp	r5, r6
   b4adc:	d212      	bcs.n	b4b04 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   b4ade:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   b4ae0:	1b74      	subs	r4, r6, r5
   b4ae2:	4294      	cmp	r4, r2
   b4ae4:	bf28      	it	cs
   b4ae6:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   b4ae8:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   b4aea:	42ab      	cmp	r3, r5
   b4aec:	bf94      	ite	ls
   b4aee:	464b      	movls	r3, r9
   b4af0:	2300      	movhi	r3, #0
   b4af2:	4622      	mov	r2, r4
   b4af4:	eb08 0105 	add.w	r1, r8, r5
   b4af8:	4638      	mov	r0, r7
   b4afa:	f7ff ffc8 	bl	b4a8e <_ZN18Adafruit_I2CDevice5_readEPhjb>
   b4afe:	b110      	cbz	r0, b4b06 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   b4b00:	4425      	add	r5, r4
  while (pos < len) {
   b4b02:	e7ea      	b.n	b4ada <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   b4b04:	2001      	movs	r0, #1
}
   b4b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4b0a <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   b4b0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b4b0c:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   b4b0e:	2300      	movs	r3, #0
   b4b10:	e9cd 3300 	strd	r3, r3, [sp]
   b4b14:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   b4b18:	9e06      	ldr	r6, [sp, #24]
   b4b1a:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   b4b1c:	f7ff ff87 	bl	b4a2e <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   b4b20:	b140      	cbz	r0, b4b34 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   b4b22:	2301      	movs	r3, #1
   b4b24:	4632      	mov	r2, r6
   b4b26:	4629      	mov	r1, r5
   b4b28:	4620      	mov	r0, r4
}
   b4b2a:	b002      	add	sp, #8
   b4b2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   b4b30:	f7ff bfcc 	b.w	b4acc <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   b4b34:	b002      	add	sp, #8
   b4b36:	bd70      	pop	{r4, r5, r6, pc}

000b4b38 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4b3c:	4604      	mov	r4, r0
  if (_spi) {
   b4b3e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   b4b40:	b085      	sub	sp, #20
   b4b42:	460d      	mov	r5, r1
  if (_spi) {
   b4b44:	b140      	cbz	r0, b4b58 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   b4b46:	2300      	movs	r3, #0
   b4b48:	9300      	str	r3, [sp, #0]
   b4b4a:	4613      	mov	r3, r2
   b4b4c:	460a      	mov	r2, r1
   b4b4e:	f002 f9af 	bl	b6eb0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   b4b52:	b005      	add	sp, #20
   b4b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   b4b58:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4b5a:	68a0      	ldr	r0, [r4, #8]
   b4b5c:	4f48      	ldr	r7, [pc, #288]	; (b4c80 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   b4b5e:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   b4b62:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4b64:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   b4b66:	bf0c      	ite	eq
   b4b68:	f04f 0b01 	moveq.w	fp, #1
   b4b6c:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   b4b70:	ea1b 0f03 	tst.w	fp, r3
   b4b74:	eb01 0302 	add.w	r3, r1, r2
   b4b78:	bf0c      	ite	eq
   b4b7a:	f04f 0901 	moveq.w	r9, #1
   b4b7e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   b4b82:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   b4b84:	9303      	str	r3, [sp, #12]
   b4b86:	9b03      	ldr	r3, [sp, #12]
   b4b88:	42ab      	cmp	r3, r5
   b4b8a:	d0e2      	beq.n	b4b52 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   b4b8c:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   b4b90:	465e      	mov	r6, fp
    uint8_t reply = 0;
   b4b92:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   b4b96:	b117      	cbz	r7, b4b9e <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4b98:	4638      	mov	r0, r7
   b4b9a:	f001 fc13 	bl	b63c4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   b4b9e:	7b63      	ldrb	r3, [r4, #13]
   b4ba0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   b4ba4:	d141      	bne.n	b4c2a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4ba6:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4baa:	1c5a      	adds	r2, r3, #1
   b4bac:	d00f      	beq.n	b4bce <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   b4bae:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   b4bb2:	bf14      	ite	ne
   b4bb4:	2301      	movne	r3, #1
   b4bb6:	2300      	moveq	r3, #0
   b4bb8:	454b      	cmp	r3, r9
   b4bba:	d008      	beq.n	b4bce <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
            *mosiPort |= mosiPinMask;
   b4bbc:	6963      	ldr	r3, [r4, #20]
   b4bbe:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4bc0:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   b4bc2:	2900      	cmp	r1, #0
   b4bc4:	d02c      	beq.n	b4c20 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   b4bc6:	4302      	orrs	r2, r0
   b4bc8:	601a      	str	r2, [r3, #0]
   b4bca:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   b4bce:	69a1      	ldr	r1, [r4, #24]
   b4bd0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4bd2:	680a      	ldr	r2, [r1, #0]
   b4bd4:	4313      	orrs	r3, r2
   b4bd6:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4bd8:	b117      	cbz	r7, b4be0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   b4bda:	4638      	mov	r0, r7
   b4bdc:	f001 fbf2 	bl	b63c4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   b4be0:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4be4:	3301      	adds	r3, #1
   b4be6:	d006      	beq.n	b4bf6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   b4be8:	69e3      	ldr	r3, [r4, #28]
   b4bea:	681a      	ldr	r2, [r3, #0]
   b4bec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4bee:	421a      	tst	r2, r3
            reply |= b;
   b4bf0:	bf18      	it	ne
   b4bf2:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   b4bf6:	69a1      	ldr	r1, [r4, #24]
   b4bf8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4bfa:	680a      	ldr	r2, [r1, #0]
   b4bfc:	ea22 0303 	bic.w	r3, r2, r3
   b4c00:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   b4c02:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4c06:	3301      	adds	r3, #1
        buffer[i] = reply;
   b4c08:	bf18      	it	ne
   b4c0a:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   b4c0e:	7b23      	ldrb	r3, [r4, #12]
   b4c10:	2b00      	cmp	r3, #0
   b4c12:	d132      	bne.n	b4c7a <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   b4c14:	0076      	lsls	r6, r6, #1
   b4c16:	b2f6      	uxtb	r6, r6
   b4c18:	2e00      	cmp	r6, #0
   b4c1a:	d1bc      	bne.n	b4b96 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   b4c1c:	3501      	adds	r5, #1
   b4c1e:	e7b2      	b.n	b4b86 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   b4c20:	ea22 0200 	bic.w	r2, r2, r0
   b4c24:	601a      	str	r2, [r3, #0]
   b4c26:	4689      	mov	r9, r1
   b4c28:	e7d1      	b.n	b4bce <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   b4c2a:	69a1      	ldr	r1, [r4, #24]
   b4c2c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4c2e:	680a      	ldr	r2, [r1, #0]
   b4c30:	4313      	orrs	r3, r2
   b4c32:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   b4c34:	b117      	cbz	r7, b4c3c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   b4c36:	4638      	mov	r0, r7
   b4c38:	f001 fbc4 	bl	b63c4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   b4c3c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   b4c40:	3301      	adds	r3, #1
   b4c42:	d008      	beq.n	b4c56 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
            *mosiPort |= mosiPinMask;
   b4c44:	6963      	ldr	r3, [r4, #20]
   b4c46:	6a61      	ldr	r1, [r4, #36]	; 0x24
   b4c48:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   b4c4a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   b4c4e:	bf14      	ite	ne
   b4c50:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   b4c52:	438a      	biceq	r2, r1
   b4c54:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   b4c56:	69a1      	ldr	r1, [r4, #24]
   b4c58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b4c5a:	680a      	ldr	r2, [r1, #0]
   b4c5c:	ea22 0303 	bic.w	r3, r2, r3
   b4c60:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   b4c62:	f994 3011 	ldrsb.w	r3, [r4, #17]
   b4c66:	3301      	adds	r3, #1
   b4c68:	d0cb      	beq.n	b4c02 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   b4c6a:	69e3      	ldr	r3, [r4, #28]
   b4c6c:	681a      	ldr	r2, [r3, #0]
   b4c6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   b4c70:	421a      	tst	r2, r3
            reply |= b;
   b4c72:	bf18      	it	ne
   b4c74:	ea46 0808 	orrne.w	r8, r6, r8
   b4c78:	e7c3      	b.n	b4c02 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   b4c7a:	0876      	lsrs	r6, r6, #1
   b4c7c:	e7cc      	b.n	b4c18 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   b4c7e:	bf00      	nop
   b4c80:	0007a120 	.word	0x0007a120

000b4c84 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   b4c84:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   b4c86:	2201      	movs	r2, #1
  uint8_t data = send;
   b4c88:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   b4c8c:	f10d 0107 	add.w	r1, sp, #7
   b4c90:	f7ff ff52 	bl	b4b38 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   b4c94:	f89d 0007 	ldrb.w	r0, [sp, #7]
   b4c98:	b003      	add	sp, #12
   b4c9a:	f85d fb04 	ldr.w	pc, [sp], #4

000b4c9e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b4c9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ca2:	4604      	mov	r4, r0
  if (_spi) {
   b4ca4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   b4ca6:	460e      	mov	r6, r1
   b4ca8:	4617      	mov	r7, r2
   b4caa:	461d      	mov	r5, r3
  if (_spi) {
   b4cac:	b110      	cbz	r0, b4cb4 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   b4cae:	6861      	ldr	r1, [r4, #4]
   b4cb0:	f002 f88a 	bl	b6dc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b4cb4:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b4cb8:	2100      	movs	r1, #0
   b4cba:	b280      	uxth	r0, r0
   b4cbc:	f002 fb2d 	bl	b731a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   b4cc0:	9b06      	ldr	r3, [sp, #24]
   b4cc2:	eb05 0803 	add.w	r8, r5, r3
   b4cc6:	4545      	cmp	r5, r8
   b4cc8:	d108      	bne.n	b4cdc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   b4cca:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   b4ccc:	42b7      	cmp	r7, r6
   b4cce:	d00b      	beq.n	b4ce8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   b4cd0:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4cd4:	4620      	mov	r0, r4
   b4cd6:	f7ff ffd5 	bl	b4c84 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   b4cda:	e7f7      	b.n	b4ccc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   b4cdc:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4ce0:	4620      	mov	r0, r4
   b4ce2:	f7ff ffcf 	bl	b4c84 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   b4ce6:	e7ee      	b.n	b4cc6 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   b4ce8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b4cec:	2101      	movs	r1, #1
   b4cee:	b280      	uxth	r0, r0
   b4cf0:	f002 fb13 	bl	b731a <digitalWrite>

  if (_spi) {
   b4cf4:	6820      	ldr	r0, [r4, #0]
   b4cf6:	b108      	cbz	r0, b4cfc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   b4cf8:	f002 f84c 	bl	b6d94 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   b4cfc:	2001      	movs	r0, #1
   b4cfe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4d02 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   b4d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4d06:	4604      	mov	r4, r0
  if (_spi) {
   b4d08:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   b4d0a:	f89d 801c 	ldrb.w	r8, [sp, #28]
   b4d0e:	460e      	mov	r6, r1
   b4d10:	4617      	mov	r7, r2
   b4d12:	461d      	mov	r5, r3
  if (_spi) {
   b4d14:	b110      	cbz	r0, b4d1c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   b4d16:	6861      	ldr	r1, [r4, #4]
   b4d18:	f002 f856 	bl	b6dc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   b4d1c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b4d20:	2100      	movs	r1, #0
   b4d22:	b280      	uxth	r0, r0
   b4d24:	f002 faf9 	bl	b731a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   b4d28:	4437      	add	r7, r6
   b4d2a:	42be      	cmp	r6, r7
   b4d2c:	d10a      	bne.n	b4d44 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   b4d2e:	9b06      	ldr	r3, [sp, #24]
   b4d30:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   b4d32:	42ae      	cmp	r6, r5
   b4d34:	d00c      	beq.n	b4d50 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   b4d36:	4641      	mov	r1, r8
   b4d38:	4620      	mov	r0, r4
   b4d3a:	f7ff ffa3 	bl	b4c84 <_ZN18Adafruit_SPIDevice8transferEh>
   b4d3e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   b4d42:	e7f6      	b.n	b4d32 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   b4d44:	f816 1b01 	ldrb.w	r1, [r6], #1
   b4d48:	4620      	mov	r0, r4
   b4d4a:	f7ff ff9b 	bl	b4c84 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   b4d4e:	e7ec      	b.n	b4d2a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   b4d50:	f994 000e 	ldrsb.w	r0, [r4, #14]
   b4d54:	2101      	movs	r1, #1
   b4d56:	b280      	uxth	r0, r0
   b4d58:	f002 fadf 	bl	b731a <digitalWrite>

  if (_spi) {
   b4d5c:	6820      	ldr	r0, [r4, #0]
   b4d5e:	b108      	cbz	r0, b4d64 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   b4d60:	f002 f818 	bl	b6d94 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   b4d64:	2001      	movs	r0, #1
   b4d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b4d6a <_ZN10RTC_DS13075beginEv>:
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
   b4d6a:	b508      	push	{r3, lr}
  Wire.begin();
   b4d6c:	f002 fb0a 	bl	b7384 <_Z19__fetch_global_Wirev>
   b4d70:	f001 fdf0 	bl	b6954 <_ZN7TwoWire5beginEv>
  return true;
}
   b4d74:	2001      	movs	r0, #1
   b4d76:	bd08      	pop	{r3, pc}

000b4d78 <_ZN11RTC_PCF85235beginEv>:
   b4d78:	f7ff bff7 	b.w	b4d6a <_ZN10RTC_DS13075beginEv>

000b4d7c <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   b4d7c:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   b4d7e:	f002 fb01 	bl	b7384 <_Z19__fetch_global_Wirev>
   b4d82:	2168      	movs	r1, #104	; 0x68
   b4d84:	f001 fe1c 	bl	b69c0 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   b4d88:	f002 fafc 	bl	b7384 <_Z19__fetch_global_Wirev>
   b4d8c:	6803      	ldr	r3, [r0, #0]
   b4d8e:	2102      	movs	r1, #2
   b4d90:	689b      	ldr	r3, [r3, #8]
   b4d92:	4798      	blx	r3
  Wire.endTransmission();
   b4d94:	f002 faf6 	bl	b7384 <_Z19__fetch_global_Wirev>
   b4d98:	f001 fe19 	bl	b69ce <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   b4d9c:	f002 faf2 	bl	b7384 <_Z19__fetch_global_Wirev>
   b4da0:	2201      	movs	r2, #1
   b4da2:	2168      	movs	r1, #104	; 0x68
   b4da4:	f001 fe05 	bl	b69b2 <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = Wire._I2C_READ();
   b4da8:	f002 faec 	bl	b7384 <_Z19__fetch_global_Wirev>
   b4dac:	6803      	ldr	r3, [r0, #0]
   b4dae:	695b      	ldr	r3, [r3, #20]
   b4db0:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   b4db2:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   b4db6:	38e0      	subs	r0, #224	; 0xe0
   b4db8:	bf18      	it	ne
   b4dba:	2001      	movne	r0, #1
   b4dbc:	bd08      	pop	{r3, pc}

000b4dbe <_ZN7FatFile8openRootEP9FatVolume.part.0>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   b4dbe:	b538      	push	{r3, r4, r5, lr}
   b4dc0:	4604      	mov	r4, r0
   b4dc2:	460d      	mov	r5, r1
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   b4dc4:	2224      	movs	r2, #36	; 0x24
   b4dc6:	2100      	movs	r1, #0
   b4dc8:	f002 fb66 	bl	b7498 <memset>

  m_vol = vol;
   b4dcc:	60a5      	str	r5, [r4, #8]
  uint32_t fatStartBlock() const {
    return m_fatStartBlock;
  }
  /** \return The FAT type of the volume. Values are 12, 16 or 32. */
  uint8_t fatType() const {
    return m_fatType;
   b4dce:	79eb      	ldrb	r3, [r5, #7]
  switch (vol->fatType()) {
   b4dd0:	2b10      	cmp	r3, #16
   b4dd2:	d003      	beq.n	b4ddc <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1e>
   b4dd4:	2b20      	cmp	r3, #32
   b4dd6:	d006      	beq.n	b4de6 <_ZN7FatFile8openRootEP9FatVolume.part.0+0x28>
   b4dd8:	2000      	movs	r0, #0
  m_flags = F_READ;
  return true;

fail:
  return false;
}
   b4dda:	bd38      	pop	{r3, r4, r5, pc}
    m_attr = FILE_ATTR_ROOT_FIXED;
   b4ddc:	2320      	movs	r3, #32
  m_flags = F_READ;
   b4dde:	2001      	movs	r0, #1
    m_attr = FILE_ATTR_ROOT32;
   b4de0:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
   b4de2:	70a0      	strb	r0, [r4, #2]
  return true;
   b4de4:	e7f9      	b.n	b4dda <_ZN7FatFile8openRootEP9FatVolume.part.0+0x1c>
    m_attr = FILE_ATTR_ROOT32;
   b4de6:	2340      	movs	r3, #64	; 0x40
   b4de8:	e7f9      	b.n	b4dde <_ZN7FatFile8openRootEP9FatVolume.part.0+0x20>

000b4dea <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   b4dea:	b510      	push	{r4, lr}
   b4dec:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4dee:	3024      	adds	r0, #36	; 0x24
   b4df0:	f000 fe62 	bl	b5ab8 <_ZN8FatCache4syncEv>
   b4df4:	b128      	cbz	r0, b4e02 <_ZN9FatVolume9cacheSyncEv+0x18>
   b4df6:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   b4dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   b4dfe:	f000 be5b 	b.w	b5ab8 <_ZN8FatCache4syncEv>
  }
   b4e02:	bd10      	pop	{r4, pc}

000b4e04 <_ZN7FatFile10addClusterEv>:
  m_flags |= F_FILE_DIR_DIRTY;
   b4e04:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4e06:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   b4e08:	f043 0304 	orr.w	r3, r3, #4
   b4e0c:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   b4e0e:	f100 0210 	add.w	r2, r0, #16
   b4e12:	6880      	ldr	r0, [r0, #8]
   b4e14:	f000 bf06 	b.w	b5c24 <_ZN9FatVolume15allocateClusterEmPm>

000b4e18 <_ZN7FatFile13addDirClusterEv>:
bool FatFile::addDirCluster() {
   b4e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (isRootFixed()) {
   b4e1c:	7801      	ldrb	r1, [r0, #0]
   b4e1e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   b4e22:	4604      	mov	r4, r0
  if (isRootFixed()) {
   b4e24:	d003      	beq.n	b4e2e <_ZN7FatFile13addDirClusterEv+0x16>
  return false;
   b4e26:	2600      	movs	r6, #0
}
   b4e28:	4630      	mov	r0, r6
   b4e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   b4e2e:	6942      	ldr	r2, [r0, #20]
   b4e30:	4b17      	ldr	r3, [pc, #92]	; (b4e90 <_ZN7FatFile13addDirClusterEv+0x78>)
   b4e32:	429a      	cmp	r2, r3
   b4e34:	d2f7      	bcs.n	b4e26 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   b4e36:	f7ff ffe5 	bl	b4e04 <_ZN7FatFile10addClusterEv>
   b4e3a:	4606      	mov	r6, r0
   b4e3c:	2800      	cmp	r0, #0
   b4e3e:	d0f2      	beq.n	b4e26 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   b4e40:	6921      	ldr	r1, [r4, #16]
   b4e42:	68a0      	ldr	r0, [r4, #8]
   b4e44:	f000 fe83 	bl	b5b4e <_ZNK9FatVolume17clusterFirstBlockEm>
   b4e48:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   b4e4a:	68a0      	ldr	r0, [r4, #8]
   b4e4c:	2205      	movs	r2, #5
   b4e4e:	4639      	mov	r1, r7
   b4e50:	3024      	adds	r0, #36	; 0x24
   b4e52:	f000 fe59 	bl	b5b08 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4e56:	4680      	mov	r8, r0
   b4e58:	2800      	cmp	r0, #0
   b4e5a:	d0e4      	beq.n	b4e26 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   b4e5c:	4629      	mov	r1, r5
   b4e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
   b4e62:	f002 fb19 	bl	b7498 <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4e66:	2501      	movs	r5, #1
   b4e68:	68a3      	ldr	r3, [r4, #8]
    return m_blocksPerCluster;
   b4e6a:	791a      	ldrb	r2, [r3, #4]
   b4e6c:	42aa      	cmp	r2, r5
   b4e6e:	d909      	bls.n	b4e84 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   b4e70:	6818      	ldr	r0, [r3, #0]
   b4e72:	4642      	mov	r2, r8
   b4e74:	19e9      	adds	r1, r5, r7
   b4e76:	f001 f9b4 	bl	b61e2 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   b4e7a:	2800      	cmp	r0, #0
   b4e7c:	d0d3      	beq.n	b4e26 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   b4e7e:	3501      	adds	r5, #1
   b4e80:	b2ed      	uxtb	r5, r5
   b4e82:	e7f1      	b.n	b4e68 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   b4e84:	6963      	ldr	r3, [r4, #20]
   b4e86:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   b4e8a:	6163      	str	r3, [r4, #20]
  return true;
   b4e8c:	e7cc      	b.n	b4e28 <_ZN7FatFile13addDirClusterEv+0x10>
   b4e8e:	bf00      	nop
   b4e90:	001ffe00 	.word	0x001ffe00

000b4e94 <_ZN7FatFile13cacheDirEntryEh>:
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   b4e94:	b510      	push	{r4, lr}
   b4e96:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   b4e98:	6880      	ldr	r0, [r0, #8]
   b4e9a:	460a      	mov	r2, r1
   b4e9c:	3024      	adds	r0, #36	; 0x24
   b4e9e:	69a1      	ldr	r1, [r4, #24]
   b4ea0:	f000 fe32 	bl	b5b08 <_ZN8FatCache4readEmh>
  if (!pc) {
   b4ea4:	b120      	cbz	r0, b4eb0 <_ZN7FatFile13cacheDirEntryEh+0x1c>
  return pc->dir + (m_dirIndex & 0XF);
   b4ea6:	88a3      	ldrh	r3, [r4, #4]
   b4ea8:	f003 030f 	and.w	r3, r3, #15
   b4eac:	eb00 1043 	add.w	r0, r0, r3, lsl #5
}
   b4eb0:	bd10      	pop	{r4, pc}

000b4eb2 <_ZN7FatFile8openRootEP9FatVolume>:
  if (isOpen()) {
   b4eb2:	7803      	ldrb	r3, [r0, #0]
   b4eb4:	b90b      	cbnz	r3, b4eba <_ZN7FatFile8openRootEP9FatVolume+0x8>
   b4eb6:	f7ff bf82 	b.w	b4dbe <_ZN7FatFile8openRootEP9FatVolume.part.0>
}
   b4eba:	2000      	movs	r0, #0
   b4ebc:	4770      	bx	lr

000b4ebe <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   b4ebe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return m_attr;
   b4ec2:	7803      	ldrb	r3, [r0, #0]
   b4ec4:	4604      	mov	r4, r0
   b4ec6:	4688      	mov	r8, r1
   b4ec8:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   b4eca:	2b00      	cmp	r3, #0
   b4ecc:	d05d      	beq.n	b4f8a <_ZN7FatFile4readEPvj+0xcc>
   b4ece:	7882      	ldrb	r2, [r0, #2]
   b4ed0:	07d1      	lsls	r1, r2, #31
   b4ed2:	d55a      	bpl.n	b4f8a <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   b4ed4:	071a      	lsls	r2, r3, #28
   b4ed6:	d52d      	bpl.n	b4f34 <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   b4ed8:	69c3      	ldr	r3, [r0, #28]
   b4eda:	6942      	ldr	r2, [r0, #20]
   b4edc:	1a9b      	subs	r3, r3, r2
   b4ede:	429d      	cmp	r5, r3
   b4ee0:	bf28      	it	cs
   b4ee2:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   b4ee4:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   b4ee6:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4eea:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   b4eee:	2e00      	cmp	r6, #0
   b4ef0:	f000 808f 	beq.w	b5012 <_ZN7FatFile4readEPvj+0x154>
    return m_attr & FILE_ATTR_ROOT_FIXED;
   b4ef4:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   b4ef6:	6963      	ldr	r3, [r4, #20]
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4ef8:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   b4efa:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   b4efc:	f3c3 0a08 	ubfx	sl, r3, #0, #9
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4f00:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   b4f04:	d51f      	bpl.n	b4f46 <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   b4f06:	6a00      	ldr	r0, [r0, #32]
   b4f08:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   b4f0a:	68a0      	ldr	r0, [r4, #8]
   b4f0c:	f1ba 0f00 	cmp.w	sl, #0
   b4f10:	d142      	bne.n	b4f98 <_ZN7FatFile4readEPvj+0xda>
   b4f12:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4f16:	d33f      	bcc.n	b4f98 <_ZN7FatFile4readEPvj+0xda>
    return m_lbn;
   b4f18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4f1a:	4299      	cmp	r1, r3
   b4f1c:	d03c      	beq.n	b4f98 <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   b4f1e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   b4f22:	d252      	bcs.n	b4fca <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   b4f24:	6800      	ldr	r0, [r0, #0]
   b4f26:	4642      	mov	r2, r8
   b4f28:	f001 f8d2 	bl	b60d0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   b4f2c:	b368      	cbz	r0, b4f8a <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   b4f2e:	f44f 7700 	mov.w	r7, #512	; 0x200
   b4f32:	e044      	b.n	b4fbe <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   b4f34:	069b      	lsls	r3, r3, #26
   b4f36:	d5d5      	bpl.n	b4ee4 <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   b4f38:	6883      	ldr	r3, [r0, #8]
   b4f3a:	891a      	ldrh	r2, [r3, #8]
   b4f3c:	6943      	ldr	r3, [r0, #20]
   b4f3e:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   b4f42:	b29b      	uxth	r3, r3
   b4f44:	e7cb      	b.n	b4ede <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   b4f46:	f890 9005 	ldrb.w	r9, [r0, #5]
   b4f4a:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   b4f4e:	f1ba 0f00 	cmp.w	sl, #0
   b4f52:	d108      	bne.n	b4f66 <_ZN7FatFile4readEPvj+0xa8>
   b4f54:	f1b9 0f00 	cmp.w	r9, #0
   b4f58:	d105      	bne.n	b4f66 <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   b4f5a:	b95b      	cbnz	r3, b4f74 <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b4f5c:	0651      	lsls	r1, r2, #25
    return m_rootDirStart;
   b4f5e:	bf4c      	ite	mi
   b4f60:	6a03      	ldrmi	r3, [r0, #32]
   b4f62:	6a23      	ldrpl	r3, [r4, #32]
   b4f64:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b4f66:	6921      	ldr	r1, [r4, #16]
   b4f68:	68a0      	ldr	r0, [r4, #8]
   b4f6a:	f000 fdf0 	bl	b5b4e <_ZNK9FatVolume17clusterFirstBlockEm>
   b4f6e:	eb09 0100 	add.w	r1, r9, r0
   b4f72:	e7ca      	b.n	b4f0a <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b4f74:	6921      	ldr	r1, [r4, #16]
   b4f76:	465a      	mov	r2, fp
   b4f78:	f000 fdef 	bl	b5b5a <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   b4f7c:	2800      	cmp	r0, #0
   b4f7e:	db04      	blt.n	b4f8a <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   b4f80:	d1f1      	bne.n	b4f66 <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   b4f82:	7823      	ldrb	r3, [r4, #0]
   b4f84:	f013 0f70 	tst.w	r3, #112	; 0x70
   b4f88:	d143      	bne.n	b5012 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   b4f8a:	7863      	ldrb	r3, [r4, #1]
   b4f8c:	f043 0302 	orr.w	r3, r3, #2
   b4f90:	7063      	strb	r3, [r4, #1]
  return -1;
   b4f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4f96:	e03d      	b.n	b5014 <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   b4f98:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   b4f9c:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   b4f9e:	f04f 0200 	mov.w	r2, #0
   b4fa2:	f100 0024 	add.w	r0, r0, #36	; 0x24
   b4fa6:	bf28      	it	cs
   b4fa8:	4637      	movcs	r7, r6
   b4faa:	f000 fdad 	bl	b5b08 <_ZN8FatCache4readEmh>
      if (!pc) {
   b4fae:	2800      	cmp	r0, #0
   b4fb0:	d0eb      	beq.n	b4f8a <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   b4fb2:	eb00 010a 	add.w	r1, r0, sl
   b4fb6:	463a      	mov	r2, r7
   b4fb8:	4640      	mov	r0, r8
   b4fba:	f002 fa5f 	bl	b747c <memcpy>
    m_curPosition += n;
   b4fbe:	6963      	ldr	r3, [r4, #20]
   b4fc0:	443b      	add	r3, r7
    dst += n;
   b4fc2:	44b8      	add	r8, r7
    m_curPosition += n;
   b4fc4:	6163      	str	r3, [r4, #20]
    toRead -= n;
   b4fc6:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   b4fc8:	e791      	b.n	b4eee <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   b4fca:	7822      	ldrb	r2, [r4, #0]
   b4fcc:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   b4fce:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   b4fd2:	d406      	bmi.n	b4fe2 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   b4fd4:	7902      	ldrb	r2, [r0, #4]
   b4fd6:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   b4fda:	b2d2      	uxtb	r2, r2
   b4fdc:	4592      	cmp	sl, r2
   b4fde:	bf28      	it	cs
   b4fe0:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4fe2:	4299      	cmp	r1, r3
      n = 512*nb;
   b4fe4:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4fe8:	d208      	bcs.n	b4ffc <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   b4fea:	68a0      	ldr	r0, [r4, #8]
   b4fec:	4653      	mov	r3, sl
   b4fee:	6800      	ldr	r0, [r0, #0]
   b4ff0:	4642      	mov	r2, r8
   b4ff2:	f001 f8b5 	bl	b6160 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   b4ff6:	2800      	cmp	r0, #0
   b4ff8:	d1e1      	bne.n	b4fbe <_ZN7FatFile4readEPvj+0x100>
   b4ffa:	e7c6      	b.n	b4f8a <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b4ffc:	4453      	add	r3, sl
   b4ffe:	428b      	cmp	r3, r1
   b5000:	d9f3      	bls.n	b4fea <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   b5002:	3024      	adds	r0, #36	; 0x24
   b5004:	9101      	str	r1, [sp, #4]
   b5006:	f000 fd57 	bl	b5ab8 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   b500a:	9901      	ldr	r1, [sp, #4]
   b500c:	2800      	cmp	r0, #0
   b500e:	d1ec      	bne.n	b4fea <_ZN7FatFile4readEPvj+0x12c>
   b5010:	e7bb      	b.n	b4f8a <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   b5012:	1ba8      	subs	r0, r5, r6
}
   b5014:	b003      	add	sp, #12
   b5016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b501a <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   b501a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   b501c:	2201      	movs	r2, #1
   b501e:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   b5022:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   b5026:	4604      	mov	r4, r0
   b5028:	f7ff ff49 	bl	b4ebe <_ZN7FatFile4readEPvj>
   b502c:	2801      	cmp	r0, #1
   b502e:	bf0a      	itet	eq
   b5030:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   b5034:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   b5038:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   b503c:	b002      	add	sp, #8
   b503e:	bd70      	pop	{r4, r5, r6, pc}

000b5040 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5040:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b5042:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   b5044:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   b5048:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   b504a:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   b504e:	d000      	beq.n	b5052 <_ZN7FatFile12readDirCacheEb+0x12>
   b5050:	b999      	cbnz	r1, b507a <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   b5052:	2201      	movs	r2, #1
   b5054:	f10d 0107 	add.w	r1, sp, #7
   b5058:	4620      	mov	r0, r4
   b505a:	f7ff ff30 	bl	b4ebe <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   b505e:	b240      	sxtb	r0, r0
   b5060:	2801      	cmp	r0, #1
   b5062:	d002      	beq.n	b506a <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   b5064:	2000      	movs	r0, #0
}
   b5066:	b003      	add	sp, #12
   b5068:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   b506a:	6963      	ldr	r3, [r4, #20]
   b506c:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   b506e:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   b5070:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   b5072:	3030      	adds	r0, #48	; 0x30
   b5074:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   b5078:	e7f5      	b.n	b5066 <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   b507a:	3320      	adds	r3, #32
   b507c:	e7f7      	b.n	b506e <_ZN7FatFile12readDirCacheEb+0x2e>

000b507e <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   b507e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return m_attr;
   b5082:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   b5084:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   b5086:	4604      	mov	r4, r0
   b5088:	460d      	mov	r5, r1
  if (!isOpen()) {
   b508a:	b162      	cbz	r2, b50a6 <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   b508c:	6940      	ldr	r0, [r0, #20]
   b508e:	4288      	cmp	r0, r1
   b5090:	d002      	beq.n	b5098 <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   b5092:	b919      	cbnz	r1, b509c <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   b5094:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   b5096:	6165      	str	r5, [r4, #20]
    return true;
   b5098:	2001      	movs	r0, #1
   b509a:	e006      	b.n	b50aa <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   b509c:	0716      	lsls	r6, r2, #28
   b509e:	d506      	bpl.n	b50ae <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   b50a0:	69e3      	ldr	r3, [r4, #28]
   b50a2:	428b      	cmp	r3, r1
   b50a4:	d20b      	bcs.n	b50be <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   b50a6:	6127      	str	r7, [r4, #16]
  return false;
   b50a8:	2000      	movs	r0, #0
}
   b50aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   b50ae:	0691      	lsls	r1, r2, #26
   b50b0:	d505      	bpl.n	b50be <_ZN7FatFile7seekSetEm+0x40>
    return m_rootDirEntryCount;
   b50b2:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   b50b4:	891b      	ldrh	r3, [r3, #8]
   b50b6:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   b50ba:	d9ec      	bls.n	b5096 <_ZN7FatFile7seekSetEm+0x18>
   b50bc:	e7f3      	b.n	b50a6 <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b50be:	f8d4 c008 	ldr.w	ip, [r4, #8]
   b50c2:	f89c 6006 	ldrb.w	r6, [ip, #6]
   b50c6:	1e43      	subs	r3, r0, #1
   b50c8:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b50cc:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   b50ce:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   b50d0:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   b50d2:	42b3      	cmp	r3, r6
   b50d4:	d800      	bhi.n	b50d8 <_ZN7FatFile7seekSetEm+0x5a>
   b50d6:	b998      	cbnz	r0, b5100 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   b50d8:	0653      	lsls	r3, r2, #25
    return m_rootDirStart;
   b50da:	bf4c      	ite	mi
   b50dc:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   b50e0:	6a23      	ldrpl	r3, [r4, #32]
   b50e2:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b50e4:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   b50e8:	2e00      	cmp	r6, #0
   b50ea:	d0d4      	beq.n	b5096 <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   b50ec:	6921      	ldr	r1, [r4, #16]
   b50ee:	68a0      	ldr	r0, [r4, #8]
   b50f0:	4642      	mov	r2, r8
   b50f2:	f000 fd32 	bl	b5b5a <_ZN9FatVolume6fatGetEmPm>
   b50f6:	2800      	cmp	r0, #0
   b50f8:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   b50fc:	dcf4      	bgt.n	b50e8 <_ZN7FatFile7seekSetEm+0x6a>
   b50fe:	e7d2      	b.n	b50a6 <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   b5100:	1af6      	subs	r6, r6, r3
   b5102:	e7ef      	b.n	b50e4 <_ZN7FatFile7seekSetEm+0x66>

000b5104 <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   b5104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5106:	460f      	mov	r7, r1
   b5108:	4604      	mov	r4, r0
   b510a:	4615      	mov	r5, r2
  memset(this, 0, sizeof(FatFile));
   b510c:	2100      	movs	r1, #0
   b510e:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   b5110:	461e      	mov	r6, r3
  memset(this, 0, sizeof(FatFile));
   b5112:	f002 f9c1 	bl	b7498 <memset>
  m_vol = dirFile->m_vol;
   b5116:	68b8      	ldr	r0, [r7, #8]
   b5118:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   b511a:	80a5      	strh	r5, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   b511c:	f005 050f 	and.w	r5, r5, #15
  m_dirCluster = dirFile->m_firstCluster;
   b5120:	6a3b      	ldr	r3, [r7, #32]
   b5122:	60e3      	str	r3, [r4, #12]
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for a normal file or subdirectory else false.
 */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
   b5124:	016a      	lsls	r2, r5, #5
   b5126:	eb00 1545 	add.w	r5, r0, r5, lsl #5
   b512a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   b512e:	071f      	lsls	r7, r3, #28
   b5130:	d444      	bmi.n	b51bc <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   b5132:	f003 0317 	and.w	r3, r3, #23
   b5136:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   b5138:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
   b513c:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
   b5140:	bf04      	itt	eq
   b5142:	f043 0308 	orreq.w	r3, r3, #8
   b5146:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   b5148:	f89d 3018 	ldrb.w	r3, [sp, #24]
   b514c:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   b514e:	f006 0303 	and.w	r3, r6, #3
   b5152:	2b01      	cmp	r3, #1
   b5154:	d02c      	beq.n	b51b0 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
   b5156:	2b02      	cmp	r3, #2
   b5158:	d028      	beq.n	b51ac <_ZN7FatFile15openCachedEntryEPS_tih+0xa8>
   b515a:	bb7b      	cbnz	r3, b51bc <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      if (oflag & O_TRUNC) {
   b515c:	0571      	lsls	r1, r6, #21
   b515e:	d42d      	bmi.n	b51bc <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
      m_flags = F_READ;
   b5160:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   b5162:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   b5164:	78a1      	ldrb	r1, [r4, #2]
   b5166:	078b      	lsls	r3, r1, #30
   b5168:	d504      	bpl.n	b5174 <_ZN7FatFile15openCachedEntryEPS_tih+0x70>
    return m_attr & FILE_ATTR_SUBDIR;
   b516a:	7823      	ldrb	r3, [r4, #0]
    if (isSubDir() || isReadOnly()) {
   b516c:	06df      	lsls	r7, r3, #27
   b516e:	d425      	bmi.n	b51bc <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
   b5170:	07dd      	lsls	r5, r3, #31
   b5172:	d423      	bmi.n	b51bc <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   b5174:	11b3      	asrs	r3, r6, #6
   b5176:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   b517a:	f006 0508 	and.w	r5, r6, #8
   b517e:	432b      	orrs	r3, r5
   b5180:	430b      	orrs	r3, r1
   b5182:	70a3      	strb	r3, [r4, #2]
    return m_lbn;
   b5184:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   b5186:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5188:	1883      	adds	r3, r0, r2
   b518a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   b518e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   b5192:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   b5196:	0572      	lsls	r2, r6, #21
   b5198:	d513      	bpl.n	b51c2 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b519a:	b959      	cbnz	r1, b51b4 <_ZN7FatFile15openCachedEntryEPS_tih+0xb0>
    m_flags |= F_FILE_DIR_DIRTY;
   b519c:	78a3      	ldrb	r3, [r4, #2]
   b519e:	f043 0304 	orr.w	r3, r3, #4
   b51a2:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b51a4:	0473      	lsls	r3, r6, #17
   b51a6:	d410      	bmi.n	b51ca <_ZN7FatFile15openCachedEntryEPS_tih+0xc6>
  return true;
   b51a8:	2001      	movs	r0, #1
}
   b51aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   b51ac:	2303      	movs	r3, #3
   b51ae:	e7d8      	b.n	b5162 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
      m_flags = F_WRITE;
   b51b0:	2302      	movs	r3, #2
   b51b2:	e7d6      	b.n	b5162 <_ZN7FatFile15openCachedEntryEPS_tih+0x5e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   b51b4:	f000 fd71 	bl	b5c9a <_ZN9FatVolume9freeChainEm>
   b51b8:	2800      	cmp	r0, #0
   b51ba:	d1ef      	bne.n	b519c <_ZN7FatFile15openCachedEntryEPS_tih+0x98>
  m_attr = FILE_ATTR_CLOSED;
   b51bc:	2000      	movs	r0, #0
   b51be:	7020      	strb	r0, [r4, #0]
  return false;
   b51c0:	e7f3      	b.n	b51aa <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
    m_firstCluster = firstCluster;
   b51c2:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   b51c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b51c6:	61e3      	str	r3, [r4, #28]
   b51c8:	e7ec      	b.n	b51a4 <_ZN7FatFile15openCachedEntryEPS_tih+0xa0>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   b51ca:	69e1      	ldr	r1, [r4, #28]
   b51cc:	4620      	mov	r0, r4
   b51ce:	f7ff ff56 	bl	b507e <_ZN7FatFile7seekSetEm>
   b51d2:	2800      	cmp	r0, #0
   b51d4:	d1e8      	bne.n	b51a8 <_ZN7FatFile15openCachedEntryEPS_tih+0xa4>
   b51d6:	e7f1      	b.n	b51bc <_ZN7FatFile15openCachedEntryEPS_tih+0xb8>

000b51d8 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   b51d8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   b51da:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   b51dc:	4604      	mov	r4, r0
  if (!isOpen()) {
   b51de:	b90b      	cbnz	r3, b51e4 <_ZN7FatFile4syncEv+0xc>
    return true;
   b51e0:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   b51e2:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   b51e4:	7883      	ldrb	r3, [r0, #2]
   b51e6:	075a      	lsls	r2, r3, #29
   b51e8:	d523      	bpl.n	b5232 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   b51ea:	2101      	movs	r1, #1
   b51ec:	f7ff fe52 	bl	b4e94 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b51f0:	4605      	mov	r5, r0
   b51f2:	b928      	cbnz	r0, b5200 <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   b51f4:	7863      	ldrb	r3, [r4, #1]
   b51f6:	f043 0301 	orr.w	r3, r3, #1
   b51fa:	7063      	strb	r3, [r4, #1]
  return false;
   b51fc:	2000      	movs	r0, #0
   b51fe:	e7f0      	b.n	b51e2 <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   b5200:	7803      	ldrb	r3, [r0, #0]
   b5202:	2be5      	cmp	r3, #229	; 0xe5
   b5204:	d0f6      	beq.n	b51f4 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   b5206:	7823      	ldrb	r3, [r4, #0]
   b5208:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   b520a:	bf44      	itt	mi
   b520c:	69e3      	ldrmi	r3, [r4, #28]
   b520e:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   b5210:	6a23      	ldr	r3, [r4, #32]
   b5212:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   b5214:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   b5216:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   b5218:	4b09      	ldr	r3, [pc, #36]	; (b5240 <_ZN7FatFile4syncEv+0x68>)
   b521a:	681b      	ldr	r3, [r3, #0]
   b521c:	b12b      	cbz	r3, b522a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   b521e:	f100 0116 	add.w	r1, r0, #22
   b5222:	3018      	adds	r0, #24
   b5224:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   b5226:	8b2b      	ldrh	r3, [r5, #24]
   b5228:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   b522a:	78a3      	ldrb	r3, [r4, #2]
   b522c:	f023 0304 	bic.w	r3, r3, #4
   b5230:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   b5232:	68a0      	ldr	r0, [r4, #8]
   b5234:	f7ff fdd9 	bl	b4dea <_ZN9FatVolume9cacheSyncEv>
   b5238:	2800      	cmp	r0, #0
   b523a:	d0db      	beq.n	b51f4 <_ZN7FatFile4syncEv+0x1c>
   b523c:	e7d0      	b.n	b51e0 <_ZN7FatFile4syncEv+0x8>
   b523e:	bf00      	nop
   b5240:	2003e6b4 	.word	0x2003e6b4

000b5244 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   b5244:	b510      	push	{r4, lr}
   b5246:	4604      	mov	r4, r0
  bool rtn = sync();
   b5248:	f7ff ffc6 	bl	b51d8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   b524c:	2300      	movs	r3, #0
   b524e:	7023      	strb	r3, [r4, #0]
}
   b5250:	bd10      	pop	{r4, pc}

000b5252 <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b5252:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5254:	b093      	sub	sp, #76	; 0x4c
   b5256:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   b5258:	2300      	movs	r3, #0
   b525a:	9309      	str	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   b525c:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   b525e:	9201      	str	r2, [sp, #4]
   b5260:	4606      	mov	r6, r0
   b5262:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   b5264:	b113      	cbz	r3, b526c <_ZN7FatFile4openEPS_PKci+0x1a>
  return false;
   b5266:	2000      	movs	r0, #0
}
   b5268:	b013      	add	sp, #76	; 0x4c
   b526a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   b526c:	780b      	ldrb	r3, [r1, #0]
   b526e:	f013 0f70 	tst.w	r3, #112	; 0x70
   b5272:	d0f8      	beq.n	b5266 <_ZN7FatFile4openEPS_PKci+0x14>
  if (isDirSeparator(*path)) {
   b5274:	7813      	ldrb	r3, [r2, #0]
   b5276:	2b2f      	cmp	r3, #47	; 0x2f
   b5278:	d112      	bne.n	b52a0 <_ZN7FatFile4openEPS_PKci+0x4e>
    while (isDirSeparator(*path)) {
   b527a:	9a01      	ldr	r2, [sp, #4]
   b527c:	7813      	ldrb	r3, [r2, #0]
   b527e:	2b2f      	cmp	r3, #47	; 0x2f
   b5280:	d102      	bne.n	b5288 <_ZN7FatFile4openEPS_PKci+0x36>
      path++;
   b5282:	3201      	adds	r2, #1
   b5284:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   b5286:	e7f8      	b.n	b527a <_ZN7FatFile4openEPS_PKci+0x28>
      return openRoot(dirFile->m_vol);
   b5288:	68a1      	ldr	r1, [r4, #8]
    if (*path == 0) {
   b528a:	b91b      	cbnz	r3, b5294 <_ZN7FatFile4openEPS_PKci+0x42>
      return openRoot(dirFile->m_vol);
   b528c:	4630      	mov	r0, r6
   b528e:	f7ff fe10 	bl	b4eb2 <_ZN7FatFile8openRootEP9FatVolume>
   b5292:	e7e9      	b.n	b5268 <_ZN7FatFile4openEPS_PKci+0x16>
    return m_attr;
   b5294:	a809      	add	r0, sp, #36	; 0x24
   b5296:	f7ff fd92 	bl	b4dbe <_ZN7FatFile8openRootEP9FatVolume.part.0>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   b529a:	2800      	cmp	r0, #0
   b529c:	d0e3      	beq.n	b5266 <_ZN7FatFile4openEPS_PKci+0x14>
    dirFile = &tmpDir;
   b529e:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   b52a0:	9801      	ldr	r0, [sp, #4]
   b52a2:	aa01      	add	r2, sp, #4
   b52a4:	a903      	add	r1, sp, #12
   b52a6:	f000 f90b 	bl	b54c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   b52aa:	2800      	cmp	r0, #0
   b52ac:	d0db      	beq.n	b5266 <_ZN7FatFile4openEPS_PKci+0x14>
    if (*path == 0) {
   b52ae:	9b01      	ldr	r3, [sp, #4]
   b52b0:	781b      	ldrb	r3, [r3, #0]
   b52b2:	b19b      	cbz	r3, b52dc <_ZN7FatFile4openEPS_PKci+0x8a>
    if (!open(dirFile, &fname, O_RDONLY)) {
   b52b4:	2300      	movs	r3, #0
   b52b6:	aa03      	add	r2, sp, #12
   b52b8:	4621      	mov	r1, r4
   b52ba:	4630      	mov	r0, r6
   b52bc:	f000 fa32 	bl	b5724 <_ZN7FatFile4openEPS_P7fname_ti>
   b52c0:	2800      	cmp	r0, #0
   b52c2:	d0d0      	beq.n	b5266 <_ZN7FatFile4openEPS_PKci+0x14>
    tmpDir = *this;
   b52c4:	4635      	mov	r5, r6
   b52c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52c8:	ac09      	add	r4, sp, #36	; 0x24
   b52ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b52ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b52d0:	682b      	ldr	r3, [r5, #0]
   b52d2:	6023      	str	r3, [r4, #0]
    close();
   b52d4:	4630      	mov	r0, r6
   b52d6:	f7ff ffb5 	bl	b5244 <_ZN7FatFile5closeEv>
  while (1) {
   b52da:	e7e0      	b.n	b529e <_ZN7FatFile4openEPS_PKci+0x4c>
  return open(dirFile, &fname, oflag);
   b52dc:	463b      	mov	r3, r7
   b52de:	aa03      	add	r2, sp, #12
   b52e0:	4621      	mov	r1, r4
   b52e2:	4630      	mov	r0, r6
   b52e4:	f000 fa1e 	bl	b5724 <_ZN7FatFile4openEPS_P7fname_ti>
   b52e8:	e7be      	b.n	b5268 <_ZN7FatFile4openEPS_PKci+0x16>
	...

000b52ec <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   b52ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   b52f0:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   b52f2:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   b52f4:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   b52f6:	4604      	mov	r4, r0
   b52f8:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   b52fa:	d55b      	bpl.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
   b52fc:	7883      	ldrb	r3, [r0, #2]
   b52fe:	079a      	lsls	r2, r3, #30
   b5300:	d558      	bpl.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   b5302:	071b      	lsls	r3, r3, #28
   b5304:	d451      	bmi.n	b53aa <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   b5306:	6963      	ldr	r3, [r4, #20]
   b5308:	43db      	mvns	r3, r3
   b530a:	42bb      	cmp	r3, r7
   b530c:	d352      	bcc.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
   b530e:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5310:	f104 0a10 	add.w	sl, r4, #16
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b5314:	6966      	ldr	r6, [r4, #20]
  while (nToWrite) {
   b5316:	f1b8 0f00 	cmp.w	r8, #0
   b531a:	f000 8091 	beq.w	b5440 <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   b531e:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   b5320:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   b5322:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   b5326:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   b532a:	d10e      	bne.n	b534a <_ZN7FatFile5writeEPKvj+0x5e>
   b532c:	b96d      	cbnz	r5, b534a <_ZN7FatFile5writeEPKvj+0x5e>
      if (m_curCluster != 0) {
   b532e:	6921      	ldr	r1, [r4, #16]
   b5330:	2900      	cmp	r1, #0
   b5332:	d046      	beq.n	b53c2 <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   b5334:	4652      	mov	r2, sl
   b5336:	f000 fc10 	bl	b5b5a <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   b533a:	2800      	cmp	r0, #0
   b533c:	db3a      	blt.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   b533e:	d104      	bne.n	b534a <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   b5340:	4620      	mov	r0, r4
   b5342:	f7ff fd5f 	bl	b4e04 <_ZN7FatFile10addClusterEv>
   b5346:	2800      	cmp	r0, #0
   b5348:	d034      	beq.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   b534a:	6921      	ldr	r1, [r4, #16]
   b534c:	68a0      	ldr	r0, [r4, #8]
   b534e:	f000 fbfe 	bl	b5b4e <_ZNK9FatVolume17clusterFirstBlockEm>
   b5352:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   b5354:	68a0      	ldr	r0, [r4, #8]
   b5356:	b915      	cbnz	r5, b535e <_ZN7FatFile5writeEPKvj+0x72>
   b5358:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   b535c:	d23f      	bcs.n	b53de <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   b535e:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   b5362:	4546      	cmp	r6, r8
   b5364:	bf28      	it	cs
   b5366:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   b5368:	2d00      	cmp	r5, #0
   b536a:	d136      	bne.n	b53da <_ZN7FatFile5writeEPKvj+0xee>
   b536c:	6962      	ldr	r2, [r4, #20]
   b536e:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   b5370:	429a      	cmp	r2, r3
   b5372:	bf34      	ite	cc
   b5374:	2201      	movcc	r2, #1
   b5376:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   b5378:	3024      	adds	r0, #36	; 0x24
   b537a:	f000 fbc5 	bl	b5b08 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   b537e:	b1c8      	cbz	r0, b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   b5380:	4428      	add	r0, r5
   b5382:	4632      	mov	r2, r6
   b5384:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   b5386:	4435      	add	r5, r6
      memcpy(dst, src, n);
   b5388:	f002 f878 	bl	b747c <memcpy>
      if (512 == (n + blockOffset)) {
   b538c:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   b5390:	d104      	bne.n	b539c <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   b5392:	68a0      	ldr	r0, [r4, #8]
   b5394:	3024      	adds	r0, #36	; 0x24
   b5396:	f000 fb8f 	bl	b5ab8 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   b539a:	b158      	cbz	r0, b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   b539c:	6963      	ldr	r3, [r4, #20]
   b539e:	4433      	add	r3, r6
   b53a0:	6163      	str	r3, [r4, #20]
    src += n;
   b53a2:	44b1      	add	r9, r6
    nToWrite -= n;
   b53a4:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   b53a8:	e7b4      	b.n	b5314 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   b53aa:	69c1      	ldr	r1, [r0, #28]
   b53ac:	f7ff fe67 	bl	b507e <_ZN7FatFile7seekSetEm>
   b53b0:	2800      	cmp	r0, #0
   b53b2:	d1a8      	bne.n	b5306 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   b53b4:	7863      	ldrb	r3, [r4, #1]
   b53b6:	f043 0301 	orr.w	r3, r3, #1
   b53ba:	7063      	strb	r3, [r4, #1]
  return -1;
   b53bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b53c0:	e050      	b.n	b5464 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   b53c2:	6a23      	ldr	r3, [r4, #32]
   b53c4:	b93b      	cbnz	r3, b53d6 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   b53c6:	4620      	mov	r0, r4
   b53c8:	f7ff fd1c 	bl	b4e04 <_ZN7FatFile10addClusterEv>
   b53cc:	2800      	cmp	r0, #0
   b53ce:	d0f1      	beq.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   b53d0:	6923      	ldr	r3, [r4, #16]
   b53d2:	6223      	str	r3, [r4, #32]
   b53d4:	e7b9      	b.n	b534a <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   b53d6:	6123      	str	r3, [r4, #16]
   b53d8:	e7b7      	b.n	b534a <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   b53da:	2201      	movs	r2, #1
   b53dc:	e7cc      	b.n	b5378 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   b53de:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
    return m_lbn;
   b53e2:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   b53e4:	d31b      	bcc.n	b541e <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   b53e6:	f890 c004 	ldrb.w	ip, [r0, #4]
   b53ea:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   b53ee:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   b53f0:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   b53f4:	4573      	cmp	r3, lr
   b53f6:	bf28      	it	cs
   b53f8:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b53fa:	4291      	cmp	r1, r2
      n = 512*nb;
   b53fc:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   b5400:	d307      	bcc.n	b5412 <_ZN7FatFile5writeEPKvj+0x126>
   b5402:	441a      	add	r2, r3
   b5404:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   b5406:	bf82      	ittt	hi
   b5408:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   b540c:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5410:	62c2      	strhi	r2, [r0, #44]	; 0x2c
    return m_blockDev->writeBlocks(block, src, nb);
   b5412:	68a5      	ldr	r5, [r4, #8]
   b5414:	464a      	mov	r2, r9
   b5416:	6828      	ldr	r0, [r5, #0]
   b5418:	f000 ff59 	bl	b62ce <_ZN9SdSpiCard11writeBlocksEmPKhj>
   b541c:	e7bd      	b.n	b539a <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   b541e:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   b5420:	bf02      	ittt	eq
   b5422:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   b5426:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b542a:	62c3      	streq	r3, [r0, #44]	; 0x2c
    return m_blockDev->writeBlock(block, src);
   b542c:	68a3      	ldr	r3, [r4, #8]
   b542e:	464a      	mov	r2, r9
   b5430:	6818      	ldr	r0, [r3, #0]
   b5432:	f000 fed6 	bl	b61e2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(block, src)) {
   b5436:	2800      	cmp	r0, #0
   b5438:	d0bc      	beq.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   b543a:	f44f 7600 	mov.w	r6, #512	; 0x200
   b543e:	e7ad      	b.n	b539c <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   b5440:	69e2      	ldr	r2, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b5442:	78a3      	ldrb	r3, [r4, #2]
  if (m_curPosition > m_fileSize) {
   b5444:	42b2      	cmp	r2, r6
   b5446:	d204      	bcs.n	b5452 <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   b5448:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   b544a:	f043 0304 	orr.w	r3, r3, #4
   b544e:	70a3      	strb	r3, [r4, #2]
   b5450:	e003      	b.n	b545a <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   b5452:	4a08      	ldr	r2, [pc, #32]	; (b5474 <_ZN7FatFile5writeEPKvj+0x188>)
   b5454:	6812      	ldr	r2, [r2, #0]
   b5456:	2a00      	cmp	r2, #0
   b5458:	d1f7      	bne.n	b544a <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   b545a:	f994 3002 	ldrsb.w	r3, [r4, #2]
   b545e:	2b00      	cmp	r3, #0
   b5460:	db02      	blt.n	b5468 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   b5462:	4638      	mov	r0, r7
}
   b5464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   b5468:	4620      	mov	r0, r4
   b546a:	f7ff feb5 	bl	b51d8 <_ZN7FatFile4syncEv>
   b546e:	2800      	cmp	r0, #0
   b5470:	d1f7      	bne.n	b5462 <_ZN7FatFile5writeEPKvj+0x176>
   b5472:	e79f      	b.n	b53b4 <_ZN7FatFile5writeEPKvj+0xc8>
   b5474:	2003e6b4 	.word	0x2003e6b4

000b5478 <_ZL10lfnGetCharP18longDirectoryEntryh>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
   b5478:	2904      	cmp	r1, #4
   b547a:	d804      	bhi.n	b5486 <_ZL10lfnGetCharP18longDirectoryEntryh+0xe>
    return ldir->name1[i];
   b547c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   b5480:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   b5484:	4770      	bx	lr
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5486:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5488:	bf9b      	ittet	ls
   b548a:	f101 31ff 	addls.w	r1, r1, #4294967295	; 0xffffffff
   b548e:	eb00 0041 	addls.w	r0, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5492:	3101      	addhi	r1, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   b5494:	88c0      	ldrhls	r0, [r0, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   b5496:	bf84      	itt	hi
   b5498:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
   b549c:	8880      	ldrhhi	r0, [r0, #4]
  }
  return 0;
}
   b549e:	4770      	bx	lr

000b54a0 <_ZN7FatFile11lfnChecksumEPh>:
  for (uint8_t i = 0; i < 11; i++) {
   b54a0:	1e41      	subs	r1, r0, #1
   b54a2:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   b54a6:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b54a8:	0842      	lsrs	r2, r0, #1
   b54aa:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   b54ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   b54b2:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   b54b6:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   b54b8:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   b54ba:	d1f5      	bne.n	b54a8 <_ZN7FatFile11lfnChecksumEPh+0x8>
}
   b54bc:	4770      	bx	lr
	...

000b54c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   b54c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b54c4:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   b54c6:	f810 3b01 	ldrb.w	r3, [r0], #1
   b54ca:	2b20      	cmp	r3, #32
   b54cc:	d0fa      	beq.n	b54c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b54ce:	4d6a      	ldr	r5, [pc, #424]	; (b5678 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b8>)
    path++;
  }
  fname->lfn = path;
   b54d0:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   b54d2:	2400      	movs	r4, #0
    c = path[len];
   b54d4:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   b54d6:	b1c3      	cbz	r3, b550a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   b54d8:	2b2f      	cmp	r3, #47	; 0x2f
   b54da:	d016      	beq.n	b550a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b54dc:	2b5c      	cmp	r3, #92	; 0x5c
   b54de:	d102      	bne.n	b54e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   b54e0:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   b54e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   b54e6:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   b54ea:	b2c0      	uxtb	r0, r0
   b54ec:	281d      	cmp	r0, #29
   b54ee:	d803      	bhi.n	b54f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   b54f0:	fa25 f000 	lsr.w	r0, r5, r0
   b54f4:	07c0      	lsls	r0, r0, #31
   b54f6:	d4f3      	bmi.n	b54e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   b54f8:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   b54fc:	283c      	cmp	r0, #60	; 0x3c
   b54fe:	d0ef      	beq.n	b54e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   b5500:	3b20      	subs	r3, #32
   b5502:	2b5e      	cmp	r3, #94	; 0x5e
   b5504:	d8ec      	bhi.n	b54e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   b5506:	3401      	adds	r4, #1
    c = path[len];
   b5508:	e7e4      	b.n	b54d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   b550a:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   b550c:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   b550e:	4607      	mov	r7, r0
   b5510:	f810 5b01 	ldrb.w	r5, [r0], #1
   b5514:	2d20      	cmp	r5, #32
   b5516:	d0fa      	beq.n	b550e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   b5518:	2d2f      	cmp	r5, #47	; 0x2f
   b551a:	d0f8      	beq.n	b550e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   b551c:	6017      	str	r7, [r2, #0]
  while (len) {
   b551e:	b14c      	cbz	r4, b5534 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   b5520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   b5524:	2a2e      	cmp	r2, #46	; 0x2e
   b5526:	d001      	beq.n	b552c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   b5528:	2a20      	cmp	r2, #32
   b552a:	d101      	bne.n	b5530 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   b552c:	3c01      	subs	r4, #1
  while (len) {
   b552e:	e7f6      	b.n	b551e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   b5530:	2cff      	cmp	r4, #255	; 0xff
   b5532:	dcd5      	bgt.n	b54e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    fname->sfn[k] = ' ';
   b5534:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
   b5538:	f8c1 3011 	str.w	r3, [r1, #17]
  fname->len = len;
   b553c:	604c      	str	r4, [r1, #4]
    fname->sfn[k] = ' ';
   b553e:	f8c1 300d 	str.w	r3, [r1, #13]
   b5542:	614b      	str	r3, [r1, #20]
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b5544:	f04f 0800 	mov.w	r8, #0
   b5548:	f816 3008 	ldrb.w	r3, [r6, r8]
   b554c:	2b2e      	cmp	r3, #46	; 0x2e
   b554e:	d001      	beq.n	b5554 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x94>
   b5550:	2b20      	cmp	r3, #32
   b5552:	d102      	bne.n	b555a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9a>
   b5554:	f108 0801 	add.w	r8, r8, #1
   b5558:	e7f6      	b.n	b5548 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
  is83 = !si;
   b555a:	fab8 f088 	clz	r0, r8
   b555e:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5560:	1e65      	subs	r5, r4, #1
   b5562:	1c6b      	adds	r3, r5, #1
   b5564:	d002      	beq.n	b556c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xac>
   b5566:	5d73      	ldrb	r3, [r6, r5]
   b5568:	2b2e      	cmp	r3, #46	; 0x2e
   b556a:	d114      	bne.n	b5596 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   b556c:	f04f 0900 	mov.w	r9, #0
   b5570:	2707      	movs	r7, #7
   b5572:	464a      	mov	r2, r9
   b5574:	46ca      	mov	sl, r9
   b5576:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   b557a:	45a0      	cmp	r8, r4
   b557c:	da68      	bge.n	b5650 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
    c = path[si];
   b557e:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   b5582:	2b20      	cmp	r3, #32
   b5584:	d003      	beq.n	b558e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
   b5586:	2b2e      	cmp	r3, #46	; 0x2e
   b5588:	d107      	bne.n	b559a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
   b558a:	45a8      	cmp	r8, r5
   b558c:	d012      	beq.n	b55b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
      is83 = false;
   b558e:	2000      	movs	r0, #0
  for (; si < len; si++) {
   b5590:	f108 0801 	add.w	r8, r8, #1
   b5594:	e7f1      	b.n	b557a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xba>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   b5596:	3d01      	subs	r5, #1
   b5598:	e7e3      	b.n	b5562 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa2>
    if (c == '"' || c == '|') {
   b559a:	2b22      	cmp	r3, #34	; 0x22
   b559c:	d008      	beq.n	b55b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
   b559e:	2b7c      	cmp	r3, #124	; 0x7c
   b55a0:	d006      	beq.n	b55b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   b55a2:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   b55a6:	f1bc 0f05 	cmp.w	ip, #5
   b55aa:	d80a      	bhi.n	b55c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x102>
   b55ac:	2b2d      	cmp	r3, #45	; 0x2d
   b55ae:	d012      	beq.n	b55d6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x116>
    if (!legal83Char(c) && si != dot) {
   b55b0:	45a8      	cmp	r8, r5
   b55b2:	d15b      	bne.n	b566c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
      if (in == 10) {
   b55b4:	2f0a      	cmp	r7, #10
   b55b6:	d04a      	beq.n	b564e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
      in = 10;  // Max index for full 8.3 name.
   b55b8:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b55ba:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b55bc:	f04f 0e10 	mov.w	lr, #16
   b55c0:	e7e6      	b.n	b5590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
    if (0X3A <= c && c <= 0X3F) {
   b55c2:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   b55c6:	f1bc 0f05 	cmp.w	ip, #5
   b55ca:	d9f1      	bls.n	b55b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (0X5B <= c && c <= 0X5D) {
   b55cc:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   b55d0:	f1bc 0f02 	cmp.w	ip, #2
   b55d4:	d9ec      	bls.n	b55b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (!legal83Char(c) && si != dot) {
   b55d6:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   b55da:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   b55de:	d8e7      	bhi.n	b55b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
    if (si == dot || i > in) {
   b55e0:	45a8      	cmp	r8, r5
   b55e2:	d0e7      	beq.n	b55b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   b55e4:	42ba      	cmp	r2, r7
   b55e6:	d830      	bhi.n	b564a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      if ('a' <= c && c <= 'z') {
   b55e8:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   b55ec:	f1bc 0f19 	cmp.w	ip, #25
   b55f0:	d81a      	bhi.n	b5628 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x168>
        c += 'A' - 'a';
   b55f2:	3b20      	subs	r3, #32
        lc |= bit;
   b55f4:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   b55f8:	b2db      	uxtb	r3, r3
        lc |= bit;
   b55fa:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   b55fe:	f102 0c01 	add.w	ip, r2, #1
   b5602:	fa5f fc8c 	uxtb.w	ip, ip
   b5606:	440a      	add	r2, r1
      if (i < 7) {
   b5608:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   b560c:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   b560e:	d801      	bhi.n	b5614 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x154>
        fname->seqPos = i;
   b5610:	f881 c00c 	strb.w	ip, [r1, #12]
   b5614:	4662      	mov	r2, ip
   b5616:	e7bb      	b.n	b5590 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd0>
      if (si > dot) {
   b5618:	45a8      	cmp	r8, r5
   b561a:	dc18      	bgt.n	b564e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18e>
   b561c:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   b561e:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   b5620:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   b5622:	f04f 0e10 	mov.w	lr, #16
   b5626:	e7b2      	b.n	b558e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xce>
      } else if ('A' <= c && c <= 'Z') {
   b5628:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   b562c:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   b5630:	bf98      	it	ls
   b5632:	ea4e 0a0a 	orrls.w	sl, lr, sl
   b5636:	e7e2      	b.n	b55fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
    fname->sfn[fname->seqPos] = '~';
   b5638:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   b563a:	2001      	movs	r0, #1
   b563c:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   b563e:	4419      	add	r1, r3
   b5640:	237e      	movs	r3, #126	; 0x7e
   b5642:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   b5644:	2331      	movs	r3, #49	; 0x31
   b5646:	738b      	strb	r3, [r1, #14]
   b5648:	e74b      	b.n	b54e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   b564a:	2f0a      	cmp	r7, #10
   b564c:	d1e4      	bne.n	b5618 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x158>
        is83 = false;
   b564e:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   b5650:	7b4b      	ldrb	r3, [r1, #13]
   b5652:	2b20      	cmp	r3, #32
   b5654:	f43f af44 	beq.w	b54e0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   b5658:	2800      	cmp	r0, #0
   b565a:	d0ed      	beq.n	b5638 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x178>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   b565c:	ea1a 0f09 	tst.w	sl, r9
   b5660:	bf18      	it	ne
   b5662:	f04f 0902 	movne.w	r9, #2
   b5666:	f881 9000 	strb.w	r9, [r1]
   b566a:	e73a      	b.n	b54e2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   b566c:	42ba      	cmp	r2, r7
   b566e:	d8ec      	bhi.n	b564a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x18a>
      is83 = false;
   b5670:	2000      	movs	r0, #0
      c = '_';
   b5672:	235f      	movs	r3, #95	; 0x5f
   b5674:	e7c3      	b.n	b55fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x13e>
   b5676:	bf00      	nop
   b5678:	31000101 	.word	0x31000101

000b567c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   b5680:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   b5684:	4606      	mov	r6, r0
   b5686:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   b5688:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   b568a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b568c:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   b5690:	6861      	ldr	r1, [r4, #4]
   b5692:	68a2      	ldr	r2, [r4, #8]
   b5694:	186b      	adds	r3, r5, r1
   b5696:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b5698:	4411      	add	r1, r2
   b569a:	4291      	cmp	r1, r2
   b569c:	d006      	beq.n	b56ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   b569e:	f812 0b01 	ldrb.w	r0, [r2], #1
   b56a2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   b56a6:	4043      	eors	r3, r0
   b56a8:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   b56aa:	e7f6      	b.n	b569a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   b56ac:	f1b9 0f03 	cmp.w	r9, #3
   b56b0:	bf28      	it	cs
   b56b2:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56b6:	f109 0204 	add.w	r2, r9, #4
   b56ba:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   b56bc:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56c0:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56c2:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56c4:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56c6:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56c8:	bf94      	ite	ls
   b56ca:	3130      	addls	r1, #48	; 0x30
   b56cc:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56ce:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   b56d0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   b56d2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   b56d6:	d1f1      	bne.n	b56bc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   b56d8:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   b56dc:	2100      	movs	r1, #0
   b56de:	735f      	strb	r7, [r3, #13]
   b56e0:	4630      	mov	r0, r6
   b56e2:	f7ff fccc 	bl	b507e <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   b56e6:	2101      	movs	r1, #1
   b56e8:	4630      	mov	r0, r6
   b56ea:	f7ff fca9 	bl	b5040 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   b56ee:	4601      	mov	r1, r0
   b56f0:	b928      	cbnz	r0, b56fe <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   b56f2:	7870      	ldrb	r0, [r6, #1]
   b56f4:	fab0 f080 	clz	r0, r0
   b56f8:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   b56fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   b56fe:	7803      	ldrb	r3, [r0, #0]
   b5700:	b16b      	cbz	r3, b571e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   b5702:	7ac3      	ldrb	r3, [r0, #11]
   b5704:	071b      	lsls	r3, r3, #28
   b5706:	d4ee      	bmi.n	b56e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   b5708:	220b      	movs	r2, #11
   b570a:	4640      	mov	r0, r8
   b570c:	f001 fea6 	bl	b745c <memcmp>
   b5710:	2800      	cmp	r0, #0
   b5712:	d1e8      	bne.n	b56e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   b5714:	3501      	adds	r5, #1
   b5716:	b2ad      	uxth	r5, r5
   b5718:	2d64      	cmp	r5, #100	; 0x64
   b571a:	d1b9      	bne.n	b5690 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   b571c:	e7ed      	b.n	b56fa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   b571e:	2001      	movs	r0, #1
   b5720:	e7eb      	b.n	b56fa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000b5724 <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5728:	ed2d 8b02 	vpush	{d8}
   b572c:	b08b      	sub	sp, #44	; 0x2c
   b572e:	460d      	mov	r5, r1
   b5730:	9306      	str	r3, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   b5732:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b5734:	9007      	str	r0, [sp, #28]
  if (!dirFile->isDir() || isOpen()) {
   b5736:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   b573a:	4617      	mov	r7, r2
  if (!dirFile->isDir() || isOpen()) {
   b573c:	d105      	bne.n	b574a <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   b573e:	2000      	movs	r0, #0
}
   b5740:	b00b      	add	sp, #44	; 0x2c
   b5742:	ecbd 8b02 	vpop	{d8}
   b5746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return m_attr;
   b574a:	9b07      	ldr	r3, [sp, #28]
   b574c:	781b      	ldrb	r3, [r3, #0]
  if (!dirFile->isDir() || isOpen()) {
   b574e:	2b00      	cmp	r3, #0
   b5750:	d1f5      	bne.n	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   b5752:	6853      	ldr	r3, [r2, #4]
   b5754:	9305      	str	r3, [sp, #20]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   b5756:	7813      	ldrb	r3, [r2, #0]
   b5758:	079c      	lsls	r4, r3, #30
   b575a:	bf1f      	itttt	ne
   b575c:	9b05      	ldrne	r3, [sp, #20]
   b575e:	330c      	addne	r3, #12
   b5760:	220d      	movne	r2, #13
   b5762:	fbb3 f3f2 	udivne	r3, r3, r2
   b5766:	bf1a      	itte	ne
   b5768:	3301      	addne	r3, #1
   b576a:	b2db      	uxtbne	r3, r3
   b576c:	2301      	moveq	r3, #1
    seekSet(0);
   b576e:	2100      	movs	r1, #0
   b5770:	4628      	mov	r0, r5
   b5772:	9303      	str	r3, [sp, #12]
   b5774:	f7ff fc83 	bl	b507e <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5778:	f107 030d 	add.w	r3, r7, #13
  }
   b577c:	f04f 0b00 	mov.w	fp, #0
   b5780:	ee08 3a10 	vmov	s16, r3
   b5784:	46da      	mov	sl, fp
   b5786:	465c      	mov	r4, fp
   b5788:	465e      	mov	r6, fp
   b578a:	f8cd b010 	str.w	fp, [sp, #16]
   b578e:	46d9      	mov	r9, fp
    curIndex = dirFile->m_curPosition/32;
   b5790:	696b      	ldr	r3, [r5, #20]
    dir = dirFile->readDirCache(true);
   b5792:	2101      	movs	r1, #1
   b5794:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   b5796:	f3c3 184f 	ubfx	r8, r3, #5, #16
    dir = dirFile->readDirCache(true);
   b579a:	f7ff fc51 	bl	b5040 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b579e:	4603      	mov	r3, r0
   b57a0:	2800      	cmp	r0, #0
   b57a2:	d171      	bne.n	b5888 <_ZN7FatFile4openEPS_P7fname_ti+0x164>
      if (dirFile->getError()) {
   b57a4:	786b      	ldrb	r3, [r5, #1]
   b57a6:	2b00      	cmp	r3, #0
   b57a8:	d1c9      	bne.n	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   b57aa:	9b06      	ldr	r3, [sp, #24]
   b57ac:	059a      	lsls	r2, r3, #22
   b57ae:	d5c6      	bpl.n	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   b57b0:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   b57b4:	3b01      	subs	r3, #1
   b57b6:	2b01      	cmp	r3, #1
   b57b8:	d8c1      	bhi.n	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   b57ba:	9b04      	ldr	r3, [sp, #16]
   b57bc:	2c00      	cmp	r4, #0
   b57be:	bf08      	it	eq
   b57c0:	4643      	moveq	r3, r8
   b57c2:	9304      	str	r3, [sp, #16]
  while (freeFound < freeNeed) {
   b57c4:	9b03      	ldr	r3, [sp, #12]
   b57c6:	429c      	cmp	r4, r3
   b57c8:	f0c0 80f1 	bcc.w	b59ae <_ZN7FatFile4openEPS_P7fname_ti+0x28a>
  if (fnameFound) {
   b57cc:	f1b9 0f00 	cmp.w	r9, #0
   b57d0:	f040 810a 	bne.w	b59e8 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   b57d4:	9b04      	ldr	r3, [sp, #16]
   b57d6:	4628      	mov	r0, r5
   b57d8:	0159      	lsls	r1, r3, #5
   b57da:	f7ff fc50 	bl	b507e <_ZN7FatFile7seekSetEm>
   b57de:	2800      	cmp	r0, #0
   b57e0:	d0ad      	beq.n	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   b57e2:	9b03      	ldr	r3, [sp, #12]
   b57e4:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
   b57e8:	fa5f f989 	uxtb.w	r9, r9
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b57ec:	464e      	mov	r6, r9
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b57ee:	f04f 0a00 	mov.w	sl, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   b57f2:	f04f 080f 	mov.w	r8, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b57f6:	2e00      	cmp	r6, #0
   b57f8:	f000 810d 	beq.w	b5a16 <_ZN7FatFile4openEPS_P7fname_ti+0x2f2>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   b57fc:	2100      	movs	r1, #0
   b57fe:	4628      	mov	r0, r5
   b5800:	f7ff fc1e 	bl	b5040 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   b5804:	4604      	mov	r4, r0
   b5806:	2800      	cmp	r0, #0
   b5808:	d099      	beq.n	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   b580a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b580c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   b5810:	454e      	cmp	r6, r9
   b5812:	f043 0301 	orr.w	r3, r3, #1
   b5816:	bf0c      	ite	eq
   b5818:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   b581c:	46b3      	movne	fp, r6
   b581e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   b5822:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   b5826:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
   b582a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   b582e:	f107 000d 	add.w	r0, r7, #13
   b5832:	f7ff fe35 	bl	b54a0 <_ZN7FatFile11lfnChecksumEPh>
    ldir->mustBeZero = 0;
   b5836:	f884 a01a 	strb.w	sl, [r4, #26]
    ldir->chksum = lfnChecksum(fname->sfn);
   b583a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   b583c:	f884 a01b 	strb.w	sl, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b5840:	f00b 031f 	and.w	r3, fp, #31
   b5844:	220d      	movs	r2, #13
   b5846:	3b01      	subs	r3, #1
    lfnPutName(ldir, fname->lfn, len);
   b5848:	f8d7 c008 	ldr.w	ip, [r7, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   b584c:	4353      	muls	r3, r2
   b584e:	2200      	movs	r2, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b5850:	9905      	ldr	r1, [sp, #20]
   b5852:	4299      	cmp	r1, r3
   b5854:	f240 80d0 	bls.w	b59f8 <_ZN7FatFile4openEPS_P7fname_ti+0x2d4>
   b5858:	f81c 1003 	ldrb.w	r1, [ip, r3]
  if (i < LDIR_NAME1_DIM) {
   b585c:	2a04      	cmp	r2, #4
   b585e:	fa5f fe82 	uxtb.w	lr, r2
   b5862:	f102 0001 	add.w	r0, r2, #1
   b5866:	f200 80cd 	bhi.w	b5a04 <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
    ldir->name1[i] = c;
   b586a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
   b586e:	f8a2 1001 	strh.w	r1, [r2, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   b5872:	280d      	cmp	r0, #13
   b5874:	f103 0301 	add.w	r3, r3, #1
   b5878:	4602      	mov	r2, r0
   b587a:	d1e9      	bne.n	b5850 <_ZN7FatFile4openEPS_P7fname_ti+0x12c>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   b587c:	3e01      	subs	r6, #1
   b587e:	b2f6      	uxtb	r6, r6
   b5880:	e7b9      	b.n	b57f6 <_ZN7FatFile4openEPS_P7fname_ti+0xd2>
        fnameFound = true;
   b5882:	f04f 0901 	mov.w	r9, #1
   b5886:	e783      	b.n	b5790 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   b5888:	7802      	ldrb	r2, [r0, #0]
   b588a:	2ae5      	cmp	r2, #229	; 0xe5
   b588c:	d000      	beq.n	b5890 <_ZN7FatFile4openEPS_P7fname_ti+0x16c>
   b588e:	b97a      	cbnz	r2, b58b0 <_ZN7FatFile4openEPS_P7fname_ti+0x18c>
    curIndex = dirFile->m_curPosition/32;
   b5890:	9904      	ldr	r1, [sp, #16]
   b5892:	2c00      	cmp	r4, #0
   b5894:	bf08      	it	eq
   b5896:	4641      	moveq	r1, r8
   b5898:	9104      	str	r1, [sp, #16]
      if (freeFound < freeNeed) {
   b589a:	9903      	ldr	r1, [sp, #12]
   b589c:	428c      	cmp	r4, r1
        freeFound++;
   b589e:	bf3c      	itt	cc
   b58a0:	3401      	addcc	r4, #1
   b58a2:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   b58a4:	2a00      	cmp	r2, #0
   b58a6:	d080      	beq.n	b57aa <_ZN7FatFile4openEPS_P7fname_ti+0x86>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b58a8:	2ae5      	cmp	r2, #229	; 0xe5
   b58aa:	d105      	bne.n	b58b8 <_ZN7FatFile4openEPS_P7fname_ti+0x194>
      lfnOrd = 0;
   b58ac:	2600      	movs	r6, #0
   b58ae:	e76f      	b.n	b5790 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   b58b0:	9903      	ldr	r1, [sp, #12]
   b58b2:	428c      	cmp	r4, r1
   b58b4:	bf38      	it	cc
   b58b6:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   b58b8:	2a2e      	cmp	r2, #46	; 0x2e
   b58ba:	d0f7      	beq.n	b58ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
 * \param[in] dir Pointer to a directory entry.
 *
 * \return true if the entry is for part of a long name else false.
 */
static inline uint8_t DIR_IS_LONG_NAME(const dir_t* dir) {
  return dir->attributes == DIR_ATT_LONG_NAME;
   b58bc:	7ad9      	ldrb	r1, [r3, #11]
    } else if (DIR_IS_LONG_NAME(dir)) {
   b58be:	290f      	cmp	r1, #15
   b58c0:	d14a      	bne.n	b5958 <_ZN7FatFile4openEPS_P7fname_ti+0x234>
      if (!lfnOrd) {
   b58c2:	bb16      	cbnz	r6, b590a <_ZN7FatFile4openEPS_P7fname_ti+0x1e6>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   b58c4:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   b58c8:	f43f af62 	beq.w	b5790 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   b58cc:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   b58d0:	f893 b00d 	ldrb.w	fp, [r3, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   b58d4:	46b2      	mov	sl, r6
      size_t k = 13*(ord - 1);
   b58d6:	220d      	movs	r2, #13
   b58d8:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
   b58dc:	fb02 f808 	mul.w	r8, r2, r8
      if (k >= len) {
   b58e0:	9a05      	ldr	r2, [sp, #20]
   b58e2:	4542      	cmp	r2, r8
   b58e4:	d9e2      	bls.n	b58ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b58e6:	eba2 0208 	sub.w	r2, r2, r8
   b58ea:	9208      	str	r2, [sp, #32]
   b58ec:	2200      	movs	r2, #0
   b58ee:	eb02 0108 	add.w	r1, r2, r8
   b58f2:	9109      	str	r1, [sp, #36]	; 0x24
        uint16_t u = lfnGetChar(ldir, i);
   b58f4:	4618      	mov	r0, r3
   b58f6:	b2d1      	uxtb	r1, r2
   b58f8:	f7ff fdbe 	bl	b5478 <_ZL10lfnGetCharP18longDirectoryEntryh>
        if (k == len) {
   b58fc:	9908      	ldr	r1, [sp, #32]
   b58fe:	428a      	cmp	r2, r1
   b5900:	d10d      	bne.n	b591e <_ZN7FatFile4openEPS_P7fname_ti+0x1fa>
            lfnOrd = 0;
   b5902:	2800      	cmp	r0, #0
   b5904:	bf18      	it	ne
   b5906:	2600      	movne	r6, #0
   b5908:	e742      	b.n	b5790 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   b590a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
   b590e:	fa5f fa8a 	uxtb.w	sl, sl
   b5912:	4552      	cmp	r2, sl
   b5914:	d1ca      	bne.n	b58ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5916:	7b5a      	ldrb	r2, [r3, #13]
   b5918:	455a      	cmp	r2, fp
   b591a:	d0dc      	beq.n	b58d6 <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
   b591c:	e7c6      	b.n	b58ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b591e:	28ff      	cmp	r0, #255	; 0xff
   b5920:	d8c4      	bhi.n	b58ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
   b5922:	fa5f fe80 	uxtb.w	lr, r0
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b5926:	f1ae 0141 	sub.w	r1, lr, #65	; 0x41
   b592a:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b592c:	68b9      	ldr	r1, [r7, #8]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b592e:	bf9c      	itt	ls
   b5930:	f10e 0020 	addls.w	r0, lr, #32
   b5934:	fa5f fe80 	uxtbls.w	lr, r0
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b5938:	4608      	mov	r0, r1
   b593a:	9909      	ldr	r1, [sp, #36]	; 0x24
   b593c:	5c41      	ldrb	r1, [r0, r1]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   b593e:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
   b5942:	f1bc 0f19 	cmp.w	ip, #25
   b5946:	bf9c      	itt	ls
   b5948:	3120      	addls	r1, #32
   b594a:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   b594c:	4571      	cmp	r1, lr
   b594e:	d1ad      	bne.n	b58ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      for (uint8_t i = 0; i < 13; i++) {
   b5950:	3201      	adds	r2, #1
   b5952:	2a0d      	cmp	r2, #13
   b5954:	d1cb      	bne.n	b58ee <_ZN7FatFile4openEPS_P7fname_ti+0x1ca>
   b5956:	e71b      	b.n	b5790 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   b5958:	0708      	lsls	r0, r1, #28
   b595a:	d4a7      	bmi.n	b58ac <_ZN7FatFile4openEPS_P7fname_ti+0x188>
      if (lfnOrd) {
   b595c:	b15e      	cbz	r6, b5976 <_ZN7FatFile4openEPS_P7fname_ti+0x252>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   b595e:	f1ba 0f01 	cmp.w	sl, #1
   b5962:	f47f aeec 	bne.w	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5966:	4618      	mov	r0, r3
   b5968:	f7ff fd9a 	bl	b54a0 <_ZN7FatFile11lfnChecksumEPh>
   b596c:	4558      	cmp	r0, fp
   b596e:	f47f aee6 	bne.w	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   b5972:	46b1      	mov	r9, r6
   b5974:	e00e      	b.n	b5994 <_ZN7FatFile4openEPS_P7fname_ti+0x270>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   b5976:	ee18 1a10 	vmov	r1, s16
   b597a:	220b      	movs	r2, #11
   b597c:	4618      	mov	r0, r3
   b597e:	f001 fd6d 	bl	b745c <memcmp>
   b5982:	2800      	cmp	r0, #0
   b5984:	f47f af04 	bne.w	b5790 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   b5988:	f897 9000 	ldrb.w	r9, [r7]
   b598c:	f019 0901 	ands.w	r9, r9, #1
   b5990:	f47f af77 	bne.w	b5882 <_ZN7FatFile4openEPS_P7fname_ti+0x15e>
  if (oflag & O_EXCL) {
   b5994:	9b06      	ldr	r3, [sp, #24]
   b5996:	0519      	lsls	r1, r3, #20
   b5998:	f53f aed1 	bmi.w	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   b599c:	9b06      	ldr	r3, [sp, #24]
   b599e:	9807      	ldr	r0, [sp, #28]
   b59a0:	f8cd 9000 	str.w	r9, [sp]
   b59a4:	4642      	mov	r2, r8
   b59a6:	4629      	mov	r1, r5
   b59a8:	f7ff fbac 	bl	b5104 <_ZN7FatFile15openCachedEntryEPS_tih>
   b59ac:	e6c8      	b.n	b5740 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   b59ae:	2100      	movs	r1, #0
   b59b0:	4628      	mov	r0, r5
   b59b2:	f7ff fb45 	bl	b5040 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   b59b6:	b9a0      	cbnz	r0, b59e2 <_ZN7FatFile4openEPS_P7fname_ti+0x2be>
      if (dirFile->getError()) {
   b59b8:	786b      	ldrb	r3, [r5, #1]
   b59ba:	2b00      	cmp	r3, #0
   b59bc:	f47f aebf 	bne.w	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   b59c0:	4628      	mov	r0, r5
   b59c2:	f7ff fa29 	bl	b4e18 <_ZN7FatFile13addDirClusterEv>
   b59c6:	2800      	cmp	r0, #0
   b59c8:	f43f aeb9 	beq.w	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    return m_blocksPerCluster;
   b59cc:	68ab      	ldr	r3, [r5, #8]
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   b59ce:	791b      	ldrb	r3, [r3, #4]
   b59d0:	2b01      	cmp	r3, #1
   b59d2:	f63f aefb 	bhi.w	b57cc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
  while (freeFound < freeNeed) {
   b59d6:	9b03      	ldr	r3, [sp, #12]
    freeFound += 16;
   b59d8:	3410      	adds	r4, #16
   b59da:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b59dc:	42a3      	cmp	r3, r4
   b59de:	d8ef      	bhi.n	b59c0 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
   b59e0:	e6f4      	b.n	b57cc <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   b59e2:	3401      	adds	r4, #1
   b59e4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   b59e6:	e6ed      	b.n	b57c4 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
    if (!dirFile->lfnUniqueSfn(fname)) {
   b59e8:	4639      	mov	r1, r7
   b59ea:	4628      	mov	r0, r5
   b59ec:	f7ff fe46 	bl	b567c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   b59f0:	2800      	cmp	r0, #0
   b59f2:	f47f aeef 	bne.w	b57d4 <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   b59f6:	e6a2      	b.n	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   b59f8:	bf14      	ite	ne
   b59fa:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b59fe:	2100      	moveq	r1, #0
   b5a00:	b289      	uxth	r1, r1
   b5a02:	e72b      	b.n	b585c <_ZN7FatFile4openEPS_P7fname_ti+0x138>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   b5a04:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   b5a08:	bf94      	ite	ls
   b5a0a:	eb04 0242 	addls.w	r2, r4, r2, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   b5a0e:	eb04 0240 	addhi.w	r2, r4, r0, lsl #1
   b5a12:	8091      	strh	r1, [r2, #4]
   b5a14:	e72d      	b.n	b5872 <_ZN7FatFile4openEPS_P7fname_ti+0x14e>
  dir = dirFile->readDirCache();
   b5a16:	4631      	mov	r1, r6
   b5a18:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   b5a1a:	f8d5 8014 	ldr.w	r8, [r5, #20]
  dir = dirFile->readDirCache();
   b5a1e:	f7ff fb0f 	bl	b5040 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   b5a22:	4604      	mov	r4, r0
   b5a24:	2800      	cmp	r0, #0
   b5a26:	f43f ae8a 	beq.w	b573e <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   b5a2a:	2220      	movs	r2, #32
   b5a2c:	4631      	mov	r1, r6
   b5a2e:	f001 fd33 	bl	b7498 <memset>
  memcpy(dir->name, fname->sfn, 11);
   b5a32:	f8d7 300d 	ldr.w	r3, [r7, #13]
   b5a36:	6023      	str	r3, [r4, #0]
   b5a38:	f8d7 3011 	ldr.w	r3, [r7, #17]
   b5a3c:	6063      	str	r3, [r4, #4]
   b5a3e:	f8b7 3015 	ldrh.w	r3, [r7, #21]
   b5a42:	8123      	strh	r3, [r4, #8]
   b5a44:	7dfb      	ldrb	r3, [r7, #23]
   b5a46:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   b5a48:	783b      	ldrb	r3, [r7, #0]
   b5a4a:	f003 0318 	and.w	r3, r3, #24
   b5a4e:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   b5a50:	4b0f      	ldr	r3, [pc, #60]	; (b5a90 <_ZN7FatFile4openEPS_P7fname_ti+0x36c>)
   b5a52:	681b      	ldr	r3, [r3, #0]
   b5a54:	b19b      	cbz	r3, b5a7e <_ZN7FatFile4openEPS_P7fname_ti+0x35a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   b5a56:	f104 010e 	add.w	r1, r4, #14
   b5a5a:	f104 0010 	add.w	r0, r4, #16
   b5a5e:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   b5a60:	8a23      	ldrh	r3, [r4, #16]
   b5a62:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   b5a64:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   b5a66:	89e3      	ldrh	r3, [r4, #14]
   b5a68:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   b5a6a:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   b5a6c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   b5a70:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   b5a74:	f3c8 184f 	ubfx	r8, r8, #5, #16
   b5a78:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   b5a7c:	e78e      	b.n	b599c <_ZN7FatFile4openEPS_P7fname_ti+0x278>
    dir->creationDate = FAT_DEFAULT_DATE;
   b5a7e:	2321      	movs	r3, #33	; 0x21
   b5a80:	7423      	strb	r3, [r4, #16]
   b5a82:	2328      	movs	r3, #40	; 0x28
   b5a84:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   b5a86:	2308      	movs	r3, #8
   b5a88:	73a6      	strb	r6, [r4, #14]
   b5a8a:	73e3      	strb	r3, [r4, #15]
   b5a8c:	e7e8      	b.n	b5a60 <_ZN7FatFile4openEPS_P7fname_ti+0x33c>
   b5a8e:	bf00      	nop
   b5a90:	2003e6b4 	.word	0x2003e6b4

000b5a94 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5a94:	b513      	push	{r0, r1, r4, lr}
   b5a96:	4604      	mov	r4, r0
    }
   b5a98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5a9a:	b159      	cbz	r1, b5ab4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5a9c:	9101      	str	r1, [sp, #4]
   b5a9e:	f001 fd31 	bl	b7504 <strlen>
   b5aa2:	6823      	ldr	r3, [r4, #0]
   b5aa4:	9901      	ldr	r1, [sp, #4]
   b5aa6:	68db      	ldr	r3, [r3, #12]
   b5aa8:	4602      	mov	r2, r0
   b5aaa:	4620      	mov	r0, r4
    }
   b5aac:	b002      	add	sp, #8
   b5aae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5ab2:	4718      	bx	r3
    }
   b5ab4:	b002      	add	sp, #8
   b5ab6:	bd10      	pop	{r4, pc}

000b5ab8 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   b5ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   b5aba:	7803      	ldrb	r3, [r0, #0]
   b5abc:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   b5abe:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   b5ac0:	d520      	bpl.n	b5b04 <_ZN8FatCache4syncEv+0x4c>
    return m_blockDev->writeBlock(block, src);
   b5ac2:	6843      	ldr	r3, [r0, #4]
   b5ac4:	6881      	ldr	r1, [r0, #8]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   b5ac6:	f100 020c 	add.w	r2, r0, #12
   b5aca:	6818      	ldr	r0, [r3, #0]
   b5acc:	9201      	str	r2, [sp, #4]
   b5ace:	f000 fb88 	bl	b61e2 <_ZN9SdSpiCard10writeBlockEmPKh>
   b5ad2:	9a01      	ldr	r2, [sp, #4]
   b5ad4:	4605      	mov	r5, r0
   b5ad6:	b918      	cbnz	r0, b5ae0 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   b5ad8:	2500      	movs	r5, #0
}
   b5ada:	4628      	mov	r0, r5
   b5adc:	b003      	add	sp, #12
   b5ade:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   b5ae0:	7823      	ldrb	r3, [r4, #0]
   b5ae2:	079b      	lsls	r3, r3, #30
   b5ae4:	d404      	bmi.n	b5af0 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   b5ae6:	7823      	ldrb	r3, [r4, #0]
   b5ae8:	f023 0301 	bic.w	r3, r3, #1
   b5aec:	7023      	strb	r3, [r4, #0]
   b5aee:	e7f4      	b.n	b5ada <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   b5af0:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   b5af4:	6919      	ldr	r1, [r3, #16]
   b5af6:	4401      	add	r1, r0
   b5af8:	6818      	ldr	r0, [r3, #0]
   b5afa:	f000 fb72 	bl	b61e2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   b5afe:	2800      	cmp	r0, #0
   b5b00:	d1f1      	bne.n	b5ae6 <_ZN8FatCache4syncEv+0x2e>
   b5b02:	e7e9      	b.n	b5ad8 <_ZN8FatCache4syncEv+0x20>
  return true;
   b5b04:	2501      	movs	r5, #1
   b5b06:	e7e8      	b.n	b5ada <_ZN8FatCache4syncEv+0x22>

000b5b08 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5b08:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   b5b0a:	6883      	ldr	r3, [r0, #8]
   b5b0c:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   b5b0e:	4604      	mov	r4, r0
   b5b10:	460e      	mov	r6, r1
   b5b12:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   b5b14:	d009      	beq.n	b5b2a <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   b5b16:	f7ff ffcf 	bl	b5ab8 <_ZN8FatCache4syncEv>
   b5b1a:	b908      	cbnz	r0, b5b20 <_ZN8FatCache4readEmh+0x18>
  return 0;
   b5b1c:	2000      	movs	r0, #0
}
   b5b1e:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   b5b20:	076b      	lsls	r3, r5, #29
   b5b22:	d50a      	bpl.n	b5b3a <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   b5b24:	2300      	movs	r3, #0
   b5b26:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   b5b28:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   b5b2a:	7822      	ldrb	r2, [r4, #0]
   b5b2c:	f005 0503 	and.w	r5, r5, #3
   b5b30:	4620      	mov	r0, r4
   b5b32:	4315      	orrs	r5, r2
   b5b34:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   b5b38:	e7f1      	b.n	b5b1e <_ZN8FatCache4readEmh+0x16>
    return m_blockDev->readBlock(block, dst);
   b5b3a:	6863      	ldr	r3, [r4, #4]
   b5b3c:	f104 020c 	add.w	r2, r4, #12
   b5b40:	6818      	ldr	r0, [r3, #0]
   b5b42:	4631      	mov	r1, r6
   b5b44:	f000 fac4 	bl	b60d0 <_ZN9SdSpiCard9readBlockEmPh>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   b5b48:	2800      	cmp	r0, #0
   b5b4a:	d1eb      	bne.n	b5b24 <_ZN8FatCache4readEmh+0x1c>
   b5b4c:	e7e6      	b.n	b5b1c <_ZN8FatCache4readEmh+0x14>

000b5b4e <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   b5b4e:	7983      	ldrb	r3, [r0, #6]
   b5b50:	6940      	ldr	r0, [r0, #20]
   b5b52:	3902      	subs	r1, #2
   b5b54:	4099      	lsls	r1, r3
}
   b5b56:	4408      	add	r0, r1
   b5b58:	4770      	bx	lr

000b5b5a <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5b5a:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   b5b5c:	b570      	push	{r4, r5, r6, lr}
   b5b5e:	4605      	mov	r5, r0
   b5b60:	460c      	mov	r4, r1
   b5b62:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5b64:	d802      	bhi.n	b5b6c <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   b5b66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   b5b6a:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5b6c:	69c3      	ldr	r3, [r0, #28]
   b5b6e:	428b      	cmp	r3, r1
   b5b70:	d3f9      	bcc.n	b5b66 <_ZN9FatVolume6fatGetEmPm+0xc>
    return m_fatType;
   b5b72:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5b74:	2b20      	cmp	r3, #32
   b5b76:	d116      	bne.n	b5ba6 <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   b5b78:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5b7a:	2202      	movs	r2, #2
   b5b7c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5b80:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5b84:	f7ff ffc0 	bl	b5b08 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5b88:	2800      	cmp	r0, #0
   b5b8a:	d0ec      	beq.n	b5b66 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   b5b8c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5b90:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   b5b94:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   b5b98:	69ea      	ldr	r2, [r5, #28]
   b5b9a:	429a      	cmp	r2, r3
  *value = next;
   b5b9c:	bf26      	itte	cs
   b5b9e:	6033      	strcs	r3, [r6, #0]
  return 1;
   b5ba0:	2001      	movcs	r0, #1
    return 0;
   b5ba2:	2000      	movcc	r0, #0
   b5ba4:	e7e1      	b.n	b5b6a <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   b5ba6:	2b10      	cmp	r3, #16
   b5ba8:	d1dd      	bne.n	b5b66 <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5baa:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5bae:	6981      	ldr	r1, [r0, #24]
   b5bb0:	2202      	movs	r2, #2
   b5bb2:	4419      	add	r1, r3
   b5bb4:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5bb8:	f7ff ffa6 	bl	b5b08 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5bbc:	2800      	cmp	r0, #0
   b5bbe:	d0d2      	beq.n	b5b66 <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   b5bc0:	b2e4      	uxtb	r4, r4
   b5bc2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   b5bc6:	e7e7      	b.n	b5b98 <_ZN9FatVolume6fatGetEmPm+0x3e>

000b5bc8 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   b5bc8:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   b5bca:	b538      	push	{r3, r4, r5, lr}
   b5bcc:	460c      	mov	r4, r1
   b5bce:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   b5bd0:	d801      	bhi.n	b5bd6 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   b5bd2:	2000      	movs	r0, #0
}
   b5bd4:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   b5bd6:	69c3      	ldr	r3, [r0, #28]
   b5bd8:	428b      	cmp	r3, r1
   b5bda:	d3fa      	bcc.n	b5bd2 <_ZN9FatVolume6fatPutEmm+0xa>
    return m_fatType;
   b5bdc:	79c3      	ldrb	r3, [r0, #7]
  if (fatType() == 32) {
   b5bde:	2b20      	cmp	r3, #32
   b5be0:	d10f      	bne.n	b5c02 <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   b5be2:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   b5be4:	2203      	movs	r2, #3
   b5be6:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   b5bea:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5bee:	f7ff ff8b 	bl	b5b08 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5bf2:	2800      	cmp	r0, #0
   b5bf4:	d0ed      	beq.n	b5bd2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   b5bf6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   b5bfa:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   b5bfe:	2001      	movs	r0, #1
   b5c00:	e7e8      	b.n	b5bd4 <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   b5c02:	2b10      	cmp	r3, #16
   b5c04:	d1e5      	bne.n	b5bd2 <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   b5c06:	f3c1 2307 	ubfx	r3, r1, #8, #8
   b5c0a:	6981      	ldr	r1, [r0, #24]
   b5c0c:	2203      	movs	r2, #3
   b5c0e:	4419      	add	r1, r3
   b5c10:	f500 700c 	add.w	r0, r0, #560	; 0x230
   b5c14:	f7ff ff78 	bl	b5b08 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5c18:	2800      	cmp	r0, #0
   b5c1a:	d0da      	beq.n	b5bd2 <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   b5c1c:	b2e4      	uxtb	r4, r4
   b5c1e:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   b5c22:	e7ec      	b.n	b5bfe <_ZN9FatVolume6fatPutEmm+0x36>

000b5c24 <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b5c24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   b5c28:	68c4      	ldr	r4, [r0, #12]
   b5c2a:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   b5c2c:	4605      	mov	r5, r0
   b5c2e:	460e      	mov	r6, r1
   b5c30:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   b5c32:	d301      	bcc.n	b5c38 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   b5c34:	2701      	movs	r7, #1
   b5c36:	e001      	b.n	b5c3c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b5c38:	460c      	mov	r4, r1
    setStart = false;
   b5c3a:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   b5c3c:	69eb      	ldr	r3, [r5, #28]
    find++;
   b5c3e:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   b5c40:	42a3      	cmp	r3, r4
   b5c42:	d202      	bcs.n	b5c4a <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   b5c44:	b9c7      	cbnz	r7, b5c78 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   b5c46:	68ec      	ldr	r4, [r5, #12]
   b5c48:	e7f4      	b.n	b5c34 <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   b5c4a:	42a6      	cmp	r6, r4
   b5c4c:	d014      	beq.n	b5c78 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   b5c4e:	aa01      	add	r2, sp, #4
   b5c50:	4621      	mov	r1, r4
   b5c52:	4628      	mov	r0, r5
   b5c54:	f7ff ff81 	bl	b5b5a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5c58:	2800      	cmp	r0, #0
   b5c5a:	db0d      	blt.n	b5c78 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   b5c5c:	d0ee      	beq.n	b5c3c <_ZN9FatVolume15allocateClusterEmPm+0x18>
   b5c5e:	9b01      	ldr	r3, [sp, #4]
   b5c60:	2b00      	cmp	r3, #0
   b5c62:	d1eb      	bne.n	b5c3c <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   b5c64:	b107      	cbz	r7, b5c68 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   b5c66:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   b5c68:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   b5c6c:	4621      	mov	r1, r4
   b5c6e:	4628      	mov	r0, r5
   b5c70:	f7ff ffaa 	bl	b5bc8 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   b5c74:	4607      	mov	r7, r0
   b5c76:	b920      	cbnz	r0, b5c82 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   b5c78:	2700      	movs	r7, #0
}
   b5c7a:	4638      	mov	r0, r7
   b5c7c:	b002      	add	sp, #8
   b5c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   b5c82:	b916      	cbnz	r6, b5c8a <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   b5c84:	f8c8 4000 	str.w	r4, [r8]
  return true;
   b5c88:	e7f7      	b.n	b5c7a <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   b5c8a:	4622      	mov	r2, r4
   b5c8c:	4631      	mov	r1, r6
   b5c8e:	4628      	mov	r0, r5
   b5c90:	f7ff ff9a 	bl	b5bc8 <_ZN9FatVolume6fatPutEmm>
   b5c94:	2800      	cmp	r0, #0
   b5c96:	d1f5      	bne.n	b5c84 <_ZN9FatVolume15allocateClusterEmPm+0x60>
   b5c98:	e7ee      	b.n	b5c78 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000b5c9a <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   b5c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b5c9c:	4605      	mov	r5, r0
   b5c9e:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   b5ca0:	aa01      	add	r2, sp, #4
   b5ca2:	4621      	mov	r1, r4
   b5ca4:	4628      	mov	r0, r5
   b5ca6:	f7ff ff58 	bl	b5b5a <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   b5caa:	1e06      	subs	r6, r0, #0
   b5cac:	db10      	blt.n	b5cd0 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   b5cae:	2200      	movs	r2, #0
   b5cb0:	4621      	mov	r1, r4
   b5cb2:	4628      	mov	r0, r5
   b5cb4:	f7ff ff88 	bl	b5bc8 <_ZN9FatVolume6fatPutEmm>
   b5cb8:	b150      	cbz	r0, b5cd0 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   b5cba:	68eb      	ldr	r3, [r5, #12]
   b5cbc:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   b5cbe:	bf24      	itt	cs
   b5cc0:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   b5cc4:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   b5cc6:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   b5cc8:	2e00      	cmp	r6, #0
   b5cca:	d1e9      	bne.n	b5ca0 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   b5ccc:	b002      	add	sp, #8
   b5cce:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5cd0:	2000      	movs	r0, #0
   b5cd2:	e7fb      	b.n	b5ccc <_ZN9FatVolume9freeChainEm+0x32>

000b5cd4 <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   b5cd4:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   b5cd6:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   b5cd8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   b5cda:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   b5cdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   b5ce0:	4604      	mov	r4, r0
  m_fatType = 0;
   b5ce2:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   b5ce4:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   b5ce8:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   b5cea:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   b5cee:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   b5cf0:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   b5cf4:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   b5cf8:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   b5cfc:	460d      	mov	r5, r1
   b5cfe:	b1b9      	cbz	r1, b5d30 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   b5d00:	2904      	cmp	r1, #4
   b5d02:	d901      	bls.n	b5d08 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   b5d04:	2000      	movs	r0, #0
}
   b5d06:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   b5d08:	4611      	mov	r1, r2
   b5d0a:	4630      	mov	r0, r6
   b5d0c:	f7ff fefc 	bl	b5b08 <_ZN8FatCache4readEmh>
    if (!pc) {
   b5d10:	2800      	cmp	r0, #0
   b5d12:	d0f7      	beq.n	b5d04 <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   b5d14:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   b5d18:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   b5d1c:	065b      	lsls	r3, r3, #25
   b5d1e:	d1f1      	bne.n	b5d04 <_ZN9FatVolume4initEh+0x30>
   b5d20:	f105 011b 	add.w	r1, r5, #27
   b5d24:	eb00 1001 	add.w	r0, r0, r1, lsl #4
   b5d28:	f8d0 5006 	ldr.w	r5, [r0, #6]
   b5d2c:	2d00      	cmp	r5, #0
   b5d2e:	d0e9      	beq.n	b5d04 <_ZN9FatVolume4initEh+0x30>
   b5d30:	2200      	movs	r2, #0
   b5d32:	4629      	mov	r1, r5
   b5d34:	4630      	mov	r0, r6
   b5d36:	f7ff fee7 	bl	b5b08 <_ZN8FatCache4readEmh>
  if (!pc) {
   b5d3a:	2800      	cmp	r0, #0
   b5d3c:	d0e2      	beq.n	b5d04 <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   b5d3e:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   b5d42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   b5d46:	d1dd      	bne.n	b5d04 <_ZN9FatVolume4initEh+0x30>
   b5d48:	7c03      	ldrb	r3, [r0, #16]
   b5d4a:	2b02      	cmp	r3, #2
   b5d4c:	d1da      	bne.n	b5d04 <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   b5d4e:	89c3      	ldrh	r3, [r0, #14]
   b5d50:	2b00      	cmp	r3, #0
   b5d52:	d0d7      	beq.n	b5d04 <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   b5d54:	7b41      	ldrb	r1, [r0, #13]
   b5d56:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   b5d58:	1e4b      	subs	r3, r1, #1
   b5d5a:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   b5d5c:	2300      	movs	r3, #0
   b5d5e:	71a3      	strb	r3, [r4, #6]
   b5d60:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b5d62:	2301      	movs	r3, #1
   b5d64:	4299      	cmp	r1, r3
   b5d66:	d007      	beq.n	b5d78 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   b5d68:	3e01      	subs	r6, #1
   b5d6a:	d0cb      	beq.n	b5d04 <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   b5d6c:	79a2      	ldrb	r2, [r4, #6]
   b5d6e:	005b      	lsls	r3, r3, #1
   b5d70:	3201      	adds	r2, #1
   b5d72:	b2db      	uxtb	r3, r3
   b5d74:	71a2      	strb	r2, [r4, #6]
   b5d76:	e7f5      	b.n	b5d64 <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   b5d78:	8ac1      	ldrh	r1, [r0, #22]
   b5d7a:	b901      	cbnz	r1, b5d7e <_ZN9FatVolume4initEh+0xaa>
   b5d7c:	6a41      	ldr	r1, [r0, #36]	; 0x24
   b5d7e:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   b5d80:	89c3      	ldrh	r3, [r0, #14]
   b5d82:	442b      	add	r3, r5
   b5d84:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   b5d86:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   b5d8a:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   b5d8c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   b5d90:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   b5d92:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   b5d96:	0149      	lsls	r1, r1, #5
   b5d98:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   b5d9c:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   b5da0:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   b5da2:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   b5da6:	b902      	cbnz	r2, b5daa <_ZN9FatVolume4initEh+0xd6>
   b5da8:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b5daa:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   b5dac:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   b5dae:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   b5db0:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   b5db2:	1c4b      	adds	r3, r1, #1
   b5db4:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   b5db6:	f640 73f4 	movw	r3, #4084	; 0xff4
   b5dba:	4299      	cmp	r1, r3
   b5dbc:	d802      	bhi.n	b5dc4 <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   b5dbe:	230c      	movs	r3, #12
   b5dc0:	71e3      	strb	r3, [r4, #7]
   b5dc2:	e79f      	b.n	b5d04 <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   b5dc4:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   b5dc8:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   b5dca:	bf85      	ittet	hi
   b5dcc:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   b5dce:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   b5dd0:	2310      	movls	r3, #16
    m_fatType = 32;
   b5dd2:	2320      	movhi	r3, #32
   b5dd4:	71e3      	strb	r3, [r4, #7]
  return true;
   b5dd6:	2001      	movs	r0, #1
   b5dd8:	e795      	b.n	b5d06 <_ZN9FatVolume4initEh+0x32>

000b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
   b5dda:	f000 bacb 	b.w	b6374 <_ZN14SdSpiAltDriver4sendEh>

000b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>:
    return m_spiDriver->receive();
   b5dde:	f000 baae 	b.w	b633e <_ZN14SdSpiAltDriver7receiveEv>
	...

000b5de4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5de4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5de6:	4e0e      	ldr	r6, [pc, #56]	; (b5e20 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   b5de8:	460d      	mov	r5, r1
   b5dea:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   b5dec:	f000 faf2 	bl	b63d4 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   b5df0:	6833      	ldr	r3, [r6, #0]
   b5df2:	1ac0      	subs	r0, r0, r3
   b5df4:	4b0b      	ldr	r3, [pc, #44]	; (b5e24 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   b5df6:	4298      	cmp	r0, r3
   b5df8:	d908      	bls.n	b5e0c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5dfa:	f000 faf3 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5dfe:	4b0a      	ldr	r3, [pc, #40]	; (b5e28 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   b5e00:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static bool process(void) {
            application_checkin();
            return spark_process();
   b5e02:	f000 fc7b 	bl	b66fc <spark_process>
   b5e06:	f000 fae5 	bl	b63d4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   b5e0a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b5e0c:	f000 faea 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   b5e10:	b280      	uxth	r0, r0
   b5e12:	1b40      	subs	r0, r0, r5
}
   b5e14:	42a0      	cmp	r0, r4
   b5e16:	bfd4      	ite	le
   b5e18:	2000      	movle	r0, #0
   b5e1a:	2001      	movgt	r0, #1
   b5e1c:	bd70      	pop	{r4, r5, r6, pc}
   b5e1e:	bf00      	nop
   b5e20:	2003e6bc 	.word	0x2003e6bc
   b5e24:	000186a0 	.word	0x000186a0
   b5e28:	2003e728 	.word	0x2003e728

000b5e2c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   b5e2c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   b5e2e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   b5e30:	4604      	mov	r4, r0
  if (!m_spiActive) {
   b5e32:	b94d      	cbnz	r5, b5e48 <_ZN9SdSpiCard8spiStartEv+0x1c>
    m_spiDriver->activate();
   b5e34:	6840      	ldr	r0, [r0, #4]
   b5e36:	f000 fa6b 	bl	b6310 <_ZN14SdSpiAltDriver8activateEv>
     digitalWrite(m_csPin, LOW);
   b5e3a:	6863      	ldr	r3, [r4, #4]
   b5e3c:	4629      	mov	r1, r5
   b5e3e:	7d18      	ldrb	r0, [r3, #20]
   b5e40:	f001 fa6b 	bl	b731a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   b5e44:	2301      	movs	r3, #1
   b5e46:	7223      	strb	r3, [r4, #8]
  }
}
   b5e48:	bd38      	pop	{r3, r4, r5, pc}

000b5e4a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   b5e4a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   b5e4c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   b5e4e:	4604      	mov	r4, r0
  if (m_spiActive) {
   b5e50:	b16b      	cbz	r3, b5e6e <_ZN9SdSpiCard7spiStopEv+0x24>
    digitalWrite(m_csPin, HIGH);
   b5e52:	6843      	ldr	r3, [r0, #4]
   b5e54:	2101      	movs	r1, #1
   b5e56:	7d18      	ldrb	r0, [r3, #20]
   b5e58:	f001 fa5f 	bl	b731a <digitalWrite>
    spiUnselect();
    spiSend(0XFF);
   b5e5c:	6860      	ldr	r0, [r4, #4]
   b5e5e:	21ff      	movs	r1, #255	; 0xff
   b5e60:	f7ff ffbb 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
    m_spiDriver->deactivate();
   b5e64:	6860      	ldr	r0, [r4, #4]
   b5e66:	f000 fa67 	bl	b6338 <_ZN14SdSpiAltDriver10deactivateEv>
    spiDeactivate();
    m_spiActive = false;
   b5e6a:	2300      	movs	r3, #0
   b5e6c:	7223      	strb	r3, [r4, #8]
  }
}
   b5e6e:	bd10      	pop	{r4, pc}

000b5e70 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   b5e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e72:	4604      	mov	r4, r0
   b5e74:	460d      	mov	r5, r1
   b5e76:	4616      	mov	r6, r2
   b5e78:	f000 fab4 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   b5e7c:	b287      	uxth	r7, r0
  while ((m_status = spiReceive()) == 0XFF) {
   b5e7e:	6860      	ldr	r0, [r4, #4]
   b5e80:	f7ff ffad 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5e84:	28ff      	cmp	r0, #255	; 0xff
   b5e86:	7260      	strb	r0, [r4, #9]
   b5e88:	d10e      	bne.n	b5ea8 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   b5e8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b5e8e:	4639      	mov	r1, r7
   b5e90:	4620      	mov	r0, r4
   b5e92:	f7ff ffa7 	bl	b5de4 <_ZN9SdSpiCard10isTimedOutEtt>
   b5e96:	2800      	cmp	r0, #0
   b5e98:	d0f1      	beq.n	b5e7e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   b5e9a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   b5e9c:	4620      	mov	r0, r4
   b5e9e:	7023      	strb	r3, [r4, #0]
   b5ea0:	f7ff ffd3 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5ea4:	2000      	movs	r0, #0
}
   b5ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   b5ea8:	28fe      	cmp	r0, #254	; 0xfe
   b5eaa:	d001      	beq.n	b5eb0 <_ZN9SdSpiCard8readDataEPhj+0x40>
   b5eac:	2350      	movs	r3, #80	; 0x50
   b5eae:	e7f5      	b.n	b5e9c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   b5eb0:	6860      	ldr	r0, [r4, #4]
   b5eb2:	4632      	mov	r2, r6
   b5eb4:	4629      	mov	r1, r5
   b5eb6:	f000 fa47 	bl	b6348 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   b5eba:	7260      	strb	r0, [r4, #9]
   b5ebc:	b108      	cbz	r0, b5ec2 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   b5ebe:	2360      	movs	r3, #96	; 0x60
   b5ec0:	e7ec      	b.n	b5e9c <_ZN9SdSpiCard8readDataEPhj+0x2c>
  spiReceive();
   b5ec2:	6860      	ldr	r0, [r4, #4]
   b5ec4:	f7ff ff8b 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiReceive();
   b5ec8:	6860      	ldr	r0, [r4, #4]
   b5eca:	f7ff ff88 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  return true;
   b5ece:	2001      	movs	r0, #1
   b5ed0:	e7e9      	b.n	b5ea6 <_ZN9SdSpiCard8readDataEPhj+0x36>

000b5ed2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   b5ed2:	b570      	push	{r4, r5, r6, lr}
   b5ed4:	4604      	mov	r4, r0
   b5ed6:	460e      	mov	r6, r1
   b5ed8:	f000 fa84 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
   b5edc:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   b5ede:	4632      	mov	r2, r6
   b5ee0:	4629      	mov	r1, r5
   b5ee2:	4620      	mov	r0, r4
   b5ee4:	f7ff ff7e 	bl	b5de4 <_ZN9SdSpiCard10isTimedOutEtt>
   b5ee8:	b930      	cbnz	r0, b5ef8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
    if (spiReceive() == 0XFF) {
   b5eea:	6860      	ldr	r0, [r4, #4]
   b5eec:	f7ff ff77 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5ef0:	28ff      	cmp	r0, #255	; 0xff
   b5ef2:	d1f4      	bne.n	b5ede <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   b5ef4:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   b5ef6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   b5ef8:	2000      	movs	r0, #0
   b5efa:	e7fc      	b.n	b5ef6 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000b5efc <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   b5efe:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   b5f00:	9201      	str	r2, [sp, #4]
   b5f02:	4604      	mov	r4, r0
   b5f04:	460d      	mov	r5, r1
  if (!m_spiActive) {
   b5f06:	b90b      	cbnz	r3, b5f0c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   b5f08:	f7ff ff90 	bl	b5e2c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   b5f0c:	b125      	cbz	r5, b5f18 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   b5f0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   b5f12:	4620      	mov	r0, r4
   b5f14:	f7ff ffdd 	bl	b5ed2 <_ZN9SdSpiCard11waitNotBusyEt>
  spiSend(cmd | 0x40);
   b5f18:	6860      	ldr	r0, [r4, #4]
   b5f1a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   b5f1e:	f7ff ff5c 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
   b5f22:	2603      	movs	r6, #3
    spiSend(pa[i]);
   b5f24:	af01      	add	r7, sp, #4
   b5f26:	5db9      	ldrb	r1, [r7, r6]
   b5f28:	6860      	ldr	r0, [r4, #4]
   b5f2a:	f7ff ff56 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (int8_t i = 3; i >= 0; i--) {
   b5f2e:	3e01      	subs	r6, #1
   b5f30:	d2f9      	bcs.n	b5f26 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   b5f32:	2d00      	cmp	r5, #0
   b5f34:	6860      	ldr	r0, [r4, #4]
   b5f36:	bf0c      	ite	eq
   b5f38:	2195      	moveq	r1, #149	; 0x95
   b5f3a:	2187      	movne	r1, #135	; 0x87
   b5f3c:	f7ff ff4d 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiReceive();
   b5f40:	6860      	ldr	r0, [r4, #4]
   b5f42:	f7ff ff4c 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5f46:	250b      	movs	r5, #11
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   b5f48:	6860      	ldr	r0, [r4, #4]
   b5f4a:	f7ff ff48 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b5f4e:	0603      	lsls	r3, r0, #24
   b5f50:	7260      	strb	r0, [r4, #9]
   b5f52:	d503      	bpl.n	b5f5c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   b5f54:	3d01      	subs	r5, #1
   b5f56:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5f5a:	d1f5      	bne.n	b5f48 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   b5f5c:	b003      	add	sp, #12
   b5f5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5f60 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   b5f60:	b570      	push	{r4, r5, r6, lr}
   b5f62:	4604      	mov	r4, r0
   b5f64:	460d      	mov	r5, r1
   b5f66:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   b5f68:	2137      	movs	r1, #55	; 0x37
   b5f6a:	2200      	movs	r2, #0
   b5f6c:	f7ff ffc6 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   b5f70:	4632      	mov	r2, r6
   b5f72:	4629      	mov	r1, r5
   b5f74:	4620      	mov	r0, r4
  }
   b5f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   b5f7a:	f7ff bfbf 	b.w	b5efc <_ZN9SdSpiCard11cardCommandEhm>
	...

000b5f80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5f80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   b5f84:	2500      	movs	r5, #0
   b5f86:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   b5f88:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   b5f8a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   b5f8c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   b5f8e:	4604      	mov	r4, r0
   b5f90:	4690      	mov	r8, r2
   b5f92:	461e      	mov	r6, r3
   b5f94:	f000 fa26 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   b5f98:	4641      	mov	r1, r8
   b5f9a:	4607      	mov	r7, r0
   b5f9c:	6860      	ldr	r0, [r4, #4]
   b5f9e:	f000 f9bb 	bl	b6318 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   b5fa2:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   b5fa4:	4a49      	ldr	r2, [pc, #292]	; (b60cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   b5fa6:	721d      	strb	r5, [r3, #8]
   b5fa8:	2501      	movs	r5, #1
   b5faa:	60da      	str	r2, [r3, #12]
   b5fac:	821d      	strh	r5, [r3, #16]
  spiStart();
   b5fae:	4620      	mov	r0, r4
   b5fb0:	f7ff ff3c 	bl	b5e2c <_ZN9SdSpiCard8spiStartEv>
   b5fb4:	6863      	ldr	r3, [r4, #4]
   b5fb6:	4629      	mov	r1, r5
   b5fb8:	7d18      	ldrb	r0, [r3, #20]
   b5fba:	f001 f9ae 	bl	b731a <digitalWrite>
   b5fbe:	250a      	movs	r5, #10
    spiSend(0XFF);
   b5fc0:	6860      	ldr	r0, [r4, #4]
   b5fc2:	21ff      	movs	r1, #255	; 0xff
  for (uint8_t i = 0; i < 10; i++) {
   b5fc4:	3d01      	subs	r5, #1
    spiSend(0XFF);
   b5fc6:	f7ff ff08 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
  for (uint8_t i = 0; i < 10; i++) {
   b5fca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5fce:	d1f7      	bne.n	b5fc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
     digitalWrite(m_csPin, LOW);
   b5fd0:	6863      	ldr	r3, [r4, #4]
   b5fd2:	4629      	mov	r1, r5
   b5fd4:	7d18      	ldrb	r0, [r3, #20]
   b5fd6:	f001 f9a0 	bl	b731a <digitalWrite>
  }
   b5fda:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   b5fdc:	2200      	movs	r2, #0
   b5fde:	4611      	mov	r1, r2
   b5fe0:	4620      	mov	r0, r4
   b5fe2:	f7ff ff8b 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b5fe6:	2801      	cmp	r0, #1
   b5fe8:	4680      	mov	r8, r0
   b5fea:	d018      	beq.n	b601e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   b5fec:	3d01      	subs	r5, #1
   b5fee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   b5ff2:	d107      	bne.n	b6004 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   b5ff4:	2320      	movs	r3, #32
  spiStop();
   b5ff6:	4620      	mov	r0, r4
   b5ff8:	7023      	strb	r3, [r4, #0]
   b5ffa:	f7ff ff26 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b5ffe:	2000      	movs	r0, #0
}
   b6000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiSend(STOP_TRAN_TOKEN);
   b6004:	6860      	ldr	r0, [r4, #4]
   b6006:	21fd      	movs	r1, #253	; 0xfd
   b6008:	f7ff fee7 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
   b600c:	f44f 7802 	mov.w	r8, #520	; 0x208
      spiReceive();
   b6010:	6860      	ldr	r0, [r4, #4]
   b6012:	f7ff fee4 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (int i = 0; i < 520; i++) {
   b6016:	f1b8 0801 	subs.w	r8, r8, #1
   b601a:	d1f9      	bne.n	b6010 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   b601c:	e7de      	b.n	b5fdc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   b601e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   b6022:	2108      	movs	r1, #8
   b6024:	4620      	mov	r0, r4
   b6026:	f7ff ff69 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b602a:	2805      	cmp	r0, #5
   b602c:	d114      	bne.n	b6058 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   b602e:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6032:	2500      	movs	r5, #0
   b6034:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   b6036:	462a      	mov	r2, r5
   b6038:	2129      	movs	r1, #41	; 0x29
   b603a:	4620      	mov	r0, r4
   b603c:	f7ff ff90 	bl	b5f60 <_ZN9SdSpiCard8cardAcmdEhm>
   b6040:	4602      	mov	r2, r0
   b6042:	b1d8      	cbz	r0, b607c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   b6044:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   b6048:	4639      	mov	r1, r7
   b604a:	4620      	mov	r0, r4
   b604c:	f7ff feca 	bl	b5de4 <_ZN9SdSpiCard10isTimedOutEtt>
   b6050:	2800      	cmp	r0, #0
   b6052:	d0f0      	beq.n	b6036 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   b6054:	2343      	movs	r3, #67	; 0x43
   b6056:	e7ce      	b.n	b5ff6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   b6058:	2504      	movs	r5, #4
      m_status = spiReceive();
   b605a:	6860      	ldr	r0, [r4, #4]
   b605c:	f7ff febf 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
    for (uint8_t i = 0; i < 4; i++) {
   b6060:	3d01      	subs	r5, #1
   b6062:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   b6066:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   b6068:	d1f7      	bne.n	b605a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   b606a:	28aa      	cmp	r0, #170	; 0xaa
   b606c:	d104      	bne.n	b6078 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   b606e:	2302      	movs	r3, #2
   b6070:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   b6072:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   b6076:	e7dd      	b.n	b6034 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   b6078:	2325      	movs	r3, #37	; 0x25
   b607a:	e7bc      	b.n	b5ff6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   b607c:	7aa3      	ldrb	r3, [r4, #10]
   b607e:	2b02      	cmp	r3, #2
   b6080:	d118      	bne.n	b60b4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   b6082:	213a      	movs	r1, #58	; 0x3a
   b6084:	4620      	mov	r0, r4
   b6086:	f7ff ff39 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b608a:	b108      	cbz	r0, b6090 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   b608c:	2337      	movs	r3, #55	; 0x37
   b608e:	e7b2      	b.n	b5ff6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    if ((spiReceive() & 0XC0) == 0XC0) {
   b6090:	6860      	ldr	r0, [r4, #4]
   b6092:	f7ff fea4 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6096:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   b609a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   b609c:	bf04      	itt	eq
   b609e:	2303      	moveq	r3, #3
   b60a0:	72a3      	strbeq	r3, [r4, #10]
      spiReceive();
   b60a2:	6860      	ldr	r0, [r4, #4]
   b60a4:	f7ff fe9b 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b60a8:	6860      	ldr	r0, [r4, #4]
   b60aa:	f7ff fe98 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b60ae:	6860      	ldr	r0, [r4, #4]
   b60b0:	f7ff fe95 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
  spiStop();
   b60b4:	4620      	mov	r0, r4
   b60b6:	f7ff fec8 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   b60ba:	6863      	ldr	r3, [r4, #4]
   b60bc:	7930      	ldrb	r0, [r6, #4]
   b60be:	68b1      	ldr	r1, [r6, #8]
   b60c0:	89b2      	ldrh	r2, [r6, #12]
   b60c2:	821a      	strh	r2, [r3, #16]
   b60c4:	7218      	strb	r0, [r3, #8]
   b60c6:	60d9      	str	r1, [r3, #12]
  return true;
   b60c8:	2001      	movs	r0, #1
   b60ca:	e799      	b.n	b6000 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   b60cc:	0003d090 	.word	0x0003d090

000b60d0 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b60d0:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b60d2:	7a83      	ldrb	r3, [r0, #10]
   b60d4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b60d6:	bf18      	it	ne
   b60d8:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b60da:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   b60dc:	460a      	mov	r2, r1
   b60de:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   b60e0:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   b60e2:	f7ff ff0b 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b60e6:	b130      	cbz	r0, b60f6 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   b60e8:	2330      	movs	r3, #48	; 0x30
   b60ea:	7023      	strb	r3, [r4, #0]
  spiStop();
   b60ec:	4620      	mov	r0, r4
   b60ee:	f7ff feac 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b60f2:	2500      	movs	r5, #0
   b60f4:	e00b      	b.n	b610e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   b60f6:	4629      	mov	r1, r5
   b60f8:	f44f 7200 	mov.w	r2, #512	; 0x200
   b60fc:	4620      	mov	r0, r4
   b60fe:	f7ff feb7 	bl	b5e70 <_ZN9SdSpiCard8readDataEPhj>
   b6102:	4605      	mov	r5, r0
   b6104:	2800      	cmp	r0, #0
   b6106:	d0f1      	beq.n	b60ec <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   b6108:	4620      	mov	r0, r4
   b610a:	f7ff fe9e 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
}
   b610e:	4628      	mov	r0, r5
   b6110:	bd38      	pop	{r3, r4, r5, pc}

000b6112 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6112:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b6114:	7a83      	ldrb	r3, [r0, #10]
   b6116:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6118:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b611a:	bf18      	it	ne
   b611c:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   b611e:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   b6120:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   b6122:	f7ff feeb 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b6126:	b130      	cbz	r0, b6136 <_ZN9SdSpiCard9readStartEm+0x24>
   b6128:	2331      	movs	r3, #49	; 0x31
  spiStop();
   b612a:	4620      	mov	r0, r4
   b612c:	7023      	strb	r3, [r4, #0]
   b612e:	f7ff fe8c 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6132:	2000      	movs	r0, #0
}
   b6134:	bd10      	pop	{r4, pc}
  return true;
   b6136:	2001      	movs	r0, #1
   b6138:	e7fc      	b.n	b6134 <_ZN9SdSpiCard9readStartEm+0x22>

000b613a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   b613a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   b613c:	2200      	movs	r2, #0
   b613e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   b6140:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   b6142:	f7ff fedb 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b6146:	b130      	cbz	r0, b6156 <_ZN9SdSpiCard8readStopEv+0x1c>
   b6148:	2328      	movs	r3, #40	; 0x28
  spiStop();
   b614a:	4620      	mov	r0, r4
   b614c:	7023      	strb	r3, [r4, #0]
   b614e:	f7ff fe7c 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6152:	2000      	movs	r0, #0
}
   b6154:	bd10      	pop	{r4, pc}
  spiStop();
   b6156:	4620      	mov	r0, r4
   b6158:	f7ff fe77 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return true;
   b615c:	2001      	movs	r0, #1
   b615e:	e7f9      	b.n	b6154 <_ZN9SdSpiCard8readStopEv+0x1a>

000b6160 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   b6160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6162:	4604      	mov	r4, r0
   b6164:	4616      	mov	r6, r2
   b6166:	461f      	mov	r7, r3
  if (!readStart(block)) {
   b6168:	f7ff ffd3 	bl	b6112 <_ZN9SdSpiCard9readStartEm>
   b616c:	b168      	cbz	r0, b618a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   b616e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   b6170:	b2ab      	uxth	r3, r5
   b6172:	429f      	cmp	r7, r3
   b6174:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   b6178:	d909      	bls.n	b618e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   b617a:	f44f 7200 	mov.w	r2, #512	; 0x200
   b617e:	4620      	mov	r0, r4
   b6180:	f7ff fe76 	bl	b5e70 <_ZN9SdSpiCard8readDataEPhj>
   b6184:	3501      	adds	r5, #1
   b6186:	2800      	cmp	r0, #0
   b6188:	d1f2      	bne.n	b6170 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   b618a:	2000      	movs	r0, #0
   b618c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   b618e:	4620      	mov	r0, r4
}
   b6190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   b6194:	f7ff bfd1 	b.w	b613a <_ZN9SdSpiCard8readStopEv>

000b6198 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   b6198:	b538      	push	{r3, r4, r5, lr}
   b619a:	4604      	mov	r4, r0
   b619c:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
   b619e:	6840      	ldr	r0, [r0, #4]
   b61a0:	f7ff fe1b 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
   b61a4:	f44f 7200 	mov.w	r2, #512	; 0x200
   b61a8:	6860      	ldr	r0, [r4, #4]
   b61aa:	4629      	mov	r1, r5
   b61ac:	f000 f8e6 	bl	b637c <_ZN14SdSpiAltDriver4sendEPKhj>
  spiSend(src, 512);
  spiSend(crc >> 8);
   b61b0:	6860      	ldr	r0, [r4, #4]
   b61b2:	21ff      	movs	r1, #255	; 0xff
   b61b4:	f7ff fe11 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
  spiSend(crc & 0XFF);
   b61b8:	6860      	ldr	r0, [r4, #4]
   b61ba:	21ff      	movs	r1, #255	; 0xff
   b61bc:	f7ff fe0d 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>

  m_status = spiReceive();
   b61c0:	6860      	ldr	r0, [r4, #4]
   b61c2:	f7ff fe0c 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b61c6:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   b61c8:	f000 001f 	and.w	r0, r0, #31
   b61cc:	2805      	cmp	r0, #5
   b61ce:	d006      	beq.n	b61de <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   b61d0:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   b61d2:	4620      	mov	r0, r4
   b61d4:	7023      	strb	r3, [r4, #0]
   b61d6:	f7ff fe38 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b61da:	2000      	movs	r0, #0
}
   b61dc:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   b61de:	2001      	movs	r0, #1
   b61e0:	e7fc      	b.n	b61dc <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000b61e2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b61e2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   b61e4:	7a83      	ldrb	r3, [r0, #10]
   b61e6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   b61e8:	bf18      	it	ne
   b61ea:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b61ec:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   b61ee:	460a      	mov	r2, r1
   b61f0:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   b61f2:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   b61f4:	f7ff fe82 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b61f8:	4606      	mov	r6, r0
   b61fa:	b130      	cbz	r0, b620a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   b61fc:	2332      	movs	r3, #50	; 0x32
   b61fe:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6200:	4620      	mov	r0, r4
   b6202:	f7ff fe22 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b6206:	2500      	movs	r5, #0
   b6208:	e01f      	b.n	b624a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   b620a:	462a      	mov	r2, r5
   b620c:	21fe      	movs	r1, #254	; 0xfe
   b620e:	4620      	mov	r0, r4
   b6210:	f7ff ffc2 	bl	b6198 <_ZN9SdSpiCard9writeDataEhPKh>
   b6214:	2800      	cmp	r0, #0
   b6216:	d0f3      	beq.n	b6200 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6218:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   b621c:	4620      	mov	r0, r4
   b621e:	f7ff fe58 	bl	b5ed2 <_ZN9SdSpiCard11waitNotBusyEt>
   b6222:	4605      	mov	r5, r0
   b6224:	b908      	cbnz	r0, b622a <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   b6226:	235a      	movs	r3, #90	; 0x5a
   b6228:	e7e9      	b.n	b61fe <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   b622a:	4632      	mov	r2, r6
   b622c:	210d      	movs	r1, #13
   b622e:	4620      	mov	r0, r4
   b6230:	f7ff fe64 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b6234:	b108      	cbz	r0, b623a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   b6236:	2329      	movs	r3, #41	; 0x29
   b6238:	e7e1      	b.n	b61fe <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
   b623a:	6860      	ldr	r0, [r4, #4]
   b623c:	f7ff fdcf 	bl	b5dde <_ZN9SdSpiCard10spiReceiveEv.isra.0>
   b6240:	2800      	cmp	r0, #0
   b6242:	d1f8      	bne.n	b6236 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   b6244:	4620      	mov	r0, r4
   b6246:	f7ff fe00 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
}
   b624a:	4628      	mov	r0, r5
   b624c:	bd70      	pop	{r4, r5, r6, pc}

000b624e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   b624e:	b513      	push	{r0, r1, r4, lr}
   b6250:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6252:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   b6256:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b6258:	f7ff fe3b 	bl	b5ed2 <_ZN9SdSpiCard11waitNotBusyEt>
   b625c:	9a01      	ldr	r2, [sp, #4]
   b625e:	b930      	cbnz	r0, b626e <_ZN9SdSpiCard9writeDataEPKh+0x20>
   b6260:	235b      	movs	r3, #91	; 0x5b
   b6262:	7023      	strb	r3, [r4, #0]
  spiStop();
   b6264:	4620      	mov	r0, r4
   b6266:	f7ff fdf0 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b626a:	2000      	movs	r0, #0
   b626c:	e005      	b.n	b627a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   b626e:	21fc      	movs	r1, #252	; 0xfc
   b6270:	4620      	mov	r0, r4
   b6272:	f7ff ff91 	bl	b6198 <_ZN9SdSpiCard9writeDataEhPKh>
   b6276:	2800      	cmp	r0, #0
   b6278:	d0f4      	beq.n	b6264 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   b627a:	b002      	add	sp, #8
   b627c:	bd10      	pop	{r4, pc}

000b627e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b627e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   b6280:	7a83      	ldrb	r3, [r0, #10]
   b6282:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b6284:	460a      	mov	r2, r1
    blockNumber <<= 9;
   b6286:	bf18      	it	ne
   b6288:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   b628a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   b628c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   b628e:	f7ff fe35 	bl	b5efc <_ZN9SdSpiCard11cardCommandEhm>
   b6292:	b130      	cbz	r0, b62a2 <_ZN9SdSpiCard10writeStartEm+0x24>
   b6294:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   b6296:	4620      	mov	r0, r4
   b6298:	7023      	strb	r3, [r4, #0]
   b629a:	f7ff fdd6 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   b629e:	2000      	movs	r0, #0
}
   b62a0:	bd10      	pop	{r4, pc}
  return true;
   b62a2:	2001      	movs	r0, #1
   b62a4:	e7fc      	b.n	b62a0 <_ZN9SdSpiCard10writeStartEm+0x22>

000b62a6 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   b62a6:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b62a8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   b62ac:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   b62ae:	f7ff fe10 	bl	b5ed2 <_ZN9SdSpiCard11waitNotBusyEt>
   b62b2:	4605      	mov	r5, r0
   b62b4:	b930      	cbnz	r0, b62c4 <_ZN9SdSpiCard9writeStopEv+0x1e>
   b62b6:	2356      	movs	r3, #86	; 0x56
   b62b8:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   b62ba:	4620      	mov	r0, r4
   b62bc:	f7ff fdc5 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   b62c0:	4628      	mov	r0, r5
   b62c2:	bd38      	pop	{r3, r4, r5, pc}
  spiSend(STOP_TRAN_TOKEN);
   b62c4:	6860      	ldr	r0, [r4, #4]
   b62c6:	21fd      	movs	r1, #253	; 0xfd
   b62c8:	f7ff fd87 	bl	b5dda <_ZN9SdSpiCard7spiSendEh.isra.0>
   b62cc:	e7f5      	b.n	b62ba <_ZN9SdSpiCard9writeStopEv+0x14>

000b62ce <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   b62ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62d0:	4604      	mov	r4, r0
   b62d2:	4616      	mov	r6, r2
   b62d4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   b62d6:	f7ff ffd2 	bl	b627e <_ZN9SdSpiCard10writeStartEm>
   b62da:	b170      	cbz	r0, b62fa <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b62dc:	2500      	movs	r5, #0
   b62de:	42bd      	cmp	r5, r7
   b62e0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   b62e4:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   b62e6:	d004      	beq.n	b62f2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   b62e8:	f7ff ffb1 	bl	b624e <_ZN9SdSpiCard9writeDataEPKh>
   b62ec:	b128      	cbz	r0, b62fa <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   b62ee:	3501      	adds	r5, #1
   b62f0:	e7f5      	b.n	b62de <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   b62f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   b62f6:	f7ff bfd6 	b.w	b62a6 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   b62fa:	4620      	mov	r0, r4
   b62fc:	f7ff fda5 	bl	b5e4a <_ZN9SdSpiCard7spiStopEv>
}
   b6300:	2000      	movs	r0, #0
   b6302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6304 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   b6304:	4b01      	ldr	r3, [pc, #4]	; (b630c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   b6306:	2201      	movs	r2, #1
   b6308:	701a      	strb	r2, [r3, #0]
}
   b630a:	4770      	bx	lr
   b630c:	2003e6c0 	.word	0x2003e6c0

000b6310 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   b6310:	1d01      	adds	r1, r0, #4
   b6312:	6800      	ldr	r0, [r0, #0]
   b6314:	f000 bd58 	b.w	b6dc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000b6318 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   b6318:	b510      	push	{r4, lr}
   b631a:	4604      	mov	r4, r0
  m_csPin = csPin;
   b631c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   b631e:	6800      	ldr	r0, [r0, #0]
   b6320:	f000 fd24 	bl	b6d6c <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   b6324:	7d20      	ldrb	r0, [r4, #20]
   b6326:	2101      	movs	r1, #1
   b6328:	f000 ffe6 	bl	b72f8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   b632c:	7d20      	ldrb	r0, [r4, #20]
   b632e:	2101      	movs	r1, #1
}
   b6330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   b6334:	f000 bff1 	b.w	b731a <digitalWrite>

000b6338 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   b6338:	6800      	ldr	r0, [r0, #0]
   b633a:	f000 bd2b 	b.w	b6d94 <_ZN8SPIClass14endTransactionEv>

000b633e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   b633e:	6800      	ldr	r0, [r0, #0]
   b6340:	21ff      	movs	r1, #255	; 0xff
   b6342:	f000 bdaf 	b.w	b6ea4 <_ZN8SPIClass8transferEh>
	...

000b6348 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   b6348:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b634a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b634c:	4a07      	ldr	r2, [pc, #28]	; (b636c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   b634e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6350:	2500      	movs	r5, #0
   b6352:	4c07      	ldr	r4, [pc, #28]	; (b6370 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6354:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b6356:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   b6358:	460a      	mov	r2, r1
   b635a:	4629      	mov	r1, r5
   b635c:	f000 fda8 	bl	b6eb0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   b6360:	7823      	ldrb	r3, [r4, #0]
   b6362:	2b00      	cmp	r3, #0
   b6364:	d0fc      	beq.n	b6360 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   b6366:	2000      	movs	r0, #0
   b6368:	b003      	add	sp, #12
   b636a:	bd30      	pop	{r4, r5, pc}
   b636c:	000b6305 	.word	0x000b6305
   b6370:	2003e6c0 	.word	0x2003e6c0

000b6374 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   b6374:	6800      	ldr	r0, [r0, #0]
   b6376:	f000 bd95 	b.w	b6ea4 <_ZN8SPIClass8transferEh>
	...

000b637c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   b637c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b637e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6380:	4a06      	ldr	r2, [pc, #24]	; (b639c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   b6382:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   b6384:	2500      	movs	r5, #0
   b6386:	4c06      	ldr	r4, [pc, #24]	; (b63a0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b6388:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   b638a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   b638c:	462a      	mov	r2, r5
   b638e:	f000 fd8f 	bl	b6eb0 <_ZN8SPIClass8transferEPKvPvjPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   b6392:	7823      	ldrb	r3, [r4, #0]
   b6394:	2b00      	cmp	r3, #0
   b6396:	d0fc      	beq.n	b6392 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   b6398:	b003      	add	sp, #12
   b639a:	bd30      	pop	{r4, r5, pc}
   b639c:	000b6305 	.word	0x000b6305
   b63a0:	2003e6c0 	.word	0x2003e6c0

000b63a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b63a4:	b508      	push	{r3, lr}
   b63a6:	4b02      	ldr	r3, [pc, #8]	; (b63b0 <os_mutex_recursive_create+0xc>)
   b63a8:	681b      	ldr	r3, [r3, #0]
   b63aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b63ac:	9301      	str	r3, [sp, #4]
   b63ae:	bd08      	pop	{r3, pc}
   b63b0:	00030248 	.word	0x00030248

000b63b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b63b4:	b508      	push	{r3, lr}
   b63b6:	4b02      	ldr	r3, [pc, #8]	; (b63c0 <HAL_RNG_GetRandomNumber+0xc>)
   b63b8:	681b      	ldr	r3, [r3, #0]
   b63ba:	685b      	ldr	r3, [r3, #4]
   b63bc:	9301      	str	r3, [sp, #4]
   b63be:	bd08      	pop	{r3, pc}
   b63c0:	00030218 	.word	0x00030218

000b63c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b63c4:	b508      	push	{r3, lr}
   b63c6:	4b02      	ldr	r3, [pc, #8]	; (b63d0 <HAL_Delay_Microseconds+0xc>)
   b63c8:	681b      	ldr	r3, [r3, #0]
   b63ca:	68db      	ldr	r3, [r3, #12]
   b63cc:	9301      	str	r3, [sp, #4]
   b63ce:	bd08      	pop	{r3, pc}
   b63d0:	00030218 	.word	0x00030218

000b63d4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   b63d4:	b508      	push	{r3, lr}
   b63d6:	4b02      	ldr	r3, [pc, #8]	; (b63e0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   b63d8:	681b      	ldr	r3, [r3, #0]
   b63da:	691b      	ldr	r3, [r3, #16]
   b63dc:	9301      	str	r3, [sp, #4]
   b63de:	bd08      	pop	{r3, pc}
   b63e0:	00030218 	.word	0x00030218

000b63e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b63e4:	b508      	push	{r3, lr}
   b63e6:	4b02      	ldr	r3, [pc, #8]	; (b63f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b63e8:	681b      	ldr	r3, [r3, #0]
   b63ea:	695b      	ldr	r3, [r3, #20]
   b63ec:	9301      	str	r3, [sp, #4]
   b63ee:	bd08      	pop	{r3, pc}
   b63f0:	00030218 	.word	0x00030218

000b63f4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b63f4:	b508      	push	{r3, lr}
   b63f6:	4b02      	ldr	r3, [pc, #8]	; (b6400 <HAL_Pin_Mode+0xc>)
   b63f8:	681b      	ldr	r3, [r3, #0]
   b63fa:	689b      	ldr	r3, [r3, #8]
   b63fc:	9301      	str	r3, [sp, #4]
   b63fe:	bd08      	pop	{r3, pc}
   b6400:	0003022c 	.word	0x0003022c

000b6404 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b6404:	b508      	push	{r3, lr}
   b6406:	4b02      	ldr	r3, [pc, #8]	; (b6410 <HAL_Get_Pin_Mode+0xc>)
   b6408:	681b      	ldr	r3, [r3, #0]
   b640a:	68db      	ldr	r3, [r3, #12]
   b640c:	9301      	str	r3, [sp, #4]
   b640e:	bd08      	pop	{r3, pc}
   b6410:	0003022c 	.word	0x0003022c

000b6414 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b6414:	b508      	push	{r3, lr}
   b6416:	4b02      	ldr	r3, [pc, #8]	; (b6420 <HAL_GPIO_Write+0xc>)
   b6418:	681b      	ldr	r3, [r3, #0]
   b641a:	691b      	ldr	r3, [r3, #16]
   b641c:	9301      	str	r3, [sp, #4]
   b641e:	bd08      	pop	{r3, pc}
   b6420:	0003022c 	.word	0x0003022c

000b6424 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b6424:	b508      	push	{r3, lr}
   b6426:	4b02      	ldr	r3, [pc, #8]	; (b6430 <hal_i2c_begin+0xc>)
   b6428:	681b      	ldr	r3, [r3, #0]
   b642a:	68db      	ldr	r3, [r3, #12]
   b642c:	9301      	str	r3, [sp, #4]
   b642e:	bd08      	pop	{r3, pc}
   b6430:	00030228 	.word	0x00030228

000b6434 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b6434:	b508      	push	{r3, lr}
   b6436:	4b02      	ldr	r3, [pc, #8]	; (b6440 <hal_i2c_begin_transmission+0xc>)
   b6438:	681b      	ldr	r3, [r3, #0]
   b643a:	699b      	ldr	r3, [r3, #24]
   b643c:	9301      	str	r3, [sp, #4]
   b643e:	bd08      	pop	{r3, pc}
   b6440:	00030228 	.word	0x00030228

000b6444 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b6444:	b508      	push	{r3, lr}
   b6446:	4b02      	ldr	r3, [pc, #8]	; (b6450 <hal_i2c_end_transmission+0xc>)
   b6448:	681b      	ldr	r3, [r3, #0]
   b644a:	69db      	ldr	r3, [r3, #28]
   b644c:	9301      	str	r3, [sp, #4]
   b644e:	bd08      	pop	{r3, pc}
   b6450:	00030228 	.word	0x00030228

000b6454 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b6454:	b508      	push	{r3, lr}
   b6456:	4b02      	ldr	r3, [pc, #8]	; (b6460 <hal_i2c_write+0xc>)
   b6458:	681b      	ldr	r3, [r3, #0]
   b645a:	6a1b      	ldr	r3, [r3, #32]
   b645c:	9301      	str	r3, [sp, #4]
   b645e:	bd08      	pop	{r3, pc}
   b6460:	00030228 	.word	0x00030228

000b6464 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b6464:	b508      	push	{r3, lr}
   b6466:	4b02      	ldr	r3, [pc, #8]	; (b6470 <hal_i2c_available+0xc>)
   b6468:	681b      	ldr	r3, [r3, #0]
   b646a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b646c:	9301      	str	r3, [sp, #4]
   b646e:	bd08      	pop	{r3, pc}
   b6470:	00030228 	.word	0x00030228

000b6474 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b6474:	b508      	push	{r3, lr}
   b6476:	4b02      	ldr	r3, [pc, #8]	; (b6480 <hal_i2c_read+0xc>)
   b6478:	681b      	ldr	r3, [r3, #0]
   b647a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b647c:	9301      	str	r3, [sp, #4]
   b647e:	bd08      	pop	{r3, pc}
   b6480:	00030228 	.word	0x00030228

000b6484 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b6484:	b508      	push	{r3, lr}
   b6486:	4b02      	ldr	r3, [pc, #8]	; (b6490 <hal_i2c_peek+0xc>)
   b6488:	681b      	ldr	r3, [r3, #0]
   b648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b648c:	9301      	str	r3, [sp, #4]
   b648e:	bd08      	pop	{r3, pc}
   b6490:	00030228 	.word	0x00030228

000b6494 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b6494:	b508      	push	{r3, lr}
   b6496:	4b02      	ldr	r3, [pc, #8]	; (b64a0 <hal_i2c_flush+0xc>)
   b6498:	681b      	ldr	r3, [r3, #0]
   b649a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b649c:	9301      	str	r3, [sp, #4]
   b649e:	bd08      	pop	{r3, pc}
   b64a0:	00030228 	.word	0x00030228

000b64a4 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b64a4:	b508      	push	{r3, lr}
   b64a6:	4b02      	ldr	r3, [pc, #8]	; (b64b0 <hal_i2c_is_enabled+0xc>)
   b64a8:	681b      	ldr	r3, [r3, #0]
   b64aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b64ac:	9301      	str	r3, [sp, #4]
   b64ae:	bd08      	pop	{r3, pc}
   b64b0:	00030228 	.word	0x00030228

000b64b4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b64b4:	b508      	push	{r3, lr}
   b64b6:	4b02      	ldr	r3, [pc, #8]	; (b64c0 <hal_i2c_init+0xc>)
   b64b8:	681b      	ldr	r3, [r3, #0]
   b64ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b64bc:	9301      	str	r3, [sp, #4]
   b64be:	bd08      	pop	{r3, pc}
   b64c0:	00030228 	.word	0x00030228

000b64c4 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b64c4:	b508      	push	{r3, lr}
   b64c6:	4b02      	ldr	r3, [pc, #8]	; (b64d0 <hal_i2c_request_ex+0xc>)
   b64c8:	681b      	ldr	r3, [r3, #0]
   b64ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b64cc:	9301      	str	r3, [sp, #4]
   b64ce:	bd08      	pop	{r3, pc}
   b64d0:	00030228 	.word	0x00030228

000b64d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b64d4:	b508      	push	{r3, lr}
   b64d6:	4b02      	ldr	r3, [pc, #8]	; (b64e0 <inet_inet_ntop+0xc>)
   b64d8:	681b      	ldr	r3, [r3, #0]
   b64da:	695b      	ldr	r3, [r3, #20]
   b64dc:	9301      	str	r3, [sp, #4]
   b64de:	bd08      	pop	{r3, pc}
   b64e0:	00030264 	.word	0x00030264

000b64e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b64e4:	b508      	push	{r3, lr}
   b64e6:	4b02      	ldr	r3, [pc, #8]	; (b64f0 <netdb_freeaddrinfo+0xc>)
   b64e8:	681b      	ldr	r3, [r3, #0]
   b64ea:	689b      	ldr	r3, [r3, #8]
   b64ec:	9301      	str	r3, [sp, #4]
   b64ee:	bd08      	pop	{r3, pc}
   b64f0:	00030268 	.word	0x00030268

000b64f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b64f4:	b508      	push	{r3, lr}
   b64f6:	4b02      	ldr	r3, [pc, #8]	; (b6500 <netdb_getaddrinfo+0xc>)
   b64f8:	681b      	ldr	r3, [r3, #0]
   b64fa:	68db      	ldr	r3, [r3, #12]
   b64fc:	9301      	str	r3, [sp, #4]
   b64fe:	bd08      	pop	{r3, pc}
   b6500:	00030268 	.word	0x00030268

000b6504 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b6504:	b508      	push	{r3, lr}
   b6506:	4b02      	ldr	r3, [pc, #8]	; (b6510 <hal_spi_begin+0xc>)
   b6508:	681b      	ldr	r3, [r3, #0]
   b650a:	681b      	ldr	r3, [r3, #0]
   b650c:	9301      	str	r3, [sp, #4]
   b650e:	bd08      	pop	{r3, pc}
   b6510:	00030230 	.word	0x00030230

000b6514 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b6514:	b508      	push	{r3, lr}
   b6516:	4b02      	ldr	r3, [pc, #8]	; (b6520 <hal_spi_transfer+0xc>)
   b6518:	681b      	ldr	r3, [r3, #0]
   b651a:	695b      	ldr	r3, [r3, #20]
   b651c:	9301      	str	r3, [sp, #4]
   b651e:	bd08      	pop	{r3, pc}
   b6520:	00030230 	.word	0x00030230

000b6524 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b6524:	b508      	push	{r3, lr}
   b6526:	4b02      	ldr	r3, [pc, #8]	; (b6530 <hal_spi_init+0xc>)
   b6528:	681b      	ldr	r3, [r3, #0]
   b652a:	69db      	ldr	r3, [r3, #28]
   b652c:	9301      	str	r3, [sp, #4]
   b652e:	bd08      	pop	{r3, pc}
   b6530:	00030230 	.word	0x00030230

000b6534 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b6534:	b508      	push	{r3, lr}
   b6536:	4b02      	ldr	r3, [pc, #8]	; (b6540 <hal_spi_is_enabled+0xc>)
   b6538:	681b      	ldr	r3, [r3, #0]
   b653a:	6a1b      	ldr	r3, [r3, #32]
   b653c:	9301      	str	r3, [sp, #4]
   b653e:	bd08      	pop	{r3, pc}
   b6540:	00030230 	.word	0x00030230

000b6544 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b6544:	b508      	push	{r3, lr}
   b6546:	4b02      	ldr	r3, [pc, #8]	; (b6550 <hal_spi_info+0xc>)
   b6548:	681b      	ldr	r3, [r3, #0]
   b654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b654c:	9301      	str	r3, [sp, #4]
   b654e:	bd08      	pop	{r3, pc}
   b6550:	00030230 	.word	0x00030230

000b6554 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
   b6554:	b508      	push	{r3, lr}
   b6556:	4b02      	ldr	r3, [pc, #8]	; (b6560 <hal_spi_transfer_dma+0xc>)
   b6558:	681b      	ldr	r3, [r3, #0]
   b655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b655c:	9301      	str	r3, [sp, #4]
   b655e:	bd08      	pop	{r3, pc}
   b6560:	00030230 	.word	0x00030230

000b6564 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   b6564:	b508      	push	{r3, lr}
   b6566:	4b02      	ldr	r3, [pc, #8]	; (b6570 <hal_spi_transfer_dma_status+0xc>)
   b6568:	681b      	ldr	r3, [r3, #0]
   b656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b656c:	9301      	str	r3, [sp, #4]
   b656e:	bd08      	pop	{r3, pc}
   b6570:	00030230 	.word	0x00030230

000b6574 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b6574:	b508      	push	{r3, lr}
   b6576:	4b02      	ldr	r3, [pc, #8]	; (b6580 <hal_spi_set_settings+0xc>)
   b6578:	681b      	ldr	r3, [r3, #0]
   b657a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b657c:	9301      	str	r3, [sp, #4]
   b657e:	bd08      	pop	{r3, pc}
   b6580:	00030230 	.word	0x00030230

000b6584 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b6584:	b508      	push	{r3, lr}
   b6586:	4b02      	ldr	r3, [pc, #8]	; (b6590 <hal_spi_acquire+0xc>)
   b6588:	681b      	ldr	r3, [r3, #0]
   b658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b658c:	9301      	str	r3, [sp, #4]
   b658e:	bd08      	pop	{r3, pc}
   b6590:	00030230 	.word	0x00030230

000b6594 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b6594:	b508      	push	{r3, lr}
   b6596:	4b02      	ldr	r3, [pc, #8]	; (b65a0 <hal_spi_release+0xc>)
   b6598:	681b      	ldr	r3, [r3, #0]
   b659a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b659c:	9301      	str	r3, [sp, #4]
   b659e:	bd08      	pop	{r3, pc}
   b65a0:	00030230 	.word	0x00030230

000b65a4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b65a4:	b508      	push	{r3, lr}
   b65a6:	4b02      	ldr	r3, [pc, #8]	; (b65b0 <hal_usart_write+0xc>)
   b65a8:	681b      	ldr	r3, [r3, #0]
   b65aa:	68db      	ldr	r3, [r3, #12]
   b65ac:	9301      	str	r3, [sp, #4]
   b65ae:	bd08      	pop	{r3, pc}
   b65b0:	0003023c 	.word	0x0003023c

000b65b4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b65b4:	b508      	push	{r3, lr}
   b65b6:	4b02      	ldr	r3, [pc, #8]	; (b65c0 <hal_usart_available+0xc>)
   b65b8:	681b      	ldr	r3, [r3, #0]
   b65ba:	691b      	ldr	r3, [r3, #16]
   b65bc:	9301      	str	r3, [sp, #4]
   b65be:	bd08      	pop	{r3, pc}
   b65c0:	0003023c 	.word	0x0003023c

000b65c4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b65c4:	b508      	push	{r3, lr}
   b65c6:	4b02      	ldr	r3, [pc, #8]	; (b65d0 <hal_usart_read+0xc>)
   b65c8:	681b      	ldr	r3, [r3, #0]
   b65ca:	695b      	ldr	r3, [r3, #20]
   b65cc:	9301      	str	r3, [sp, #4]
   b65ce:	bd08      	pop	{r3, pc}
   b65d0:	0003023c 	.word	0x0003023c

000b65d4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b65d4:	b508      	push	{r3, lr}
   b65d6:	4b02      	ldr	r3, [pc, #8]	; (b65e0 <hal_usart_peek+0xc>)
   b65d8:	681b      	ldr	r3, [r3, #0]
   b65da:	699b      	ldr	r3, [r3, #24]
   b65dc:	9301      	str	r3, [sp, #4]
   b65de:	bd08      	pop	{r3, pc}
   b65e0:	0003023c 	.word	0x0003023c

000b65e4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b65e4:	b508      	push	{r3, lr}
   b65e6:	4b02      	ldr	r3, [pc, #8]	; (b65f0 <hal_usart_flush+0xc>)
   b65e8:	681b      	ldr	r3, [r3, #0]
   b65ea:	69db      	ldr	r3, [r3, #28]
   b65ec:	9301      	str	r3, [sp, #4]
   b65ee:	bd08      	pop	{r3, pc}
   b65f0:	0003023c 	.word	0x0003023c

000b65f4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b65f4:	b508      	push	{r3, lr}
   b65f6:	4b02      	ldr	r3, [pc, #8]	; (b6600 <hal_usart_is_enabled+0xc>)
   b65f8:	681b      	ldr	r3, [r3, #0]
   b65fa:	6a1b      	ldr	r3, [r3, #32]
   b65fc:	9301      	str	r3, [sp, #4]
   b65fe:	bd08      	pop	{r3, pc}
   b6600:	0003023c 	.word	0x0003023c

000b6604 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b6604:	b508      	push	{r3, lr}
   b6606:	4b02      	ldr	r3, [pc, #8]	; (b6610 <hal_usart_available_data_for_write+0xc>)
   b6608:	681b      	ldr	r3, [r3, #0]
   b660a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b660c:	9301      	str	r3, [sp, #4]
   b660e:	bd08      	pop	{r3, pc}
   b6610:	0003023c 	.word	0x0003023c

000b6614 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b6614:	b508      	push	{r3, lr}
   b6616:	4b02      	ldr	r3, [pc, #8]	; (b6620 <hal_usart_init_ex+0xc>)
   b6618:	681b      	ldr	r3, [r3, #0]
   b661a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b661c:	9301      	str	r3, [sp, #4]
   b661e:	bd08      	pop	{r3, pc}
   b6620:	0003023c 	.word	0x0003023c

000b6624 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b6624:	b508      	push	{r3, lr}
   b6626:	4b02      	ldr	r3, [pc, #8]	; (b6630 <HAL_USB_USART_Init+0xc>)
   b6628:	681b      	ldr	r3, [r3, #0]
   b662a:	681b      	ldr	r3, [r3, #0]
   b662c:	9301      	str	r3, [sp, #4]
   b662e:	bd08      	pop	{r3, pc}
   b6630:	0003024c 	.word	0x0003024c

000b6634 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b6634:	b508      	push	{r3, lr}
   b6636:	4b02      	ldr	r3, [pc, #8]	; (b6640 <HAL_USB_USART_Begin+0xc>)
   b6638:	681b      	ldr	r3, [r3, #0]
   b663a:	685b      	ldr	r3, [r3, #4]
   b663c:	9301      	str	r3, [sp, #4]
   b663e:	bd08      	pop	{r3, pc}
   b6640:	0003024c 	.word	0x0003024c

000b6644 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b6644:	b508      	push	{r3, lr}
   b6646:	4b02      	ldr	r3, [pc, #8]	; (b6650 <HAL_USB_USART_Available_Data+0xc>)
   b6648:	681b      	ldr	r3, [r3, #0]
   b664a:	691b      	ldr	r3, [r3, #16]
   b664c:	9301      	str	r3, [sp, #4]
   b664e:	bd08      	pop	{r3, pc}
   b6650:	0003024c 	.word	0x0003024c

000b6654 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b6654:	b508      	push	{r3, lr}
   b6656:	4b02      	ldr	r3, [pc, #8]	; (b6660 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b6658:	681b      	ldr	r3, [r3, #0]
   b665a:	695b      	ldr	r3, [r3, #20]
   b665c:	9301      	str	r3, [sp, #4]
   b665e:	bd08      	pop	{r3, pc}
   b6660:	0003024c 	.word	0x0003024c

000b6664 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6664:	b508      	push	{r3, lr}
   b6666:	4b02      	ldr	r3, [pc, #8]	; (b6670 <HAL_USB_USART_Receive_Data+0xc>)
   b6668:	681b      	ldr	r3, [r3, #0]
   b666a:	699b      	ldr	r3, [r3, #24]
   b666c:	9301      	str	r3, [sp, #4]
   b666e:	bd08      	pop	{r3, pc}
   b6670:	0003024c 	.word	0x0003024c

000b6674 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b6674:	b508      	push	{r3, lr}
   b6676:	4b02      	ldr	r3, [pc, #8]	; (b6680 <HAL_USB_USART_Send_Data+0xc>)
   b6678:	681b      	ldr	r3, [r3, #0]
   b667a:	69db      	ldr	r3, [r3, #28]
   b667c:	9301      	str	r3, [sp, #4]
   b667e:	bd08      	pop	{r3, pc}
   b6680:	0003024c 	.word	0x0003024c

000b6684 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b6684:	b508      	push	{r3, lr}
   b6686:	4b02      	ldr	r3, [pc, #8]	; (b6690 <HAL_USB_USART_Flush_Data+0xc>)
   b6688:	681b      	ldr	r3, [r3, #0]
   b668a:	6a1b      	ldr	r3, [r3, #32]
   b668c:	9301      	str	r3, [sp, #4]
   b668e:	bd08      	pop	{r3, pc}
   b6690:	0003024c 	.word	0x0003024c

000b6694 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   b6694:	b508      	push	{r3, lr}
   b6696:	4b02      	ldr	r3, [pc, #8]	; (b66a0 <HAL_USB_USART_Is_Enabled+0xc>)
   b6698:	681b      	ldr	r3, [r3, #0]
   b669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b669c:	9301      	str	r3, [sp, #4]
   b669e:	bd08      	pop	{r3, pc}
   b66a0:	0003024c 	.word	0x0003024c

000b66a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b66a4:	b508      	push	{r3, lr}
   b66a6:	4b02      	ldr	r3, [pc, #8]	; (b66b0 <set_system_mode+0xc>)
   b66a8:	681b      	ldr	r3, [r3, #0]
   b66aa:	685b      	ldr	r3, [r3, #4]
   b66ac:	9301      	str	r3, [sp, #4]
   b66ae:	bd08      	pop	{r3, pc}
   b66b0:	00030220 	.word	0x00030220

000b66b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b66b4:	b508      	push	{r3, lr}
   b66b6:	4b02      	ldr	r3, [pc, #8]	; (b66c0 <system_delay_ms+0xc>)
   b66b8:	681b      	ldr	r3, [r3, #0]
   b66ba:	695b      	ldr	r3, [r3, #20]
   b66bc:	9301      	str	r3, [sp, #4]
   b66be:	bd08      	pop	{r3, pc}
   b66c0:	00030220 	.word	0x00030220

000b66c4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b66c4:	b508      	push	{r3, lr}
   b66c6:	4b02      	ldr	r3, [pc, #8]	; (b66d0 <system_thread_set_state+0xc>)
   b66c8:	681b      	ldr	r3, [r3, #0]
   b66ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b66cc:	9301      	str	r3, [sp, #4]
   b66ce:	bd08      	pop	{r3, pc}
   b66d0:	00030220 	.word	0x00030220

000b66d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b66d4:	b508      	push	{r3, lr}
   b66d6:	4b03      	ldr	r3, [pc, #12]	; (b66e4 <system_ctrl_set_app_request_handler+0x10>)
   b66d8:	681b      	ldr	r3, [r3, #0]
   b66da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b66de:	9301      	str	r3, [sp, #4]
   b66e0:	bd08      	pop	{r3, pc}
   b66e2:	0000      	.short	0x0000
   b66e4:	00030220 	.word	0x00030220

000b66e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b66e8:	b508      	push	{r3, lr}
   b66ea:	4b03      	ldr	r3, [pc, #12]	; (b66f8 <system_ctrl_set_result+0x10>)
   b66ec:	681b      	ldr	r3, [r3, #0]
   b66ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b66f2:	9301      	str	r3, [sp, #4]
   b66f4:	bd08      	pop	{r3, pc}
   b66f6:	0000      	.short	0x0000
   b66f8:	00030220 	.word	0x00030220

000b66fc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b66fc:	b508      	push	{r3, lr}
   b66fe:	4b02      	ldr	r3, [pc, #8]	; (b6708 <spark_process+0xc>)
   b6700:	681b      	ldr	r3, [r3, #0]
   b6702:	689b      	ldr	r3, [r3, #8]
   b6704:	9301      	str	r3, [sp, #4]
   b6706:	bd08      	pop	{r3, pc}
   b6708:	00030244 	.word	0x00030244

000b670c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b670c:	b508      	push	{r3, lr}
   b670e:	4b02      	ldr	r3, [pc, #8]	; (b6718 <spark_set_random_seed_from_cloud_handler+0xc>)
   b6710:	681b      	ldr	r3, [r3, #0]
   b6712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b6714:	9301      	str	r3, [sp, #4]
   b6716:	bd08      	pop	{r3, pc}
   b6718:	00030244 	.word	0x00030244

000b671c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b671c:	b508      	push	{r3, lr}
   b671e:	4b02      	ldr	r3, [pc, #8]	; (b6728 <network_connect+0xc>)
   b6720:	681b      	ldr	r3, [r3, #0]
   b6722:	685b      	ldr	r3, [r3, #4]
   b6724:	9301      	str	r3, [sp, #4]
   b6726:	bd08      	pop	{r3, pc}
   b6728:	00030240 	.word	0x00030240

000b672c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b672c:	b508      	push	{r3, lr}
   b672e:	4b02      	ldr	r3, [pc, #8]	; (b6738 <network_connecting+0xc>)
   b6730:	681b      	ldr	r3, [r3, #0]
   b6732:	689b      	ldr	r3, [r3, #8]
   b6734:	9301      	str	r3, [sp, #4]
   b6736:	bd08      	pop	{r3, pc}
   b6738:	00030240 	.word	0x00030240

000b673c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b673c:	b508      	push	{r3, lr}
   b673e:	4b02      	ldr	r3, [pc, #8]	; (b6748 <network_disconnect+0xc>)
   b6740:	681b      	ldr	r3, [r3, #0]
   b6742:	68db      	ldr	r3, [r3, #12]
   b6744:	9301      	str	r3, [sp, #4]
   b6746:	bd08      	pop	{r3, pc}
   b6748:	00030240 	.word	0x00030240

000b674c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b674c:	b508      	push	{r3, lr}
   b674e:	4b02      	ldr	r3, [pc, #8]	; (b6758 <network_ready+0xc>)
   b6750:	681b      	ldr	r3, [r3, #0]
   b6752:	691b      	ldr	r3, [r3, #16]
   b6754:	9301      	str	r3, [sp, #4]
   b6756:	bd08      	pop	{r3, pc}
   b6758:	00030240 	.word	0x00030240

000b675c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b675c:	b508      	push	{r3, lr}
   b675e:	4b02      	ldr	r3, [pc, #8]	; (b6768 <network_on+0xc>)
   b6760:	681b      	ldr	r3, [r3, #0]
   b6762:	695b      	ldr	r3, [r3, #20]
   b6764:	9301      	str	r3, [sp, #4]
   b6766:	bd08      	pop	{r3, pc}
   b6768:	00030240 	.word	0x00030240

000b676c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b676c:	b508      	push	{r3, lr}
   b676e:	4b02      	ldr	r3, [pc, #8]	; (b6778 <network_off+0xc>)
   b6770:	681b      	ldr	r3, [r3, #0]
   b6772:	699b      	ldr	r3, [r3, #24]
   b6774:	9301      	str	r3, [sp, #4]
   b6776:	bd08      	pop	{r3, pc}
   b6778:	00030240 	.word	0x00030240

000b677c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b677c:	b508      	push	{r3, lr}
   b677e:	4b02      	ldr	r3, [pc, #8]	; (b6788 <network_listen+0xc>)
   b6780:	681b      	ldr	r3, [r3, #0]
   b6782:	69db      	ldr	r3, [r3, #28]
   b6784:	9301      	str	r3, [sp, #4]
   b6786:	bd08      	pop	{r3, pc}
   b6788:	00030240 	.word	0x00030240

000b678c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b678c:	b508      	push	{r3, lr}
   b678e:	4b02      	ldr	r3, [pc, #8]	; (b6798 <network_listening+0xc>)
   b6790:	681b      	ldr	r3, [r3, #0]
   b6792:	6a1b      	ldr	r3, [r3, #32]
   b6794:	9301      	str	r3, [sp, #4]
   b6796:	bd08      	pop	{r3, pc}
   b6798:	00030240 	.word	0x00030240

000b679c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b679c:	b508      	push	{r3, lr}
   b679e:	4b02      	ldr	r3, [pc, #8]	; (b67a8 <network_set_listen_timeout+0xc>)
   b67a0:	681b      	ldr	r3, [r3, #0]
   b67a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b67a4:	9301      	str	r3, [sp, #4]
   b67a6:	bd08      	pop	{r3, pc}
   b67a8:	00030240 	.word	0x00030240

000b67ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b67ac:	b508      	push	{r3, lr}
   b67ae:	4b02      	ldr	r3, [pc, #8]	; (b67b8 <network_get_listen_timeout+0xc>)
   b67b0:	681b      	ldr	r3, [r3, #0]
   b67b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b67b4:	9301      	str	r3, [sp, #4]
   b67b6:	bd08      	pop	{r3, pc}
   b67b8:	00030240 	.word	0x00030240

000b67bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b67bc:	b508      	push	{r3, lr}
   b67be:	4b02      	ldr	r3, [pc, #8]	; (b67c8 <network_is_on+0xc>)
   b67c0:	681b      	ldr	r3, [r3, #0]
   b67c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b67c4:	9301      	str	r3, [sp, #4]
   b67c6:	bd08      	pop	{r3, pc}
   b67c8:	00030240 	.word	0x00030240

000b67cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b67cc:	b508      	push	{r3, lr}
   b67ce:	4b02      	ldr	r3, [pc, #8]	; (b67d8 <network_is_off+0xc>)
   b67d0:	681b      	ldr	r3, [r3, #0]
   b67d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b67d4:	9301      	str	r3, [sp, #4]
   b67d6:	bd08      	pop	{r3, pc}
   b67d8:	00030240 	.word	0x00030240

000b67dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b67dc:	b508      	push	{r3, lr}
   b67de:	4b02      	ldr	r3, [pc, #8]	; (b67e8 <malloc+0xc>)
   b67e0:	681b      	ldr	r3, [r3, #0]
   b67e2:	681b      	ldr	r3, [r3, #0]
   b67e4:	9301      	str	r3, [sp, #4]
   b67e6:	bd08      	pop	{r3, pc}
   b67e8:	0003021c 	.word	0x0003021c

000b67ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b67ec:	b508      	push	{r3, lr}
   b67ee:	4b02      	ldr	r3, [pc, #8]	; (b67f8 <free+0xc>)
   b67f0:	681b      	ldr	r3, [r3, #0]
   b67f2:	685b      	ldr	r3, [r3, #4]
   b67f4:	9301      	str	r3, [sp, #4]
   b67f6:	bd08      	pop	{r3, pc}
   b67f8:	0003021c 	.word	0x0003021c

000b67fc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b67fc:	b508      	push	{r3, lr}
   b67fe:	4b02      	ldr	r3, [pc, #8]	; (b6808 <vsnprintf+0xc>)
   b6800:	681b      	ldr	r3, [r3, #0]
   b6802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b6804:	9301      	str	r3, [sp, #4]
   b6806:	bd08      	pop	{r3, pc}
   b6808:	0003021c 	.word	0x0003021c

000b680c <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b680c:	b508      	push	{r3, lr}
   b680e:	4b02      	ldr	r3, [pc, #8]	; (b6818 <__assert_func+0xc>)
   b6810:	681b      	ldr	r3, [r3, #0]
   b6812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b6814:	9301      	str	r3, [sp, #4]
   b6816:	bd08      	pop	{r3, pc}
   b6818:	0003021c 	.word	0x0003021c

000b681c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b681c:	b508      	push	{r3, lr}
   b681e:	4b02      	ldr	r3, [pc, #8]	; (b6828 <newlib_impure_ptr_callback+0xc>)
   b6820:	681b      	ldr	r3, [r3, #0]
   b6822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b6824:	9301      	str	r3, [sp, #4]
   b6826:	bd08      	pop	{r3, pc}
   b6828:	0003021c 	.word	0x0003021c

000b682c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b682c:	2100      	movs	r1, #0
   b682e:	f7ff bf41 	b.w	b66b4 <system_delay_ms>
	...

000b6834 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b6834:	4802      	ldr	r0, [pc, #8]	; (b6840 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b6836:	2300      	movs	r3, #0
   b6838:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b683a:	f7ff bdb3 	b.w	b63a4 <os_mutex_recursive_create>
   b683e:	bf00      	nop
   b6840:	2003e6c4 	.word	0x2003e6c4

000b6844 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6844:	2200      	movs	r2, #0
   b6846:	6840      	ldr	r0, [r0, #4]
   b6848:	4611      	mov	r1, r2
   b684a:	f7ff bf9f 	b.w	b678c <network_listening>

000b684e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b684e:	2200      	movs	r2, #0
   b6850:	6840      	ldr	r0, [r0, #4]
   b6852:	4611      	mov	r1, r2
   b6854:	f7ff bfaa 	b.w	b67ac <network_get_listen_timeout>

000b6858 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6858:	6840      	ldr	r0, [r0, #4]
   b685a:	2200      	movs	r2, #0
   b685c:	f7ff bf9e 	b.w	b679c <network_set_listen_timeout>

000b6860 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6860:	6840      	ldr	r0, [r0, #4]
   b6862:	2200      	movs	r2, #0
   b6864:	f081 0101 	eor.w	r1, r1, #1
   b6868:	f7ff bf88 	b.w	b677c <network_listen>

000b686c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b686c:	2300      	movs	r3, #0
   b686e:	6840      	ldr	r0, [r0, #4]
   b6870:	461a      	mov	r2, r3
   b6872:	4619      	mov	r1, r3
   b6874:	f7ff bf7a 	b.w	b676c <network_off>

000b6878 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6878:	2300      	movs	r3, #0
   b687a:	6840      	ldr	r0, [r0, #4]
   b687c:	461a      	mov	r2, r3
   b687e:	4619      	mov	r1, r3
   b6880:	f7ff bf6c 	b.w	b675c <network_on>

000b6884 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b6884:	2200      	movs	r2, #0
   b6886:	6840      	ldr	r0, [r0, #4]
   b6888:	4611      	mov	r1, r2
   b688a:	f7ff bf5f 	b.w	b674c <network_ready>

000b688e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b688e:	2200      	movs	r2, #0
   b6890:	6840      	ldr	r0, [r0, #4]
   b6892:	4611      	mov	r1, r2
   b6894:	f7ff bf4a 	b.w	b672c <network_connecting>

000b6898 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6898:	6840      	ldr	r0, [r0, #4]
   b689a:	2200      	movs	r2, #0
   b689c:	2102      	movs	r1, #2
   b689e:	f7ff bf4d 	b.w	b673c <network_disconnect>

000b68a2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b68a2:	2300      	movs	r3, #0
   b68a4:	6840      	ldr	r0, [r0, #4]
   b68a6:	461a      	mov	r2, r3
   b68a8:	f7ff bf38 	b.w	b671c <network_connect>

000b68ac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b68ac:	4b02      	ldr	r3, [pc, #8]	; (b68b8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b68ae:	2203      	movs	r2, #3
   b68b0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b68b2:	4a02      	ldr	r2, [pc, #8]	; (b68bc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b68b4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b68b6:	4770      	bx	lr
   b68b8:	2003e6c8 	.word	0x2003e6c8
   b68bc:	000b7860 	.word	0x000b7860

000b68c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b68c0:	4770      	bx	lr

000b68c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b68c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b68c4:	4606      	mov	r6, r0
   b68c6:	4615      	mov	r5, r2
   b68c8:	460c      	mov	r4, r1
   b68ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b68cc:	42bc      	cmp	r4, r7
   b68ce:	d006      	beq.n	b68de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b68d0:	6833      	ldr	r3, [r6, #0]
   b68d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   b68d6:	689b      	ldr	r3, [r3, #8]
   b68d8:	4630      	mov	r0, r6
   b68da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b68dc:	e7f6      	b.n	b68cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b68de:	4628      	mov	r0, r5
   b68e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b68e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b68e2:	7c00      	ldrb	r0, [r0, #16]
   b68e4:	2200      	movs	r2, #0
   b68e6:	f7ff bdb5 	b.w	b6454 <hal_i2c_write>

000b68ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b68ea:	7c00      	ldrb	r0, [r0, #16]
   b68ec:	2100      	movs	r1, #0
   b68ee:	f7ff bdb9 	b.w	b6464 <hal_i2c_available>

000b68f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b68f2:	7c00      	ldrb	r0, [r0, #16]
   b68f4:	2100      	movs	r1, #0
   b68f6:	f7ff bdbd 	b.w	b6474 <hal_i2c_read>

000b68fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b68fa:	7c00      	ldrb	r0, [r0, #16]
   b68fc:	2100      	movs	r1, #0
   b68fe:	f7ff bdc1 	b.w	b6484 <hal_i2c_peek>

000b6902 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b6902:	7c00      	ldrb	r0, [r0, #16]
   b6904:	2100      	movs	r1, #0
   b6906:	f7ff bdc5 	b.w	b6494 <hal_i2c_flush>

000b690a <_ZN7TwoWireD0Ev>:
   b690a:	b510      	push	{r4, lr}
   b690c:	2114      	movs	r1, #20
   b690e:	4604      	mov	r4, r0
   b6910:	f7fd fbc3 	bl	b409a <_ZdlPvj>
   b6914:	4620      	mov	r0, r4
   b6916:	bd10      	pop	{r4, pc}

000b6918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6918:	b538      	push	{r3, r4, r5, lr}
   b691a:	4604      	mov	r4, r0
   b691c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b691e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6922:	2200      	movs	r2, #0
   b6924:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6928:	4b09      	ldr	r3, [pc, #36]	; (b6950 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b692a:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b692c:	4608      	mov	r0, r1
   b692e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b6930:	4629      	mov	r1, r5
   b6932:	f7ff fdbf 	bl	b64b4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b6936:	30bf      	adds	r0, #191	; 0xbf
   b6938:	d108      	bne.n	b694c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b693a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b693c:	07db      	lsls	r3, r3, #31
   b693e:	d505      	bpl.n	b694c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b6940:	6868      	ldr	r0, [r5, #4]
   b6942:	f7ff ff53 	bl	b67ec <free>
    free(conf.tx_buffer);
   b6946:	68e8      	ldr	r0, [r5, #12]
   b6948:	f7ff ff50 	bl	b67ec <free>
}
   b694c:	4620      	mov	r0, r4
   b694e:	bd38      	pop	{r3, r4, r5, pc}
   b6950:	000b789c 	.word	0x000b789c

000b6954 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b6954:	2300      	movs	r3, #0
   b6956:	7c00      	ldrb	r0, [r0, #16]
   b6958:	461a      	mov	r2, r3
   b695a:	4619      	mov	r1, r3
   b695c:	f7ff bd62 	b.w	b6424 <hal_i2c_begin>

000b6960 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b6960:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b6962:	2200      	movs	r2, #0
   b6964:	2314      	movs	r3, #20
   b6966:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b696a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b696e:	780b      	ldrb	r3, [r1, #0]
   b6970:	f88d 3008 	strb.w	r3, [sp, #8]
   b6974:	684b      	ldr	r3, [r1, #4]
   b6976:	9303      	str	r3, [sp, #12]
   b6978:	68cb      	ldr	r3, [r1, #12]
   b697a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b697c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b697e:	7a0b      	ldrb	r3, [r1, #8]
   b6980:	9305      	str	r3, [sp, #20]
   b6982:	a901      	add	r1, sp, #4
   b6984:	f7ff fd9e 	bl	b64c4 <hal_i2c_request_ex>
}
   b6988:	b007      	add	sp, #28
   b698a:	f85d fb04 	ldr.w	pc, [sp], #4

000b698e <_ZN7TwoWire11requestFromEhjh>:
{
   b698e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b6990:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b6992:	f88d 1000 	strb.w	r1, [sp]
   b6996:	f04f 0164 	mov.w	r1, #100	; 0x64
   b699a:	9103      	str	r1, [sp, #12]
   b699c:	bf18      	it	ne
   b699e:	2301      	movne	r3, #1
   b69a0:	4669      	mov	r1, sp
    size_ = size;
   b69a2:	9201      	str	r2, [sp, #4]
   b69a4:	f88d 3008 	strb.w	r3, [sp, #8]
   b69a8:	f7ff ffda 	bl	b6960 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b69ac:	b005      	add	sp, #20
   b69ae:	f85d fb04 	ldr.w	pc, [sp], #4

000b69b2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b69b2:	2301      	movs	r3, #1
   b69b4:	f7ff bfeb 	b.w	b698e <_ZN7TwoWire11requestFromEhjh>

000b69b8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b69b8:	7c00      	ldrb	r0, [r0, #16]
   b69ba:	2200      	movs	r2, #0
   b69bc:	f7ff bd3a 	b.w	b6434 <hal_i2c_begin_transmission>

000b69c0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b69c0:	b2c9      	uxtb	r1, r1
   b69c2:	f7ff bff9 	b.w	b69b8 <_ZN7TwoWire17beginTransmissionEh>

000b69c6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b69c6:	7c00      	ldrb	r0, [r0, #16]
   b69c8:	2200      	movs	r2, #0
   b69ca:	f7ff bd3b 	b.w	b6444 <hal_i2c_end_transmission>

000b69ce <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b69ce:	2101      	movs	r1, #1
   b69d0:	f7ff bff9 	b.w	b69c6 <_ZN7TwoWire15endTransmissionEh>

000b69d4 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b69d4:	4770      	bx	lr

000b69d6 <_ZN9IPAddressD0Ev>:
   b69d6:	b510      	push	{r4, lr}
   b69d8:	2118      	movs	r1, #24
   b69da:	4604      	mov	r4, r0
   b69dc:	f7fd fb5d 	bl	b409a <_ZdlPvj>
   b69e0:	4620      	mov	r0, r4
   b69e2:	bd10      	pop	{r4, pc}

000b69e4 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b69e4:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b69e6:	7d03      	ldrb	r3, [r0, #20]
   b69e8:	2b06      	cmp	r3, #6
{
   b69ea:	b08d      	sub	sp, #52	; 0x34
   b69ec:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b69ee:	f100 0704 	add.w	r7, r0, #4
   b69f2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b69f6:	d012      	beq.n	b6a1e <_ZNK9IPAddress7printToER5Print+0x3a>
   b69f8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b69fc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6a00:	220a      	movs	r2, #10
   b6a02:	4630      	mov	r0, r6
   b6a04:	f000 f94d 	bl	b6ca2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6a08:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6a0a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6a0c:	d019      	beq.n	b6a42 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6a0e:	2c00      	cmp	r4, #0
   b6a10:	d0f4      	beq.n	b69fc <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b6a12:	212e      	movs	r1, #46	; 0x2e
   b6a14:	4630      	mov	r0, r6
   b6a16:	f000 f929 	bl	b6c6c <_ZN5Print5printEc>
   b6a1a:	4404      	add	r4, r0
   b6a1c:	e7ee      	b.n	b69fc <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a1e:	232f      	movs	r3, #47	; 0x2f
   b6a20:	466a      	mov	r2, sp
   b6a22:	4639      	mov	r1, r7
   b6a24:	200a      	movs	r0, #10
		buf[0] = 0;
   b6a26:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6a2a:	f7ff fd53 	bl	b64d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6a2e:	4668      	mov	r0, sp
   b6a30:	f000 fd68 	bl	b7504 <strlen>
   b6a34:	6833      	ldr	r3, [r6, #0]
   b6a36:	4602      	mov	r2, r0
   b6a38:	68db      	ldr	r3, [r3, #12]
   b6a3a:	4669      	mov	r1, sp
   b6a3c:	4630      	mov	r0, r6
   b6a3e:	4798      	blx	r3
   b6a40:	4604      	mov	r4, r0
    }
    return n;
}
   b6a42:	4620      	mov	r0, r4
   b6a44:	b00d      	add	sp, #52	; 0x34
   b6a46:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6a48 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6a48:	b510      	push	{r4, lr}
   b6a4a:	4b05      	ldr	r3, [pc, #20]	; (b6a60 <_ZN9IPAddressC1Ev+0x18>)
   b6a4c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6a4e:	2211      	movs	r2, #17
   b6a50:	f840 3b04 	str.w	r3, [r0], #4
   b6a54:	2100      	movs	r1, #0
   b6a56:	f000 fd1f 	bl	b7498 <memset>
}
   b6a5a:	4620      	mov	r0, r4
   b6a5c:	bd10      	pop	{r4, pc}
   b6a5e:	bf00      	nop
   b6a60:	000b78c4 	.word	0x000b78c4

000b6a64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b6a64:	4603      	mov	r3, r0
   b6a66:	4a07      	ldr	r2, [pc, #28]	; (b6a84 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b6a68:	b510      	push	{r4, lr}
   b6a6a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b6a6e:	f101 0210 	add.w	r2, r1, #16
   b6a72:	f851 4b04 	ldr.w	r4, [r1], #4
   b6a76:	f843 4b04 	str.w	r4, [r3], #4
   b6a7a:	4291      	cmp	r1, r2
   b6a7c:	d1f9      	bne.n	b6a72 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b6a7e:	780a      	ldrb	r2, [r1, #0]
   b6a80:	701a      	strb	r2, [r3, #0]
}
   b6a82:	bd10      	pop	{r4, pc}
   b6a84:	000b78c4 	.word	0x000b78c4

000b6a88 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b6a88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b6a8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b6a8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b6a92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b6a96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b6a9a:	2304      	movs	r3, #4
   b6a9c:	6041      	str	r1, [r0, #4]
   b6a9e:	7503      	strb	r3, [r0, #20]
}
   b6aa0:	bd10      	pop	{r4, pc}
	...

000b6aa4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6aa4:	b507      	push	{r0, r1, r2, lr}
   b6aa6:	4b06      	ldr	r3, [pc, #24]	; (b6ac0 <_ZN9IPAddressC1EPKh+0x1c>)
   b6aa8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b6aaa:	78cb      	ldrb	r3, [r1, #3]
   b6aac:	9300      	str	r3, [sp, #0]
   b6aae:	788b      	ldrb	r3, [r1, #2]
   b6ab0:	784a      	ldrb	r2, [r1, #1]
   b6ab2:	7809      	ldrb	r1, [r1, #0]
   b6ab4:	f7ff ffe8 	bl	b6a88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b6ab8:	b003      	add	sp, #12
   b6aba:	f85d fb04 	ldr.w	pc, [sp], #4
   b6abe:	bf00      	nop
   b6ac0:	000b78c4 	.word	0x000b78c4

000b6ac4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b6ac4:	4b01      	ldr	r3, [pc, #4]	; (b6acc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b6ac6:	4a02      	ldr	r2, [pc, #8]	; (b6ad0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b6ac8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b6aca:	4770      	bx	lr
   b6acc:	2003e6d0 	.word	0x2003e6d0
   b6ad0:	000b78d0 	.word	0x000b78d0

000b6ad4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b6ad4:	2300      	movs	r3, #0
   b6ad6:	6840      	ldr	r0, [r0, #4]
   b6ad8:	461a      	mov	r2, r3
   b6ada:	f7ff be1f 	b.w	b671c <network_connect>

000b6ade <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b6ade:	6840      	ldr	r0, [r0, #4]
   b6ae0:	2200      	movs	r2, #0
   b6ae2:	2102      	movs	r1, #2
   b6ae4:	f7ff be2a 	b.w	b673c <network_disconnect>

000b6ae8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b6ae8:	2200      	movs	r2, #0
   b6aea:	6840      	ldr	r0, [r0, #4]
   b6aec:	4611      	mov	r1, r2
   b6aee:	f7ff be1d 	b.w	b672c <network_connecting>

000b6af2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b6af2:	2200      	movs	r2, #0
   b6af4:	6840      	ldr	r0, [r0, #4]
   b6af6:	4611      	mov	r1, r2
   b6af8:	f7ff be28 	b.w	b674c <network_ready>

000b6afc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b6afc:	2300      	movs	r3, #0
   b6afe:	6840      	ldr	r0, [r0, #4]
   b6b00:	461a      	mov	r2, r3
   b6b02:	4619      	mov	r1, r3
   b6b04:	f7ff be2a 	b.w	b675c <network_on>

000b6b08 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b6b08:	2300      	movs	r3, #0
   b6b0a:	6840      	ldr	r0, [r0, #4]
   b6b0c:	461a      	mov	r2, r3
   b6b0e:	4619      	mov	r1, r3
   b6b10:	f7ff be2c 	b.w	b676c <network_off>

000b6b14 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b6b14:	6840      	ldr	r0, [r0, #4]
   b6b16:	2100      	movs	r1, #0
   b6b18:	f7ff be50 	b.w	b67bc <network_is_on>

000b6b1c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6b1c:	6840      	ldr	r0, [r0, #4]
   b6b1e:	2100      	movs	r1, #0
   b6b20:	f7ff be54 	b.w	b67cc <network_is_off>

000b6b24 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6b24:	6840      	ldr	r0, [r0, #4]
   b6b26:	2200      	movs	r2, #0
   b6b28:	f081 0101 	eor.w	r1, r1, #1
   b6b2c:	f7ff be26 	b.w	b677c <network_listen>

000b6b30 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6b30:	6840      	ldr	r0, [r0, #4]
   b6b32:	2200      	movs	r2, #0
   b6b34:	f7ff be32 	b.w	b679c <network_set_listen_timeout>

000b6b38 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6b38:	2200      	movs	r2, #0
   b6b3a:	6840      	ldr	r0, [r0, #4]
   b6b3c:	4611      	mov	r1, r2
   b6b3e:	f7ff be35 	b.w	b67ac <network_get_listen_timeout>

000b6b42 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6b42:	2200      	movs	r2, #0
   b6b44:	6840      	ldr	r0, [r0, #4]
   b6b46:	4611      	mov	r1, r2
   b6b48:	f7ff be20 	b.w	b678c <network_listening>

000b6b4c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6b4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6b50:	b095      	sub	sp, #84	; 0x54
   b6b52:	4614      	mov	r4, r2
   b6b54:	460d      	mov	r5, r1
   b6b56:	4607      	mov	r7, r0
    IPAddress addr;
   b6b58:	f7ff ff76 	bl	b6a48 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6b5c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6b5e:	221c      	movs	r2, #28
   b6b60:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6b62:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6b64:	f000 fc98 	bl	b7498 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6b68:	2340      	movs	r3, #64	; 0x40
   b6b6a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6b6c:	4620      	mov	r0, r4
   b6b6e:	466b      	mov	r3, sp
   b6b70:	aa0c      	add	r2, sp, #48	; 0x30
   b6b72:	2100      	movs	r1, #0
   b6b74:	f7ff fcbe 	bl	b64f4 <netdb_getaddrinfo>
    if (!r) {
   b6b78:	4604      	mov	r4, r0
   b6b7a:	2800      	cmp	r0, #0
   b6b7c:	d14b      	bne.n	b6c16 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6b7e:	4602      	mov	r2, r0
   b6b80:	2101      	movs	r1, #1
   b6b82:	6868      	ldr	r0, [r5, #4]
   b6b84:	f7ff fde2 	bl	b674c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b88:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6b8a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b8c:	4622      	mov	r2, r4
   b6b8e:	6868      	ldr	r0, [r5, #4]
   b6b90:	f7ff fddc 	bl	b674c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6b94:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6b96:	4681      	mov	r9, r0
        bool ok = false;
   b6b98:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6b9a:	2e00      	cmp	r6, #0
   b6b9c:	d03b      	beq.n	b6c16 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6b9e:	2900      	cmp	r1, #0
   b6ba0:	d139      	bne.n	b6c16 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6ba2:	6873      	ldr	r3, [r6, #4]
   b6ba4:	2b02      	cmp	r3, #2
   b6ba6:	d003      	beq.n	b6bb0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6ba8:	2b0a      	cmp	r3, #10
   b6baa:	d011      	beq.n	b6bd0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6bac:	69f6      	ldr	r6, [r6, #28]
   b6bae:	e7f4      	b.n	b6b9a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6bb0:	f1b8 0f00 	cmp.w	r8, #0
   b6bb4:	d0fa      	beq.n	b6bac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6bb6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6bb8:	a806      	add	r0, sp, #24
   b6bba:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6bbc:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6bbe:	f7ff ff71 	bl	b6aa4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6bc4:	1d3c      	adds	r4, r7, #4
   b6bc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6bc8:	682b      	ldr	r3, [r5, #0]
   b6bca:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6bcc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6bce:	e7ed      	b.n	b6bac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6bd0:	f1b9 0f00 	cmp.w	r9, #0
   b6bd4:	d0ea      	beq.n	b6bac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6bd6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6bd8:	2210      	movs	r2, #16
   b6bda:	a801      	add	r0, sp, #4
   b6bdc:	f000 fc5c 	bl	b7498 <memset>
                    a.v = 6;
   b6be0:	2306      	movs	r3, #6
   b6be2:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6be6:	ad01      	add	r5, sp, #4
   b6be8:	f104 0308 	add.w	r3, r4, #8
   b6bec:	3418      	adds	r4, #24
   b6bee:	6818      	ldr	r0, [r3, #0]
   b6bf0:	6859      	ldr	r1, [r3, #4]
   b6bf2:	462a      	mov	r2, r5
   b6bf4:	c203      	stmia	r2!, {r0, r1}
   b6bf6:	3308      	adds	r3, #8
   b6bf8:	42a3      	cmp	r3, r4
   b6bfa:	4615      	mov	r5, r2
   b6bfc:	d1f7      	bne.n	b6bee <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6bfe:	a901      	add	r1, sp, #4
   b6c00:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6c02:	ad07      	add	r5, sp, #28
   b6c04:	f7ff ff2e 	bl	b6a64 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6c0a:	1d3c      	adds	r4, r7, #4
   b6c0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6c0e:	682b      	ldr	r3, [r5, #0]
   b6c10:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6c12:	4649      	mov	r1, r9
   b6c14:	e7ca      	b.n	b6bac <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6c16:	9800      	ldr	r0, [sp, #0]
   b6c18:	f7ff fc64 	bl	b64e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6c1c:	4638      	mov	r0, r7
   b6c1e:	b015      	add	sp, #84	; 0x54
   b6c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6c24 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6c24:	4b02      	ldr	r3, [pc, #8]	; (b6c30 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6c26:	4a03      	ldr	r2, [pc, #12]	; (b6c34 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6c28:	601a      	str	r2, [r3, #0]
   b6c2a:	2200      	movs	r2, #0
   b6c2c:	605a      	str	r2, [r3, #4]

} // spark
   b6c2e:	4770      	bx	lr
   b6c30:	2003e6d4 	.word	0x2003e6d4
   b6c34:	000b78dc 	.word	0x000b78dc

000b6c38 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b6c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6c3a:	4606      	mov	r6, r0
   b6c3c:	460d      	mov	r5, r1
  size_t n = 0;
   b6c3e:	188f      	adds	r7, r1, r2
   b6c40:	2400      	movs	r4, #0
  while (size--) {
   b6c42:	42bd      	cmp	r5, r7
   b6c44:	d00c      	beq.n	b6c60 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b6c46:	6833      	ldr	r3, [r6, #0]
   b6c48:	f815 1b01 	ldrb.w	r1, [r5], #1
   b6c4c:	689b      	ldr	r3, [r3, #8]
   b6c4e:	4630      	mov	r0, r6
   b6c50:	4798      	blx	r3
     if (chunk>=0)
   b6c52:	1e03      	subs	r3, r0, #0
   b6c54:	db01      	blt.n	b6c5a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b6c56:	441c      	add	r4, r3
  while (size--) {
   b6c58:	e7f3      	b.n	b6c42 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b6c5a:	2c00      	cmp	r4, #0
   b6c5c:	bf08      	it	eq
   b6c5e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b6c60:	4620      	mov	r0, r4
   b6c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6c64 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b6c64:	b508      	push	{r3, lr}
  return write(str);
   b6c66:	f7fe ff15 	bl	b5a94 <_ZN5Print5writeEPKc>
}
   b6c6a:	bd08      	pop	{r3, pc}

000b6c6c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b6c6c:	6803      	ldr	r3, [r0, #0]
   b6c6e:	689b      	ldr	r3, [r3, #8]
   b6c70:	4718      	bx	r3

000b6c72 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b6c72:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b6c74:	210d      	movs	r1, #13
{
   b6c76:	4605      	mov	r5, r0
  size_t n = print('\r');
   b6c78:	f7ff fff8 	bl	b6c6c <_ZN5Print5printEc>
  n += print('\n');
   b6c7c:	210a      	movs	r1, #10
  size_t n = print('\r');
   b6c7e:	4604      	mov	r4, r0
  n += print('\n');
   b6c80:	4628      	mov	r0, r5
   b6c82:	f7ff fff3 	bl	b6c6c <_ZN5Print5printEc>
  return n;
}
   b6c86:	4420      	add	r0, r4
   b6c88:	bd38      	pop	{r3, r4, r5, pc}

000b6c8a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b6c8a:	b538      	push	{r3, r4, r5, lr}
   b6c8c:	4605      	mov	r5, r0
  return write(str);
   b6c8e:	f7fe ff01 	bl	b5a94 <_ZN5Print5writeEPKc>
   b6c92:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b6c94:	4628      	mov	r0, r5
   b6c96:	f7ff ffec 	bl	b6c72 <_ZN5Print7printlnEv>
  return n;
}
   b6c9a:	4420      	add	r0, r4
   b6c9c:	bd38      	pop	{r3, r4, r5, pc}

000b6c9e <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b6c9e:	f7ff bff4 	b.w	b6c8a <_ZN5Print7printlnEPKc>

000b6ca2 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b6ca2:	b530      	push	{r4, r5, lr}
   b6ca4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b6ca6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b6ca8:	2a01      	cmp	r2, #1
  *str = '\0';
   b6caa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b6cae:	bf98      	it	ls
   b6cb0:	220a      	movls	r2, #10
   b6cb2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b6cb4:	460d      	mov	r5, r1
   b6cb6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b6cba:	fb01 5312 	mls	r3, r1, r2, r5
   b6cbe:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6cc2:	2b09      	cmp	r3, #9
   b6cc4:	bf94      	ite	ls
   b6cc6:	3330      	addls	r3, #48	; 0x30
   b6cc8:	3337      	addhi	r3, #55	; 0x37
   b6cca:	b2db      	uxtb	r3, r3
  } while(n);
   b6ccc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b6cce:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b6cd2:	d9ef      	bls.n	b6cb4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b6cd4:	4621      	mov	r1, r4
   b6cd6:	f7fe fedd 	bl	b5a94 <_ZN5Print5writeEPKc>
}
   b6cda:	b00b      	add	sp, #44	; 0x2c
   b6cdc:	bd30      	pop	{r4, r5, pc}

000b6cde <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b6cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ce2:	b086      	sub	sp, #24
   b6ce4:	af00      	add	r7, sp, #0
   b6ce6:	4605      	mov	r5, r0
   b6ce8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b6cea:	1d38      	adds	r0, r7, #4
   b6cec:	2114      	movs	r1, #20
{
   b6cee:	4614      	mov	r4, r2
    va_copy(args2, args);
   b6cf0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b6cf2:	f7ff fd83 	bl	b67fc <vsnprintf>

    if (n<bufsize)
   b6cf6:	2813      	cmp	r0, #19
   b6cf8:	d80e      	bhi.n	b6d18 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b6cfa:	1d39      	adds	r1, r7, #4
   b6cfc:	4628      	mov	r0, r5
   b6cfe:	f7fe fec9 	bl	b5a94 <_ZN5Print5writeEPKc>
   b6d02:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b6d04:	b11e      	cbz	r6, b6d0e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b6d06:	4628      	mov	r0, r5
   b6d08:	f7ff ffb3 	bl	b6c72 <_ZN5Print7printlnEv>
   b6d0c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b6d0e:	4620      	mov	r0, r4
   b6d10:	3718      	adds	r7, #24
   b6d12:	46bd      	mov	sp, r7
   b6d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b6d18:	f100 0308 	add.w	r3, r0, #8
   b6d1c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b6d20:	46e8      	mov	r8, sp
        char bigger[n+1];
   b6d22:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b6d26:	4622      	mov	r2, r4
   b6d28:	1c41      	adds	r1, r0, #1
   b6d2a:	683b      	ldr	r3, [r7, #0]
   b6d2c:	4668      	mov	r0, sp
   b6d2e:	f7ff fd65 	bl	b67fc <vsnprintf>
  return write(str);
   b6d32:	4669      	mov	r1, sp
   b6d34:	4628      	mov	r0, r5
   b6d36:	f7fe fead 	bl	b5a94 <_ZN5Print5writeEPKc>
   b6d3a:	4604      	mov	r4, r0
   b6d3c:	46c5      	mov	sp, r8
   b6d3e:	e7e1      	b.n	b6d04 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b6d40 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b6d40:	4b01      	ldr	r3, [pc, #4]	; (b6d48 <_GLOBAL__sub_I_RGB+0x8>)
   b6d42:	2200      	movs	r2, #0
   b6d44:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b6d46:	4770      	bx	lr
   b6d48:	2003e6dc 	.word	0x2003e6dc

000b6d4c <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b6d4c:	2100      	movs	r1, #0
   b6d4e:	f7ff bc21 	b.w	b6594 <hal_spi_release>

000b6d52 <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b6d52:	2100      	movs	r1, #0
   b6d54:	f7ff bc16 	b.w	b6584 <hal_spi_acquire>

000b6d58 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b6d58:	b510      	push	{r4, lr}
   b6d5a:	4604      	mov	r4, r0
   b6d5c:	4608      	mov	r0, r1
{
    _spi = spi;
   b6d5e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b6d60:	f7ff fbe0 	bl	b6524 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b6d64:	2300      	movs	r3, #0
   b6d66:	6063      	str	r3, [r4, #4]
}
   b6d68:	4620      	mov	r0, r4
   b6d6a:	bd10      	pop	{r4, pc}

000b6d6c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b6d6c:	b513      	push	{r0, r1, r4, lr}
   b6d6e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b6d70:	7800      	ldrb	r0, [r0, #0]
   b6d72:	f7ff ffee 	bl	b6d52 <_ZN8SPIClass4lockEv.isra.0>
   b6d76:	b958      	cbnz	r0, b6d90 <_ZN8SPIClass5beginEv+0x24>
   b6d78:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b6d7a:	9001      	str	r0, [sp, #4]
   b6d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b6d80:	f7ff fbc0 	bl	b6504 <hal_spi_begin>
        unlock();
   b6d84:	9801      	ldr	r0, [sp, #4]
    }
}
   b6d86:	b002      	add	sp, #8
   b6d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b6d8c:	f7ff bfde 	b.w	b6d4c <_ZN8SPIClass6unlockEv.isra.0>
   b6d90:	b002      	add	sp, #8
   b6d92:	bd10      	pop	{r4, pc}

000b6d94 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b6d94:	7800      	ldrb	r0, [r0, #0]
   b6d96:	f7ff bfd9 	b.w	b6d4c <_ZN8SPIClass6unlockEv.isra.0>
	...

000b6d9c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b6d9c:	0840      	lsrs	r0, r0, #1
{
   b6d9e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b6da0:	6018      	str	r0, [r3, #0]
   b6da2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b6da4:	6818      	ldr	r0, [r3, #0]
   b6da6:	4288      	cmp	r0, r1
   b6da8:	b2e5      	uxtb	r5, r4
   b6daa:	d906      	bls.n	b6dba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b6dac:	3401      	adds	r4, #1
   b6dae:	2c08      	cmp	r4, #8
   b6db0:	d002      	beq.n	b6db8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b6db2:	0840      	lsrs	r0, r0, #1
   b6db4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b6db6:	e7f5      	b.n	b6da4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b6db8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b6dba:	4b02      	ldr	r3, [pc, #8]	; (b6dc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b6dbc:	5d5b      	ldrb	r3, [r3, r5]
   b6dbe:	7013      	strb	r3, [r2, #0]
}
   b6dc0:	bd30      	pop	{r4, r5, pc}
   b6dc2:	bf00      	nop
   b6dc4:	000b7910 	.word	0x000b7910

000b6dc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b6dc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6dcc:	4606      	mov	r6, r0
   b6dce:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b6dd0:	7800      	ldrb	r0, [r0, #0]
{
   b6dd2:	460c      	mov	r4, r1
    CHECK(lock());
   b6dd4:	f7ff ffbd 	bl	b6d52 <_ZN8SPIClass4lockEv.isra.0>
   b6dd8:	2800      	cmp	r0, #0
   b6dda:	db1b      	blt.n	b6e14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b6ddc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b6dde:	2214      	movs	r2, #20
   b6de0:	2100      	movs	r1, #0
   b6de2:	a809      	add	r0, sp, #36	; 0x24
   b6de4:	f000 fb58 	bl	b7498 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b6de8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b6dea:	2200      	movs	r2, #0
   b6dec:	a909      	add	r1, sp, #36	; 0x24
   b6dee:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b6df0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b6df4:	f7ff fba6 	bl	b6544 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b6df8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b6dfc:	b113      	cbz	r3, b6e04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b6dfe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b6e02:	b155      	cbz	r5, b6e1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b6e04:	2700      	movs	r7, #0
   b6e06:	46b9      	mov	r9, r7
   b6e08:	46b8      	mov	r8, r7
   b6e0a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b6e0c:	7923      	ldrb	r3, [r4, #4]
   b6e0e:	b15d      	cbz	r5, b6e28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b6e10:	b1c3      	cbz	r3, b6e44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b6e12:	2000      	movs	r0, #0
}
   b6e14:	b00f      	add	sp, #60	; 0x3c
   b6e16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b6e1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b6e1e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b6e22:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b6e26:	e7f1      	b.n	b6e0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b6e28:	2b00      	cmp	r3, #0
   b6e2a:	d135      	bne.n	b6e98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b6e2c:	68a3      	ldr	r3, [r4, #8]
   b6e2e:	4543      	cmp	r3, r8
   b6e30:	d108      	bne.n	b6e44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b6e32:	f88d 9020 	strb.w	r9, [sp, #32]
   b6e36:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6e3a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6e3e:	89a3      	ldrh	r3, [r4, #12]
   b6e40:	429a      	cmp	r2, r3
   b6e42:	d0e6      	beq.n	b6e12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b6e44:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6e46:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b6e48:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b6e4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   b6e4e:	ab04      	add	r3, sp, #16
   b6e50:	f10d 020f 	add.w	r2, sp, #15
   b6e54:	f7ff ffa2 	bl	b6d9c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b6e58:	7921      	ldrb	r1, [r4, #4]
   b6e5a:	b985      	cbnz	r5, b6e7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b6e5c:	b989      	cbnz	r1, b6e82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6e5e:	68a3      	ldr	r3, [r4, #8]
   b6e60:	4543      	cmp	r3, r8
   b6e62:	d30e      	bcc.n	b6e82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b6e64:	f88d 9020 	strb.w	r9, [sp, #32]
   b6e68:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b6e6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b6e70:	89a3      	ldrh	r3, [r4, #12]
   b6e72:	429a      	cmp	r2, r3
   b6e74:	d105      	bne.n	b6e82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b6e76:	9b04      	ldr	r3, [sp, #16]
   b6e78:	4543      	cmp	r3, r8
   b6e7a:	d102      	bne.n	b6e82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b6e7c:	e7c9      	b.n	b6e12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b6e7e:	2900      	cmp	r1, #0
   b6e80:	d1f9      	bne.n	b6e76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b6e82:	2300      	movs	r3, #0
   b6e84:	9301      	str	r3, [sp, #4]
   b6e86:	7b63      	ldrb	r3, [r4, #13]
   b6e88:	9300      	str	r3, [sp, #0]
   b6e8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b6e8e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b6e90:	7830      	ldrb	r0, [r6, #0]
   b6e92:	f7ff fb6f 	bl	b6574 <hal_spi_set_settings>
   b6e96:	e7bc      	b.n	b6e12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b6e98:	e9cd 5500 	strd	r5, r5, [sp]
   b6e9c:	462b      	mov	r3, r5
   b6e9e:	462a      	mov	r2, r5
   b6ea0:	2101      	movs	r1, #1
   b6ea2:	e7f5      	b.n	b6e90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b6ea4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b6ea4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b6ea6:	7800      	ldrb	r0, [r0, #0]
   b6ea8:	f7ff fb34 	bl	b6514 <hal_spi_transfer>
}
   b6eac:	b2c0      	uxtb	r0, r0
   b6eae:	bd08      	pop	{r3, pc}

000b6eb0 <_ZN8SPIClass8transferEPKvPvjPFvvE>:

void SPIClass::transfer(const void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   b6eb0:	b530      	push	{r4, r5, lr}
   b6eb2:	b087      	sub	sp, #28
   b6eb4:	4604      	mov	r4, r0
   b6eb6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   b6eb8:	9500      	str	r5, [sp, #0]
   b6eba:	7800      	ldrb	r0, [r0, #0]
   b6ebc:	f7ff fb4a 	bl	b6554 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   b6ec0:	b93d      	cbnz	r5, b6ed2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   b6ec2:	7820      	ldrb	r0, [r4, #0]
   b6ec4:	a902      	add	r1, sp, #8
   b6ec6:	f7ff fb4d 	bl	b6564 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   b6eca:	f89d 3014 	ldrb.w	r3, [sp, #20]
   b6ece:	07db      	lsls	r3, r3, #31
   b6ed0:	d4f7      	bmi.n	b6ec2 <_ZN8SPIClass8transferEPKvPvjPFvvE+0x12>
    }
}
   b6ed2:	b007      	add	sp, #28
   b6ed4:	bd30      	pop	{r4, r5, pc}
	...

000b6ed8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b6ed8:	4b05      	ldr	r3, [pc, #20]	; (b6ef0 <_GLOBAL__sub_I_System+0x18>)
   b6eda:	2202      	movs	r2, #2
   b6edc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b6ede:	4b05      	ldr	r3, [pc, #20]	; (b6ef4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b6ee0:	4a05      	ldr	r2, [pc, #20]	; (b6ef8 <_GLOBAL__sub_I_System+0x20>)
   b6ee2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6ee4:	2000      	movs	r0, #0
   b6ee6:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b6eea:	f7ff bbdb 	b.w	b66a4 <set_system_mode>
   b6eee:	bf00      	nop
   b6ef0:	2003e6f8 	.word	0x2003e6f8
   b6ef4:	2003e6ec 	.word	0x2003e6ec
   b6ef8:	ffff0000 	.word	0xffff0000

000b6efc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6efc:	4b02      	ldr	r3, [pc, #8]	; (b6f08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6efe:	681a      	ldr	r2, [r3, #0]
   b6f00:	4b02      	ldr	r3, [pc, #8]	; (b6f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b6f02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b6f04:	4770      	bx	lr
   b6f06:	bf00      	nop
   b6f08:	2003e148 	.word	0x2003e148
   b6f0c:	2003e6fc 	.word	0x2003e6fc

000b6f10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6f10:	4770      	bx	lr

000b6f12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6f12:	7441      	strb	r1, [r0, #17]
}
   b6f14:	4770      	bx	lr

000b6f16 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b6f16:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6f18:	7c00      	ldrb	r0, [r0, #16]
   b6f1a:	f7ff fb73 	bl	b6604 <hal_usart_available_data_for_write>
}
   b6f1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f22:	bd08      	pop	{r3, pc}

000b6f24 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b6f24:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b6f26:	7c00      	ldrb	r0, [r0, #16]
   b6f28:	f7ff fb44 	bl	b65b4 <hal_usart_available>
}
   b6f2c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6f30:	bd08      	pop	{r3, pc}

000b6f32 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6f32:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b6f34:	7c00      	ldrb	r0, [r0, #16]
   b6f36:	f7ff fb4d 	bl	b65d4 <hal_usart_peek>
}
   b6f3a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f3e:	bd08      	pop	{r3, pc}

000b6f40 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6f40:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6f42:	7c00      	ldrb	r0, [r0, #16]
   b6f44:	f7ff fb3e 	bl	b65c4 <hal_usart_read>
}
   b6f48:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6f4c:	bd08      	pop	{r3, pc}

000b6f4e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6f4e:	7c00      	ldrb	r0, [r0, #16]
   b6f50:	f7ff bb48 	b.w	b65e4 <hal_usart_flush>

000b6f54 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b6f54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f56:	7c45      	ldrb	r5, [r0, #17]
{
   b6f58:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f5a:	b12d      	cbz	r5, b6f68 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b6f5c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b6f5e:	b003      	add	sp, #12
   b6f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b6f64:	f7ff bb1e 	b.w	b65a4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b6f68:	7c00      	ldrb	r0, [r0, #16]
   b6f6a:	9101      	str	r1, [sp, #4]
   b6f6c:	f7ff fb4a 	bl	b6604 <hal_usart_available_data_for_write>
   b6f70:	2800      	cmp	r0, #0
   b6f72:	9901      	ldr	r1, [sp, #4]
   b6f74:	dcf2      	bgt.n	b6f5c <_ZN11USARTSerial5writeEh+0x8>
}
   b6f76:	4628      	mov	r0, r5
   b6f78:	b003      	add	sp, #12
   b6f7a:	bd30      	pop	{r4, r5, pc}

000b6f7c <_ZN11USARTSerialD0Ev>:
   b6f7c:	b510      	push	{r4, lr}
   b6f7e:	2114      	movs	r1, #20
   b6f80:	4604      	mov	r4, r0
   b6f82:	f7fd f88a 	bl	b409a <_ZdlPvj>
   b6f86:	4620      	mov	r0, r4
   b6f88:	bd10      	pop	{r4, pc}
	...

000b6f8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b6f8c:	b510      	push	{r4, lr}
   b6f8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6f92:	4604      	mov	r4, r0
   b6f94:	4608      	mov	r0, r1
   b6f96:	4611      	mov	r1, r2
   b6f98:	2200      	movs	r2, #0
   b6f9a:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b6f9e:	4b04      	ldr	r3, [pc, #16]	; (b6fb0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b6fa0:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6fa2:	2301      	movs	r3, #1
  _serial = serial;
   b6fa4:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b6fa6:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b6fa8:	f7ff fb34 	bl	b6614 <hal_usart_init_ex>
}
   b6fac:	4620      	mov	r0, r4
   b6fae:	bd10      	pop	{r4, pc}
   b6fb0:	000b793c 	.word	0x000b793c

000b6fb4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6fb4:	7441      	strb	r1, [r0, #17]
}
   b6fb6:	4770      	bx	lr

000b6fb8 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6fb8:	4770      	bx	lr

000b6fba <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6fba:	4770      	bx	lr

000b6fbc <_ZN9USBSerial4readEv>:
{
   b6fbc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6fbe:	2100      	movs	r1, #0
   b6fc0:	7c00      	ldrb	r0, [r0, #16]
   b6fc2:	f7ff fb4f 	bl	b6664 <HAL_USB_USART_Receive_Data>
}
   b6fc6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fca:	bd08      	pop	{r3, pc}

000b6fcc <_ZN9USBSerial4peekEv>:
{
   b6fcc:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6fce:	2101      	movs	r1, #1
   b6fd0:	7c00      	ldrb	r0, [r0, #16]
   b6fd2:	f7ff fb47 	bl	b6664 <HAL_USB_USART_Receive_Data>
}
   b6fd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6fda:	bd08      	pop	{r3, pc}

000b6fdc <_ZN9USBSerial17availableForWriteEv>:
{
   b6fdc:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6fde:	7c00      	ldrb	r0, [r0, #16]
   b6fe0:	f7ff fb38 	bl	b6654 <HAL_USB_USART_Available_Data_For_Write>
}
   b6fe4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6fe8:	bd08      	pop	{r3, pc}

000b6fea <_ZN9USBSerial9availableEv>:
{
   b6fea:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6fec:	7c00      	ldrb	r0, [r0, #16]
   b6fee:	f7ff fb29 	bl	b6644 <HAL_USB_USART_Available_Data>
}
   b6ff2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6ff6:	bd08      	pop	{r3, pc}

000b6ff8 <_ZN9USBSerial5writeEh>:
{
   b6ff8:	b513      	push	{r0, r1, r4, lr}
   b6ffa:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6ffc:	7c00      	ldrb	r0, [r0, #16]
{
   b6ffe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b7000:	f7ff fb28 	bl	b6654 <HAL_USB_USART_Available_Data_For_Write>
   b7004:	2800      	cmp	r0, #0
   b7006:	9901      	ldr	r1, [sp, #4]
   b7008:	dc01      	bgt.n	b700e <_ZN9USBSerial5writeEh+0x16>
   b700a:	7c60      	ldrb	r0, [r4, #17]
   b700c:	b120      	cbz	r0, b7018 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b700e:	7c20      	ldrb	r0, [r4, #16]
   b7010:	f7ff fb30 	bl	b6674 <HAL_USB_USART_Send_Data>
   b7014:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b7018:	b002      	add	sp, #8
   b701a:	bd10      	pop	{r4, pc}

000b701c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b701c:	7c00      	ldrb	r0, [r0, #16]
   b701e:	f7ff bb31 	b.w	b6684 <HAL_USB_USART_Flush_Data>

000b7022 <_ZN9USBSerialD0Ev>:
   b7022:	b510      	push	{r4, lr}
   b7024:	2114      	movs	r1, #20
   b7026:	4604      	mov	r4, r0
   b7028:	f7fd f837 	bl	b409a <_ZdlPvj>
   b702c:	4620      	mov	r0, r4
   b702e:	bd10      	pop	{r4, pc}

000b7030 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b7030:	b510      	push	{r4, lr}
   b7032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b7036:	4604      	mov	r4, r0
   b7038:	4608      	mov	r0, r1
   b703a:	2100      	movs	r1, #0
   b703c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b7040:	4b04      	ldr	r3, [pc, #16]	; (b7054 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b7042:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b7044:	2301      	movs	r3, #1
  _serial = serial;
   b7046:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b7048:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b704a:	4611      	mov	r1, r2
   b704c:	f7ff faea 	bl	b6624 <HAL_USB_USART_Init>
}
   b7050:	4620      	mov	r0, r4
   b7052:	bd10      	pop	{r4, pc}
   b7054:	000b796c 	.word	0x000b796c

000b7058 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b7058:	7c00      	ldrb	r0, [r0, #16]
   b705a:	2200      	movs	r2, #0
   b705c:	f7ff baea 	b.w	b6634 <HAL_USB_USART_Begin>

000b7060 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   b7060:	7c00      	ldrb	r0, [r0, #16]
   b7062:	f7ff bb17 	b.w	b6694 <HAL_USB_USART_Is_Enabled>

000b7066 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   b7066:	f7ff bffb 	b.w	b7060 <_ZN9USBSerial9isEnabledEv>

000b706a <_Z19acquireSerialBufferv>:
{
   b706a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b706c:	2214      	movs	r2, #20
{
   b706e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b7070:	2100      	movs	r1, #0
   b7072:	f000 fa11 	bl	b7498 <memset>
}
   b7076:	4620      	mov	r0, r4
   b7078:	bd10      	pop	{r4, pc}
	...

000b707c <_Z16_fetch_usbserialv>:
{
   b707c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b707e:	4c0f      	ldr	r4, [pc, #60]	; (b70bc <_Z16_fetch_usbserialv+0x40>)
{
   b7080:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b7082:	a803      	add	r0, sp, #12
   b7084:	f7ff fff1 	bl	b706a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b7088:	7821      	ldrb	r1, [r4, #0]
   b708a:	f3bf 8f5b 	dmb	ish
   b708e:	f011 0101 	ands.w	r1, r1, #1
   b7092:	d10f      	bne.n	b70b4 <_Z16_fetch_usbserialv+0x38>
   b7094:	4620      	mov	r0, r4
   b7096:	9101      	str	r1, [sp, #4]
   b7098:	f7fd f801 	bl	b409e <__cxa_guard_acquire>
   b709c:	9901      	ldr	r1, [sp, #4]
   b709e:	b148      	cbz	r0, b70b4 <_Z16_fetch_usbserialv+0x38>
   b70a0:	aa03      	add	r2, sp, #12
   b70a2:	4807      	ldr	r0, [pc, #28]	; (b70c0 <_Z16_fetch_usbserialv+0x44>)
   b70a4:	f7ff ffc4 	bl	b7030 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b70a8:	4620      	mov	r0, r4
   b70aa:	f7fc fffd 	bl	b40a8 <__cxa_guard_release>
   b70ae:	4805      	ldr	r0, [pc, #20]	; (b70c4 <_Z16_fetch_usbserialv+0x48>)
   b70b0:	f000 f9ce 	bl	b7450 <atexit>
	return _usbserial;
}
   b70b4:	4802      	ldr	r0, [pc, #8]	; (b70c0 <_Z16_fetch_usbserialv+0x44>)
   b70b6:	b008      	add	sp, #32
   b70b8:	bd10      	pop	{r4, pc}
   b70ba:	bf00      	nop
   b70bc:	2003e700 	.word	0x2003e700
   b70c0:	2003e704 	.word	0x2003e704
   b70c4:	000b6fb9 	.word	0x000b6fb9

000b70c8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b70c8:	2200      	movs	r2, #0
   b70ca:	6840      	ldr	r0, [r0, #4]
   b70cc:	4611      	mov	r1, r2
   b70ce:	f7ff bb3d 	b.w	b674c <network_ready>

000b70d2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b70d2:	2200      	movs	r2, #0
   b70d4:	6840      	ldr	r0, [r0, #4]
   b70d6:	4611      	mov	r1, r2
   b70d8:	f7ff bb58 	b.w	b678c <network_listening>

000b70dc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b70dc:	2200      	movs	r2, #0
   b70de:	6840      	ldr	r0, [r0, #4]
   b70e0:	4611      	mov	r1, r2
   b70e2:	f7ff bb63 	b.w	b67ac <network_get_listen_timeout>

000b70e6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b70e6:	6840      	ldr	r0, [r0, #4]
   b70e8:	2200      	movs	r2, #0
   b70ea:	f7ff bb57 	b.w	b679c <network_set_listen_timeout>

000b70ee <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b70ee:	6840      	ldr	r0, [r0, #4]
   b70f0:	2200      	movs	r2, #0
   b70f2:	f081 0101 	eor.w	r1, r1, #1
   b70f6:	f7ff bb41 	b.w	b677c <network_listen>

000b70fa <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b70fa:	2300      	movs	r3, #0
   b70fc:	6840      	ldr	r0, [r0, #4]
   b70fe:	461a      	mov	r2, r3
   b7100:	4619      	mov	r1, r3
   b7102:	f7ff bb33 	b.w	b676c <network_off>

000b7106 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b7106:	2300      	movs	r3, #0
   b7108:	6840      	ldr	r0, [r0, #4]
   b710a:	461a      	mov	r2, r3
   b710c:	4619      	mov	r1, r3
   b710e:	f7ff bb25 	b.w	b675c <network_on>

000b7112 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b7112:	2200      	movs	r2, #0
   b7114:	6840      	ldr	r0, [r0, #4]
   b7116:	4611      	mov	r1, r2
   b7118:	f7ff bb08 	b.w	b672c <network_connecting>

000b711c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b711c:	6840      	ldr	r0, [r0, #4]
   b711e:	2200      	movs	r2, #0
   b7120:	2102      	movs	r1, #2
   b7122:	f7ff bb0b 	b.w	b673c <network_disconnect>

000b7126 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b7126:	2300      	movs	r3, #0
   b7128:	6840      	ldr	r0, [r0, #4]
   b712a:	461a      	mov	r2, r3
   b712c:	f7ff baf6 	b.w	b671c <network_connect>

000b7130 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b7130:	4b02      	ldr	r3, [pc, #8]	; (b713c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b7132:	2204      	movs	r2, #4
   b7134:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b7136:	4a02      	ldr	r2, [pc, #8]	; (b7140 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b7138:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b713a:	4770      	bx	lr
   b713c:	2003e718 	.word	0x2003e718
   b7140:	000b799c 	.word	0x000b799c

000b7144 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b7144:	4b01      	ldr	r3, [pc, #4]	; (b714c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b7146:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b7148:	4770      	bx	lr
   b714a:	bf00      	nop
   b714c:	2003e14c 	.word	0x2003e14c

000b7150 <serialEventRun>:
{
   b7150:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b7152:	4b0b      	ldr	r3, [pc, #44]	; (b7180 <serialEventRun+0x30>)
   b7154:	b143      	cbz	r3, b7168 <serialEventRun+0x18>
   b7156:	f7ff ff91 	bl	b707c <_Z16_fetch_usbserialv>
   b715a:	6803      	ldr	r3, [r0, #0]
   b715c:	691b      	ldr	r3, [r3, #16]
   b715e:	4798      	blx	r3
   b7160:	2800      	cmp	r0, #0
   b7162:	dd01      	ble.n	b7168 <serialEventRun+0x18>
        serialEvent();
   b7164:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b7168:	4b06      	ldr	r3, [pc, #24]	; (b7184 <serialEventRun+0x34>)
   b716a:	b143      	cbz	r3, b717e <serialEventRun+0x2e>
   b716c:	f000 f94a 	bl	b7404 <_Z22__fetch_global_Serial1v>
   b7170:	6803      	ldr	r3, [r0, #0]
   b7172:	691b      	ldr	r3, [r3, #16]
   b7174:	4798      	blx	r3
   b7176:	2800      	cmp	r0, #0
   b7178:	dd01      	ble.n	b717e <serialEventRun+0x2e>
        serialEvent1();
   b717a:	f3af 8000 	nop.w
}
   b717e:	bd08      	pop	{r3, pc}
	...

000b7188 <_post_loop>:
{
   b7188:	b508      	push	{r3, lr}
	serialEventRun();
   b718a:	f7ff ffe1 	bl	b7150 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b718e:	f7ff f929 	bl	b63e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b7192:	4b01      	ldr	r3, [pc, #4]	; (b7198 <_post_loop+0x10>)
   b7194:	6018      	str	r0, [r3, #0]
}
   b7196:	bd08      	pop	{r3, pc}
   b7198:	2003e728 	.word	0x2003e728

000b719c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b719c:	4805      	ldr	r0, [pc, #20]	; (b71b4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b719e:	4a06      	ldr	r2, [pc, #24]	; (b71b8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b71a0:	4906      	ldr	r1, [pc, #24]	; (b71bc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b71a2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b71a4:	1a12      	subs	r2, r2, r0
   b71a6:	f000 f969 	bl	b747c <memcpy>
    __backup_sram_signature = signature;
   b71aa:	4b05      	ldr	r3, [pc, #20]	; (b71c0 <_Z33system_initialize_user_backup_ramv+0x24>)
   b71ac:	4a05      	ldr	r2, [pc, #20]	; (b71c4 <_Z33system_initialize_user_backup_ramv+0x28>)
   b71ae:	601a      	str	r2, [r3, #0]
}
   b71b0:	bd08      	pop	{r3, pc}
   b71b2:	bf00      	nop
   b71b4:	2003f400 	.word	0x2003f400
   b71b8:	2003f404 	.word	0x2003f404
   b71bc:	000b7a94 	.word	0x000b7a94
   b71c0:	2003f400 	.word	0x2003f400
   b71c4:	9a271c1e 	.word	0x9a271c1e

000b71c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b71c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b71ca:	2300      	movs	r3, #0
   b71cc:	9300      	str	r3, [sp, #0]
   b71ce:	461a      	mov	r2, r3
   b71d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b71d4:	f7ff fa88 	bl	b66e8 <system_ctrl_set_result>
}
   b71d8:	b003      	add	sp, #12
   b71da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b71e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b71e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b71e2:	8843      	ldrh	r3, [r0, #2]
   b71e4:	2b0a      	cmp	r3, #10
   b71e6:	d008      	beq.n	b71fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b71e8:	2b50      	cmp	r3, #80	; 0x50
   b71ea:	d10b      	bne.n	b7204 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b71ec:	4b09      	ldr	r3, [pc, #36]	; (b7214 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b71ee:	681b      	ldr	r3, [r3, #0]
   b71f0:	b14b      	cbz	r3, b7206 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b71f2:	b003      	add	sp, #12
   b71f4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b71f8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b71fa:	f7ff ffe5 	bl	b71c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b71fe:	b003      	add	sp, #12
   b7200:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b7204:	2300      	movs	r3, #0
   b7206:	9300      	str	r3, [sp, #0]
   b7208:	461a      	mov	r2, r3
   b720a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b720e:	f7ff fa6b 	bl	b66e8 <system_ctrl_set_result>
}
   b7212:	e7f4      	b.n	b71fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b7214:	2003e724 	.word	0x2003e724

000b7218 <module_user_init_hook>:
{
   b7218:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b721a:	4812      	ldr	r0, [pc, #72]	; (b7264 <module_user_init_hook+0x4c>)
   b721c:	2100      	movs	r1, #0
   b721e:	f7ff fafd 	bl	b681c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b7222:	4b11      	ldr	r3, [pc, #68]	; (b7268 <module_user_init_hook+0x50>)
   b7224:	681a      	ldr	r2, [r3, #0]
   b7226:	4b11      	ldr	r3, [pc, #68]	; (b726c <module_user_init_hook+0x54>)
   b7228:	429a      	cmp	r2, r3
   b722a:	4b11      	ldr	r3, [pc, #68]	; (b7270 <module_user_init_hook+0x58>)
   b722c:	bf0c      	ite	eq
   b722e:	2201      	moveq	r2, #1
   b7230:	2200      	movne	r2, #0
   b7232:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b7234:	d001      	beq.n	b723a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b7236:	f7ff ffb1 	bl	b719c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b723a:	f7ff f8bb 	bl	b63b4 <HAL_RNG_GetRandomNumber>
   b723e:	4604      	mov	r4, r0
    srand(seed);
   b7240:	f000 f932 	bl	b74a8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b7244:	4b0b      	ldr	r3, [pc, #44]	; (b7274 <module_user_init_hook+0x5c>)
   b7246:	b113      	cbz	r3, b724e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b7248:	4620      	mov	r0, r4
   b724a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b724e:	2100      	movs	r1, #0
   b7250:	4808      	ldr	r0, [pc, #32]	; (b7274 <module_user_init_hook+0x5c>)
   b7252:	f7ff fa5b 	bl	b670c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b7256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b725a:	4807      	ldr	r0, [pc, #28]	; (b7278 <module_user_init_hook+0x60>)
   b725c:	2100      	movs	r1, #0
   b725e:	f7ff ba39 	b.w	b66d4 <system_ctrl_set_app_request_handler>
   b7262:	bf00      	nop
   b7264:	000b7145 	.word	0x000b7145
   b7268:	2003f400 	.word	0x2003f400
   b726c:	9a271c1e 	.word	0x9a271c1e
   b7270:	2003e720 	.word	0x2003e720
   b7274:	00000000 	.word	0x00000000
   b7278:	000b71e1 	.word	0x000b71e1

000b727c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b727c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b727e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b7280:	d902      	bls.n	b7288 <pinAvailable+0xc>
    return false;
   b7282:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b7284:	b002      	add	sp, #8
   b7286:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b7288:	f1a0 030b 	sub.w	r3, r0, #11
   b728c:	2b02      	cmp	r3, #2
   b728e:	d81a      	bhi.n	b72c6 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b7290:	4c17      	ldr	r4, [pc, #92]	; (b72f0 <pinAvailable+0x74>)
   b7292:	7821      	ldrb	r1, [r4, #0]
   b7294:	f3bf 8f5b 	dmb	ish
   b7298:	f011 0101 	ands.w	r1, r1, #1
   b729c:	d10b      	bne.n	b72b6 <pinAvailable+0x3a>
   b729e:	4620      	mov	r0, r4
   b72a0:	9101      	str	r1, [sp, #4]
   b72a2:	f7fc fefc 	bl	b409e <__cxa_guard_acquire>
   b72a6:	9901      	ldr	r1, [sp, #4]
   b72a8:	b128      	cbz	r0, b72b6 <pinAvailable+0x3a>
   b72aa:	4812      	ldr	r0, [pc, #72]	; (b72f4 <pinAvailable+0x78>)
   b72ac:	f7ff fd54 	bl	b6d58 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b72b0:	4620      	mov	r0, r4
   b72b2:	f7fc fef9 	bl	b40a8 <__cxa_guard_release>
   b72b6:	4b0f      	ldr	r3, [pc, #60]	; (b72f4 <pinAvailable+0x78>)
   b72b8:	7818      	ldrb	r0, [r3, #0]
   b72ba:	f7ff f93b 	bl	b6534 <hal_spi_is_enabled>
   b72be:	2800      	cmp	r0, #0
   b72c0:	d1df      	bne.n	b7282 <pinAvailable+0x6>
  return true; // 'pin' is available
   b72c2:	2001      	movs	r0, #1
   b72c4:	e7de      	b.n	b7284 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b72c6:	2801      	cmp	r0, #1
   b72c8:	d809      	bhi.n	b72de <pinAvailable+0x62>
   b72ca:	f000 f85b 	bl	b7384 <_Z19__fetch_global_Wirev>
   b72ce:	2100      	movs	r1, #0
   b72d0:	7c00      	ldrb	r0, [r0, #16]
   b72d2:	f7ff f8e7 	bl	b64a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b72d6:	f080 0001 	eor.w	r0, r0, #1
   b72da:	b2c0      	uxtb	r0, r0
   b72dc:	e7d2      	b.n	b7284 <pinAvailable+0x8>
   b72de:	3809      	subs	r0, #9
   b72e0:	2801      	cmp	r0, #1
   b72e2:	d8ee      	bhi.n	b72c2 <pinAvailable+0x46>
   b72e4:	f000 f88e 	bl	b7404 <_Z22__fetch_global_Serial1v>
   b72e8:	7c00      	ldrb	r0, [r0, #16]
   b72ea:	f7ff f983 	bl	b65f4 <hal_usart_is_enabled>
   b72ee:	e7f2      	b.n	b72d6 <pinAvailable+0x5a>
   b72f0:	2003e1b4 	.word	0x2003e1b4
   b72f4:	2003e1b8 	.word	0x2003e1b8

000b72f8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b72f8:	2823      	cmp	r0, #35	; 0x23
{
   b72fa:	b538      	push	{r3, r4, r5, lr}
   b72fc:	4604      	mov	r4, r0
   b72fe:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b7300:	d80a      	bhi.n	b7318 <pinMode+0x20>
   b7302:	29ff      	cmp	r1, #255	; 0xff
   b7304:	d008      	beq.n	b7318 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b7306:	f7ff ffb9 	bl	b727c <pinAvailable>
   b730a:	b128      	cbz	r0, b7318 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b730c:	4629      	mov	r1, r5
   b730e:	4620      	mov	r0, r4
}
   b7310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b7314:	f7ff b86e 	b.w	b63f4 <HAL_Pin_Mode>
}
   b7318:	bd38      	pop	{r3, r4, r5, pc}

000b731a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b731a:	b538      	push	{r3, r4, r5, lr}
   b731c:	4604      	mov	r4, r0
   b731e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b7320:	f7ff f870 	bl	b6404 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b7324:	28ff      	cmp	r0, #255	; 0xff
   b7326:	d010      	beq.n	b734a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b7328:	2806      	cmp	r0, #6
   b732a:	d804      	bhi.n	b7336 <digitalWrite+0x1c>
   b732c:	234d      	movs	r3, #77	; 0x4d
   b732e:	fa23 f000 	lsr.w	r0, r3, r0
   b7332:	07c3      	lsls	r3, r0, #31
   b7334:	d409      	bmi.n	b734a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b7336:	4620      	mov	r0, r4
   b7338:	f7ff ffa0 	bl	b727c <pinAvailable>
   b733c:	b128      	cbz	r0, b734a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b733e:	4629      	mov	r1, r5
   b7340:	4620      	mov	r0, r4
}
   b7342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b7346:	f7ff b865 	b.w	b6414 <HAL_GPIO_Write>
}
   b734a:	bd38      	pop	{r3, r4, r5, pc}

000b734c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b734c:	4770      	bx	lr
	...

000b7350 <_Z17acquireWireBufferv>:
{
   b7350:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b7352:	4b0a      	ldr	r3, [pc, #40]	; (b737c <_Z17acquireWireBufferv+0x2c>)
   b7354:	6003      	str	r3, [r0, #0]
   b7356:	2301      	movs	r3, #1
{
   b7358:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b735a:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b735c:	4908      	ldr	r1, [pc, #32]	; (b7380 <_Z17acquireWireBufferv+0x30>)
   b735e:	2020      	movs	r0, #32
   b7360:	f000 f874 	bl	b744c <_ZnajRKSt9nothrow_t>
	};
   b7364:	2520      	movs	r5, #32
   b7366:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b7368:	4905      	ldr	r1, [pc, #20]	; (b7380 <_Z17acquireWireBufferv+0x30>)
	};
   b736a:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b736c:	4628      	mov	r0, r5
   b736e:	f000 f86d 	bl	b744c <_ZnajRKSt9nothrow_t>
	};
   b7372:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b7376:	4620      	mov	r0, r4
   b7378:	bd38      	pop	{r3, r4, r5, pc}
   b737a:	bf00      	nop
   b737c:	00010018 	.word	0x00010018
   b7380:	000b79d0 	.word	0x000b79d0

000b7384 <_Z19__fetch_global_Wirev>:
{
   b7384:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7386:	4d0e      	ldr	r5, [pc, #56]	; (b73c0 <_Z19__fetch_global_Wirev+0x3c>)
   b7388:	7829      	ldrb	r1, [r5, #0]
   b738a:	f3bf 8f5b 	dmb	ish
   b738e:	f011 0401 	ands.w	r4, r1, #1
{
   b7392:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b7394:	d111      	bne.n	b73ba <_Z19__fetch_global_Wirev+0x36>
   b7396:	4628      	mov	r0, r5
   b7398:	f7fc fe81 	bl	b409e <__cxa_guard_acquire>
   b739c:	b168      	cbz	r0, b73ba <_Z19__fetch_global_Wirev+0x36>
   b739e:	4668      	mov	r0, sp
   b73a0:	f7ff ffd6 	bl	b7350 <_Z17acquireWireBufferv>
   b73a4:	466a      	mov	r2, sp
   b73a6:	4621      	mov	r1, r4
   b73a8:	4806      	ldr	r0, [pc, #24]	; (b73c4 <_Z19__fetch_global_Wirev+0x40>)
   b73aa:	f7ff fab5 	bl	b6918 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b73ae:	4628      	mov	r0, r5
   b73b0:	f7fc fe7a 	bl	b40a8 <__cxa_guard_release>
   b73b4:	4804      	ldr	r0, [pc, #16]	; (b73c8 <_Z19__fetch_global_Wirev+0x44>)
   b73b6:	f000 f84b 	bl	b7450 <atexit>
	return wire;
}
   b73ba:	4802      	ldr	r0, [pc, #8]	; (b73c4 <_Z19__fetch_global_Wirev+0x40>)
   b73bc:	b007      	add	sp, #28
   b73be:	bd30      	pop	{r4, r5, pc}
   b73c0:	2003e72c 	.word	0x2003e72c
   b73c4:	2003e730 	.word	0x2003e730
   b73c8:	000b734d 	.word	0x000b734d

000b73cc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b73cc:	4770      	bx	lr
	...

000b73d0 <_Z20acquireSerial1Bufferv>:
{
   b73d0:	b538      	push	{r3, r4, r5, lr}
   b73d2:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b73d4:	2514      	movs	r5, #20
   b73d6:	462a      	mov	r2, r5
   b73d8:	2100      	movs	r1, #0
   b73da:	f000 f85d 	bl	b7498 <memset>
   b73de:	8025      	strh	r5, [r4, #0]
   b73e0:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73e2:	4907      	ldr	r1, [pc, #28]	; (b7400 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b73e4:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73e6:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b73e8:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73ea:	f000 f82f 	bl	b744c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73ee:	4904      	ldr	r1, [pc, #16]	; (b7400 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b73f0:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b73f2:	4628      	mov	r0, r5
   b73f4:	f000 f82a 	bl	b744c <_ZnajRKSt9nothrow_t>
    };
   b73f8:	60e0      	str	r0, [r4, #12]
}
   b73fa:	4620      	mov	r0, r4
   b73fc:	bd38      	pop	{r3, r4, r5, pc}
   b73fe:	bf00      	nop
   b7400:	000b79d0 	.word	0x000b79d0

000b7404 <_Z22__fetch_global_Serial1v>:
{
   b7404:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7406:	4d0e      	ldr	r5, [pc, #56]	; (b7440 <_Z22__fetch_global_Serial1v+0x3c>)
   b7408:	7829      	ldrb	r1, [r5, #0]
   b740a:	f3bf 8f5b 	dmb	ish
   b740e:	f011 0401 	ands.w	r4, r1, #1
{
   b7412:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b7414:	d111      	bne.n	b743a <_Z22__fetch_global_Serial1v+0x36>
   b7416:	4628      	mov	r0, r5
   b7418:	f7fc fe41 	bl	b409e <__cxa_guard_acquire>
   b741c:	b168      	cbz	r0, b743a <_Z22__fetch_global_Serial1v+0x36>
   b741e:	a801      	add	r0, sp, #4
   b7420:	f7ff ffd6 	bl	b73d0 <_Z20acquireSerial1Bufferv>
   b7424:	aa01      	add	r2, sp, #4
   b7426:	4621      	mov	r1, r4
   b7428:	4806      	ldr	r0, [pc, #24]	; (b7444 <_Z22__fetch_global_Serial1v+0x40>)
   b742a:	f7ff fdaf 	bl	b6f8c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b742e:	4628      	mov	r0, r5
   b7430:	f7fc fe3a 	bl	b40a8 <__cxa_guard_release>
   b7434:	4804      	ldr	r0, [pc, #16]	; (b7448 <_Z22__fetch_global_Serial1v+0x44>)
   b7436:	f000 f80b 	bl	b7450 <atexit>
    return serial1;
}
   b743a:	4802      	ldr	r0, [pc, #8]	; (b7444 <_Z22__fetch_global_Serial1v+0x40>)
   b743c:	b007      	add	sp, #28
   b743e:	bd30      	pop	{r4, r5, pc}
   b7440:	2003e744 	.word	0x2003e744
   b7444:	2003e748 	.word	0x2003e748
   b7448:	000b73cd 	.word	0x000b73cd

000b744c <_ZnajRKSt9nothrow_t>:
   b744c:	f7fc be23 	b.w	b4096 <_Znaj>

000b7450 <atexit>:
   b7450:	2300      	movs	r3, #0
   b7452:	4601      	mov	r1, r0
   b7454:	461a      	mov	r2, r3
   b7456:	4618      	mov	r0, r3
   b7458:	f000 b85c 	b.w	b7514 <__register_exitproc>

000b745c <memcmp>:
   b745c:	b510      	push	{r4, lr}
   b745e:	3901      	subs	r1, #1
   b7460:	4402      	add	r2, r0
   b7462:	4290      	cmp	r0, r2
   b7464:	d101      	bne.n	b746a <memcmp+0xe>
   b7466:	2000      	movs	r0, #0
   b7468:	e005      	b.n	b7476 <memcmp+0x1a>
   b746a:	7803      	ldrb	r3, [r0, #0]
   b746c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b7470:	42a3      	cmp	r3, r4
   b7472:	d001      	beq.n	b7478 <memcmp+0x1c>
   b7474:	1b18      	subs	r0, r3, r4
   b7476:	bd10      	pop	{r4, pc}
   b7478:	3001      	adds	r0, #1
   b747a:	e7f2      	b.n	b7462 <memcmp+0x6>

000b747c <memcpy>:
   b747c:	440a      	add	r2, r1
   b747e:	4291      	cmp	r1, r2
   b7480:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7484:	d100      	bne.n	b7488 <memcpy+0xc>
   b7486:	4770      	bx	lr
   b7488:	b510      	push	{r4, lr}
   b748a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b748e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7492:	4291      	cmp	r1, r2
   b7494:	d1f9      	bne.n	b748a <memcpy+0xe>
   b7496:	bd10      	pop	{r4, pc}

000b7498 <memset>:
   b7498:	4402      	add	r2, r0
   b749a:	4603      	mov	r3, r0
   b749c:	4293      	cmp	r3, r2
   b749e:	d100      	bne.n	b74a2 <memset+0xa>
   b74a0:	4770      	bx	lr
   b74a2:	f803 1b01 	strb.w	r1, [r3], #1
   b74a6:	e7f9      	b.n	b749c <memset+0x4>

000b74a8 <srand>:
   b74a8:	b538      	push	{r3, r4, r5, lr}
   b74aa:	4b10      	ldr	r3, [pc, #64]	; (b74ec <srand+0x44>)
   b74ac:	681d      	ldr	r5, [r3, #0]
   b74ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b74b0:	4604      	mov	r4, r0
   b74b2:	b9b3      	cbnz	r3, b74e2 <srand+0x3a>
   b74b4:	2018      	movs	r0, #24
   b74b6:	f7ff f991 	bl	b67dc <malloc>
   b74ba:	4602      	mov	r2, r0
   b74bc:	63a8      	str	r0, [r5, #56]	; 0x38
   b74be:	b920      	cbnz	r0, b74ca <srand+0x22>
   b74c0:	4b0b      	ldr	r3, [pc, #44]	; (b74f0 <srand+0x48>)
   b74c2:	480c      	ldr	r0, [pc, #48]	; (b74f4 <srand+0x4c>)
   b74c4:	2142      	movs	r1, #66	; 0x42
   b74c6:	f7ff f9a1 	bl	b680c <__assert_func>
   b74ca:	490b      	ldr	r1, [pc, #44]	; (b74f8 <srand+0x50>)
   b74cc:	4b0b      	ldr	r3, [pc, #44]	; (b74fc <srand+0x54>)
   b74ce:	e9c0 1300 	strd	r1, r3, [r0]
   b74d2:	4b0b      	ldr	r3, [pc, #44]	; (b7500 <srand+0x58>)
   b74d4:	6083      	str	r3, [r0, #8]
   b74d6:	230b      	movs	r3, #11
   b74d8:	8183      	strh	r3, [r0, #12]
   b74da:	2100      	movs	r1, #0
   b74dc:	2001      	movs	r0, #1
   b74de:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b74e2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b74e4:	2200      	movs	r2, #0
   b74e6:	611c      	str	r4, [r3, #16]
   b74e8:	615a      	str	r2, [r3, #20]
   b74ea:	bd38      	pop	{r3, r4, r5, pc}
   b74ec:	2003e14c 	.word	0x2003e14c
   b74f0:	000b79d1 	.word	0x000b79d1
   b74f4:	000b79e8 	.word	0x000b79e8
   b74f8:	abcd330e 	.word	0xabcd330e
   b74fc:	e66d1234 	.word	0xe66d1234
   b7500:	0005deec 	.word	0x0005deec

000b7504 <strlen>:
   b7504:	4603      	mov	r3, r0
   b7506:	f813 2b01 	ldrb.w	r2, [r3], #1
   b750a:	2a00      	cmp	r2, #0
   b750c:	d1fb      	bne.n	b7506 <strlen+0x2>
   b750e:	1a18      	subs	r0, r3, r0
   b7510:	3801      	subs	r0, #1
   b7512:	4770      	bx	lr

000b7514 <__register_exitproc>:
   b7514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7518:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b75d4 <__register_exitproc+0xc0>
   b751c:	4606      	mov	r6, r0
   b751e:	f8d8 0000 	ldr.w	r0, [r8]
   b7522:	461f      	mov	r7, r3
   b7524:	460d      	mov	r5, r1
   b7526:	4691      	mov	r9, r2
   b7528:	f000 f856 	bl	b75d8 <__retarget_lock_acquire_recursive>
   b752c:	4b25      	ldr	r3, [pc, #148]	; (b75c4 <__register_exitproc+0xb0>)
   b752e:	681c      	ldr	r4, [r3, #0]
   b7530:	b934      	cbnz	r4, b7540 <__register_exitproc+0x2c>
   b7532:	4c25      	ldr	r4, [pc, #148]	; (b75c8 <__register_exitproc+0xb4>)
   b7534:	601c      	str	r4, [r3, #0]
   b7536:	4b25      	ldr	r3, [pc, #148]	; (b75cc <__register_exitproc+0xb8>)
   b7538:	b113      	cbz	r3, b7540 <__register_exitproc+0x2c>
   b753a:	681b      	ldr	r3, [r3, #0]
   b753c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7540:	6863      	ldr	r3, [r4, #4]
   b7542:	2b1f      	cmp	r3, #31
   b7544:	dd07      	ble.n	b7556 <__register_exitproc+0x42>
   b7546:	f8d8 0000 	ldr.w	r0, [r8]
   b754a:	f000 f847 	bl	b75dc <__retarget_lock_release_recursive>
   b754e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b7552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7556:	b34e      	cbz	r6, b75ac <__register_exitproc+0x98>
   b7558:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b755c:	b988      	cbnz	r0, b7582 <__register_exitproc+0x6e>
   b755e:	4b1c      	ldr	r3, [pc, #112]	; (b75d0 <__register_exitproc+0xbc>)
   b7560:	b923      	cbnz	r3, b756c <__register_exitproc+0x58>
   b7562:	f8d8 0000 	ldr.w	r0, [r8]
   b7566:	f000 f838 	bl	b75da <__retarget_lock_release>
   b756a:	e7f0      	b.n	b754e <__register_exitproc+0x3a>
   b756c:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7570:	f7ff f934 	bl	b67dc <malloc>
   b7574:	2800      	cmp	r0, #0
   b7576:	d0f4      	beq.n	b7562 <__register_exitproc+0x4e>
   b7578:	2300      	movs	r3, #0
   b757a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b757e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7582:	6863      	ldr	r3, [r4, #4]
   b7584:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7588:	2201      	movs	r2, #1
   b758a:	409a      	lsls	r2, r3
   b758c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7590:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7594:	4313      	orrs	r3, r2
   b7596:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b759a:	2e02      	cmp	r6, #2
   b759c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b75a0:	bf02      	ittt	eq
   b75a2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b75a6:	4313      	orreq	r3, r2
   b75a8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b75ac:	6863      	ldr	r3, [r4, #4]
   b75ae:	f8d8 0000 	ldr.w	r0, [r8]
   b75b2:	1c5a      	adds	r2, r3, #1
   b75b4:	3302      	adds	r3, #2
   b75b6:	6062      	str	r2, [r4, #4]
   b75b8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b75bc:	f000 f80e 	bl	b75dc <__retarget_lock_release_recursive>
   b75c0:	2000      	movs	r0, #0
   b75c2:	e7c6      	b.n	b7552 <__register_exitproc+0x3e>
   b75c4:	2003e7e8 	.word	0x2003e7e8
   b75c8:	2003e75c 	.word	0x2003e75c
   b75cc:	00000000 	.word	0x00000000
   b75d0:	000b67dd 	.word	0x000b67dd
   b75d4:	2003e1b0 	.word	0x2003e1b0

000b75d8 <__retarget_lock_acquire_recursive>:
   b75d8:	4770      	bx	lr

000b75da <__retarget_lock_release>:
   b75da:	4770      	bx	lr

000b75dc <__retarget_lock_release_recursive>:
   b75dc:	4770      	bx	lr

000b75de <link_code_end>:
	...

000b75e0 <dynalib_user>:
   b75e0:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b75f0:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   b7600:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   b7610:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   b7620:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   b7630:	4f4d 4544 7525 003e 6f43 6c75 2064 6f6e     MODE%u>.Could no
   b7640:	2074 6966 646e 4120 3753 3433 0031 6f43     t find AS7341.Co
   b7650:	6c75 6e64 7427 6620 6e69 2064 5452 0043     uldn't find RTC.
   b7660:	5452 2043 7369 4e20 544f 7220 6e75 696e     RTC is NOT runni
   b7670:	676e 0021 5741 3539 3332 6e20 746f 6620     ng!.AW9523 not f
   b7680:	756f 646e 203f 6843 6365 206b 6977 6972     ound? Check wiri
   b7690:	676e 0021 5741 3539 3332 6620 756f 646e     ng!.AW9523 found
   b76a0:	0021 5f32 3531 325f 5f34 3037 6d30 5f73     !.2_15_24_700ms_
   b76b0:	3231 7838 745f 7268 756f 6867 685f 6c6f     128x_through_hol
   b76c0:	5f65 6964 756c 6974 6e6f 2e73 7363 0076     e_dilutions.csv.
   b76d0:	6144 6574 6120 646e 5420 6d69 2c65 5341     Date and Time,AS
   b76e0:	4554 2c50 5441 4d49 2c45 4147 4e49 4c2c     TEP,ATIME,GAIN,L
   b76f0:	4445 5320 6174 7574 2c73 454c 2044 6e49     ED Status,LED In
   b7700:	6574 736e 7469 2c79 6554 7473 532c 6365     tensity,Test,Sec
   b7710:	6e6f 7364 4d2c 6c69 696c 6573 6f63 646e     onds,Millisecond
   b7720:	2c73 7954 6570 462c 2031 4228 7361 6369     s,Type,F1 (Basic
   b7730:	2c29 3246 2820 6142 6973 2963 462c 2033     ),F2 (Basic),F3 
   b7740:	4228 7361 6369 2c29 3446 2820 6142 6973     (Basic),F4 (Basi
   b7750:	2963 462c 2035 4228 7361 6369 2c29 3646     c),F5 (Basic),F6
   b7760:	2820 6142 6973 2963 462c 2037 4228 7361      (Basic),F7 (Bas
   b7770:	6369 2c29 3846 2820 6142 6973 2963 432c     ic),F8 (Basic),C
   b7780:	656c 7261 2820 6142 6973 2963 4e2c 5249     lear (Basic),NIR
   b7790:	2820 6142 6973 2963 542c 7079 2c65 3146      (Basic),Type,F1
   b77a0:	2820 6152 2977 462c 2032 5228 7761 2c29      (Raw),F2 (Raw),
   b77b0:	3346 2820 6152 2977 462c 2034 5228 7761     F3 (Raw),F4 (Raw
   b77c0:	2c29 3546 2820 6152 2977 462c 2036 5228     ),F5 (Raw),F6 (R
   b77d0:	7761 2c29 3746 2820 6152 2977 462c 2038     aw),F7 (Raw),F8 
   b77e0:	5228 7761 2c29 6c43 6165 2072 5228 7761     (Raw),Clear (Raw
   b77f0:	2c29 494e 2052 5228 7761 0029 7245 6f72     ),NIR (Raw).Erro
   b7800:	2072 706f 6e65 6e69 2067 6966 656c 0021     r opening file!.

000b7810 <_ZTVN8particle11SPISettingsE>:
	...
   b7818:	4151 000b 40af 000b 40cd 000b               QA...@...@..

000b7824 <_ZTV4File>:
	...
   b782c:	40cb 000b 40db 000b 411b 000b 4115 000b     .@...@...A...A..
   b783c:	40b1 000b 40f5 000b 40ef 000b 40e9 000b     .@...@...@...@..

000b784c <_ZTV15Adafruit_AS7341>:
	...
   b7854:	4599 000b                                   .E..

000b7858 <_ZTVN5spark13EthernetClassE>:
	...
   b7860:	68a3 000b 6899 000b 688f 000b 6885 000b     .h...h...h...h..
   b7870:	6879 000b 686d 000b 6b15 000b 6b1d 000b     yh..mh...k...k..
   b7880:	6861 000b 6859 000b 684f 000b 6845 000b     ah..Yh..Oh..Eh..
   b7890:	6b4d 000b                                   Mk..

000b7894 <_ZTV7TwoWire>:
	...
   b789c:	68c1 000b 690b 000b 68e3 000b 68c3 000b     .h...i...h...h..
   b78ac:	68eb 000b 68f3 000b 68fb 000b 6903 000b     .h...h...h...i..

000b78bc <_ZTV9IPAddress>:
	...
   b78c4:	69e5 000b 69d5 000b 69d7 000b 7061 0070     .i...i...i..app.

000b78d4 <_ZTVN5spark12NetworkClassE>:
	...
   b78dc:	6ad5 000b 6adf 000b 6ae9 000b 6af3 000b     .j...j...j...j..
   b78ec:	6afd 000b 6b09 000b 6b15 000b 6b1d 000b     .j...k...k...k..
   b78fc:	6b25 000b 6b31 000b 6b39 000b 6b43 000b     %k..1k..9k..Ck..
   b790c:	6b4d 000b                                   Mk..

000b7910 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7910:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   b7920:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   b7930:	6d69 0065                                   ime.

000b7934 <_ZTV11USARTSerial>:
	...
   b793c:	6f11 000b 6f7d 000b 6f55 000b 6c39 000b     .o..}o..Uo..9l..
   b794c:	6f25 000b 6f41 000b 6f33 000b 6f4f 000b     %o..Ao..3o..Oo..
   b795c:	6f13 000b 6f17 000b                         .o...o..

000b7964 <_ZTV9USBSerial>:
	...
   b796c:	6fbb 000b 7023 000b 6ff9 000b 6c39 000b     .o..#p...o..9l..
   b797c:	6feb 000b 6fbd 000b 6fcd 000b 701d 000b     .o...o...o...p..
   b798c:	6fdd 000b 6fb5 000b                         .o...o..

000b7994 <_ZTVN5spark9WiFiClassE>:
	...
   b799c:	7127 000b 711d 000b 7113 000b 70c9 000b     'q...q...q...p..
   b79ac:	7107 000b 70fb 000b 6b15 000b 6b1d 000b     .q...p...k...k..
   b79bc:	70ef 000b 70e7 000b 70dd 000b 70d3 000b     .p...p...p...p..
   b79cc:	6b4d 000b                                   Mk..

000b79d0 <_ZSt7nothrow>:
   b79d0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b79e0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b79f0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7a00:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7a10:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b7a20:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7a30:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7a41 <link_const_variable_data_end>:
   b7a41:	00          	.byte	0x00
	...

000b7a44 <link_constructors_location>:
   b7a44:	000b4459 	.word	0x000b4459
   b7a48:	000b6835 	.word	0x000b6835
   b7a4c:	000b68ad 	.word	0x000b68ad
   b7a50:	000b6ac5 	.word	0x000b6ac5
   b7a54:	000b6c25 	.word	0x000b6c25
   b7a58:	000b6d41 	.word	0x000b6d41
   b7a5c:	000b6ed9 	.word	0x000b6ed9
   b7a60:	000b6efd 	.word	0x000b6efd
   b7a64:	000b7131 	.word	0x000b7131

000b7a68 <link_constructors_end>:
	...
