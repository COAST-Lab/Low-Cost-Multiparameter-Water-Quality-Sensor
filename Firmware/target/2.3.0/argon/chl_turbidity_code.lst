
/Users/jessiewynne/chl_turbidity_code/target/2.3.0/argon/chl_turbidity_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005340  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9360  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000c4  2003dfe0  000d9364  0001dfe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000074c  2003e0a4  2003e0a4  0002e0a4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9428  000d9428  00029428  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9450  000d9450  00029450  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023a0ab  00000000  00000000  00029454  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020ce9  00000000  00000000  002634ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000326ee  00000000  00000000  002841e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b90  00000000  00000000  002b68d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008200  00000000  00000000  002b9466  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000464f7  00000000  00000000  002c1666  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000554cc  00000000  00000000  00307b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010d1b9  00000000  00000000  0035d029  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007d20  00000000  00000000  0046a1e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe45 	bl	d8cc0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe4d 	bl	d8cdc <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dfe0 	.word	0x2003dfe0
   d404c:	000d9364 	.word	0x000d9364
   d4050:	2003e0a4 	.word	0x2003e0a4
   d4054:	2003e0a4 	.word	0x2003e0a4
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 f839 	bl	d80d8 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9334 	.word	0x000d9334
   d4080:	000d9358 	.word	0x000d9358

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ce 	b.w	d4224 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fcfd 	bl	d4a88 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f003 bfd9 	b.w	d8048 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 ba21 	b.w	d74dc <malloc>

000d409a <_Znaj>:
   d409a:	f003 ba1f 	b.w	d74dc <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 ba25 	b.w	d74ec <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40b2:	4770      	bx	lr

000d40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b4:	7c03      	ldrb	r3, [r0, #16]
   d40b6:	f013 0308 	ands.w	r3, r3, #8
   d40ba:	bf1e      	ittt	ne
   d40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c2:	2b00      	cmp	r3, #0
  }
   d40c4:	bfac      	ite	ge
   d40c6:	4618      	movge	r0, r3
   d40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40cc:	4770      	bx	lr

000d40ce <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40d0:	b510      	push	{r4, lr}
  }
   d40d2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40d4:	4604      	mov	r4, r0
  }
   d40d6:	f004 f8d7 	bl	d8288 <_ZdlPvj>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}

000d40de <_ZN4FileD0Ev>:
   d40de:	b510      	push	{r4, lr}
   d40e0:	2134      	movs	r1, #52	; 0x34
   d40e2:	4604      	mov	r4, r0
   d40e4:	f004 f8d0 	bl	d8288 <_ZdlPvj>
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd10      	pop	{r4, pc}

000d40ec <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40ec:	3010      	adds	r0, #16
   d40ee:	f001 bef9 	b.w	d5ee4 <_ZN7FatFile4syncEv>

000d40f2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40f2:	3010      	adds	r0, #16
   d40f4:	f001 be14 	b.w	d5d20 <_ZN7FatFile4peekEv>

000d40f8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40f8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40fa:	2201      	movs	r2, #1
   d40fc:	f10d 0107 	add.w	r1, sp, #7
   d4100:	3010      	adds	r0, #16
   d4102:	f001 fd5f 	bl	d5bc4 <_ZN7FatFile4readEPvj>
   d4106:	2801      	cmp	r0, #1
   d4108:	bf0c      	ite	eq
   d410a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d410e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d4112:	b003      	add	sp, #12
   d4114:	f85d fb04 	ldr.w	pc, [sp], #4

000d4118 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4118:	3010      	adds	r0, #16
   d411a:	f001 bf6d 	b.w	d5ff8 <_ZN7FatFile5writeEPKvj>

000d411e <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d411e:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4120:	2201      	movs	r2, #1
   d4122:	f88d 1007 	strb.w	r1, [sp, #7]
   d4126:	3010      	adds	r0, #16
   d4128:	f10d 0107 	add.w	r1, sp, #7
   d412c:	f001 ff64 	bl	d5ff8 <_ZN7FatFile5writeEPKvj>
  }
   d4130:	b003      	add	sp, #12
   d4132:	f85d fb04 	ldr.w	pc, [sp], #4

000d4136 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4136:	b40e      	push	{r1, r2, r3}
   d4138:	b503      	push	{r0, r1, lr}
   d413a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d413c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d413e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4142:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4144:	f003 fd07 	bl	d7b56 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4148:	b002      	add	sp, #8
   d414a:	f85d eb04 	ldr.w	lr, [sp], #4
   d414e:	b003      	add	sp, #12
   d4150:	4770      	bx	lr
	...

000d4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d415a:	7922      	ldrb	r2, [r4, #4]
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	b132      	cbz	r2, d416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4160:	b9a3      	cbnz	r3, d418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4164:	b002      	add	sp, #8
   d4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d416a:	f003 bbdf 	b.w	d792c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d416e:	4a09      	ldr	r2, [pc, #36]	; (d4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4170:	7b26      	ldrb	r6, [r4, #12]
   d4172:	4d09      	ldr	r5, [pc, #36]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4174:	4909      	ldr	r1, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4176:	7b64      	ldrb	r4, [r4, #13]
   d4178:	2e01      	cmp	r6, #1
   d417a:	bf18      	it	ne
   d417c:	4629      	movne	r1, r5
   d417e:	e9cd 1400 	strd	r1, r4, [sp]
   d4182:	4907      	ldr	r1, [pc, #28]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4184:	f7ff ffd7 	bl	d4136 <_ZN5Print6printfEPKcz>
  }
   d4188:	b002      	add	sp, #8
   d418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d418c:	4a05      	ldr	r2, [pc, #20]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d418e:	e7ef      	b.n	d4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4190:	000d8e35 	.word	0x000d8e35
   d4194:	000d9097 	.word	0x000d9097
   d4198:	000d8e31 	.word	0x000d8e31
   d419c:	000d8e2d 	.word	0x000d8e2d
   d41a0:	000d8e4b 	.word	0x000d8e4b
   d41a4:	000d8e24 	.word	0x000d8e24

000d41a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41a8:	b530      	push	{r4, r5, lr}
   d41aa:	b085      	sub	sp, #20
class SPISettings : public Printable {
   d41ac:	4b1b      	ldr	r3, [pc, #108]	; (d421c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   d41ae:	9300      	str	r3, [sp, #0]
   d41b0:	7913      	ldrb	r3, [r2, #4]
   d41b2:	f88d 3004 	strb.w	r3, [sp, #4]
   d41b6:	6893      	ldr	r3, [r2, #8]
   d41b8:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41ba:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d41be:	8993      	ldrh	r3, [r2, #12]
   d41c0:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41c4:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41c6:	460a      	mov	r2, r1
   d41c8:	466b      	mov	r3, sp
   d41ca:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d41ce:	4628      	mov	r0, r5
   d41d0:	f002 fd56 	bl	d6c80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d41d4:	b910      	cbnz	r0, d41dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   d41d6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d41d8:	b005      	add	sp, #20
   d41da:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41dc:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d41de:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   d41e2:	4628      	mov	r0, r5
   d41e4:	f001 feb4 	bl	d5f50 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41e8:	2101      	movs	r1, #1
   d41ea:	4620      	mov	r0, r4
   d41ec:	f002 fbf6 	bl	d69dc <_ZN9FatVolume4initEh>
   d41f0:	4601      	mov	r1, r0
   d41f2:	b168      	cbz	r0, d4210 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41f4:	4621      	mov	r1, r4
   d41f6:	4628      	mov	r0, r5
   d41f8:	f001 fccb 	bl	d5b92 <_ZN7FatFile8openRootEP9FatVolume>
   d41fc:	2800      	cmp	r0, #0
   d41fe:	d0ea      	beq.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   d4200:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4204:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4208:	d0e5      	beq.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   d420a:	4b05      	ldr	r3, [pc, #20]	; (d4220 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   d420c:	601d      	str	r5, [r3, #0]
    return true;
   d420e:	e7e3      	b.n	d41d8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   d4210:	4620      	mov	r0, r4
   d4212:	f002 fbe3 	bl	d69dc <_ZN9FatVolume4initEh>
   d4216:	2800      	cmp	r0, #0
   d4218:	d1ec      	bne.n	d41f4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   d421a:	e7dc      	b.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   d421c:	000d9130 	.word	0x000d9130
   d4220:	2003e5a8 	.word	0x2003e5a8

000d4224 <setup>:
SdFat SD;

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   d4224:	b510      	push	{r4, lr}
   d4226:	b08e      	sub	sp, #56	; 0x38
  Serial.begin(9600);
   d4228:	f003 fe88 	bl	d7f3c <_Z16_fetch_usbserialv>
   d422c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4230:	f003 fe72 	bl	d7f18 <_ZN9USBSerial5beginEl>

  // Wait for communication with the host computer serial monitor
  while (!Serial) {
   d4234:	f003 fe82 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4238:	f003 fe75 	bl	d7f26 <_ZN9USBSerialcvbEv>
   d423c:	b918      	cbnz	r0, d4246 <setup+0x22>
    delay(1);
   d423e:	2001      	movs	r0, #1
   d4240:	f003 f96c 	bl	d751c <delay>
  while (!Serial) {
   d4244:	e7f6      	b.n	d4234 <setup+0x10>
  }

  if (!as7341.begin(0x39)){
   d4246:	f003 fffb 	bl	d8240 <_Z19__fetch_global_Wirev>
   d424a:	2300      	movs	r3, #0
   d424c:	4602      	mov	r2, r0
   d424e:	2139      	movs	r1, #57	; 0x39
   d4250:	483e      	ldr	r0, [pc, #248]	; (d434c <setup+0x128>)
   d4252:	f000 fce1 	bl	d4c18 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>
   d4256:	b940      	cbnz	r0, d426a <setup+0x46>
    Serial.println("Could not find AS7341");
   d4258:	f003 fe70 	bl	d7f3c <_Z16_fetch_usbserialv>
   d425c:	493c      	ldr	r1, [pc, #240]	; (d4350 <setup+0x12c>)
   d425e:	f003 fb78 	bl	d7952 <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   d4262:	200a      	movs	r0, #10
   d4264:	f003 f95a 	bl	d751c <delay>
   d4268:	e7fb      	b.n	d4262 <setup+0x3e>
  }

  as7341.setATIME(255);      
   d426a:	21ff      	movs	r1, #255	; 0xff
   d426c:	4837      	ldr	r0, [pc, #220]	; (d434c <setup+0x128>)
   d426e:	f000 fdab 	bl	d4dc8 <_ZN15Adafruit_AS73418setATIMEEh>
  as7341.setASTEP(999);
   d4272:	f240 31e7 	movw	r1, #999	; 0x3e7
   d4276:	4835      	ldr	r0, [pc, #212]	; (d434c <setup+0x128>)
   d4278:	f000 fdcb 	bl	d4e12 <_ZN15Adafruit_AS73418setASTEPEt>
  as7341.setGain(AS7341_GAIN_128X);
   d427c:	4833      	ldr	r0, [pc, #204]	; (d434c <setup+0x128>)
   d427e:	2108      	movs	r1, #8
   d4280:	f000 fdee 	bl	d4e60 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>

  if (! rtc.begin()) {
   d4284:	4833      	ldr	r0, [pc, #204]	; (d4354 <setup+0x130>)
   d4286:	f001 fb89 	bl	d599c <_ZN11RTC_PCF85235beginEv>
   d428a:	b928      	cbnz	r0, d4298 <setup+0x74>
    Serial.println("Couldn't find RTC");
   d428c:	f003 fe56 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4290:	4931      	ldr	r1, [pc, #196]	; (d4358 <setup+0x134>)
   d4292:	f003 fb5e 	bl	d7952 <_ZN5Print7printlnEPKc>
    while (1);
   d4296:	e7fe      	b.n	d4296 <setup+0x72>
  }

  if (! rtc.initialized()) {
   d4298:	482e      	ldr	r0, [pc, #184]	; (d4354 <setup+0x130>)
   d429a:	f001 fb81 	bl	d59a0 <_ZN11RTC_PCF852311initializedEv>
   d429e:	b920      	cbnz	r0, d42aa <setup+0x86>
    Serial.println("RTC is NOT running!");
   d42a0:	f003 fe4c 	bl	d7f3c <_Z16_fetch_usbserialv>
   d42a4:	492d      	ldr	r1, [pc, #180]	; (d435c <setup+0x138>)
   d42a6:	f003 fb54 	bl	d7952 <_ZN5Print7printlnEPKc>
  }

  if (! aw.begin(0x58)) {
   d42aa:	f003 ffc9 	bl	d8240 <_Z19__fetch_global_Wirev>
   d42ae:	2158      	movs	r1, #88	; 0x58
   d42b0:	4602      	mov	r2, r0
   d42b2:	482b      	ldr	r0, [pc, #172]	; (d4360 <setup+0x13c>)
   d42b4:	f001 f833 	bl	d531e <_ZN15Adafruit_AW95235beginEhP7TwoWire>
   d42b8:	b940      	cbnz	r0, d42cc <setup+0xa8>
    Serial.println("AW9523 not found? Check wiring!");
   d42ba:	f003 fe3f 	bl	d7f3c <_Z16_fetch_usbserialv>
   d42be:	4929      	ldr	r1, [pc, #164]	; (d4364 <setup+0x140>)
   d42c0:	f003 fb47 	bl	d7952 <_ZN5Print7printlnEPKc>
    while (1) delay(10);  // halt forever
   d42c4:	200a      	movs	r0, #10
   d42c6:	f003 f929 	bl	d751c <delay>
   d42ca:	e7fb      	b.n	d42c4 <setup+0xa0>
  }

  Serial.println("AW9523 found!");
   d42cc:	f003 fe36 	bl	d7f3c <_Z16_fetch_usbserialv>
   d42d0:	4925      	ldr	r1, [pc, #148]	; (d4368 <setup+0x144>)
   d42d2:	f003 fb3e 	bl	d7952 <_ZN5Print7printlnEPKc>

  for (int i = 0; i < NumLEDs; i++) {
    aw.pinMode(LedPins[i], AW9523_LED_MODE);
   d42d6:	4822      	ldr	r0, [pc, #136]	; (d4360 <setup+0x13c>)
   d42d8:	2203      	movs	r2, #3
   d42da:	2100      	movs	r1, #0
   d42dc:	f000 ffc4 	bl	d5268 <_ZN15Adafruit_AW95237pinModeEhh>
   d42e0:	481f      	ldr	r0, [pc, #124]	; (d4360 <setup+0x13c>)
   d42e2:	2203      	movs	r2, #3
   d42e4:	210a      	movs	r1, #10
   d42e6:	f000 ffbf 	bl	d5268 <_ZN15Adafruit_AW95237pinModeEhh>
      dataMode_{dataMode}
   d42ea:	4b20      	ldr	r3, [pc, #128]	; (d436c <setup+0x148>)
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	4b20      	ldr	r3, [pc, #128]	; (d4370 <setup+0x14c>)
   d42f0:	9303      	str	r3, [sp, #12]
   d42f2:	2400      	movs	r4, #0
   d42f4:	2301      	movs	r3, #1
  }

  SD.begin(SD_CHIP_SELECT);
   d42f6:	aa01      	add	r2, sp, #4
   d42f8:	2105      	movs	r1, #5
   d42fa:	481e      	ldr	r0, [pc, #120]	; (d4374 <setup+0x150>)
   d42fc:	f8ad 3010 	strh.w	r3, [sp, #16]
   d4300:	f88d 4008 	strb.w	r4, [sp, #8]
   d4304:	f7ff ff50 	bl	d41a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4308:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d430c:	9303      	str	r3, [sp, #12]
  File() {}
   d430e:	4b1a      	ldr	r3, [pc, #104]	; (d4378 <setup+0x154>)
   d4310:	9301      	str	r3, [sp, #4]
    tmpFile.open(vwd(), path, oflag);
   d4312:	4a1a      	ldr	r2, [pc, #104]	; (d437c <setup+0x158>)
   d4314:	491a      	ldr	r1, [pc, #104]	; (d4380 <setup+0x15c>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d4316:	f8ad 4014 	strh.w	r4, [sp, #20]
   d431a:	f244 2302 	movw	r3, #16898	; 0x4202
   d431e:	a805      	add	r0, sp, #20
    Print() : write_error(0) {}
   d4320:	9402      	str	r4, [sp, #8]
   d4322:	f001 fe1c 	bl	d5f5e <_ZN7FatFile4openEPS_PKci>

  File file = SD.open("2_15_24_700ms_128x_through_hole_dilutions.csv", FILE_WRITE);

  if (file) {
   d4326:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d432a:	b143      	cbz	r3, d433e <setup+0x11a>
    file.println("Date and Time,ASTEP,ATIME,GAIN,LED Status,LED Intensity,Test,Seconds,Milliseconds,Type,F1 (Basic),F2 (Basic),F3 (Basic),F4 (Basic),F5 (Basic),F6 (Basic),F7 (Basic),F8 (Basic),Clear (Basic),NIR (Basic),Type,F1 (Raw),F2 (Raw),F3 (Raw),F4 (Raw),F5 (Raw),F6 (Raw),F7 (Raw),F8 (Raw),Clear (Raw),NIR (Raw)"); // Headers
   d432c:	4915      	ldr	r1, [pc, #84]	; (d4384 <setup+0x160>)
   d432e:	a801      	add	r0, sp, #4
   d4330:	f003 fb0f 	bl	d7952 <_ZN5Print7printlnEPKc>
    file.close();
   d4334:	a805      	add	r0, sp, #20
   d4336:	f001 fe0b 	bl	d5f50 <_ZN7FatFile5closeEv>
  } else {
    Serial.println(F("Error opening file!"));
  }
}
   d433a:	b00e      	add	sp, #56	; 0x38
   d433c:	bd10      	pop	{r4, pc}
    Serial.println(F("Error opening file!"));
   d433e:	f003 fdfd 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4342:	4911      	ldr	r1, [pc, #68]	; (d4388 <setup+0x164>)
   d4344:	f003 fb0f 	bl	d7966 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d4348:	e7f7      	b.n	d433a <setup+0x116>
   d434a:	bf00      	nop
   d434c:	2003e540 	.word	0x2003e540
   d4350:	000d8e68 	.word	0x000d8e68
   d4354:	2003e5a0 	.word	0x2003e5a0
   d4358:	000d8e7e 	.word	0x000d8e7e
   d435c:	000d8e90 	.word	0x000d8e90
   d4360:	2003e568 	.word	0x2003e568
   d4364:	000d8ea4 	.word	0x000d8ea4
   d4368:	000d8ec4 	.word	0x000d8ec4
   d436c:	000d9130 	.word	0x000d9130
   d4370:	02faf080 	.word	0x02faf080
   d4374:	2003e0b0 	.word	0x2003e0b0
   d4378:	000d9144 	.word	0x000d9144
   d437c:	000d8ed2 	.word	0x000d8ed2
   d4380:	2003e4ec 	.word	0x2003e4ec
   d4384:	000d8f00 	.word	0x000d8f00
   d4388:	000d902c 	.word	0x000d902c

000d438c <_ZN5Print5printItLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d438c:	b410      	push	{r4}
{
    if (base == 0) {
   d438e:	b92a      	cbnz	r2, d439c <_ZN5Print5printItLi0EEEjT_i+0x10>
        return write(n);
   d4390:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   d4392:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   d4396:	6892      	ldr	r2, [r2, #8]
   d4398:	b2c9      	uxtb	r1, r1
   d439a:	4710      	bx	r2
}
   d439c:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   d43a0:	b2d2      	uxtb	r2, r2
   d43a2:	f003 bae2 	b.w	d796a <_ZN5Print11printNumberEmh>

000d43a6 <_ZN5Print7printlnItLi0EEEjT_i>:
    size_t println(T b, int base = DEC) {
   d43a6:	b538      	push	{r3, r4, r5, lr}
   d43a8:	4605      	mov	r5, r0
        size_t n = print(b, base);
   d43aa:	f7ff ffef 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
   d43ae:	4604      	mov	r4, r0
        n += println();
   d43b0:	4628      	mov	r0, r5
   d43b2:	f003 fac2 	bl	d793a <_ZN5Print7printlnEv>
    }
   d43b6:	4420      	add	r0, r4
   d43b8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d43bc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523>:
}

}


void fileprintresults(SdFat &sd, RTC_PCF8523 &rtc) {
   d43bc:	b570      	push	{r4, r5, r6, lr}
   d43be:	b0a2      	sub	sp, #136	; 0x88
   d43c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d43c4:	9317      	str	r3, [sp, #92]	; 0x5c
   d43c6:	4b0f      	ldr	r3, [pc, #60]	; (d4404 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x48>)
   d43c8:	4a0f      	ldr	r2, [pc, #60]	; (d4408 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x4c>)
   d43ca:	9315      	str	r3, [sp, #84]	; 0x54
   d43cc:	f200 413c 	addw	r1, r0, #1084	; 0x43c
   d43d0:	2400      	movs	r4, #0
   d43d2:	f244 2302 	movw	r3, #16898	; 0x4202
   d43d6:	a819      	add	r0, sp, #100	; 0x64
   d43d8:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    Print() : write_error(0) {}
   d43dc:	9416      	str	r4, [sp, #88]	; 0x58
  DateTime now = rtc.now();

  uint16_t readings[12];
  float counts[12];

  if (!as7341.readAllChannels(readings)){
   d43de:	ad03      	add	r5, sp, #12
   d43e0:	f001 fdbd 	bl	d5f5e <_ZN7FatFile4openEPS_PKci>
  DateTime now = rtc.now();
   d43e4:	a801      	add	r0, sp, #4
   d43e6:	f001 fafc 	bl	d59e2 <_ZN11RTC_PCF85233nowEv>
  if (!as7341.readAllChannels(readings)){
   d43ea:	4808      	ldr	r0, [pc, #32]	; (d440c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x50>)
   d43ec:	4629      	mov	r1, r5
   d43ee:	f000 fea4 	bl	d513a <_ZN15Adafruit_AS734115readAllChannelsEPt>
   d43f2:	b978      	cbnz	r0, d4414 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x58>
    Serial.println("Error reading all channels!");
   d43f4:	f003 fda2 	bl	d7f3c <_Z16_fetch_usbserialv>
   d43f8:	4905      	ldr	r1, [pc, #20]	; (d4410 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x54>)
   d43fa:	f003 faaa 	bl	d7952 <_ZN5Print7printlnEPKc>
    file.close();
  }
  else {
    Serial.println(F("Error opening file!"));
  }
}
   d43fe:	b022      	add	sp, #136	; 0x88
   d4400:	bd70      	pop	{r4, r5, r6, pc}
   d4402:	bf00      	nop
   d4404:	000d9144 	.word	0x000d9144
   d4408:	000d8ed2 	.word	0x000d8ed2
   d440c:	2003e540 	.word	0x2003e540
   d4410:	000d9040 	.word	0x000d9040
    counts[i] = as7341.toBasicCounts(readings[i]);
   d4414:	4ecc      	ldr	r6, [pc, #816]	; (d4748 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x38c>)
    if(i == 4 || i == 5) continue;
   d4416:	1f23      	subs	r3, r4, #4
   d4418:	b2db      	uxtb	r3, r3
   d441a:	2b01      	cmp	r3, #1
   d441c:	d909      	bls.n	d4432 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x76>
    counts[i] = as7341.toBasicCounts(readings[i]);
   d441e:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
   d4422:	4630      	mov	r0, r6
   d4424:	f000 fd44 	bl	d4eb0 <_ZN15Adafruit_AS734113toBasicCountsEt>
   d4428:	ab09      	add	r3, sp, #36	; 0x24
   d442a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   d442e:	ed83 0a00 	vstr	s0, [r3]
  for(uint8_t i = 0; i < 12; i++) {
   d4432:	3401      	adds	r4, #1
   d4434:	2c0c      	cmp	r4, #12
   d4436:	d1ee      	bne.n	d4416 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x5a>
  if (file) {
   d4438:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   d443c:	2b00      	cmp	r3, #0
   d443e:	f000 8199 	beq.w	d4774 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3b8>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4442:	f002 fe4f 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
    aw.analogWrite(LedPins[0], isLedOn ? LEDbright : LEDdim);
   d4446:	4bc1      	ldr	r3, [pc, #772]	; (d474c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x390>)
   d4448:	48c1      	ldr	r0, [pc, #772]	; (d4750 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x394>)
   d444a:	781a      	ldrb	r2, [r3, #0]
   d444c:	2100      	movs	r1, #0
   d444e:	f000 fee7 	bl	d5220 <_ZN15Adafruit_AW952311analogWriteEhh>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
   d4452:	f89d 1004 	ldrb.w	r1, [sp, #4]
    file.print(now.year(), DEC);
   d4456:	220a      	movs	r2, #10
   d4458:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   d445c:	a815      	add	r0, sp, #84	; 0x54
   d445e:	f7ff ff95 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print('/');
   d4462:	212f      	movs	r1, #47	; 0x2f
   d4464:	a815      	add	r0, sp, #84	; 0x54
   d4466:	f003 fa65 	bl	d7934 <_ZN5Print5printEc>
        return printNumber(val, base) + t;
   d446a:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d446e:	220a      	movs	r2, #10
   d4470:	a815      	add	r0, sp, #84	; 0x54
   d4472:	f003 fa7a 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print('/');
   d4476:	212f      	movs	r1, #47	; 0x2f
   d4478:	a815      	add	r0, sp, #84	; 0x54
   d447a:	f003 fa5b 	bl	d7934 <_ZN5Print5printEc>
   d447e:	220a      	movs	r2, #10
   d4480:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d4484:	a815      	add	r0, sp, #84	; 0x54
   d4486:	f003 fa70 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(" (");
   d448a:	49b2      	ldr	r1, [pc, #712]	; (d4754 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x398>)
   d448c:	a815      	add	r0, sp, #84	; 0x54
   d448e:	f003 fa4d 	bl	d792c <_ZN5Print5printEPKc>
    file.print(daysOfTheWeek[now.dayOfTheWeek()]);
   d4492:	a801      	add	r0, sp, #4
   d4494:	f001 fa6c 	bl	d5970 <_ZNK8DateTime12dayOfTheWeekEv>
   d4498:	49af      	ldr	r1, [pc, #700]	; (d4758 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x39c>)
   d449a:	b200      	sxth	r0, r0
   d449c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d44a0:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   d44a4:	a815      	add	r0, sp, #84	; 0x54
   d44a6:	f003 fa41 	bl	d792c <_ZN5Print5printEPKc>
    file.print(") ");
   d44aa:	49ac      	ldr	r1, [pc, #688]	; (d475c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3a0>)
   d44ac:	a815      	add	r0, sp, #84	; 0x54
   d44ae:	f003 fa3d 	bl	d792c <_ZN5Print5printEPKc>
   d44b2:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d44b6:	220a      	movs	r2, #10
   d44b8:	a815      	add	r0, sp, #84	; 0x54
   d44ba:	f003 fa56 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(':');
   d44be:	213a      	movs	r1, #58	; 0x3a
   d44c0:	a815      	add	r0, sp, #84	; 0x54
   d44c2:	f003 fa37 	bl	d7934 <_ZN5Print5printEc>
   d44c6:	f89d 1008 	ldrb.w	r1, [sp, #8]
   d44ca:	220a      	movs	r2, #10
   d44cc:	a815      	add	r0, sp, #84	; 0x54
   d44ce:	f003 fa4c 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(':');
   d44d2:	213a      	movs	r1, #58	; 0x3a
   d44d4:	a815      	add	r0, sp, #84	; 0x54
   d44d6:	f003 fa2d 	bl	d7934 <_ZN5Print5printEc>
   d44da:	220a      	movs	r2, #10
   d44dc:	f89d 1009 	ldrb.w	r1, [sp, #9]
   d44e0:	a815      	add	r0, sp, #84	; 0x54
   d44e2:	f003 fa42 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(',');
   d44e6:	212c      	movs	r1, #44	; 0x2c
   d44e8:	a815      	add	r0, sp, #84	; 0x54
   d44ea:	f003 fa23 	bl	d7934 <_ZN5Print5printEc>
    file.print(as7341.getASTEP());
   d44ee:	4896      	ldr	r0, [pc, #600]	; (d4748 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x38c>)
   d44f0:	f000 fca3 	bl	d4e3a <_ZN15Adafruit_AS73418getASTEPEv>
   d44f4:	220a      	movs	r2, #10
   d44f6:	4601      	mov	r1, r0
   d44f8:	a815      	add	r0, sp, #84	; 0x54
   d44fa:	f7ff ff47 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d44fe:	212c      	movs	r1, #44	; 0x2c
   d4500:	a815      	add	r0, sp, #84	; 0x54
   d4502:	f003 fa17 	bl	d7934 <_ZN5Print5printEc>
    file.print(as7341.getATIME());
   d4506:	4890      	ldr	r0, [pc, #576]	; (d4748 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x38c>)
   d4508:	f000 fc71 	bl	d4dee <_ZN15Adafruit_AS73418getATIMEEv>
   d450c:	220a      	movs	r2, #10
   d450e:	4601      	mov	r1, r0
   d4510:	a815      	add	r0, sp, #84	; 0x54
   d4512:	f003 fa2a 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(',');
   d4516:	212c      	movs	r1, #44	; 0x2c
   d4518:	a815      	add	r0, sp, #84	; 0x54
   d451a:	f003 fa0b 	bl	d7934 <_ZN5Print5printEc>
    file.print(as7341.getGain());
   d451e:	488a      	ldr	r0, [pc, #552]	; (d4748 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x38c>)
   d4520:	f000 fcb1 	bl	d4e86 <_ZN15Adafruit_AS73417getGainEv>
   d4524:	220a      	movs	r2, #10
   d4526:	4601      	mov	r1, r0
   d4528:	a815      	add	r0, sp, #84	; 0x54
   d452a:	f003 fa1e 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(',');
   d452e:	212c      	movs	r1, #44	; 0x2c
   d4530:	a815      	add	r0, sp, #84	; 0x54
   d4532:	f003 f9ff 	bl	d7934 <_ZN5Print5printEc>
    file.print(isLedOn ? "LED ON" : "LED OFF");
   d4536:	498a      	ldr	r1, [pc, #552]	; (d4760 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3a4>)
   d4538:	a815      	add	r0, sp, #84	; 0x54
   d453a:	f003 f9f7 	bl	d792c <_ZN5Print5printEPKc>
    file.print(',');
   d453e:	212c      	movs	r1, #44	; 0x2c
   d4540:	a815      	add	r0, sp, #84	; 0x54
   d4542:	f003 f9f7 	bl	d7934 <_ZN5Print5printEc>
    file.print(isLedOn ? "255" : "0"); // Record the LED intensity (100 when on, 0 when off)
   d4546:	4987      	ldr	r1, [pc, #540]	; (d4764 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3a8>)
   d4548:	a815      	add	r0, sp, #84	; 0x54
   d454a:	f003 f9ef 	bl	d792c <_ZN5Print5printEPKc>
    file.print(',');
   d454e:	212c      	movs	r1, #44	; 0x2c
   d4550:	a815      	add	r0, sp, #84	; 0x54
   d4552:	f003 f9ef 	bl	d7934 <_ZN5Print5printEc>
    file.print("6.0");
   d4556:	4984      	ldr	r1, [pc, #528]	; (d4768 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3ac>)
   d4558:	a815      	add	r0, sp, #84	; 0x54
   d455a:	f003 f9e7 	bl	d792c <_ZN5Print5printEPKc>
    file.print(',');
   d455e:	212c      	movs	r1, #44	; 0x2c
   d4560:	a815      	add	r0, sp, #84	; 0x54
   d4562:	f003 f9e7 	bl	d7934 <_ZN5Print5printEc>
   d4566:	f002 fdbd 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
   d456a:	220a      	movs	r2, #10
   d456c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4570:	fbb0 f1f1 	udiv	r1, r0, r1
   d4574:	a815      	add	r0, sp, #84	; 0x54
   d4576:	f003 f9f8 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(','); 
   d457a:	212c      	movs	r1, #44	; 0x2c
   d457c:	a815      	add	r0, sp, #84	; 0x54
   d457e:	f003 f9d9 	bl	d7934 <_ZN5Print5printEc>
   d4582:	f002 fdaf 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
   d4586:	220a      	movs	r2, #10
   d4588:	4601      	mov	r1, r0
   d458a:	a815      	add	r0, sp, #84	; 0x54
   d458c:	f003 f9ed 	bl	d796a <_ZN5Print11printNumberEmh>
    file.print(',');
   d4590:	212c      	movs	r1, #44	; 0x2c
   d4592:	a815      	add	r0, sp, #84	; 0x54
   d4594:	f003 f9ce 	bl	d7934 <_ZN5Print5printEc>
    file.print("BASIC COUNTS");
   d4598:	4974      	ldr	r1, [pc, #464]	; (d476c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3b0>)
   d459a:	a815      	add	r0, sp, #84	; 0x54
   d459c:	f003 f9c6 	bl	d792c <_ZN5Print5printEPKc>
    file.print(',');
   d45a0:	212c      	movs	r1, #44	; 0x2c
   d45a2:	a815      	add	r0, sp, #84	; 0x54
   d45a4:	f003 f9c6 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[0]);
   d45a8:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d45ac:	2102      	movs	r1, #2
   d45ae:	a815      	add	r0, sp, #84	; 0x54
   d45b0:	f003 fac2 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d45b4:	212c      	movs	r1, #44	; 0x2c
   d45b6:	a815      	add	r0, sp, #84	; 0x54
   d45b8:	f003 f9bc 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[1]);
   d45bc:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   d45c0:	2102      	movs	r1, #2
   d45c2:	a815      	add	r0, sp, #84	; 0x54
   d45c4:	f003 fab8 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d45c8:	212c      	movs	r1, #44	; 0x2c
   d45ca:	a815      	add	r0, sp, #84	; 0x54
   d45cc:	f003 f9b2 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[2]);
   d45d0:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   d45d4:	2102      	movs	r1, #2
   d45d6:	a815      	add	r0, sp, #84	; 0x54
   d45d8:	f003 faae 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d45dc:	212c      	movs	r1, #44	; 0x2c
   d45de:	a815      	add	r0, sp, #84	; 0x54
   d45e0:	f003 f9a8 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[3]);
   d45e4:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   d45e8:	2102      	movs	r1, #2
   d45ea:	a815      	add	r0, sp, #84	; 0x54
   d45ec:	f003 faa4 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d45f0:	212c      	movs	r1, #44	; 0x2c
   d45f2:	a815      	add	r0, sp, #84	; 0x54
   d45f4:	f003 f99e 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[6]);
   d45f8:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   d45fc:	2102      	movs	r1, #2
   d45fe:	a815      	add	r0, sp, #84	; 0x54
   d4600:	f003 fa9a 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d4604:	212c      	movs	r1, #44	; 0x2c
   d4606:	a815      	add	r0, sp, #84	; 0x54
   d4608:	f003 f994 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[7]);
   d460c:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   d4610:	2102      	movs	r1, #2
   d4612:	a815      	add	r0, sp, #84	; 0x54
   d4614:	f003 fa90 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d4618:	212c      	movs	r1, #44	; 0x2c
   d461a:	a815      	add	r0, sp, #84	; 0x54
   d461c:	f003 f98a 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[8]);
   d4620:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   d4624:	2102      	movs	r1, #2
   d4626:	a815      	add	r0, sp, #84	; 0x54
   d4628:	f003 fa86 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d462c:	212c      	movs	r1, #44	; 0x2c
   d462e:	a815      	add	r0, sp, #84	; 0x54
   d4630:	f003 f980 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[9]);
   d4634:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d4638:	2102      	movs	r1, #2
   d463a:	a815      	add	r0, sp, #84	; 0x54
   d463c:	f003 fa7c 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d4640:	212c      	movs	r1, #44	; 0x2c
   d4642:	a815      	add	r0, sp, #84	; 0x54
   d4644:	f003 f976 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[10]);
   d4648:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d464c:	2102      	movs	r1, #2
   d464e:	a815      	add	r0, sp, #84	; 0x54
   d4650:	f003 fa72 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d4654:	212c      	movs	r1, #44	; 0x2c
   d4656:	a815      	add	r0, sp, #84	; 0x54
   d4658:	f003 f96c 	bl	d7934 <_ZN5Print5printEc>
    file.print(counts[11]);
   d465c:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d4660:	2102      	movs	r1, #2
   d4662:	a815      	add	r0, sp, #84	; 0x54
   d4664:	f003 fa68 	bl	d7b38 <_ZN5Print5printEfi>
    file.print(',');
   d4668:	212c      	movs	r1, #44	; 0x2c
   d466a:	a815      	add	r0, sp, #84	; 0x54
   d466c:	f003 f962 	bl	d7934 <_ZN5Print5printEc>
    file.print("RAW VALUES");
   d4670:	493f      	ldr	r1, [pc, #252]	; (d4770 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3b4>)
   d4672:	a815      	add	r0, sp, #84	; 0x54
   d4674:	f003 f95a 	bl	d792c <_ZN5Print5printEPKc>
    file.print(',');
   d4678:	212c      	movs	r1, #44	; 0x2c
   d467a:	a815      	add	r0, sp, #84	; 0x54
   d467c:	f003 f95a 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[0]);
   d4680:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4684:	220a      	movs	r2, #10
   d4686:	a815      	add	r0, sp, #84	; 0x54
   d4688:	f7ff fe80 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d468c:	212c      	movs	r1, #44	; 0x2c
   d468e:	a815      	add	r0, sp, #84	; 0x54
   d4690:	f003 f950 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[1]);
   d4694:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d4698:	220a      	movs	r2, #10
   d469a:	a815      	add	r0, sp, #84	; 0x54
   d469c:	f7ff fe76 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d46a0:	212c      	movs	r1, #44	; 0x2c
   d46a2:	a815      	add	r0, sp, #84	; 0x54
   d46a4:	f003 f946 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[2]);
   d46a8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   d46ac:	220a      	movs	r2, #10
   d46ae:	a815      	add	r0, sp, #84	; 0x54
   d46b0:	f7ff fe6c 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d46b4:	212c      	movs	r1, #44	; 0x2c
   d46b6:	a815      	add	r0, sp, #84	; 0x54
   d46b8:	f003 f93c 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[3]);
   d46bc:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   d46c0:	220a      	movs	r2, #10
   d46c2:	a815      	add	r0, sp, #84	; 0x54
   d46c4:	f7ff fe62 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d46c8:	212c      	movs	r1, #44	; 0x2c
   d46ca:	a815      	add	r0, sp, #84	; 0x54
   d46cc:	f003 f932 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[6]);
   d46d0:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d46d4:	220a      	movs	r2, #10
   d46d6:	a815      	add	r0, sp, #84	; 0x54
   d46d8:	f7ff fe58 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d46dc:	212c      	movs	r1, #44	; 0x2c
   d46de:	a815      	add	r0, sp, #84	; 0x54
   d46e0:	f003 f928 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[7]);
   d46e4:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   d46e8:	220a      	movs	r2, #10
   d46ea:	a815      	add	r0, sp, #84	; 0x54
   d46ec:	f7ff fe4e 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d46f0:	212c      	movs	r1, #44	; 0x2c
   d46f2:	a815      	add	r0, sp, #84	; 0x54
   d46f4:	f003 f91e 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[8]);
   d46f8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d46fc:	220a      	movs	r2, #10
   d46fe:	a815      	add	r0, sp, #84	; 0x54
   d4700:	f7ff fe44 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4704:	212c      	movs	r1, #44	; 0x2c
   d4706:	a815      	add	r0, sp, #84	; 0x54
   d4708:	f003 f914 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[9]);
   d470c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d4710:	220a      	movs	r2, #10
   d4712:	a815      	add	r0, sp, #84	; 0x54
   d4714:	f7ff fe3a 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4718:	212c      	movs	r1, #44	; 0x2c
   d471a:	a815      	add	r0, sp, #84	; 0x54
   d471c:	f003 f90a 	bl	d7934 <_ZN5Print5printEc>
    file.print(readings[10]);
   d4720:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d4724:	220a      	movs	r2, #10
   d4726:	a815      	add	r0, sp, #84	; 0x54
   d4728:	f7ff fe30 	bl	d438c <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d472c:	212c      	movs	r1, #44	; 0x2c
   d472e:	a815      	add	r0, sp, #84	; 0x54
   d4730:	f003 f900 	bl	d7934 <_ZN5Print5printEc>
    file.println(readings[11]);
   d4734:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d4738:	220a      	movs	r2, #10
   d473a:	a815      	add	r0, sp, #84	; 0x54
   d473c:	f7ff fe33 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
    file.close();
   d4740:	a819      	add	r0, sp, #100	; 0x64
   d4742:	f001 fc05 	bl	d5f50 <_ZN7FatFile5closeEv>
   d4746:	e65a      	b.n	d43fe <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x42>
   d4748:	2003e540 	.word	0x2003e540
   d474c:	2003dfe0 	.word	0x2003dfe0
   d4750:	2003e568 	.word	0x2003e568
   d4754:	000d905c 	.word	0x000d905c
   d4758:	2003dfe4 	.word	0x2003dfe4
   d475c:	000d905f 	.word	0x000d905f
   d4760:	000d9062 	.word	0x000d9062
   d4764:	000d9069 	.word	0x000d9069
   d4768:	000d906d 	.word	0x000d906d
   d476c:	000d9071 	.word	0x000d9071
   d4770:	000d907e 	.word	0x000d907e
    Serial.println(F("Error opening file!"));
   d4774:	f003 fbe2 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4778:	4901      	ldr	r1, [pc, #4]	; (d4780 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3c4>)
   d477a:	f003 f8f4 	bl	d7966 <_ZN5Print7printlnEPK19__FlashStringHelper>
    virtual ~Print() {}
   d477e:	e63e      	b.n	d43fe <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x42>
   d4780:	000d902c 	.word	0x000d902c

000d4784 <_Z18serialprintresultsR11RTC_PCF8523>:

void serialprintresults(RTC_PCF8523 &rtc) {
   d4784:	b570      	push	{r4, r5, r6, lr}
   d4786:	b094      	sub	sp, #80	; 0x50
  DateTime now = rtc.now();
   d4788:	4668      	mov	r0, sp

  uint16_t readings[12];
  float counts[12];

  if (!as7341.readAllChannels(readings)){
   d478a:	ad02      	add	r5, sp, #8
  DateTime now = rtc.now();
   d478c:	f001 f929 	bl	d59e2 <_ZN11RTC_PCF85233nowEv>
  if (!as7341.readAllChannels(readings)){
   d4790:	48af      	ldr	r0, [pc, #700]	; (d4a50 <_Z18serialprintresultsR11RTC_PCF8523+0x2cc>)
   d4792:	4629      	mov	r1, r5
   d4794:	f000 fcd1 	bl	d513a <_ZN15Adafruit_AS734115readAllChannelsEPt>
   d4798:	b930      	cbnz	r0, d47a8 <_Z18serialprintresultsR11RTC_PCF8523+0x24>
    Serial.println("Error reading all channels!");
   d479a:	f003 fbcf 	bl	d7f3c <_Z16_fetch_usbserialv>
   d479e:	49ad      	ldr	r1, [pc, #692]	; (d4a54 <_Z18serialprintresultsR11RTC_PCF8523+0x2d0>)
   d47a0:	f003 f8d7 	bl	d7952 <_ZN5Print7printlnEPKc>
  Serial.print("  ");
  Serial.print("Raw Value : ");
  Serial.println(readings[11]);
  Serial.print("  ");
  Serial.println();
}
   d47a4:	b014      	add	sp, #80	; 0x50
   d47a6:	bd70      	pop	{r4, r5, r6, pc}
    counts[i] = as7341.toBasicCounts(readings[i]);
   d47a8:	4ea9      	ldr	r6, [pc, #676]	; (d4a50 <_Z18serialprintresultsR11RTC_PCF8523+0x2cc>)
   d47aa:	2400      	movs	r4, #0
    if(i == 4 || i == 5) continue;
   d47ac:	1f23      	subs	r3, r4, #4
   d47ae:	b2db      	uxtb	r3, r3
   d47b0:	2b01      	cmp	r3, #1
   d47b2:	d909      	bls.n	d47c8 <_Z18serialprintresultsR11RTC_PCF8523+0x44>
    counts[i] = as7341.toBasicCounts(readings[i]);
   d47b4:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
   d47b8:	4630      	mov	r0, r6
   d47ba:	f000 fb79 	bl	d4eb0 <_ZN15Adafruit_AS734113toBasicCountsEt>
   d47be:	ab08      	add	r3, sp, #32
   d47c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   d47c4:	ed83 0a00 	vstr	s0, [r3]
  for(uint8_t i = 0; i < 12; i++) {
   d47c8:	3401      	adds	r4, #1
   d47ca:	2c0c      	cmp	r4, #12
   d47cc:	d1ee      	bne.n	d47ac <_Z18serialprintresultsR11RTC_PCF8523+0x28>
  Serial.print(',');
   d47ce:	f003 fbb5 	bl	d7f3c <_Z16_fetch_usbserialv>
   d47d2:	212c      	movs	r1, #44	; 0x2c
   d47d4:	f003 f8ae 	bl	d7934 <_ZN5Print5printEc>
  Serial.println(millis() / 1000);
   d47d8:	f003 fbb0 	bl	d7f3c <_Z16_fetch_usbserialv>
   d47dc:	4604      	mov	r4, r0
   d47de:	f002 fc81 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d47e2:	220a      	movs	r2, #10
   d47e4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d47e8:	fbb0 f1f1 	udiv	r1, r0, r1
   d47ec:	4620      	mov	r0, r4
   d47ee:	f003 f8bc 	bl	d796a <_ZN5Print11printNumberEmh>
        n += println();
   d47f2:	4620      	mov	r0, r4
   d47f4:	f003 f8a1 	bl	d793a <_ZN5Print7printlnEv>
  Serial.print("F1 415nm : ");
   d47f8:	f003 fba0 	bl	d7f3c <_Z16_fetch_usbserialv>
   d47fc:	4996      	ldr	r1, [pc, #600]	; (d4a58 <_Z18serialprintresultsR11RTC_PCF8523+0x2d4>)
   d47fe:	f003 f895 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[0]);
   d4802:	f003 fb9b 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4806:	ed9d 0a08 	vldr	s0, [sp, #32]
   d480a:	2102      	movs	r1, #2
   d480c:	f003 f994 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4810:	f003 fb94 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4814:	4991      	ldr	r1, [pc, #580]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d4816:	f003 f889 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d481a:	f003 fb8f 	bl	d7f3c <_Z16_fetch_usbserialv>
   d481e:	4990      	ldr	r1, [pc, #576]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d4820:	f003 f884 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[0]);
   d4824:	f003 fb8a 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4828:	220a      	movs	r2, #10
   d482a:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   d482e:	f7ff fdba 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F2 445nm : ");
   d4832:	f003 fb83 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4836:	498b      	ldr	r1, [pc, #556]	; (d4a64 <_Z18serialprintresultsR11RTC_PCF8523+0x2e0>)
   d4838:	f003 f878 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[1]);
   d483c:	f003 fb7e 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4840:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d4844:	2102      	movs	r1, #2
   d4846:	f003 f977 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d484a:	f003 fb77 	bl	d7f3c <_Z16_fetch_usbserialv>
   d484e:	4983      	ldr	r1, [pc, #524]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d4850:	f003 f86c 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d4854:	f003 fb72 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4858:	4981      	ldr	r1, [pc, #516]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d485a:	f003 f867 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[1]);
   d485e:	f003 fb6d 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4862:	220a      	movs	r2, #10
   d4864:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   d4868:	f7ff fd9d 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F3 480nm : ");
   d486c:	f003 fb66 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4870:	497d      	ldr	r1, [pc, #500]	; (d4a68 <_Z18serialprintresultsR11RTC_PCF8523+0x2e4>)
   d4872:	f003 f85b 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[2]);
   d4876:	f003 fb61 	bl	d7f3c <_Z16_fetch_usbserialv>
   d487a:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   d487e:	2102      	movs	r1, #2
   d4880:	f003 f95a 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4884:	f003 fb5a 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4888:	4974      	ldr	r1, [pc, #464]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d488a:	f003 f84f 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d488e:	f003 fb55 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4892:	4973      	ldr	r1, [pc, #460]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d4894:	f003 f84a 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[2]);
   d4898:	f003 fb50 	bl	d7f3c <_Z16_fetch_usbserialv>
   d489c:	220a      	movs	r2, #10
   d489e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d48a2:	f7ff fd80 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F4 515nm : ");
   d48a6:	f003 fb49 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48aa:	4970      	ldr	r1, [pc, #448]	; (d4a6c <_Z18serialprintresultsR11RTC_PCF8523+0x2e8>)
   d48ac:	f003 f83e 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[3]);
   d48b0:	f003 fb44 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48b4:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   d48b8:	2102      	movs	r1, #2
   d48ba:	f003 f93d 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d48be:	f003 fb3d 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48c2:	4966      	ldr	r1, [pc, #408]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d48c4:	f003 f832 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d48c8:	f003 fb38 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48cc:	4964      	ldr	r1, [pc, #400]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d48ce:	f003 f82d 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[3]);
   d48d2:	f003 fb33 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48d6:	220a      	movs	r2, #10
   d48d8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d48dc:	f7ff fd63 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F5 555nm : ");
   d48e0:	f003 fb2c 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48e4:	4962      	ldr	r1, [pc, #392]	; (d4a70 <_Z18serialprintresultsR11RTC_PCF8523+0x2ec>)
   d48e6:	f003 f821 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[6]);
   d48ea:	f003 fb27 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48ee:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
   d48f2:	2102      	movs	r1, #2
   d48f4:	f003 f920 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d48f8:	f003 fb20 	bl	d7f3c <_Z16_fetch_usbserialv>
   d48fc:	4957      	ldr	r1, [pc, #348]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d48fe:	f003 f815 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d4902:	f003 fb1b 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4906:	4956      	ldr	r1, [pc, #344]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d4908:	f003 f810 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[6]);
   d490c:	f003 fb16 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4910:	220a      	movs	r2, #10
   d4912:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   d4916:	f7ff fd46 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F6 590nm : ");
   d491a:	f003 fb0f 	bl	d7f3c <_Z16_fetch_usbserialv>
   d491e:	4955      	ldr	r1, [pc, #340]	; (d4a74 <_Z18serialprintresultsR11RTC_PCF8523+0x2f0>)
   d4920:	f003 f804 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[7]);
   d4924:	f003 fb0a 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4928:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   d492c:	2102      	movs	r1, #2
   d492e:	f003 f903 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4932:	f003 fb03 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4936:	4949      	ldr	r1, [pc, #292]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d4938:	f002 fff8 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d493c:	f003 fafe 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4940:	4947      	ldr	r1, [pc, #284]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d4942:	f002 fff3 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[7]);
   d4946:	f003 faf9 	bl	d7f3c <_Z16_fetch_usbserialv>
   d494a:	220a      	movs	r2, #10
   d494c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   d4950:	f7ff fd29 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F7 630nm : ");
   d4954:	f003 faf2 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4958:	4947      	ldr	r1, [pc, #284]	; (d4a78 <_Z18serialprintresultsR11RTC_PCF8523+0x2f4>)
   d495a:	f002 ffe7 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[8]);
   d495e:	f003 faed 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4962:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   d4966:	2102      	movs	r1, #2
   d4968:	f003 f8e6 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d496c:	f003 fae6 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4970:	493a      	ldr	r1, [pc, #232]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d4972:	f002 ffdb 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d4976:	f003 fae1 	bl	d7f3c <_Z16_fetch_usbserialv>
   d497a:	4939      	ldr	r1, [pc, #228]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d497c:	f002 ffd6 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[8]);
   d4980:	f003 fadc 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4984:	220a      	movs	r2, #10
   d4986:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d498a:	f7ff fd0c 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("F8 680nm : ");
   d498e:	f003 fad5 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4992:	493a      	ldr	r1, [pc, #232]	; (d4a7c <_Z18serialprintresultsR11RTC_PCF8523+0x2f8>)
   d4994:	f002 ffca 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[9]);
   d4998:	f003 fad0 	bl	d7f3c <_Z16_fetch_usbserialv>
   d499c:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   d49a0:	2102      	movs	r1, #2
   d49a2:	f003 f8c9 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d49a6:	f003 fac9 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49aa:	492c      	ldr	r1, [pc, #176]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d49ac:	f002 ffbe 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d49b0:	f003 fac4 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49b4:	492a      	ldr	r1, [pc, #168]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d49b6:	f002 ffb9 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[9]);
   d49ba:	f003 fabf 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49be:	220a      	movs	r2, #10
   d49c0:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   d49c4:	f7ff fcef 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("Clear    : ");
   d49c8:	f003 fab8 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49cc:	492c      	ldr	r1, [pc, #176]	; (d4a80 <_Z18serialprintresultsR11RTC_PCF8523+0x2fc>)
   d49ce:	f002 ffad 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[10]);
   d49d2:	f003 fab3 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49d6:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d49da:	2102      	movs	r1, #2
   d49dc:	f003 f8ac 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d49e0:	f003 faac 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49e4:	491d      	ldr	r1, [pc, #116]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d49e6:	f002 ffa1 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d49ea:	f003 faa7 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49ee:	491c      	ldr	r1, [pc, #112]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d49f0:	f002 ff9c 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[10]);
   d49f4:	f003 faa2 	bl	d7f3c <_Z16_fetch_usbserialv>
   d49f8:	220a      	movs	r2, #10
   d49fa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d49fe:	f7ff fcd2 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("NIR      : ");
   d4a02:	f003 fa9b 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4a06:	491f      	ldr	r1, [pc, #124]	; (d4a84 <_Z18serialprintresultsR11RTC_PCF8523+0x300>)
   d4a08:	f002 ff90 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print(counts[11]);
   d4a0c:	f003 fa96 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4a10:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d4a14:	2102      	movs	r1, #2
   d4a16:	f003 f88f 	bl	d7b38 <_ZN5Print5printEfi>
  Serial.print("  ");
   d4a1a:	f003 fa8f 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4a1e:	490f      	ldr	r1, [pc, #60]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d4a20:	f002 ff84 	bl	d792c <_ZN5Print5printEPKc>
  Serial.print("Raw Value : ");
   d4a24:	f003 fa8a 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4a28:	490d      	ldr	r1, [pc, #52]	; (d4a60 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d4a2a:	f002 ff7f 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println(readings[11]);
   d4a2e:	f003 fa85 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4a32:	220a      	movs	r2, #10
   d4a34:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d4a38:	f7ff fcb5 	bl	d43a6 <_ZN5Print7printlnItLi0EEEjT_i>
  Serial.print("  ");
   d4a3c:	f003 fa7e 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4a40:	4906      	ldr	r1, [pc, #24]	; (d4a5c <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d4a42:	f002 ff73 	bl	d792c <_ZN5Print5printEPKc>
  Serial.println();
   d4a46:	f003 fa79 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4a4a:	f002 ff76 	bl	d793a <_ZN5Print7printlnEv>
   d4a4e:	e6a9      	b.n	d47a4 <_Z18serialprintresultsR11RTC_PCF8523+0x20>
   d4a50:	2003e540 	.word	0x2003e540
   d4a54:	000d9040 	.word	0x000d9040
   d4a58:	000d9089 	.word	0x000d9089
   d4a5c:	000d9095 	.word	0x000d9095
   d4a60:	000d9098 	.word	0x000d9098
   d4a64:	000d90a5 	.word	0x000d90a5
   d4a68:	000d90b1 	.word	0x000d90b1
   d4a6c:	000d90bd 	.word	0x000d90bd
   d4a70:	000d90c9 	.word	0x000d90c9
   d4a74:	000d90d5 	.word	0x000d90d5
   d4a78:	000d90e1 	.word	0x000d90e1
   d4a7c:	000d90ed 	.word	0x000d90ed
   d4a80:	000d90f9 	.word	0x000d90f9
   d4a84:	000d9105 	.word	0x000d9105

000d4a88 <loop>:
void loop() {
   d4a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4a8a:	f002 fb2b 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
   d4a8e:	4604      	mov	r4, r0
   d4a90:	f002 fb28 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime1 < ledDuration1) {
   d4a94:	f241 736f 	movw	r3, #5999	; 0x176f
   d4a98:	1b00      	subs	r0, r0, r4
   d4a9a:	4298      	cmp	r0, r3
   d4a9c:	d84b      	bhi.n	d4b36 <loop+0xae>
    aw.analogWrite(LedPins[0], 255); // Turn on LED 0
   d4a9e:	4826      	ldr	r0, [pc, #152]	; (d4b38 <loop+0xb0>)
    aw.analogWrite(LedPins[0], 0);    // Turn off LED 0
   d4aa0:	4e25      	ldr	r6, [pc, #148]	; (d4b38 <loop+0xb0>)
    fileprintresults(SD, rtc); // Take measurements and write to file
   d4aa2:	4d26      	ldr	r5, [pc, #152]	; (d4b3c <loop+0xb4>)
   d4aa4:	4f26      	ldr	r7, [pc, #152]	; (d4b40 <loop+0xb8>)
    aw.analogWrite(LedPins[0], 255); // Turn on LED 0
   d4aa6:	22ff      	movs	r2, #255	; 0xff
   d4aa8:	2100      	movs	r1, #0
   d4aaa:	f000 fbb9 	bl	d5220 <_ZN15Adafruit_AW952311analogWriteEhh>
    aw.analogWrite(LedPins[1], 0);    // Turn off LED 10
   d4aae:	2200      	movs	r2, #0
   d4ab0:	4821      	ldr	r0, [pc, #132]	; (d4b38 <loop+0xb0>)
   d4ab2:	210a      	movs	r1, #10
   d4ab4:	f000 fbb4 	bl	d5220 <_ZN15Adafruit_AW952311analogWriteEhh>
    fileprintresults(SD, rtc); // Take measurements and write to file
   d4ab8:	4920      	ldr	r1, [pc, #128]	; (d4b3c <loop+0xb4>)
   d4aba:	4821      	ldr	r0, [pc, #132]	; (d4b40 <loop+0xb8>)
   d4abc:	f7ff fc7e 	bl	d43bc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523>
    serialprintresults(rtc);
   d4ac0:	481e      	ldr	r0, [pc, #120]	; (d4b3c <loop+0xb4>)
   d4ac2:	f7ff fe5f 	bl	d4784 <_Z18serialprintresultsR11RTC_PCF8523>
    aw.analogWrite(LedPins[0], 0);
   d4ac6:	2200      	movs	r2, #0
   d4ac8:	4611      	mov	r1, r2
   d4aca:	481b      	ldr	r0, [pc, #108]	; (d4b38 <loop+0xb0>)
   d4acc:	f000 fba8 	bl	d5220 <_ZN15Adafruit_AW952311analogWriteEhh>
  Serial.print("LED 0 off");
   d4ad0:	f003 fa34 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4ad4:	491b      	ldr	r1, [pc, #108]	; (d4b44 <loop+0xbc>)
   d4ad6:	f002 ff29 	bl	d792c <_ZN5Print5printEPKc>
  delay(1000); // Adjust delay as needed
   d4ada:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4ade:	f002 fd1d 	bl	d751c <delay>
   d4ae2:	f002 faff 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
   d4ae6:	4604      	mov	r4, r0
   d4ae8:	f002 fafc 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime2 < ledDuration2) {
   d4aec:	f241 736f 	movw	r3, #5999	; 0x176f
   d4af0:	1b00      	subs	r0, r0, r4
   d4af2:	4298      	cmp	r0, r3
    aw.analogWrite(LedPins[0], 0);    // Turn off LED 0
   d4af4:	f04f 0200 	mov.w	r2, #0
  while (millis() - startTime2 < ledDuration2) {
   d4af8:	d810      	bhi.n	d4b1c <loop+0x94>
    aw.analogWrite(LedPins[0], 0);    // Turn off LED 0
   d4afa:	4611      	mov	r1, r2
   d4afc:	4630      	mov	r0, r6
   d4afe:	f000 fb8f 	bl	d5220 <_ZN15Adafruit_AW952311analogWriteEhh>
    aw.analogWrite(LedPins[1], 255); // Turn on LED 10
   d4b02:	22ff      	movs	r2, #255	; 0xff
   d4b04:	4630      	mov	r0, r6
   d4b06:	210a      	movs	r1, #10
   d4b08:	f000 fb8a 	bl	d5220 <_ZN15Adafruit_AW952311analogWriteEhh>
    fileprintresults(SD, rtc); // Take measurements and write to file
   d4b0c:	4638      	mov	r0, r7
   d4b0e:	4629      	mov	r1, r5
   d4b10:	f7ff fc54 	bl	d43bc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523>
    serialprintresults(rtc);
   d4b14:	4628      	mov	r0, r5
   d4b16:	f7ff fe35 	bl	d4784 <_Z18serialprintresultsR11RTC_PCF8523>
  while (millis() - startTime2 < ledDuration2) {
   d4b1a:	e7e5      	b.n	d4ae8 <loop+0x60>
  aw.analogWrite(LedPins[1], 0);
   d4b1c:	210a      	movs	r1, #10
   d4b1e:	4806      	ldr	r0, [pc, #24]	; (d4b38 <loop+0xb0>)
   d4b20:	f000 fb7e 	bl	d5220 <_ZN15Adafruit_AW952311analogWriteEhh>
  Serial.println("LED 10 off");
   d4b24:	f003 fa0a 	bl	d7f3c <_Z16_fetch_usbserialv>
   d4b28:	4907      	ldr	r1, [pc, #28]	; (d4b48 <loop+0xc0>)
   d4b2a:	f002 ff12 	bl	d7952 <_ZN5Print7printlnEPKc>
    delay(1);
   d4b2e:	2001      	movs	r0, #1
   d4b30:	f002 fcf4 	bl	d751c <delay>
  while (1) {
   d4b34:	e7fb      	b.n	d4b2e <loop+0xa6>
}
   d4b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b38:	2003e568 	.word	0x2003e568
   d4b3c:	2003e5a0 	.word	0x2003e5a0
   d4b40:	2003e0b0 	.word	0x2003e0b0
   d4b44:	000d9111 	.word	0x000d9111
   d4b48:	000d911b 	.word	0x000d911b

000d4b4c <_GLOBAL__sub_I_as7341>:
}
   d4b4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
Adafruit_AS7341 as7341;
   d4b4e:	4825      	ldr	r0, [pc, #148]	; (d4be4 <_GLOBAL__sub_I_as7341+0x98>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4b50:	4c25      	ldr	r4, [pc, #148]	; (d4be8 <_GLOBAL__sub_I_as7341+0x9c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4b52:	4d26      	ldr	r5, [pc, #152]	; (d4bec <_GLOBAL__sub_I_as7341+0xa0>)
   d4b54:	f000 f858 	bl	d4c08 <_ZN15Adafruit_AS7341C1Ev>
Adafruit_AW9523 aw;
   d4b58:	4825      	ldr	r0, [pc, #148]	; (d4bf0 <_GLOBAL__sub_I_as7341+0xa4>)
   d4b5a:	f000 fb24 	bl	d51a6 <_ZN15Adafruit_AW9523C1Ev>
   d4b5e:	4b25      	ldr	r3, [pc, #148]	; (d4bf4 <_GLOBAL__sub_I_as7341+0xa8>)
   d4b60:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4b64:	6099      	str	r1, [r3, #8]
   d4b66:	4924      	ldr	r1, [pc, #144]	; (d4bf8 <_GLOBAL__sub_I_as7341+0xac>)
   d4b68:	6019      	str	r1, [r3, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4b6a:	2164      	movs	r1, #100	; 0x64
   d4b6c:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
  {
   d4b70:	4922      	ldr	r1, [pc, #136]	; (d4bfc <_GLOBAL__sub_I_as7341+0xb0>)
   d4b72:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   d4b76:	2200      	movs	r2, #0
   d4b78:	2101      	movs	r1, #1
   d4b7a:	821a      	strh	r2, [r3, #16]
    Print() : write_error(0) {}
   d4b7c:	605a      	str	r2, [r3, #4]
   d4b7e:	71e2      	strb	r2, [r4, #7]
   d4b80:	f8a4 243c 	strh.w	r2, [r4, #1084]	; 0x43c
   d4b84:	f884 246a 	strb.w	r2, [r4, #1130]	; 0x46a
   d4b88:	f884 1474 	strb.w	r1, [r4, #1140]	; 0x474
   d4b8c:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
   d4b90:	f8a4 247c 	strh.w	r2, [r4, #1148]	; 0x47c
   d4b94:	7829      	ldrb	r1, [r5, #0]
   d4b96:	f3bf 8f5b 	dmb	ish
   d4b9a:	f011 0101 	ands.w	r1, r1, #1
   d4b9e:	d10b      	bne.n	d4bb8 <_GLOBAL__sub_I_as7341+0x6c>
   d4ba0:	4628      	mov	r0, r5
   d4ba2:	9101      	str	r1, [sp, #4]
   d4ba4:	f7ff fa7d 	bl	d40a2 <__cxa_guard_acquire>
   d4ba8:	9901      	ldr	r1, [sp, #4]
   d4baa:	b128      	cbz	r0, d4bb8 <_GLOBAL__sub_I_as7341+0x6c>
   d4bac:	4814      	ldr	r0, [pc, #80]	; (d4c00 <_GLOBAL__sub_I_as7341+0xb4>)
   d4bae:	f003 f80f 	bl	d7bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4bb2:	4628      	mov	r0, r5
   d4bb4:	f7ff fa7a 	bl	d40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4bb8:	4b11      	ldr	r3, [pc, #68]	; (d4c00 <_GLOBAL__sub_I_as7341+0xb4>)
   d4bba:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SYSTEM_THREAD(ENABLED);
   d4bbe:	2100      	movs	r1, #0
   d4bc0:	2001      	movs	r0, #1
   d4bc2:	f002 fbff 	bl	d73c4 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4bc6:	4b0f      	ldr	r3, [pc, #60]	; (d4c04 <_GLOBAL__sub_I_as7341+0xb8>)
   d4bc8:	2200      	movs	r2, #0
   d4bca:	601a      	str	r2, [r3, #0]
   d4bcc:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
   d4bce:	719a      	strb	r2, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4bd0:	2002      	movs	r0, #2
    SleepResult() {}
   d4bd2:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   d4bd6:	609a      	str	r2, [r3, #8]
}
   d4bd8:	b003      	add	sp, #12
   d4bda:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   d4bde:	f002 bbe1 	b.w	d73a4 <set_system_mode>
   d4be2:	bf00      	nop
   d4be4:	2003e540 	.word	0x2003e540
   d4be8:	2003e0b0 	.word	0x2003e0b0
   d4bec:	2003e0a4 	.word	0x2003e0a4
   d4bf0:	2003e568 	.word	0x2003e568
   d4bf4:	2003e56c 	.word	0x2003e56c
   d4bf8:	000d9144 	.word	0x000d9144
   d4bfc:	000d9130 	.word	0x000d9130
   d4c00:	2003e0a8 	.word	0x2003e0a8
   d4c04:	2003e534 	.word	0x2003e534

000d4c08 <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {}
   d4c08:	4a02      	ldr	r2, [pc, #8]	; (d4c14 <_ZN15Adafruit_AS7341C1Ev+0xc>)
   d4c0a:	6002      	str	r2, [r0, #0]
   d4c0c:	2200      	movs	r2, #0
   d4c0e:	7102      	strb	r2, [r0, #4]
   d4c10:	6082      	str	r2, [r0, #8]
   d4c12:	4770      	bx	lr
   d4c14:	000d9198 	.word	0x000d9198

000d4c18 <_ZN15Adafruit_AS73415beginEhP7TwoWirel>:
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_AS7341::begin(uint8_t i2c_address, TwoWire *wire,
                            int32_t sensor_id) {
   d4c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4c1c:	4604      	mov	r4, r0
  if (i2c_dev) {
   d4c1e:	6880      	ldr	r0, [r0, #8]
                            int32_t sensor_id) {
   d4c20:	460f      	mov	r7, r1
   d4c22:	4690      	mov	r8, r2
   d4c24:	461e      	mov	r6, r3
  if (i2c_dev) {
   d4c26:	b110      	cbz	r0, d4c2e <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x16>
    delete i2c_dev; // remove old interface
   d4c28:	2110      	movs	r1, #16
   d4c2a:	f003 fb2d 	bl	d8288 <_ZdlPvj>
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   d4c2e:	2010      	movs	r0, #16
   d4c30:	f7ff fa31 	bl	d4096 <_Znwj>
   d4c34:	4605      	mov	r5, r0
   d4c36:	b118      	cbz	r0, d4c40 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x28>
   d4c38:	4642      	mov	r2, r8
   d4c3a:	4639      	mov	r1, r7
   d4c3c:	f000 fcab 	bl	d5596 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d4c40:	60a5      	str	r5, [r4, #8]

  if (!i2c_dev->begin()) {
   d4c42:	2101      	movs	r1, #1
   d4c44:	4628      	mov	r0, r5
   d4c46:	f000 fcc2 	bl	d55ce <_ZN18Adafruit_I2CDevice5beginEb>
   d4c4a:	b130      	cbz	r0, d4c5a <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x42>
    return false;
  }

  return _init(sensor_id);
   d4c4c:	6823      	ldr	r3, [r4, #0]
   d4c4e:	4631      	mov	r1, r6
   d4c50:	4620      	mov	r0, r4
   d4c52:	681b      	ldr	r3, [r3, #0]
}
   d4c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return _init(sensor_id);
   d4c58:	4718      	bx	r3
}
   d4c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c5e <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4c5e:	b570      	push	{r4, r5, r6, lr}
  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4c60:	2501      	movs	r5, #1
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4c62:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4c64:	2600      	movs	r6, #0
   d4c66:	e9cd 6500 	strd	r6, r5, [sp]
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4c6a:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4c6c:	462b      	mov	r3, r5
   d4c6e:	6881      	ldr	r1, [r0, #8]
   d4c70:	2280      	movs	r2, #128	; 0x80
   d4c72:	a804      	add	r0, sp, #16
   d4c74:	f000 fb93 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits pon_en =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 0);
   d4c78:	4633      	mov	r3, r6
   d4c7a:	462a      	mov	r2, r5
   d4c7c:	a904      	add	r1, sp, #16
   d4c7e:	a802      	add	r0, sp, #8
   d4c80:	f000 fc5e 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  pon_en.write(enable_power);
   d4c84:	4621      	mov	r1, r4
   d4c86:	a802      	add	r0, sp, #8
   d4c88:	f000 fc6c 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4c8c:	b00a      	add	sp, #40	; 0x28
   d4c8e:	bd70      	pop	{r4, r5, r6, pc}

000d4c90 <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4c90:	b570      	push	{r4, r5, r6, lr}
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4c92:	2501      	movs	r5, #1
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4c94:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4c96:	2400      	movs	r4, #0
   d4c98:	e9cd 4500 	strd	r4, r5, [sp]
   d4c9c:	462b      	mov	r3, r5
   d4c9e:	6881      	ldr	r1, [r0, #8]
   d4ca0:	2292      	movs	r2, #146	; 0x92
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4ca2:	4606      	mov	r6, r0
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4ca4:	a802      	add	r0, sp, #8
   d4ca6:	f000 fb7a 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() & 0xFC != AS7341_CHIP_ID << 2) {
   d4caa:	a802      	add	r0, sp, #8
   d4cac:	f000 fc2c 	bl	d5508 <_ZN23Adafruit_BusIO_Register4readEv>
   d4cb0:	07c3      	lsls	r3, r0, #31
   d4cb2:	d406      	bmi.n	d4cc2 <_ZN15Adafruit_AS73415_initEl+0x32>
  powerEnable(true);
   d4cb4:	4630      	mov	r0, r6
   d4cb6:	4629      	mov	r1, r5
   d4cb8:	f7ff ffd1 	bl	d4c5e <_ZN15Adafruit_AS734111powerEnableEb>
  return true;
   d4cbc:	4628      	mov	r0, r5
}
   d4cbe:	b008      	add	sp, #32
   d4cc0:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4cc2:	4620      	mov	r0, r4
   d4cc4:	e7fb      	b.n	d4cbe <_ZN15Adafruit_AS73415_initEl+0x2e>

000d4cc6 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>:
 * @brief Enables measurement of spectral data
 *
 * @param enable_measurement true: enabled false: disabled
 * @return true: success false: failure
 */
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4cc6:	b510      	push	{r4, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4cc8:	2301      	movs	r3, #1
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4cca:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4ccc:	2200      	movs	r2, #0
   d4cce:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4cd2:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4cd4:	2280      	movs	r2, #128	; 0x80
   d4cd6:	6881      	ldr	r1, [r0, #8]
   d4cd8:	a804      	add	r0, sp, #16
   d4cda:	f000 fb60 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_BusIO_RegisterBits spec_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 1);
   d4cde:	2301      	movs	r3, #1
   d4ce0:	461a      	mov	r2, r3
   d4ce2:	a904      	add	r1, sp, #16
   d4ce4:	a802      	add	r0, sp, #8
   d4ce6:	f000 fc2b 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return spec_enable_bit.write(enable_measurement);
   d4cea:	4621      	mov	r1, r4
   d4cec:	a802      	add	r0, sp, #8
   d4cee:	f000 fc39 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4cf2:	b00a      	add	sp, #40	; 0x28
   d4cf4:	bd10      	pop	{r4, pc}

000d4cf6 <_ZN15Adafruit_AS734110enableSMUXEv>:

bool Adafruit_AS7341::enableSMUX(void) {
   d4cf6:	b530      	push	{r4, r5, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4cf8:	2501      	movs	r5, #1
bool Adafruit_AS7341::enableSMUX(void) {
   d4cfa:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4cfc:	2400      	movs	r4, #0
   d4cfe:	e9cd 4500 	strd	r4, r5, [sp]
   d4d02:	462b      	mov	r3, r5
   d4d04:	6881      	ldr	r1, [r0, #8]
   d4d06:	2280      	movs	r2, #128	; 0x80
   d4d08:	a804      	add	r0, sp, #16
   d4d0a:	f000 fb48 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 4);
   d4d0e:	462a      	mov	r2, r5
   d4d10:	2304      	movs	r3, #4
   d4d12:	a904      	add	r1, sp, #16
   d4d14:	a802      	add	r0, sp, #8
   d4d16:	f000 fc13 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  bool success = smux_enable_bit.write(true);
   d4d1a:	4629      	mov	r1, r5
   d4d1c:	a802      	add	r0, sp, #8
   d4d1e:	f000 fc21 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
   d4d22:	4605      	mov	r5, r0

  int timeOut = 1000; // Arbitrary value, but if it takes 1000 milliseconds then
                      // something is wrong
  int count = 0;
  while (smux_enable_bit.read() && count < timeOut) {
   d4d24:	a802      	add	r0, sp, #8
   d4d26:	f000 fc10 	bl	d554a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   d4d2a:	b138      	cbz	r0, d4d3c <_ZN15Adafruit_AS734110enableSMUXEv+0x46>
   d4d2c:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   d4d30:	d00b      	beq.n	d4d4a <_ZN15Adafruit_AS734110enableSMUXEv+0x54>
    delay(1);
   d4d32:	2001      	movs	r0, #1
   d4d34:	f002 fbf2 	bl	d751c <delay>
    count++;
   d4d38:	3401      	adds	r4, #1
  while (smux_enable_bit.read() && count < timeOut) {
   d4d3a:	e7f3      	b.n	d4d24 <_ZN15Adafruit_AS734110enableSMUXEv+0x2e>
  }
  if (count >= timeOut)
    return false;
   d4d3c:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   d4d40:	bf08      	it	eq
   d4d42:	2500      	moveq	r5, #0
  else
    return success;
}
   d4d44:	4628      	mov	r0, r5
   d4d46:	b00b      	add	sp, #44	; 0x2c
   d4d48:	bd30      	pop	{r4, r5, pc}
    return false;
   d4d4a:	2500      	movs	r5, #0
   d4d4c:	e7fa      	b.n	d4d44 <_ZN15Adafruit_AS734110enableSMUXEv+0x4e>

000d4d4e <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>:
      Adafruit_BusIO_RegisterBits(&gpio2_reg, 1, 1);

  return gpio_output_value_bit.write(gpio_high);
}

bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4d4e:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register cfg6_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4d50:	2301      	movs	r3, #1
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4d52:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4d54:	2200      	movs	r2, #0
   d4d56:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4d5a:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4d5c:	22af      	movs	r2, #175	; 0xaf
   d4d5e:	6881      	ldr	r1, [r0, #8]
   d4d60:	a804      	add	r0, sp, #16
   d4d62:	f000 fb1c 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_command_bits =
      Adafruit_BusIO_RegisterBits(&cfg6_reg, 2, 3);
   d4d66:	2303      	movs	r3, #3
   d4d68:	2202      	movs	r2, #2
   d4d6a:	a904      	add	r1, sp, #16
   d4d6c:	a802      	add	r0, sp, #8
   d4d6e:	f000 fbe7 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return smux_command_bits.write(command);
   d4d72:	4621      	mov	r1, r4
   d4d74:	a802      	add	r0, sp, #8
   d4d76:	f000 fbf5 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4d7a:	b00a      	add	sp, #40	; 0x28
   d4d7c:	bd10      	pop	{r4, pc}

000d4d7e <_ZN15Adafruit_AS734114getIsDataReadyEv>:
/**
 * @brief
 *
 * @return true: success false: failure
 */
bool Adafruit_AS7341::getIsDataReady() {
   d4d7e:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register status2_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   d4d80:	2300      	movs	r3, #0
bool Adafruit_AS7341::getIsDataReady() {
   d4d82:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   d4d84:	2401      	movs	r4, #1
   d4d86:	e9cd 3400 	strd	r3, r4, [sp]
   d4d8a:	22a3      	movs	r2, #163	; 0xa3
   d4d8c:	6881      	ldr	r1, [r0, #8]
   d4d8e:	4623      	mov	r3, r4
   d4d90:	a804      	add	r0, sp, #16
   d4d92:	f000 fb04 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits avalid_bit =
      Adafruit_BusIO_RegisterBits(&status2_reg, 1, 6);
   d4d96:	2306      	movs	r3, #6
   d4d98:	4622      	mov	r2, r4
   d4d9a:	a904      	add	r1, sp, #16
   d4d9c:	a802      	add	r0, sp, #8
   d4d9e:	f000 fbcf 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return avalid_bit.read();
   d4da2:	a802      	add	r0, sp, #8
   d4da4:	f000 fbd1 	bl	d554a <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   d4da8:	3800      	subs	r0, #0
   d4daa:	bf18      	it	ne
   d4dac:	2001      	movne	r0, #1
   d4dae:	b00a      	add	sp, #40	; 0x28
   d4db0:	bd10      	pop	{r4, pc}

000d4db2 <_ZN15Adafruit_AS734112delayForDataEi.part.0>:
void Adafruit_AS7341::delayForData(int waitTime) {
   d4db2:	b510      	push	{r4, lr}
   d4db4:	4604      	mov	r4, r0
    while (!getIsDataReady()) {
   d4db6:	4620      	mov	r0, r4
   d4db8:	f7ff ffe1 	bl	d4d7e <_ZN15Adafruit_AS734114getIsDataReadyEv>
   d4dbc:	b918      	cbnz	r0, d4dc6 <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x14>
      delay(1);
   d4dbe:	2001      	movs	r0, #1
   d4dc0:	f002 fbac 	bl	d751c <delay>
    while (!getIsDataReady()) {
   d4dc4:	e7f7      	b.n	d4db6 <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x4>
}
   d4dc6:	bd10      	pop	{r4, pc}

000d4dc8 <_ZN15Adafruit_AS73418setATIMEEh>:
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @param atime_value The integration time step count
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4dc8:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4dca:	2301      	movs	r3, #1
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4dcc:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4dce:	2500      	movs	r5, #0
   d4dd0:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4dd4:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4dd6:	2281      	movs	r2, #129	; 0x81
   d4dd8:	6881      	ldr	r1, [r0, #8]
   d4dda:	a802      	add	r0, sp, #8
   d4ddc:	f000 fadf 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.write(atime_value);
   d4de0:	462a      	mov	r2, r5
   d4de2:	4621      	mov	r1, r4
   d4de4:	a802      	add	r0, sp, #8
   d4de6:	f000 fb31 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d4dea:	b009      	add	sp, #36	; 0x24
   d4dec:	bd30      	pop	{r4, r5, pc}

000d4dee <_ZN15Adafruit_AS73418getATIMEEv>:
 *
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @return uint8_t The current integration time step count
 */
uint8_t Adafruit_AS7341::getATIME() {
   d4dee:	b500      	push	{lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4df0:	2301      	movs	r3, #1
uint8_t Adafruit_AS7341::getATIME() {
   d4df2:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4df4:	2200      	movs	r2, #0
   d4df6:	e9cd 2300 	strd	r2, r3, [sp]
   d4dfa:	2281      	movs	r2, #129	; 0x81
   d4dfc:	6881      	ldr	r1, [r0, #8]
   d4dfe:	a802      	add	r0, sp, #8
   d4e00:	f000 facd 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.read();
   d4e04:	a802      	add	r0, sp, #8
   d4e06:	f000 fb7f 	bl	d5508 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4e0a:	b2c0      	uxtb	r0, r0
   d4e0c:	b009      	add	sp, #36	; 0x24
   d4e0e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e12 <_ZN15Adafruit_AS73418setASTEPEt>:
 *
 * @param astep_value Integration time step size in 2.78 microsecon increments
 * Step size is `(astep_value+1) * 2.78 uS`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4e12:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4e14:	2301      	movs	r3, #1
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4e16:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4e18:	2500      	movs	r5, #0
   d4e1a:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4e1e:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4e20:	2302      	movs	r3, #2
   d4e22:	6881      	ldr	r1, [r0, #8]
   d4e24:	22ca      	movs	r2, #202	; 0xca
   d4e26:	a802      	add	r0, sp, #8
   d4e28:	f000 fab9 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.write(astep_value);
   d4e2c:	462a      	mov	r2, r5
   d4e2e:	4621      	mov	r1, r4
   d4e30:	a802      	add	r0, sp, #8
   d4e32:	f000 fb0b 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d4e36:	b009      	add	sp, #36	; 0x24
   d4e38:	bd30      	pop	{r4, r5, pc}

000d4e3a <_ZN15Adafruit_AS73418getASTEPEv>:
 *
 * Step size is `(astep_value+1) * 2.78 uS`
 *
 * @return uint16_t The current integration time step size
 */
uint16_t Adafruit_AS7341::getASTEP() {
   d4e3a:	b500      	push	{lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4e3c:	2300      	movs	r3, #0
uint16_t Adafruit_AS7341::getASTEP() {
   d4e3e:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4e40:	2201      	movs	r2, #1
   d4e42:	e9cd 3200 	strd	r3, r2, [sp]
   d4e46:	2302      	movs	r3, #2
   d4e48:	6881      	ldr	r1, [r0, #8]
   d4e4a:	22ca      	movs	r2, #202	; 0xca
   d4e4c:	a802      	add	r0, sp, #8
   d4e4e:	f000 faa6 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.read();
   d4e52:	a802      	add	r0, sp, #8
   d4e54:	f000 fb58 	bl	d5508 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4e58:	b280      	uxth	r0, r0
   d4e5a:	b009      	add	sp, #36	; 0x24
   d4e5c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4e60 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>:
 * @brief Sets the ADC gain multiplier
 *
 * @param gain_value The gain amount. must be an `as7341_gain_t`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4e60:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4e62:	2301      	movs	r3, #1
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4e64:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4e66:	2500      	movs	r5, #0
   d4e68:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4e6c:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4e6e:	22aa      	movs	r2, #170	; 0xaa
   d4e70:	6881      	ldr	r1, [r0, #8]
   d4e72:	a802      	add	r0, sp, #8
   d4e74:	f000 fa93 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return cfg1_reg.write(gain_value);
   d4e78:	462a      	mov	r2, r5
   d4e7a:	4621      	mov	r1, r4
   d4e7c:	a802      	add	r0, sp, #8
   d4e7e:	f000 fae5 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
  // AGAIN bitfield is only[0:4] but the rest is empty
}
   d4e82:	b009      	add	sp, #36	; 0x24
   d4e84:	bd30      	pop	{r4, r5, pc}

000d4e86 <_ZN15Adafruit_AS73417getGainEv>:
/**
 * @brief Returns the ADC gain multiplier
 *
 * @return as7341_gain_t The current ADC gain multiplier
 */
as7341_gain_t Adafruit_AS7341::getGain() {
   d4e86:	b500      	push	{lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4e88:	2301      	movs	r3, #1
as7341_gain_t Adafruit_AS7341::getGain() {
   d4e8a:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4e8c:	2200      	movs	r2, #0
   d4e8e:	e9cd 2300 	strd	r2, r3, [sp]
   d4e92:	22aa      	movs	r2, #170	; 0xaa
   d4e94:	6881      	ldr	r1, [r0, #8]
   d4e96:	a802      	add	r0, sp, #8
   d4e98:	f000 fa81 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (as7341_gain_t)cfg1_reg.read();
   d4e9c:	a802      	add	r0, sp, #8
   d4e9e:	f000 fb33 	bl	d5508 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4ea2:	b2c0      	uxtb	r0, r0
   d4ea4:	b009      	add	sp, #36	; 0x24
   d4ea6:	f85d fb04 	ldr.w	pc, [sp], #4
   d4eaa:	0000      	movs	r0, r0
   d4eac:	0000      	movs	r0, r0
	...

000d4eb0 <_ZN15Adafruit_AS734113toBasicCountsEt>:
 *
 * @param raw The raw ADC values to convert
 *
 * @return float The basic counts
 */
float Adafruit_AS7341::toBasicCounts(uint16_t raw) {
   d4eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4eb2:	ed2d 8b02 	vpush	{d8}
   d4eb6:	460d      	mov	r5, r1
   d4eb8:	4604      	mov	r4, r0
  float gain_val = 0;
  as7341_gain_t gain = getGain();
   d4eba:	f7ff ffe4 	bl	d4e86 <_ZN15Adafruit_AS73417getGainEv>
  switch (gain) {
   d4ebe:	280a      	cmp	r0, #10
   d4ec0:	bf97      	itett	ls
   d4ec2:	4b1f      	ldrls	r3, [pc, #124]	; (d4f40 <_ZN15Adafruit_AS734113toBasicCountsEt+0x90>)
  as7341_gain_t gain = getGain();
   d4ec4:	eddf 8a1f 	vldrhi	s17, [pc, #124]	; d4f44 <_ZN15Adafruit_AS734113toBasicCountsEt+0x94>
   d4ec8:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   d4ecc:	edd0 8a00 	vldrls	s17, [r0]
    break;
  case AS7341_GAIN_512X:
    gain_val = 512;
    break;
  }
  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
   d4ed0:	4620      	mov	r0, r4
   d4ed2:	f7ff ff8c 	bl	d4dee <_ZN15Adafruit_AS73418getATIMEEv>
   d4ed6:	1c43      	adds	r3, r0, #1
   d4ed8:	4620      	mov	r0, r4
   d4eda:	ee08 3a10 	vmov	s16, r3
   d4ede:	f7ff ffac 	bl	d4e3a <_ZN15Adafruit_AS73418getASTEPEv>
   d4ee2:	4604      	mov	r4, r0
   d4ee4:	3401      	adds	r4, #1
   d4ee6:	4628      	mov	r0, r5
   d4ee8:	f003 fb24 	bl	d8534 <__aeabi_i2d>
   d4eec:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4ef0:	ee07 4a90 	vmov	s15, r4
   d4ef4:	ee28 8a28 	vmul.f32	s16, s16, s17
   d4ef8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4efc:	4606      	mov	r6, r0
   d4efe:	ee67 7a88 	vmul.f32	s15, s15, s16
   d4f02:	460f      	mov	r7, r1
   d4f04:	ee17 0a90 	vmov	r0, s15
   d4f08:	f003 fb26 	bl	d8558 <__aeabi_f2d>
   d4f0c:	a30a      	add	r3, pc, #40	; (adr r3, d4f38 <_ZN15Adafruit_AS734113toBasicCountsEt+0x88>)
   d4f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f12:	f003 fb79 	bl	d8608 <__aeabi_dmul>
   d4f16:	4b0c      	ldr	r3, [pc, #48]	; (d4f48 <_ZN15Adafruit_AS734113toBasicCountsEt+0x98>)
   d4f18:	2200      	movs	r2, #0
   d4f1a:	f003 fc9f 	bl	d885c <__aeabi_ddiv>
   d4f1e:	4602      	mov	r2, r0
   d4f20:	460b      	mov	r3, r1
   d4f22:	4630      	mov	r0, r6
   d4f24:	4639      	mov	r1, r7
   d4f26:	f003 fc99 	bl	d885c <__aeabi_ddiv>
   d4f2a:	f003 fe65 	bl	d8bf8 <__aeabi_d2f>
}
   d4f2e:	ecbd 8b02 	vpop	{d8}
   d4f32:	ee00 0a10 	vmov	s0, r0
   d4f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4f38:	a3d70a3d 	.word	0xa3d70a3d
   d4f3c:	40063d70 	.word	0x40063d70
   d4f40:	000d9164 	.word	0x000d9164
   d4f44:	00000000 	.word	0x00000000
   d4f48:	408f4000 	.word	0x408f4000

000d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>:
 * @brief Write a byte to the given register
 *
 * @param addr Register address
 * @param val The value to set the register to
 */
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d4f4c:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d4f4e:	2301      	movs	r3, #1
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d4f50:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d4f52:	2500      	movs	r5, #0
   d4f54:	e9cd 5300 	strd	r5, r3, [sp]
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d4f58:	4614      	mov	r4, r2
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d4f5a:	460a      	mov	r2, r1
   d4f5c:	6881      	ldr	r1, [r0, #8]
   d4f5e:	a802      	add	r0, sp, #8
   d4f60:	f000 fa1d 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg.write(val);
   d4f64:	462a      	mov	r2, r5
   d4f66:	4621      	mov	r1, r4
   d4f68:	a802      	add	r0, sp, #8
   d4f6a:	f000 fa6f 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
   d4f6e:	b009      	add	sp, #36	; 0x24
   d4f70:	bd30      	pop	{r4, r5, pc}

000d4f72 <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>:
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   d4f72:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   d4f74:	2230      	movs	r2, #48	; 0x30
   d4f76:	2100      	movs	r1, #0
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   d4f78:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   d4f7a:	f7ff ffe7 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x01)); // F1 left set to ADC0
   d4f7e:	2201      	movs	r2, #1
   d4f80:	4611      	mov	r1, r2
   d4f82:	4620      	mov	r0, r4
   d4f84:	f7ff ffe2 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // Reserved or disabled
   d4f88:	4620      	mov	r0, r4
   d4f8a:	2200      	movs	r2, #0
   d4f8c:	2102      	movs	r1, #2
   d4f8e:	f7ff ffdd 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x00)); // F8 left disabled
   d4f92:	4620      	mov	r0, r4
   d4f94:	2200      	movs	r2, #0
   d4f96:	2103      	movs	r1, #3
   d4f98:	f7ff ffd8 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x00)); // F6 left disabled
   d4f9c:	4620      	mov	r0, r4
   d4f9e:	2200      	movs	r2, #0
   d4fa0:	2104      	movs	r1, #4
   d4fa2:	f7ff ffd3 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   d4fa6:	4620      	mov	r0, r4
   d4fa8:	2242      	movs	r2, #66	; 0x42
   d4faa:	2105      	movs	r1, #5
   d4fac:	f7ff ffce 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x00)); // F5 left disbled
   d4fb0:	4620      	mov	r0, r4
   d4fb2:	2200      	movs	r2, #0
   d4fb4:	2106      	movs	r1, #6
   d4fb6:	f7ff ffc9 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x00)); // F7 left disbled
   d4fba:	4620      	mov	r0, r4
   d4fbc:	2200      	movs	r2, #0
   d4fbe:	2107      	movs	r1, #7
   d4fc0:	f7ff ffc4 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR connected to ADC4
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	2250      	movs	r2, #80	; 0x50
   d4fc8:	2108      	movs	r1, #8
   d4fca:	f7ff ffbf 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x00)); // F5 right disabled
   d4fce:	4620      	mov	r0, r4
   d4fd0:	2200      	movs	r2, #0
   d4fd2:	2109      	movs	r1, #9
   d4fd4:	f7ff ffba 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x00)); // F7 right disabled
   d4fd8:	4620      	mov	r0, r4
   d4fda:	2200      	movs	r2, #0
   d4fdc:	210a      	movs	r1, #10
   d4fde:	f7ff ffb5 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	2200      	movs	r2, #0
   d4fe6:	210b      	movs	r1, #11
   d4fe8:	f7ff ffb0 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x20)); // F2 right connected to ADC1
   d4fec:	4620      	mov	r0, r4
   d4fee:	2220      	movs	r2, #32
   d4ff0:	210c      	movs	r1, #12
   d4ff2:	f7ff ffab 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x04)); // F4 right connected to ADC3
   d4ff6:	4620      	mov	r0, r4
   d4ff8:	2204      	movs	r2, #4
   d4ffa:	210d      	movs	r1, #13
   d4ffc:	f7ff ffa6 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0E), byte(0x00)); // F6/F8 right disabled
   d5000:	4620      	mov	r0, r4
   d5002:	2200      	movs	r2, #0
   d5004:	210e      	movs	r1, #14
   d5006:	f7ff ffa1 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x30)); // F3 right connected to AD2
   d500a:	4620      	mov	r0, r4
   d500c:	2230      	movs	r2, #48	; 0x30
   d500e:	210f      	movs	r1, #15
   d5010:	f7ff ff9c 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x01)); // F1 right connected to AD0
   d5014:	4620      	mov	r0, r4
   d5016:	2201      	movs	r2, #1
   d5018:	2110      	movs	r1, #16
   d501a:	f7ff ff97 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   d501e:	4620      	mov	r0, r4
   d5020:	2250      	movs	r2, #80	; 0x50
   d5022:	2111      	movs	r1, #17
   d5024:	f7ff ff92 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   d5028:	4620      	mov	r0, r4
   d502a:	2200      	movs	r2, #0
   d502c:	2112      	movs	r1, #18
   d502e:	f7ff ff8d 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d5032:	4620      	mov	r0, r4
   d5034:	2206      	movs	r2, #6
}
   d5036:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d503a:	2113      	movs	r1, #19
   d503c:	f7ff bf86 	b.w	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>

000d5040 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>:
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d5040:	2200      	movs	r2, #0
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   d5042:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d5044:	4611      	mov	r1, r2
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   d5046:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d5048:	f7ff ff80 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x00)); // F1 left disable
   d504c:	4620      	mov	r0, r4
   d504e:	2200      	movs	r2, #0
   d5050:	2101      	movs	r1, #1
   d5052:	f7ff ff7b 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // reserved/disable
   d5056:	4620      	mov	r0, r4
   d5058:	2200      	movs	r2, #0
   d505a:	2102      	movs	r1, #2
   d505c:	f7ff ff76 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x40)); // F8 left connected to ADC3
   d5060:	4620      	mov	r0, r4
   d5062:	2240      	movs	r2, #64	; 0x40
   d5064:	2103      	movs	r1, #3
   d5066:	f7ff ff71 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x02)); // F6 left connected to ADC1
   d506a:	4620      	mov	r0, r4
   d506c:	2202      	movs	r2, #2
   d506e:	2104      	movs	r1, #4
   d5070:	f7ff ff6c 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x05), byte(0x00)); // F4/ F2 disabled
   d5074:	4620      	mov	r0, r4
   d5076:	2200      	movs	r2, #0
   d5078:	2105      	movs	r1, #5
   d507a:	f7ff ff67 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x10)); // F5 left connected to ADC0
   d507e:	4620      	mov	r0, r4
   d5080:	2210      	movs	r2, #16
   d5082:	2106      	movs	r1, #6
   d5084:	f7ff ff62 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x03)); // F7 left connected to ADC2
   d5088:	4620      	mov	r0, r4
   d508a:	2203      	movs	r2, #3
   d508c:	2107      	movs	r1, #7
   d508e:	f7ff ff5d 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR Connected to ADC4
   d5092:	4620      	mov	r0, r4
   d5094:	2250      	movs	r2, #80	; 0x50
   d5096:	2108      	movs	r1, #8
   d5098:	f7ff ff58 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x10)); // F5 right connected to ADC0
   d509c:	4620      	mov	r0, r4
   d509e:	2210      	movs	r2, #16
   d50a0:	2109      	movs	r1, #9
   d50a2:	f7ff ff53 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x03)); // F7 right connected to ADC2
   d50a6:	4620      	mov	r0, r4
   d50a8:	2203      	movs	r2, #3
   d50aa:	210a      	movs	r1, #10
   d50ac:	f7ff ff4e 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   d50b0:	4620      	mov	r0, r4
   d50b2:	2200      	movs	r2, #0
   d50b4:	210b      	movs	r1, #11
   d50b6:	f7ff ff49 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x00)); // F2 right disabled
   d50ba:	4620      	mov	r0, r4
   d50bc:	2200      	movs	r2, #0
   d50be:	210c      	movs	r1, #12
   d50c0:	f7ff ff44 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x00)); // F4 right disabled
   d50c4:	4620      	mov	r0, r4
   d50c6:	2200      	movs	r2, #0
   d50c8:	210d      	movs	r1, #13
   d50ca:	f7ff ff3f 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   d50ce:	4620      	mov	r0, r4
   d50d0:	2224      	movs	r2, #36	; 0x24
   d50d2:	210e      	movs	r1, #14
   d50d4:	f7ff ff3a 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x00)); // F3 right disabled
   d50d8:	4620      	mov	r0, r4
   d50da:	2200      	movs	r2, #0
   d50dc:	210f      	movs	r1, #15
   d50de:	f7ff ff35 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x00)); // F1 right disabled
   d50e2:	4620      	mov	r0, r4
   d50e4:	2200      	movs	r2, #0
   d50e6:	2110      	movs	r1, #16
   d50e8:	f7ff ff30 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   d50ec:	4620      	mov	r0, r4
   d50ee:	2250      	movs	r2, #80	; 0x50
   d50f0:	2111      	movs	r1, #17
   d50f2:	f7ff ff2b 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   d50f6:	4620      	mov	r0, r4
   d50f8:	2200      	movs	r2, #0
   d50fa:	2112      	movs	r1, #18
   d50fc:	f7ff ff26 	bl	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d5100:	4620      	mov	r0, r4
   d5102:	2206      	movs	r2, #6
}
   d5104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d5108:	2113      	movs	r1, #19
   d510a:	f7ff bf1f 	b.w	d4f4c <_ZN15Adafruit_AS734113writeRegisterEhh>

000d510e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>:
void Adafruit_AS7341::setSMUXLowChannels(bool f1_f4) {
   d510e:	b538      	push	{r3, r4, r5, lr}
   d5110:	4604      	mov	r4, r0
   d5112:	460d      	mov	r5, r1
  enableSpectralMeasurement(false);
   d5114:	2100      	movs	r1, #0
   d5116:	f7ff fdd6 	bl	d4cc6 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
   d511a:	2102      	movs	r1, #2
   d511c:	4620      	mov	r0, r4
   d511e:	f7ff fe16 	bl	d4d4e <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>
    setup_F1F4_Clear_NIR();
   d5122:	4620      	mov	r0, r4
  if (f1_f4) {
   d5124:	b135      	cbz	r5, d5134 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x26>
    setup_F1F4_Clear_NIR();
   d5126:	f7ff ff24 	bl	d4f72 <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>
  enableSMUX();
   d512a:	4620      	mov	r0, r4
}
   d512c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enableSMUX();
   d5130:	f7ff bde1 	b.w	d4cf6 <_ZN15Adafruit_AS734110enableSMUXEv>
    setup_F5F8_Clear_NIR();
   d5134:	f7ff ff84 	bl	d5040 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>
   d5138:	e7f7      	b.n	d512a <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x1c>

000d513a <_ZN15Adafruit_AS734115readAllChannelsEPt>:
bool Adafruit_AS7341::readAllChannels(uint16_t *readings_buffer) {
   d513a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d513e:	4604      	mov	r4, r0
   d5140:	b088      	sub	sp, #32
   d5142:	460e      	mov	r6, r1
  setSMUXLowChannels(true);        // Configure SMUX to read low channels
   d5144:	2101      	movs	r1, #1
   d5146:	f7ff ffe2 	bl	d510e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   d514a:	2101      	movs	r1, #1
   d514c:	4620      	mov	r0, r4
   d514e:	f7ff fdba 	bl	d4cc6 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
      Adafruit_BusIO_Register(i2c_dev, AS7341_CH0_DATA_L, 2);
   d5152:	f04f 0800 	mov.w	r8, #0
   d5156:	4620      	mov	r0, r4
   d5158:	2701      	movs	r7, #1
   d515a:	f7ff fe2a 	bl	d4db2 <_ZN15Adafruit_AS734112delayForDataEi.part.0>
   d515e:	2302      	movs	r3, #2
   d5160:	68a1      	ldr	r1, [r4, #8]
   d5162:	2295      	movs	r2, #149	; 0x95
   d5164:	e9cd 8700 	strd	r8, r7, [sp]
   d5168:	a802      	add	r0, sp, #8
   d516a:	f000 f918 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   d516e:	220c      	movs	r2, #12
   d5170:	4631      	mov	r1, r6
   d5172:	a802      	add	r0, sp, #8
   d5174:	f000 f988 	bl	d5488 <_ZN23Adafruit_BusIO_Register4readEPhh>
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   d5178:	4641      	mov	r1, r8
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   d517a:	4605      	mov	r5, r0
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   d517c:	4620      	mov	r0, r4
   d517e:	f7ff ffc6 	bl	d510e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   d5182:	4639      	mov	r1, r7
   d5184:	4620      	mov	r0, r4
   d5186:	f7ff fd9e 	bl	d4cc6 <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  if (waitTime == 0) // Wait forever
   d518a:	4620      	mov	r0, r4
   d518c:	f7ff fe11 	bl	d4db2 <_ZN15Adafruit_AS734112delayForDataEi.part.0>
  return low_success &&
   d5190:	b12d      	cbz	r5, d519e <_ZN15Adafruit_AS734115readAllChannelsEPt+0x64>
         channel_data_reg.read((uint8_t *)&readings_buffer[6], 12);
   d5192:	220c      	movs	r2, #12
   d5194:	18b1      	adds	r1, r6, r2
   d5196:	a802      	add	r0, sp, #8
   d5198:	f000 f976 	bl	d5488 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d519c:	4605      	mov	r5, r0
}
   d519e:	4628      	mov	r0, r5
   d51a0:	b008      	add	sp, #32
   d51a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d51a6 <_ZN15Adafruit_AW9523C1Ev>:
#include "Adafruit_AW9523.h"

/*!
 *    @brief  Instantiates a new AW9523 class
 */
Adafruit_AW9523::Adafruit_AW9523(void) {}
   d51a6:	2200      	movs	r2, #0
   d51a8:	6002      	str	r2, [r0, #0]
   d51aa:	4770      	bx	lr

000d51ac <_ZN15Adafruit_AW95235resetEv>:

/*!
 *    @brief  Perform a soft reset over I2C
 *    @return True I2C reset command was acknowledged
 */
bool Adafruit_AW9523::reset(void) {
   d51ac:	b510      	push	{r4, lr}
  Adafruit_I2CRegister resetreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   d51ae:	2301      	movs	r3, #1
bool Adafruit_AW9523::reset(void) {
   d51b0:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   d51b2:	2400      	movs	r4, #0
   d51b4:	e9cd 4300 	strd	r4, r3, [sp]
   d51b8:	227f      	movs	r2, #127	; 0x7f
   d51ba:	6801      	ldr	r1, [r0, #0]
   d51bc:	a802      	add	r0, sp, #8
   d51be:	f000 f8ee 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return resetreg.write(0);
   d51c2:	4622      	mov	r2, r4
   d51c4:	4621      	mov	r1, r4
   d51c6:	a802      	add	r0, sp, #8
   d51c8:	f000 f940 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d51cc:	b008      	add	sp, #32
   d51ce:	bd10      	pop	{r4, pc}

000d51d0 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>:
/*!
 *    @brief  Sets interrupt watch for all 16 GPIO, 1 == enabled
 *    @param  pins 16-bits of pins we may want INT enabled
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d51d0:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister int0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d51d2:	2301      	movs	r3, #1
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d51d4:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d51d6:	2500      	movs	r5, #0
   d51d8:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d51dc:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d51de:	2302      	movs	r3, #2
   d51e0:	6801      	ldr	r1, [r0, #0]
   d51e2:	2206      	movs	r2, #6
   d51e4:	a802      	add	r0, sp, #8
   d51e6:	f000 f8da 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!int0reg.write(~pins)) {
   d51ea:	462a      	mov	r2, r5
   d51ec:	43e1      	mvns	r1, r4
   d51ee:	a802      	add	r0, sp, #8
   d51f0:	f000 f92c 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }
  return true;
}
   d51f4:	b009      	add	sp, #36	; 0x24
   d51f6:	bd30      	pop	{r4, r5, pc}

000d51f8 <_ZN15Adafruit_AW952318configureDirectionEt>:
/*!
 *    @brief  Sets direction for all 16 GPIO, 1 == output, 0 == input
 *    @param  pins 16-bits of pins we want to set direction
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d51f8:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d51fa:	2301      	movs	r3, #1
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d51fc:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d51fe:	2500      	movs	r5, #0
   d5200:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d5204:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5206:	2302      	movs	r3, #2
   d5208:	6801      	ldr	r1, [r0, #0]
   d520a:	2204      	movs	r2, #4
   d520c:	a802      	add	r0, sp, #8
   d520e:	f000 f8c6 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!conf0reg.write(~pins)) {
   d5212:	462a      	mov	r2, r5
   d5214:	43e1      	mvns	r1, r4
   d5216:	a802      	add	r0, sp, #8
   d5218:	f000 f918 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }

  return true;
}
   d521c:	b009      	add	sp, #36	; 0x24
   d521e:	bd30      	pop	{r4, r5, pc}

000d5220 <_ZN15Adafruit_AW952311analogWriteEhh>:
/*!
 *    @brief  Sets constant-current setting for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  val Ratio to set, from 0 (off) to 255 (max current)
 */
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   d5220:	b530      	push	{r4, r5, lr}
  uint8_t reg;

  // See Table 13. 256 step dimming control register
  if ((pin >= 0) && (pin <= 7)) {
   d5222:	2907      	cmp	r1, #7
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   d5224:	4614      	mov	r4, r2
   d5226:	b089      	sub	sp, #36	; 0x24
   d5228:	f04f 0200 	mov.w	r2, #0
  if ((pin >= 0) && (pin <= 7)) {
   d522c:	d810      	bhi.n	d5250 <_ZN15Adafruit_AW952311analogWriteEhh+0x30>
    reg = 0x24 + pin;
   d522e:	3124      	adds	r1, #36	; 0x24
  }
  if ((pin >= 8) && (pin <= 11)) {
    reg = 0x20 + pin - 8;
  }
  if ((pin >= 12) && (pin <= 15)) {
    reg = 0x2C + pin - 12;
   d5230:	b2ca      	uxtb	r2, r1
  }

  Adafruit_I2CRegister ledCCreg = Adafruit_I2CRegister(i2c_dev, reg);
   d5232:	2301      	movs	r3, #1
   d5234:	2500      	movs	r5, #0
   d5236:	e9cd 5300 	strd	r5, r3, [sp]
   d523a:	6801      	ldr	r1, [r0, #0]
   d523c:	a802      	add	r0, sp, #8
   d523e:	f000 f8ae 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  ledCCreg.write(val);
   d5242:	462a      	mov	r2, r5
   d5244:	4621      	mov	r1, r4
   d5246:	a802      	add	r0, sp, #8
   d5248:	f000 f900 	bl	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d524c:	b009      	add	sp, #36	; 0x24
   d524e:	bd30      	pop	{r4, r5, pc}
  if ((pin >= 8) && (pin <= 11)) {
   d5250:	f1a1 0308 	sub.w	r3, r1, #8
   d5254:	2b03      	cmp	r3, #3
   d5256:	d801      	bhi.n	d525c <_ZN15Adafruit_AW952311analogWriteEhh+0x3c>
    reg = 0x20 + pin - 8;
   d5258:	3118      	adds	r1, #24
   d525a:	e7e9      	b.n	d5230 <_ZN15Adafruit_AW952311analogWriteEhh+0x10>
  if ((pin >= 12) && (pin <= 15)) {
   d525c:	f1a1 030c 	sub.w	r3, r1, #12
   d5260:	2b03      	cmp	r3, #3
   d5262:	d8e6      	bhi.n	d5232 <_ZN15Adafruit_AW952311analogWriteEhh+0x12>
    reg = 0x2C + pin - 12;
   d5264:	3120      	adds	r1, #32
   d5266:	e7e3      	b.n	d5230 <_ZN15Adafruit_AW952311analogWriteEhh+0x10>

000d5268 <_ZN15Adafruit_AW95237pinModeEhh>:
 *    @brief  Sets pin mode / direction for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  mode Can be INPUT, OUTPUT for GPIO digital, or AW9523_LED_MODE for
 * constant current LED drive
 */
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d5268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // GPIO Direction
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d526c:	2401      	movs	r4, #1
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d526e:	b092      	sub	sp, #72	; 0x48
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5270:	2600      	movs	r6, #0
   d5272:	e9cd 6400 	strd	r6, r4, [sp]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d5276:	460f      	mov	r7, r1
   d5278:	4680      	mov	r8, r0
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d527a:	6801      	ldr	r1, [r0, #0]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d527c:	4615      	mov	r5, r2
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d527e:	2302      	movs	r3, #2
   d5280:	2204      	movs	r2, #4
   d5282:	a806      	add	r0, sp, #24
   d5284:	f000 f88b 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits confbit =
      Adafruit_I2CRegisterBits(&conf0reg, 1, pin); // # bits, bit_shift
   d5288:	463b      	mov	r3, r7
   d528a:	4622      	mov	r2, r4
   d528c:	a906      	add	r1, sp, #24
   d528e:	a802      	add	r0, sp, #8
   d5290:	f000 f956 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  // GPIO mode or LED mode?
  Adafruit_I2CRegister ledmodereg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_LEDMODE, 2, LSBFIRST);
   d5294:	f8d8 1000 	ldr.w	r1, [r8]
   d5298:	2302      	movs	r3, #2
   d529a:	2212      	movs	r2, #18
   d529c:	e9cd 6400 	strd	r6, r4, [sp]
   d52a0:	a80c      	add	r0, sp, #48	; 0x30
   d52a2:	f000 f87c 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits modebit =
      Adafruit_I2CRegisterBits(&ledmodereg, 1, pin); // # bits, bit_shift
   d52a6:	463b      	mov	r3, r7
   d52a8:	4622      	mov	r2, r4
   d52aa:	a90c      	add	r1, sp, #48	; 0x30
   d52ac:	a804      	add	r0, sp, #16
   d52ae:	f000 f947 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (mode == OUTPUT) {
   d52b2:	42a5      	cmp	r5, r4
   d52b4:	d10a      	bne.n	d52cc <_ZN15Adafruit_AW95237pinModeEhh+0x64>
    confbit.write(0);
   d52b6:	4631      	mov	r1, r6
   d52b8:	a802      	add	r0, sp, #8
   d52ba:	f000 f953 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   d52be:	4629      	mov	r1, r5
    modebit.write(1);
  }

  if (mode == AW9523_LED_MODE) {
    confbit.write(0);
    modebit.write(0);
   d52c0:	a804      	add	r0, sp, #16
   d52c2:	f000 f94f 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  }
}
   d52c6:	b012      	add	sp, #72	; 0x48
   d52c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (mode == INPUT) {
   d52cc:	b13d      	cbz	r5, d52de <_ZN15Adafruit_AW95237pinModeEhh+0x76>
  if (mode == AW9523_LED_MODE) {
   d52ce:	2d03      	cmp	r5, #3
   d52d0:	d1f9      	bne.n	d52c6 <_ZN15Adafruit_AW95237pinModeEhh+0x5e>
    confbit.write(0);
   d52d2:	4631      	mov	r1, r6
   d52d4:	a802      	add	r0, sp, #8
   d52d6:	f000 f945 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(0);
   d52da:	4631      	mov	r1, r6
   d52dc:	e7f0      	b.n	d52c0 <_ZN15Adafruit_AW95237pinModeEhh+0x58>
    confbit.write(1);
   d52de:	4621      	mov	r1, r4
   d52e0:	a802      	add	r0, sp, #8
   d52e2:	f000 f93f 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   d52e6:	4621      	mov	r1, r4
   d52e8:	e7ea      	b.n	d52c0 <_ZN15Adafruit_AW95237pinModeEhh+0x58>

000d52ea <_ZN15Adafruit_AW952314openDrainPort0Eb>:
/*!
 *    @brief  Turns on/off open drain output for ALL port 0 pins (GPIO 0-7)
 *    @param  od True to enable open drain, False for push-pull
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d52ea:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister gcrreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d52ec:	2300      	movs	r3, #0
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d52ee:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d52f0:	2501      	movs	r5, #1
   d52f2:	e9cd 3500 	strd	r3, r5, [sp]
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d52f6:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d52f8:	462b      	mov	r3, r5
   d52fa:	6801      	ldr	r1, [r0, #0]
   d52fc:	2211      	movs	r2, #17
   d52fe:	a804      	add	r0, sp, #16
   d5300:	f000 f84d 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_I2CRegisterBits opendrain =
      Adafruit_I2CRegisterBits(&gcrreg, 1, 4); // # bits, bit_shift
   d5304:	2304      	movs	r3, #4
   d5306:	462a      	mov	r2, r5
   d5308:	a904      	add	r1, sp, #16
   d530a:	a802      	add	r0, sp, #8
   d530c:	f000 f918 	bl	d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return opendrain.write(!od);
   d5310:	ea84 0105 	eor.w	r1, r4, r5
   d5314:	a802      	add	r0, sp, #8
   d5316:	f000 f925 	bl	d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d531a:	b00b      	add	sp, #44	; 0x2c
   d531c:	bd30      	pop	{r4, r5, pc}

000d531e <_ZN15Adafruit_AW95235beginEhP7TwoWire>:
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   d531e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5320:	4604      	mov	r4, r0
  if (i2c_dev) {
   d5322:	6800      	ldr	r0, [r0, #0]
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   d5324:	b089      	sub	sp, #36	; 0x24
   d5326:	460e      	mov	r6, r1
   d5328:	4617      	mov	r7, r2
  if (i2c_dev) {
   d532a:	b110      	cbz	r0, d5332 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x14>
    delete i2c_dev; // remove old interface
   d532c:	2110      	movs	r1, #16
   d532e:	f002 ffab 	bl	d8288 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, wire);
   d5332:	2010      	movs	r0, #16
   d5334:	f7fe feaf 	bl	d4096 <_Znwj>
   d5338:	4605      	mov	r5, r0
   d533a:	b118      	cbz	r0, d5344 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x26>
   d533c:	463a      	mov	r2, r7
   d533e:	4631      	mov	r1, r6
   d5340:	f000 f929 	bl	d5596 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d5344:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   d5346:	2101      	movs	r1, #1
   d5348:	4628      	mov	r0, r5
   d534a:	f000 f940 	bl	d55ce <_ZN18Adafruit_I2CDevice5beginEb>
   d534e:	b918      	cbnz	r0, d5358 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x3a>
    return false;
   d5350:	2500      	movs	r5, #0
}
   d5352:	4628      	mov	r0, r5
   d5354:	b009      	add	sp, #36	; 0x24
   d5356:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
   d5358:	4620      	mov	r0, r4
   d535a:	f7ff ff27 	bl	d51ac <_ZN15Adafruit_AW95235resetEv>
   d535e:	4605      	mov	r5, r0
   d5360:	2800      	cmp	r0, #0
   d5362:	d0f5      	beq.n	d5350 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  Adafruit_I2CRegister idreg = Adafruit_I2CRegister(i2c_dev, AW9523_REG_CHIPID);
   d5364:	2301      	movs	r3, #1
   d5366:	2600      	movs	r6, #0
   d5368:	e9cd 6300 	strd	r6, r3, [sp]
   d536c:	6821      	ldr	r1, [r4, #0]
   d536e:	2210      	movs	r2, #16
   d5370:	a802      	add	r0, sp, #8
   d5372:	f000 f814 	bl	d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (idreg.read() != 0x23) {
   d5376:	a802      	add	r0, sp, #8
   d5378:	f000 f8c6 	bl	d5508 <_ZN23Adafruit_BusIO_Register4readEv>
   d537c:	2823      	cmp	r0, #35	; 0x23
   d537e:	d10c      	bne.n	d539a <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x7c>
  configureDirection(0x0); // all inputs!
   d5380:	4631      	mov	r1, r6
   d5382:	4620      	mov	r0, r4
   d5384:	f7ff ff38 	bl	d51f8 <_ZN15Adafruit_AW952318configureDirectionEt>
  openDrainPort0(false);   // push pull default
   d5388:	4631      	mov	r1, r6
   d538a:	4620      	mov	r0, r4
   d538c:	f7ff ffad 	bl	d52ea <_ZN15Adafruit_AW952314openDrainPort0Eb>
  interruptEnableGPIO(0);  // no interrupt
   d5390:	4631      	mov	r1, r6
   d5392:	4620      	mov	r0, r4
   d5394:	f7ff ff1c 	bl	d51d0 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>
  return true;
   d5398:	e7db      	b.n	d5352 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>
    return false;
   d539a:	4635      	mov	r5, r6
   d539c:	e7d9      	b.n	d5352 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>

000d539e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   d539e:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   d53a0:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   d53a2:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   d53a6:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   d53a8:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   d53ac:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   d53b0:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   d53b2:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   d53b4:	7382      	strb	r2, [r0, #14]
  _width = width;
   d53b6:	7303      	strb	r3, [r0, #12]
}
   d53b8:	bd30      	pop	{r4, r5, pc}

000d53ba <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d53ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53bc:	4603      	mov	r3, r0
   d53be:	b085      	sub	sp, #20

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d53c0:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   d53c2:	f8ad 000c 	strh.w	r0, [sp, #12]
   d53c6:	ea4f 2e10 	mov.w	lr, r0, lsr #8

  if (_i2cdevice) {
   d53ca:	6818      	ldr	r0, [r3, #0]
                           (uint8_t)(_address >> 8)};
   d53cc:	7a9c      	ldrb	r4, [r3, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d53ce:	460e      	mov	r6, r1
   d53d0:	4617      	mov	r7, r2
  if (_i2cdevice) {
   d53d2:	b140      	cbz	r0, d53e6 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   d53d4:	7b5b      	ldrb	r3, [r3, #13]
   d53d6:	9301      	str	r3, [sp, #4]
   d53d8:	ab03      	add	r3, sp, #12
   d53da:	9300      	str	r3, [sp, #0]
   d53dc:	2301      	movs	r3, #1
   d53de:	f000 f905 	bl	d55ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   d53e2:	b005      	add	sp, #20
   d53e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   d53e6:	6858      	ldr	r0, [r3, #4]
   d53e8:	2800      	cmp	r0, #0
   d53ea:	d0fa      	beq.n	d53e2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d53ec:	f893 c008 	ldrb.w	ip, [r3, #8]
   d53f0:	7b5d      	ldrb	r5, [r3, #13]
   d53f2:	f1bc 0f03 	cmp.w	ip, #3
   d53f6:	d10b      	bne.n	d5410 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   d53f8:	f02e 0e01 	bic.w	lr, lr, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d53fc:	3501      	adds	r5, #1
      addrbuffer[0] =
   d53fe:	f88d e00c 	strb.w	lr, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d5402:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d5406:	9500      	str	r5, [sp, #0]
   d5408:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d540a:	f000 fa28 	bl	d585e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d540e:	e7e8      	b.n	d53e2 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d5410:	f1bc 0f00 	cmp.w	ip, #0
   d5414:	d108      	bne.n	d5428 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d5416:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   d541a:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d541e:	9500      	str	r5, [sp, #0]
   d5420:	ab03      	add	r3, sp, #12
   d5422:	463a      	mov	r2, r7
   d5424:	4631      	mov	r1, r6
   d5426:	e7f0      	b.n	d540a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d5428:	f1bc 0f02 	cmp.w	ip, #2
   d542c:	d102      	bne.n	d5434 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x7a>
      addrbuffer[0] |= 0x80;
   d542e:	f064 047f 	orn	r4, r4, #127	; 0x7f
   d5432:	e7f2      	b.n	d541a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x60>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d5434:	f1bc 0f01 	cmp.w	ip, #1
      addrbuffer[0] &= ~0x80;
   d5438:	bf01      	itttt	eq
   d543a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   d543e:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d5442:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   d5446:	f88d 300c 	strbeq.w	r3, [sp, #12]
   d544a:	e7e8      	b.n	d541e <_ZN23Adafruit_BusIO_Register5writeEPhh+0x64>

000d544c <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   d544c:	b4f0      	push	{r4, r5, r6, r7}
   d544e:	460b      	mov	r3, r1
  if (numbytes == 0) {
   d5450:	b902      	cbnz	r2, d5454 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   d5452:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   d5454:	2a04      	cmp	r2, #4
   d5456:	d814      	bhi.n	d5482 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   d5458:	f100 050f 	add.w	r5, r0, #15
   d545c:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   d545e:	1884      	adds	r4, r0, r2
   d5460:	4629      	mov	r1, r5
   d5462:	4284      	cmp	r4, r0
   d5464:	d009      	beq.n	d547a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   d5466:	7b87      	ldrb	r7, [r0, #14]
   d5468:	b2de      	uxtb	r6, r3
   d546a:	b927      	cbnz	r7, d5476 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   d546c:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   d546e:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   d5470:	3501      	adds	r5, #1
   d5472:	3c01      	subs	r4, #1
   d5474:	e7f5      	b.n	d5462 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   d5476:	73a6      	strb	r6, [r4, #14]
   d5478:	e7f9      	b.n	d546e <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   d547a:	4620      	mov	r0, r4
}
   d547c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d547e:	f7ff bf9c 	b.w	d53ba <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   d5482:	2000      	movs	r0, #0
   d5484:	bcf0      	pop	{r4, r5, r6, r7}
   d5486:	4770      	bx	lr

000d5488 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d5488:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d548a:	4604      	mov	r4, r0
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d548c:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d548e:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d5490:	8941      	ldrh	r1, [r0, #10]

  if (_i2cdevice) {
   d5492:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   d5494:	f8ad 100c 	strh.w	r1, [sp, #12]
   d5498:	0a0e      	lsrs	r6, r1, #8
  if (_i2cdevice) {
   d549a:	b140      	cbz	r0, d54ae <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d549c:	2100      	movs	r1, #0
   d549e:	e9cd 2100 	strd	r2, r1, [sp]
   d54a2:	a903      	add	r1, sp, #12
   d54a4:	7b62      	ldrb	r2, [r4, #13]
   d54a6:	f000 f90f 	bl	d56c8 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   d54aa:	b004      	add	sp, #16
   d54ac:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   d54ae:	6860      	ldr	r0, [r4, #4]
   d54b0:	2800      	cmp	r0, #0
   d54b2:	d0fa      	beq.n	d54aa <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d54b4:	7a21      	ldrb	r1, [r4, #8]
   d54b6:	7b64      	ldrb	r4, [r4, #13]
   d54b8:	2903      	cmp	r1, #3
   d54ba:	d10d      	bne.n	d54d8 <_ZN23Adafruit_BusIO_Register4readEPhh+0x50>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   d54bc:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d54c0:	21ff      	movs	r1, #255	; 0xff
   d54c2:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   d54c6:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d54ca:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d54ce:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d54d0:	a903      	add	r1, sp, #12
   d54d2:	f000 f9f6 	bl	d58c2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   d54d6:	e7e8      	b.n	d54aa <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d54d8:	b941      	cbnz	r1, d54ec <_ZN23Adafruit_BusIO_Register4readEPhh+0x64>
      addrbuffer[0] |= 0x80;
   d54da:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   d54de:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d54e2:	21ff      	movs	r1, #255	; 0xff
   d54e4:	e9cd 2100 	strd	r2, r1, [sp]
   d54e8:	4622      	mov	r2, r4
   d54ea:	e7f1      	b.n	d54d0 <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d54ec:	2902      	cmp	r1, #2
   d54ee:	d102      	bne.n	d54f6 <_ZN23Adafruit_BusIO_Register4readEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d54f0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   d54f4:	e7f3      	b.n	d54de <_ZN23Adafruit_BusIO_Register4readEPhh+0x56>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d54f6:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   d54f8:	bf02      	ittt	eq
   d54fa:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   d54fe:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   d5502:	f88d 100c 	strbeq.w	r1, [sp, #12]
   d5506:	e7ec      	b.n	d54e2 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>

000d5508 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   d5508:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   d550a:	f100 050f 	add.w	r5, r0, #15
   d550e:	7b02      	ldrb	r2, [r0, #12]
   d5510:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   d5512:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   d5514:	f7ff ffb8 	bl	d5488 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d5518:	b178      	cbz	r0, d553a <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   d551a:	7b22      	ldrb	r2, [r4, #12]
   d551c:	4629      	mov	r1, r5
   d551e:	4422      	add	r2, r4
  uint32_t value = 0;
   d5520:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   d5522:	42a2      	cmp	r2, r4
   d5524:	d00b      	beq.n	d553e <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   d5526:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   d5528:	7ba0      	ldrb	r0, [r4, #14]
   d552a:	b920      	cbnz	r0, d5536 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   d552c:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   d552e:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   d5530:	3a01      	subs	r2, #1
   d5532:	3101      	adds	r1, #1
   d5534:	e7f5      	b.n	d5522 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   d5536:	7808      	ldrb	r0, [r1, #0]
   d5538:	e7f9      	b.n	d552e <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   d553a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d553e:	bd38      	pop	{r3, r4, r5, pc}

000d5540 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   d5540:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   d5542:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d5544:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d5546:	7143      	strb	r3, [r0, #5]
}
   d5548:	bd10      	pop	{r4, pc}

000d554a <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   d554a:	b510      	push	{r4, lr}
   d554c:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d554e:	6800      	ldr	r0, [r0, #0]
   d5550:	f7ff ffda 	bl	d5508 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   d5554:	7922      	ldrb	r2, [r4, #4]
   d5556:	2301      	movs	r3, #1
   d5558:	4093      	lsls	r3, r2
  val >>= _shift;
   d555a:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   d555c:	3b01      	subs	r3, #1
  val >>= _shift;
   d555e:	40d0      	lsrs	r0, r2
}
   d5560:	4018      	ands	r0, r3
   d5562:	bd10      	pop	{r4, pc}

000d5564 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d5564:	b570      	push	{r4, r5, r6, lr}
   d5566:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d5568:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d556a:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d556c:	f7ff ffcc 	bl	d5508 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   d5570:	7923      	ldrb	r3, [r4, #4]
   d5572:	2201      	movs	r2, #1
   d5574:	409a      	lsls	r2, r3
   d5576:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d5578:	7962      	ldrb	r2, [r4, #5]
   d557a:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;          // remove the current data at that spot
   d557e:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d5582:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   d5586:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d5588:	4091      	lsls	r1, r2
  return _register->write(val, _register->width());
   d558a:	4329      	orrs	r1, r5
   d558c:	7b02      	ldrb	r2, [r0, #12]
}
   d558e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   d5592:	f7ff bf5b 	b.w	d544c <_ZN23Adafruit_BusIO_Register5writeEmh>

000d5596 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d5596:	6042      	str	r2, [r0, #4]
  _begun = false;
   d5598:	2200      	movs	r2, #0
   d559a:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d559c:	2220      	movs	r2, #32
  _addr = addr;
   d559e:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d55a0:	60c2      	str	r2, [r0, #12]
#endif
}
   d55a2:	4770      	bx	lr

000d55a4 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d55a4:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d55a6:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d55a8:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d55aa:	b153      	cbz	r3, d55c2 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d55ac:	7821      	ldrb	r1, [r4, #0]
   d55ae:	6860      	ldr	r0, [r4, #4]
   d55b0:	f002 f86e 	bl	d7690 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d55b4:	6860      	ldr	r0, [r4, #4]
   d55b6:	f002 f876 	bl	d76a6 <_ZN7TwoWire15endTransmissionEv>
   d55ba:	fab0 f080 	clz	r0, r0
   d55be:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d55c0:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d55c2:	2101      	movs	r1, #1
   d55c4:	f000 f803 	bl	d55ce <_ZN18Adafruit_I2CDevice5beginEb>
   d55c8:	2800      	cmp	r0, #0
   d55ca:	d1ef      	bne.n	d55ac <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d55cc:	e7f8      	b.n	d55c0 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d55ce <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d55ce:	b538      	push	{r3, r4, r5, lr}
   d55d0:	4604      	mov	r4, r0
  _wire->begin();
   d55d2:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d55d4:	460d      	mov	r5, r1
  _wire->begin();
   d55d6:	f002 f829 	bl	d762c <_ZN7TwoWire5beginEv>
  _begun = true;
   d55da:	2001      	movs	r0, #1
   d55dc:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d55de:	b125      	cbz	r5, d55ea <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d55e0:	4620      	mov	r0, r4
}
   d55e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d55e6:	f7ff bfdd 	b.w	d55a4 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d55ea:	bd38      	pop	{r3, r4, r5, pc}

000d55ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d55ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d55f0:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d55f4:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d55f6:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d55f8:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d55fa:	4432      	add	r2, r6
   d55fc:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d55fe:	4604      	mov	r4, r0
   d5600:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d5602:	d902      	bls.n	d560a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d5604:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   d5606:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d560a:	7801      	ldrb	r1, [r0, #0]
   d560c:	6840      	ldr	r0, [r0, #4]
   d560e:	f002 f83f 	bl	d7690 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5612:	b97e      	cbnz	r6, d5634 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d5614:	6860      	ldr	r0, [r4, #4]
   d5616:	6803      	ldr	r3, [r0, #0]
   d5618:	462a      	mov	r2, r5
   d561a:	68db      	ldr	r3, [r3, #12]
   d561c:	4641      	mov	r1, r8
   d561e:	4798      	blx	r3
   d5620:	4285      	cmp	r5, r0
   d5622:	d1ef      	bne.n	d5604 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d5624:	6860      	ldr	r0, [r4, #4]
   d5626:	4639      	mov	r1, r7
   d5628:	f002 f839 	bl	d769e <_ZN7TwoWire15endTransmissionEh>
   d562c:	fab0 f080 	clz	r0, r0
   d5630:	0940      	lsrs	r0, r0, #5
   d5632:	e7e8      	b.n	d5606 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5634:	f1b9 0f00 	cmp.w	r9, #0
   d5638:	d0ec      	beq.n	d5614 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d563a:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d563c:	6803      	ldr	r3, [r0, #0]
   d563e:	4632      	mov	r2, r6
   d5640:	68db      	ldr	r3, [r3, #12]
   d5642:	4649      	mov	r1, r9
   d5644:	4798      	blx	r3
   d5646:	42b0      	cmp	r0, r6
   d5648:	d1dc      	bne.n	d5604 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d564a:	e7e3      	b.n	d5614 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d564c <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5650:	4615      	mov	r5, r2
   d5652:	4604      	mov	r4, r0
   d5654:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d5656:	b2d2      	uxtb	r2, r2
   d5658:	7801      	ldrb	r1, [r0, #0]
   d565a:	6840      	ldr	r0, [r0, #4]
   d565c:	f002 f803 	bl	d7666 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d5660:	4285      	cmp	r5, r0
   d5662:	d10d      	bne.n	d5680 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d5664:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d5666:	fa1f f887 	uxth.w	r8, r7
   d566a:	45a8      	cmp	r8, r5
   d566c:	f107 0701 	add.w	r7, r7, #1
   d5670:	d209      	bcs.n	d5686 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d5672:	6860      	ldr	r0, [r4, #4]
   d5674:	6803      	ldr	r3, [r0, #0]
   d5676:	695b      	ldr	r3, [r3, #20]
   d5678:	4798      	blx	r3
   d567a:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d567e:	e7f2      	b.n	d5666 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d5680:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d5682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5686:	2001      	movs	r0, #1
   d5688:	e7fb      	b.n	d5682 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d568a <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d568a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d568e:	4607      	mov	r7, r0
   d5690:	4688      	mov	r8, r1
   d5692:	4616      	mov	r6, r2
   d5694:	4699      	mov	r9, r3
  size_t pos = 0;
   d5696:	2500      	movs	r5, #0
  while (pos < len) {
   d5698:	42b5      	cmp	r5, r6
   d569a:	d212      	bcs.n	d56c2 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d569c:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d569e:	1b74      	subs	r4, r6, r5
   d56a0:	4294      	cmp	r4, r2
   d56a2:	bf28      	it	cs
   d56a4:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d56a6:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d56a8:	42ab      	cmp	r3, r5
   d56aa:	bf94      	ite	ls
   d56ac:	464b      	movls	r3, r9
   d56ae:	2300      	movhi	r3, #0
   d56b0:	4622      	mov	r2, r4
   d56b2:	eb08 0105 	add.w	r1, r8, r5
   d56b6:	4638      	mov	r0, r7
   d56b8:	f7ff ffc8 	bl	d564c <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d56bc:	b110      	cbz	r0, d56c4 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d56be:	4425      	add	r5, r4
  while (pos < len) {
   d56c0:	e7ea      	b.n	d5698 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d56c2:	2001      	movs	r0, #1
}
   d56c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d56c8 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d56c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d56ca:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d56cc:	2300      	movs	r3, #0
   d56ce:	e9cd 3300 	strd	r3, r3, [sp]
   d56d2:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d56d6:	9e06      	ldr	r6, [sp, #24]
   d56d8:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d56da:	f7ff ff87 	bl	d55ec <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d56de:	b140      	cbz	r0, d56f2 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d56e0:	2301      	movs	r3, #1
   d56e2:	4632      	mov	r2, r6
   d56e4:	4629      	mov	r1, r5
   d56e6:	4620      	mov	r0, r4
}
   d56e8:	b002      	add	sp, #8
   d56ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d56ee:	f7ff bfcc 	b.w	d568a <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d56f2:	b002      	add	sp, #8
   d56f4:	bd70      	pop	{r4, r5, r6, pc}
	...

000d56f8 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d56f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d56fc:	4604      	mov	r4, r0
  if (_spi) {
   d56fe:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d5700:	b085      	sub	sp, #20
   d5702:	460d      	mov	r5, r1
  if (_spi) {
   d5704:	b140      	cbz	r0, d5718 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d5706:	2300      	movs	r3, #0
   d5708:	9300      	str	r3, [sp, #0]
   d570a:	4613      	mov	r3, r2
   d570c:	460a      	mov	r2, r1
   d570e:	f002 fb07 	bl	d7d20 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d5712:	b005      	add	sp, #20
   d5714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d5718:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d571a:	68a0      	ldr	r0, [r4, #8]
   d571c:	4f48      	ldr	r7, [pc, #288]	; (d5840 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d571e:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d5722:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d5724:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d5726:	bf0c      	ite	eq
   d5728:	f04f 0b01 	moveq.w	fp, #1
   d572c:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d5730:	ea1b 0f03 	tst.w	fp, r3
   d5734:	eb01 0302 	add.w	r3, r1, r2
   d5738:	bf0c      	ite	eq
   d573a:	f04f 0901 	moveq.w	r9, #1
   d573e:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d5742:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d5744:	9303      	str	r3, [sp, #12]
   d5746:	9b03      	ldr	r3, [sp, #12]
   d5748:	42ab      	cmp	r3, r5
   d574a:	d0e2      	beq.n	d5712 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d574c:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d5750:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d5752:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d5756:	b117      	cbz	r7, d575e <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d5758:	4638      	mov	r0, r7
   d575a:	f001 fcb3 	bl	d70c4 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d575e:	7b63      	ldrb	r3, [r4, #13]
   d5760:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d5764:	d141      	bne.n	d57ea <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d5766:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d576a:	1c5a      	adds	r2, r3, #1
   d576c:	d00f      	beq.n	d578e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d576e:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d5772:	bf14      	ite	ne
   d5774:	2301      	movne	r3, #1
   d5776:	2300      	moveq	r3, #0
   d5778:	454b      	cmp	r3, r9
   d577a:	d008      	beq.n	d578e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d577c:	6963      	ldr	r3, [r4, #20]
   d577e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5780:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d5782:	2900      	cmp	r1, #0
   d5784:	d02c      	beq.n	d57e0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d5786:	4302      	orrs	r2, r0
   d5788:	601a      	str	r2, [r3, #0]
   d578a:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d578e:	69a1      	ldr	r1, [r4, #24]
   d5790:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5792:	680a      	ldr	r2, [r1, #0]
   d5794:	4313      	orrs	r3, r2
   d5796:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d5798:	b117      	cbz	r7, d57a0 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d579a:	4638      	mov	r0, r7
   d579c:	f001 fc92 	bl	d70c4 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d57a0:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d57a4:	3301      	adds	r3, #1
   d57a6:	d006      	beq.n	d57b6 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d57a8:	69e3      	ldr	r3, [r4, #28]
   d57aa:	681a      	ldr	r2, [r3, #0]
   d57ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d57ae:	421a      	tst	r2, r3
            reply |= b;
   d57b0:	bf18      	it	ne
   d57b2:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d57b6:	69a1      	ldr	r1, [r4, #24]
   d57b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d57ba:	680a      	ldr	r2, [r1, #0]
   d57bc:	ea22 0303 	bic.w	r3, r2, r3
   d57c0:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d57c2:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d57c6:	3301      	adds	r3, #1
        buffer[i] = reply;
   d57c8:	bf18      	it	ne
   d57ca:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d57ce:	7b23      	ldrb	r3, [r4, #12]
   d57d0:	2b00      	cmp	r3, #0
   d57d2:	d132      	bne.n	d583a <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d57d4:	0076      	lsls	r6, r6, #1
   d57d6:	b2f6      	uxtb	r6, r6
   d57d8:	2e00      	cmp	r6, #0
   d57da:	d1bc      	bne.n	d5756 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d57dc:	3501      	adds	r5, #1
   d57de:	e7b2      	b.n	d5746 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d57e0:	ea22 0200 	bic.w	r2, r2, r0
   d57e4:	601a      	str	r2, [r3, #0]
   d57e6:	4689      	mov	r9, r1
   d57e8:	e7d1      	b.n	d578e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d57ea:	69a1      	ldr	r1, [r4, #24]
   d57ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d57ee:	680a      	ldr	r2, [r1, #0]
   d57f0:	4313      	orrs	r3, r2
   d57f2:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d57f4:	b117      	cbz	r7, d57fc <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d57f6:	4638      	mov	r0, r7
   d57f8:	f001 fc64 	bl	d70c4 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d57fc:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5800:	3301      	adds	r3, #1
   d5802:	d008      	beq.n	d5816 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d5804:	6963      	ldr	r3, [r4, #20]
   d5806:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5808:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d580a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d580e:	bf14      	ite	ne
   d5810:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d5812:	438a      	biceq	r2, r1
   d5814:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d5816:	69a1      	ldr	r1, [r4, #24]
   d5818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d581a:	680a      	ldr	r2, [r1, #0]
   d581c:	ea22 0303 	bic.w	r3, r2, r3
   d5820:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d5822:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d5826:	3301      	adds	r3, #1
   d5828:	d0cb      	beq.n	d57c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d582a:	69e3      	ldr	r3, [r4, #28]
   d582c:	681a      	ldr	r2, [r3, #0]
   d582e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5830:	421a      	tst	r2, r3
            reply |= b;
   d5832:	bf18      	it	ne
   d5834:	ea46 0808 	orrne.w	r8, r6, r8
   d5838:	e7c3      	b.n	d57c2 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d583a:	0876      	lsrs	r6, r6, #1
   d583c:	e7cc      	b.n	d57d8 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d583e:	bf00      	nop
   d5840:	0007a120 	.word	0x0007a120

000d5844 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d5844:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d5846:	2201      	movs	r2, #1
  uint8_t data = send;
   d5848:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d584c:	f10d 0107 	add.w	r1, sp, #7
   d5850:	f7ff ff52 	bl	d56f8 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d5854:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d5858:	b003      	add	sp, #12
   d585a:	f85d fb04 	ldr.w	pc, [sp], #4

000d585e <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d585e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5862:	4604      	mov	r4, r0
  if (_spi) {
   d5864:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d5866:	460e      	mov	r6, r1
   d5868:	4617      	mov	r7, r2
   d586a:	461d      	mov	r5, r3
  if (_spi) {
   d586c:	b110      	cbz	r0, d5874 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d586e:	6861      	ldr	r1, [r4, #4]
   d5870:	f002 f9e2 	bl	d7c38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d5874:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5878:	2100      	movs	r1, #0
   d587a:	b280      	uxth	r0, r0
   d587c:	f002 fcad 	bl	d81da <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d5880:	9b06      	ldr	r3, [sp, #24]
   d5882:	eb05 0803 	add.w	r8, r5, r3
   d5886:	4545      	cmp	r5, r8
   d5888:	d108      	bne.n	d589c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d588a:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d588c:	42b7      	cmp	r7, r6
   d588e:	d00b      	beq.n	d58a8 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d5890:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5894:	4620      	mov	r0, r4
   d5896:	f7ff ffd5 	bl	d5844 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d589a:	e7f7      	b.n	d588c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d589c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d58a0:	4620      	mov	r0, r4
   d58a2:	f7ff ffcf 	bl	d5844 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d58a6:	e7ee      	b.n	d5886 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d58a8:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d58ac:	2101      	movs	r1, #1
   d58ae:	b280      	uxth	r0, r0
   d58b0:	f002 fc93 	bl	d81da <digitalWrite>

  if (_spi) {
   d58b4:	6820      	ldr	r0, [r4, #0]
   d58b6:	b108      	cbz	r0, d58bc <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d58b8:	f002 f9a5 	bl	d7c06 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d58bc:	2001      	movs	r0, #1
   d58be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d58c2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d58c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d58c6:	4604      	mov	r4, r0
  if (_spi) {
   d58c8:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d58ca:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d58ce:	460e      	mov	r6, r1
   d58d0:	4617      	mov	r7, r2
   d58d2:	461d      	mov	r5, r3
  if (_spi) {
   d58d4:	b110      	cbz	r0, d58dc <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d58d6:	6861      	ldr	r1, [r4, #4]
   d58d8:	f002 f9ae 	bl	d7c38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d58dc:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d58e0:	2100      	movs	r1, #0
   d58e2:	b280      	uxth	r0, r0
   d58e4:	f002 fc79 	bl	d81da <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d58e8:	4437      	add	r7, r6
   d58ea:	42be      	cmp	r6, r7
   d58ec:	d10a      	bne.n	d5904 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d58ee:	9b06      	ldr	r3, [sp, #24]
   d58f0:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d58f2:	42ae      	cmp	r6, r5
   d58f4:	d00c      	beq.n	d5910 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d58f6:	4641      	mov	r1, r8
   d58f8:	4620      	mov	r0, r4
   d58fa:	f7ff ffa3 	bl	d5844 <_ZN18Adafruit_SPIDevice8transferEh>
   d58fe:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d5902:	e7f6      	b.n	d58f2 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d5904:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5908:	4620      	mov	r0, r4
   d590a:	f7ff ff9b 	bl	d5844 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d590e:	e7ec      	b.n	d58ea <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d5910:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5914:	2101      	movs	r1, #1
   d5916:	b280      	uxth	r0, r0
   d5918:	f002 fc5f 	bl	d81da <digitalWrite>

  if (_spi) {
   d591c:	6820      	ldr	r0, [r4, #0]
   d591e:	b108      	cbz	r0, d5924 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d5920:	f002 f971 	bl	d7c06 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d5924:	2001      	movs	r0, #1
   d5926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d592c <_ZL9date2daysthh>:
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   d592c:	b530      	push	{r4, r5, lr}
   d592e:	4c0f      	ldr	r4, [pc, #60]	; (d596c <_ZL9date2daysthh+0x40>)
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
   d5930:	2300      	movs	r3, #0
    for (uint8_t i = 1; i < m; ++i)
   d5932:	3301      	adds	r3, #1
   d5934:	b2dd      	uxtb	r5, r3
   d5936:	42a9      	cmp	r1, r5
   d5938:	d904      	bls.n	d5944 <_ZL9date2daysthh+0x18>
        days += pgm_read_byte(daysInMonth + i - 1);
   d593a:	f814 5b01 	ldrb.w	r5, [r4], #1
   d593e:	442a      	add	r2, r5
   d5940:	b292      	uxth	r2, r2
    for (uint8_t i = 1; i < m; ++i)
   d5942:	e7f6      	b.n	d5932 <_ZL9date2daysthh+0x6>
    if (m > 2 && y % 4 == 0)
   d5944:	2902      	cmp	r1, #2
   d5946:	d903      	bls.n	d5950 <_ZL9date2daysthh+0x24>
   d5948:	0783      	lsls	r3, r0, #30
        ++days;
   d594a:	bf04      	itt	eq
   d594c:	3201      	addeq	r2, #1
   d594e:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   d5950:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   d5954:	1cc3      	adds	r3, r0, #3
   d5956:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   d595a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d595e:	3801      	subs	r0, #1
   d5960:	eb00 0093 	add.w	r0, r0, r3, lsr #2
   d5964:	4410      	add	r0, r2
}
   d5966:	b280      	uxth	r0, r0
   d5968:	bd30      	pop	{r4, r5, pc}
   d596a:	bf00      	nop
   d596c:	000d919c 	.word	0x000d919c

000d5970 <_ZNK8DateTime12dayOfTheWeekEv>:
    hh = conv2d(buff);
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
   d5970:	b508      	push	{r3, lr}
    uint16_t day = date2days(yOff, m, d);
   d5972:	7882      	ldrb	r2, [r0, #2]
   d5974:	7841      	ldrb	r1, [r0, #1]
   d5976:	7800      	ldrb	r0, [r0, #0]
   d5978:	f7ff ffd8 	bl	d592c <_ZL9date2daysthh>
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
   d597c:	2307      	movs	r3, #7
   d597e:	3006      	adds	r0, #6
   d5980:	fbb0 f3f3 	udiv	r3, r0, r3
   d5984:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5988:	1ac0      	subs	r0, r0, r3
}
   d598a:	b2c0      	uxtb	r0, r0
   d598c:	bd08      	pop	{r3, pc}

000d598e <_ZN10RTC_DS13075beginEv>:
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
   d598e:	b508      	push	{r3, lr}
  Wire.begin();
   d5990:	f002 fc56 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5994:	f001 fe4a 	bl	d762c <_ZN7TwoWire5beginEv>
  return true;
}
   d5998:	2001      	movs	r0, #1
   d599a:	bd08      	pop	{r3, pc}

000d599c <_ZN11RTC_PCF85235beginEv>:
   d599c:	f7ff bff7 	b.w	d598e <_ZN10RTC_DS13075beginEv>

000d59a0 <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   d59a0:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   d59a2:	f002 fc4d 	bl	d8240 <_Z19__fetch_global_Wirev>
   d59a6:	2168      	movs	r1, #104	; 0x68
   d59a8:	f001 fe76 	bl	d7698 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   d59ac:	f002 fc48 	bl	d8240 <_Z19__fetch_global_Wirev>
   d59b0:	6803      	ldr	r3, [r0, #0]
   d59b2:	2102      	movs	r1, #2
   d59b4:	689b      	ldr	r3, [r3, #8]
   d59b6:	4798      	blx	r3
  Wire.endTransmission();
   d59b8:	f002 fc42 	bl	d8240 <_Z19__fetch_global_Wirev>
   d59bc:	f001 fe73 	bl	d76a6 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   d59c0:	f002 fc3e 	bl	d8240 <_Z19__fetch_global_Wirev>
   d59c4:	2201      	movs	r2, #1
   d59c6:	2168      	movs	r1, #104	; 0x68
   d59c8:	f001 fe5f 	bl	d768a <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = Wire._I2C_READ();
   d59cc:	f002 fc38 	bl	d8240 <_Z19__fetch_global_Wirev>
   d59d0:	6803      	ldr	r3, [r0, #0]
   d59d2:	695b      	ldr	r3, [r3, #20]
   d59d4:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   d59d6:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   d59da:	38e0      	subs	r0, #224	; 0xe0
   d59dc:	bf18      	it	ne
   d59de:	2001      	movne	r0, #1
   d59e0:	bd08      	pop	{r3, pc}

000d59e2 <_ZN11RTC_PCF85233nowEv>:
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
  Wire._I2C_WRITE((byte)0x00);
  Wire.endTransmission();
}

DateTime RTC_PCF8523::now() {
   d59e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d59e6:	4604      	mov	r4, r0
  Wire.beginTransmission(PCF8523_ADDRESS);
   d59e8:	f002 fc2a 	bl	d8240 <_Z19__fetch_global_Wirev>
   d59ec:	2168      	movs	r1, #104	; 0x68
   d59ee:	f001 fe53 	bl	d7698 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3);	
   d59f2:	f002 fc25 	bl	d8240 <_Z19__fetch_global_Wirev>
   d59f6:	6803      	ldr	r3, [r0, #0]
   d59f8:	2103      	movs	r1, #3
   d59fa:	689b      	ldr	r3, [r3, #8]
   d59fc:	4798      	blx	r3
  Wire.endTransmission();
   d59fe:	f002 fc1f 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a02:	f001 fe50 	bl	d76a6 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 7);
   d5a06:	f002 fc1b 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a0a:	2207      	movs	r2, #7
   d5a0c:	2168      	movs	r1, #104	; 0x68
   d5a0e:	f001 fe3c 	bl	d768a <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   d5a12:	f002 fc15 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a16:	6803      	ldr	r3, [r0, #0]
   d5a18:	695b      	ldr	r3, [r3, #20]
   d5a1a:	4798      	blx	r3
   d5a1c:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5a20:	f3c0 1002 	ubfx	r0, r0, #4, #3
   d5a24:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d5a28:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   d5a2c:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   d5a30:	f002 fc06 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a34:	6803      	ldr	r3, [r0, #0]
   d5a36:	695b      	ldr	r3, [r3, #20]
   d5a38:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5a3a:	f3c0 1503 	ubfx	r5, r0, #4, #4
   d5a3e:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d5a42:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d5a46:	b2c5      	uxtb	r5, r0
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   d5a48:	f002 fbfa 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a4c:	6803      	ldr	r3, [r0, #0]
   d5a4e:	695b      	ldr	r3, [r3, #20]
   d5a50:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5a52:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d5a56:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d5a5a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d5a5e:	b2c6      	uxtb	r6, r0
  uint8_t d = bcd2bin(Wire._I2C_READ());
   d5a60:	f002 fbee 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a64:	6803      	ldr	r3, [r0, #0]
   d5a66:	695b      	ldr	r3, [r3, #20]
   d5a68:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5a6a:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d5a6e:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d5a72:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d5a76:	b2c7      	uxtb	r7, r0
  Wire._I2C_READ();  // skip 'weekdays'
   d5a78:	f002 fbe2 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a7c:	6803      	ldr	r3, [r0, #0]
   d5a7e:	695b      	ldr	r3, [r3, #20]
   d5a80:	4798      	blx	r3
  uint8_t m = bcd2bin(Wire._I2C_READ());
   d5a82:	f002 fbdd 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5a86:	6803      	ldr	r3, [r0, #0]
   d5a88:	695b      	ldr	r3, [r3, #20]
   d5a8a:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5a8c:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d5a90:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d5a94:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d5a98:	fa5f f880 	uxtb.w	r8, r0
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   d5a9c:	f002 fbd0 	bl	d8240 <_Z19__fetch_global_Wirev>
   d5aa0:	6803      	ldr	r3, [r0, #0]
   d5aa2:	695b      	ldr	r3, [r3, #20]
   d5aa4:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5aa6:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d5aaa:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d5aae:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    yOff = year;
   d5ab2:	7020      	strb	r0, [r4, #0]
    m = month;
   d5ab4:	f884 8001 	strb.w	r8, [r4, #1]
    d = day;
   d5ab8:	70a7      	strb	r7, [r4, #2]
    hh = hour;
   d5aba:	70e6      	strb	r6, [r4, #3]
    mm = min;
   d5abc:	7125      	strb	r5, [r4, #4]
    ss = sec;
   d5abe:	f884 9005 	strb.w	r9, [r4, #5]
  
  return DateTime (y, m, d, hh, mm, ss);
}
   d5ac2:	4620      	mov	r0, r4
   d5ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5ac8 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5ac8:	b510      	push	{r4, lr}
   d5aca:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5acc:	3024      	adds	r0, #36	; 0x24
   d5ace:	f000 fe77 	bl	d67c0 <_ZN8FatCache4syncEv>
   d5ad2:	b128      	cbz	r0, d5ae0 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5ad4:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5adc:	f000 be70 	b.w	d67c0 <_ZN8FatCache4syncEv>
  }
   d5ae0:	bd10      	pop	{r4, pc}

000d5ae2 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5ae2:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5ae4:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d5ae6:	f043 0304 	orr.w	r3, r3, #4
   d5aea:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5aec:	f100 0210 	add.w	r2, r0, #16
   d5af0:	6880      	ldr	r0, [r0, #8]
   d5af2:	f000 bf1b 	b.w	d692c <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5af8 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5afc:	7801      	ldrb	r1, [r0, #0]
   d5afe:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d5b02:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d5b04:	d003      	beq.n	d5b0e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5b06:	2600      	movs	r6, #0
}
   d5b08:	4630      	mov	r0, r6
   d5b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d5b0e:	6942      	ldr	r2, [r0, #20]
   d5b10:	4b17      	ldr	r3, [pc, #92]	; (d5b70 <_ZN7FatFile13addDirClusterEv+0x78>)
   d5b12:	429a      	cmp	r2, r3
   d5b14:	d2f7      	bcs.n	d5b06 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d5b16:	f7ff ffe4 	bl	d5ae2 <_ZN7FatFile10addClusterEv>
   d5b1a:	4606      	mov	r6, r0
   d5b1c:	2800      	cmp	r0, #0
   d5b1e:	d0f2      	beq.n	d5b06 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5b20:	6921      	ldr	r1, [r4, #16]
   d5b22:	68a0      	ldr	r0, [r4, #8]
   d5b24:	f000 fe97 	bl	d6856 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5b28:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5b2a:	68a0      	ldr	r0, [r4, #8]
   d5b2c:	2205      	movs	r2, #5
   d5b2e:	4639      	mov	r1, r7
   d5b30:	3024      	adds	r0, #36	; 0x24
   d5b32:	f000 fe6d 	bl	d6810 <_ZN8FatCache4readEmh>
  if (!pc) {
   d5b36:	4680      	mov	r8, r0
   d5b38:	2800      	cmp	r0, #0
   d5b3a:	d0e4      	beq.n	d5b06 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d5b3c:	4629      	mov	r1, r5
   d5b3e:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5b42:	f003 f8cb 	bl	d8cdc <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5b46:	2501      	movs	r5, #1
   d5b48:	68a3      	ldr	r3, [r4, #8]
   d5b4a:	791a      	ldrb	r2, [r3, #4]
   d5b4c:	42aa      	cmp	r2, r5
   d5b4e:	d909      	bls.n	d5b64 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d5b50:	6818      	ldr	r0, [r3, #0]
   d5b52:	4642      	mov	r2, r8
   d5b54:	19e9      	adds	r1, r5, r7
   d5b56:	f001 f9c4 	bl	d6ee2 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5b5a:	2800      	cmp	r0, #0
   d5b5c:	d0d3      	beq.n	d5b06 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5b5e:	3501      	adds	r5, #1
   d5b60:	b2ed      	uxtb	r5, r5
   d5b62:	e7f1      	b.n	d5b48 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5b64:	6963      	ldr	r3, [r4, #20]
   d5b66:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5b6a:	6163      	str	r3, [r4, #20]
  return true;
   d5b6c:	e7cc      	b.n	d5b08 <_ZN7FatFile13addDirClusterEv+0x10>
   d5b6e:	bf00      	nop
   d5b70:	001ffe00 	.word	0x001ffe00

000d5b74 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5b74:	b510      	push	{r4, lr}
   d5b76:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d5b78:	6880      	ldr	r0, [r0, #8]
   d5b7a:	460a      	mov	r2, r1
   d5b7c:	3024      	adds	r0, #36	; 0x24
   d5b7e:	69a1      	ldr	r1, [r4, #24]
   d5b80:	f000 fe46 	bl	d6810 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5b84:	b120      	cbz	r0, d5b90 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5b86:	88a3      	ldrh	r3, [r4, #4]
   d5b88:	f003 030f 	and.w	r3, r3, #15
   d5b8c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5b90:	bd10      	pop	{r4, pc}

000d5b92 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5b92:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5b94:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d5b96:	4605      	mov	r5, r0
   d5b98:	460e      	mov	r6, r1
  if (isOpen()) {
   d5b9a:	b94c      	cbnz	r4, d5bb0 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5b9c:	2224      	movs	r2, #36	; 0x24
   d5b9e:	4621      	mov	r1, r4
   d5ba0:	f003 f89c 	bl	d8cdc <memset>

  m_vol = vol;
   d5ba4:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5ba6:	79f3      	ldrb	r3, [r6, #7]
   d5ba8:	2b10      	cmp	r3, #16
   d5baa:	d003      	beq.n	d5bb4 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5bac:	2b20      	cmp	r3, #32
   d5bae:	d007      	beq.n	d5bc0 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d5bb0:	2000      	movs	r0, #0
   d5bb2:	e004      	b.n	d5bbe <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5bb4:	2320      	movs	r3, #32
  m_flags = F_READ;
   d5bb6:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d5bb8:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d5bba:	70ac      	strb	r4, [r5, #2]
  return true;
   d5bbc:	4620      	mov	r0, r4
}
   d5bbe:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d5bc0:	2340      	movs	r3, #64	; 0x40
   d5bc2:	e7f8      	b.n	d5bb6 <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d5bc4 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5bc8:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d5bca:	4604      	mov	r4, r0
   d5bcc:	4688      	mov	r8, r1
   d5bce:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d5bd0:	2b00      	cmp	r3, #0
   d5bd2:	d05d      	beq.n	d5c90 <_ZN7FatFile4readEPvj+0xcc>
   d5bd4:	7882      	ldrb	r2, [r0, #2]
   d5bd6:	07d1      	lsls	r1, r2, #31
   d5bd8:	d55a      	bpl.n	d5c90 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5bda:	071a      	lsls	r2, r3, #28
   d5bdc:	d52d      	bpl.n	d5c3a <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5bde:	69c3      	ldr	r3, [r0, #28]
   d5be0:	6942      	ldr	r2, [r0, #20]
   d5be2:	1a9b      	subs	r3, r3, r2
   d5be4:	429d      	cmp	r5, r3
   d5be6:	bf28      	it	cs
   d5be8:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5bea:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d5bec:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5bf0:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d5bf4:	2e00      	cmp	r6, #0
   d5bf6:	f000 808f 	beq.w	d5d18 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d5bfa:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d5bfc:	6963      	ldr	r3, [r4, #20]
   d5bfe:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5c00:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d5c02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d5c06:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5c0a:	d51f      	bpl.n	d5c4c <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5c0c:	6a00      	ldr	r0, [r0, #32]
   d5c0e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5c10:	68a0      	ldr	r0, [r4, #8]
   d5c12:	f1ba 0f00 	cmp.w	sl, #0
   d5c16:	d142      	bne.n	d5c9e <_ZN7FatFile4readEPvj+0xda>
   d5c18:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5c1c:	d33f      	bcc.n	d5c9e <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d5c1e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5c20:	4299      	cmp	r1, r3
   d5c22:	d03c      	beq.n	d5c9e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5c24:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5c28:	d252      	bcs.n	d5cd0 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d5c2a:	6800      	ldr	r0, [r0, #0]
   d5c2c:	4642      	mov	r2, r8
   d5c2e:	f001 f8cf 	bl	d6dd0 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5c32:	b368      	cbz	r0, d5c90 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d5c34:	f44f 7700 	mov.w	r7, #512	; 0x200
   d5c38:	e044      	b.n	d5cc4 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d5c3a:	069b      	lsls	r3, r3, #26
   d5c3c:	d5d5      	bpl.n	d5bea <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5c3e:	6883      	ldr	r3, [r0, #8]
   d5c40:	891a      	ldrh	r2, [r3, #8]
   d5c42:	6943      	ldr	r3, [r0, #20]
   d5c44:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d5c48:	b29b      	uxth	r3, r3
   d5c4a:	e7cb      	b.n	d5be4 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5c4c:	f890 9005 	ldrb.w	r9, [r0, #5]
   d5c50:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d5c54:	f1ba 0f00 	cmp.w	sl, #0
   d5c58:	d108      	bne.n	d5c6c <_ZN7FatFile4readEPvj+0xa8>
   d5c5a:	f1b9 0f00 	cmp.w	r9, #0
   d5c5e:	d105      	bne.n	d5c6c <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d5c60:	b95b      	cbnz	r3, d5c7a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5c62:	0651      	lsls	r1, r2, #25
   d5c64:	bf4c      	ite	mi
   d5c66:	6a03      	ldrmi	r3, [r0, #32]
   d5c68:	6a23      	ldrpl	r3, [r4, #32]
   d5c6a:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5c6c:	6921      	ldr	r1, [r4, #16]
   d5c6e:	68a0      	ldr	r0, [r4, #8]
   d5c70:	f000 fdf1 	bl	d6856 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5c74:	eb09 0100 	add.w	r1, r9, r0
   d5c78:	e7ca      	b.n	d5c10 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5c7a:	6921      	ldr	r1, [r4, #16]
   d5c7c:	465a      	mov	r2, fp
   d5c7e:	f000 fdf0 	bl	d6862 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5c82:	2800      	cmp	r0, #0
   d5c84:	db04      	blt.n	d5c90 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d5c86:	d1f1      	bne.n	d5c6c <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d5c88:	7823      	ldrb	r3, [r4, #0]
   d5c8a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5c8e:	d143      	bne.n	d5d18 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5c90:	7863      	ldrb	r3, [r4, #1]
   d5c92:	f043 0302 	orr.w	r3, r3, #2
   d5c96:	7063      	strb	r3, [r4, #1]
  return -1;
   d5c98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5c9c:	e03d      	b.n	d5d1a <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d5c9e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d5ca2:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d5ca4:	f04f 0200 	mov.w	r2, #0
   d5ca8:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d5cac:	bf28      	it	cs
   d5cae:	4637      	movcs	r7, r6
   d5cb0:	f000 fdae 	bl	d6810 <_ZN8FatCache4readEmh>
      if (!pc) {
   d5cb4:	2800      	cmp	r0, #0
   d5cb6:	d0eb      	beq.n	d5c90 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d5cb8:	eb00 010a 	add.w	r1, r0, sl
   d5cbc:	463a      	mov	r2, r7
   d5cbe:	4640      	mov	r0, r8
   d5cc0:	f002 fffe 	bl	d8cc0 <memcpy>
    m_curPosition += n;
   d5cc4:	6963      	ldr	r3, [r4, #20]
   d5cc6:	443b      	add	r3, r7
    dst += n;
   d5cc8:	44b8      	add	r8, r7
    m_curPosition += n;
   d5cca:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5ccc:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d5cce:	e791      	b.n	d5bf4 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d5cd0:	7822      	ldrb	r2, [r4, #0]
   d5cd2:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d5cd4:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5cd8:	d406      	bmi.n	d5ce8 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d5cda:	7902      	ldrb	r2, [r0, #4]
   d5cdc:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d5ce0:	b2d2      	uxtb	r2, r2
   d5ce2:	4592      	cmp	sl, r2
   d5ce4:	bf28      	it	cs
   d5ce6:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5ce8:	4299      	cmp	r1, r3
      n = 512*nb;
   d5cea:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5cee:	d208      	bcs.n	d5d02 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d5cf0:	68a0      	ldr	r0, [r4, #8]
   d5cf2:	4653      	mov	r3, sl
   d5cf4:	6800      	ldr	r0, [r0, #0]
   d5cf6:	4642      	mov	r2, r8
   d5cf8:	f001 f8b2 	bl	d6e60 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5cfc:	2800      	cmp	r0, #0
   d5cfe:	d1e1      	bne.n	d5cc4 <_ZN7FatFile4readEPvj+0x100>
   d5d00:	e7c6      	b.n	d5c90 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d02:	4453      	add	r3, sl
   d5d04:	428b      	cmp	r3, r1
   d5d06:	d9f3      	bls.n	d5cf0 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d5d08:	3024      	adds	r0, #36	; 0x24
   d5d0a:	9101      	str	r1, [sp, #4]
   d5d0c:	f000 fd58 	bl	d67c0 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d5d10:	9901      	ldr	r1, [sp, #4]
   d5d12:	2800      	cmp	r0, #0
   d5d14:	d1ec      	bne.n	d5cf0 <_ZN7FatFile4readEPvj+0x12c>
   d5d16:	e7bb      	b.n	d5c90 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d5d18:	1ba8      	subs	r0, r5, r6
}
   d5d1a:	b003      	add	sp, #12
   d5d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5d20 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d5d20:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d5d22:	2201      	movs	r2, #1
   d5d24:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d5d28:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d5d2c:	4604      	mov	r4, r0
   d5d2e:	f7ff ff49 	bl	d5bc4 <_ZN7FatFile4readEPvj>
   d5d32:	2801      	cmp	r0, #1
   d5d34:	bf0a      	itet	eq
   d5d36:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5d3a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d5d3e:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d5d42:	b002      	add	sp, #8
   d5d44:	bd70      	pop	{r4, r5, r6, pc}

000d5d46 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5d46:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5d48:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d5d4a:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5d4e:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5d50:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d5d54:	d000      	beq.n	d5d58 <_ZN7FatFile12readDirCacheEb+0x12>
   d5d56:	b999      	cbnz	r1, d5d80 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d5d58:	2201      	movs	r2, #1
   d5d5a:	f10d 0107 	add.w	r1, sp, #7
   d5d5e:	4620      	mov	r0, r4
   d5d60:	f7ff ff30 	bl	d5bc4 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d5d64:	b240      	sxtb	r0, r0
   d5d66:	2801      	cmp	r0, #1
   d5d68:	d002      	beq.n	d5d70 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d5d6a:	2000      	movs	r0, #0
}
   d5d6c:	b003      	add	sp, #12
   d5d6e:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d5d70:	6963      	ldr	r3, [r4, #20]
   d5d72:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d5d74:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d5d76:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d5d78:	3030      	adds	r0, #48	; 0x30
   d5d7a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d5d7e:	e7f5      	b.n	d5d6c <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d5d80:	3320      	adds	r3, #32
   d5d82:	e7f7      	b.n	d5d74 <_ZN7FatFile12readDirCacheEb+0x2e>

000d5d84 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d5d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d5d88:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d5d8a:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d5d8c:	4604      	mov	r4, r0
   d5d8e:	460d      	mov	r5, r1
  if (!isOpen()) {
   d5d90:	b162      	cbz	r2, d5dac <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d5d92:	6940      	ldr	r0, [r0, #20]
   d5d94:	4288      	cmp	r0, r1
   d5d96:	d002      	beq.n	d5d9e <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d5d98:	b919      	cbnz	r1, d5da2 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d5d9a:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d5d9c:	6165      	str	r5, [r4, #20]
    return true;
   d5d9e:	2001      	movs	r0, #1
   d5da0:	e006      	b.n	d5db0 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d5da2:	0716      	lsls	r6, r2, #28
   d5da4:	d506      	bpl.n	d5db4 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d5da6:	69e3      	ldr	r3, [r4, #28]
   d5da8:	428b      	cmp	r3, r1
   d5daa:	d20b      	bcs.n	d5dc4 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d5dac:	6127      	str	r7, [r4, #16]
  return false;
   d5dae:	2000      	movs	r0, #0
}
   d5db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d5db4:	0691      	lsls	r1, r2, #26
   d5db6:	d505      	bpl.n	d5dc4 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5db8:	68a3      	ldr	r3, [r4, #8]
   d5dba:	891b      	ldrh	r3, [r3, #8]
   d5dbc:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d5dc0:	d9ec      	bls.n	d5d9c <_ZN7FatFile7seekSetEm+0x18>
   d5dc2:	e7f3      	b.n	d5dac <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5dc4:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d5dc8:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d5dcc:	1e43      	subs	r3, r0, #1
   d5dce:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5dd2:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5dd4:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5dd6:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d5dd8:	42b3      	cmp	r3, r6
   d5dda:	d800      	bhi.n	d5dde <_ZN7FatFile7seekSetEm+0x5a>
   d5ddc:	b998      	cbnz	r0, d5e06 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5dde:	0653      	lsls	r3, r2, #25
   d5de0:	bf4c      	ite	mi
   d5de2:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d5de6:	6a23      	ldrpl	r3, [r4, #32]
   d5de8:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5dea:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d5dee:	2e00      	cmp	r6, #0
   d5df0:	d0d4      	beq.n	d5d9c <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5df2:	6921      	ldr	r1, [r4, #16]
   d5df4:	68a0      	ldr	r0, [r4, #8]
   d5df6:	4642      	mov	r2, r8
   d5df8:	f000 fd33 	bl	d6862 <_ZN9FatVolume6fatGetEmPm>
   d5dfc:	2800      	cmp	r0, #0
   d5dfe:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d5e02:	dcf4      	bgt.n	d5dee <_ZN7FatFile7seekSetEm+0x6a>
   d5e04:	e7d2      	b.n	d5dac <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d5e06:	1af6      	subs	r6, r6, r3
   d5e08:	e7ef      	b.n	d5dea <_ZN7FatFile7seekSetEm+0x66>

000d5e0a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d5e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e0c:	460f      	mov	r7, r1
   d5e0e:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d5e10:	2100      	movs	r1, #0
   d5e12:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d5e14:	4604      	mov	r4, r0
   d5e16:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d5e18:	f002 ff60 	bl	d8cdc <memset>
  m_vol = dirFile->m_vol;
   d5e1c:	68b8      	ldr	r0, [r7, #8]
   d5e1e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d5e20:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5e22:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d5e26:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d5e2a:	6a3b      	ldr	r3, [r7, #32]
   d5e2c:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5e2e:	0171      	lsls	r1, r6, #5
   d5e30:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5e34:	7af3      	ldrb	r3, [r6, #11]
   d5e36:	071f      	lsls	r7, r3, #28
   d5e38:	d446      	bmi.n	d5ec8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5e3a:	1843      	adds	r3, r0, r1
   d5e3c:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5e40:	f003 0317 	and.w	r3, r3, #23
   d5e44:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5e46:	7af2      	ldrb	r2, [r6, #11]
   d5e48:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d5e4c:	bf04      	itt	eq
   d5e4e:	f043 0308 	orreq.w	r3, r3, #8
   d5e52:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d5e54:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5e58:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d5e5a:	f005 0303 	and.w	r3, r5, #3
   d5e5e:	2b01      	cmp	r3, #1
   d5e60:	d02c      	beq.n	d5ebc <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d5e62:	2b02      	cmp	r3, #2
   d5e64:	d028      	beq.n	d5eb8 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d5e66:	bb7b      	cbnz	r3, d5ec8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d5e68:	056a      	lsls	r2, r5, #21
   d5e6a:	d42d      	bmi.n	d5ec8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d5e6c:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d5e6e:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d5e70:	78a2      	ldrb	r2, [r4, #2]
   d5e72:	0793      	lsls	r3, r2, #30
   d5e74:	d504      	bpl.n	d5e80 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d5e76:	7823      	ldrb	r3, [r4, #0]
   d5e78:	06df      	lsls	r7, r3, #27
   d5e7a:	d425      	bmi.n	d5ec8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d5e7c:	07de      	lsls	r6, r3, #31
   d5e7e:	d423      	bmi.n	d5ec8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5e80:	11ab      	asrs	r3, r5, #6
   d5e82:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d5e86:	f005 0608 	and.w	r6, r5, #8
   d5e8a:	4333      	orrs	r3, r6
   d5e8c:	4313      	orrs	r3, r2
   d5e8e:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d5e90:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d5e92:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5e94:	1843      	adds	r3, r0, r1
   d5e96:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d5e9a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5e9e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d5ea2:	056a      	lsls	r2, r5, #21
   d5ea4:	d513      	bpl.n	d5ece <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5ea6:	b959      	cbnz	r1, d5ec0 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d5ea8:	78a3      	ldrb	r3, [r4, #2]
   d5eaa:	f043 0304 	orr.w	r3, r3, #4
   d5eae:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5eb0:	046b      	lsls	r3, r5, #17
   d5eb2:	d410      	bmi.n	d5ed6 <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d5eb4:	2001      	movs	r0, #1
}
   d5eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d5eb8:	2303      	movs	r3, #3
   d5eba:	e7d8      	b.n	d5e6e <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d5ebc:	2302      	movs	r3, #2
   d5ebe:	e7d6      	b.n	d5e6e <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5ec0:	f000 fd6f 	bl	d69a2 <_ZN9FatVolume9freeChainEm>
   d5ec4:	2800      	cmp	r0, #0
   d5ec6:	d1ef      	bne.n	d5ea8 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d5ec8:	2000      	movs	r0, #0
   d5eca:	7020      	strb	r0, [r4, #0]
  return false;
   d5ecc:	e7f3      	b.n	d5eb6 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d5ece:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5ed2:	61e3      	str	r3, [r4, #28]
   d5ed4:	e7ec      	b.n	d5eb0 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5ed6:	69e1      	ldr	r1, [r4, #28]
   d5ed8:	4620      	mov	r0, r4
   d5eda:	f7ff ff53 	bl	d5d84 <_ZN7FatFile7seekSetEm>
   d5ede:	2800      	cmp	r0, #0
   d5ee0:	d1e8      	bne.n	d5eb4 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d5ee2:	e7f1      	b.n	d5ec8 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d5ee4 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5ee4:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5ee6:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d5ee8:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5eea:	b90b      	cbnz	r3, d5ef0 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5eec:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d5eee:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5ef0:	7883      	ldrb	r3, [r0, #2]
   d5ef2:	075a      	lsls	r2, r3, #29
   d5ef4:	d523      	bpl.n	d5f3e <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5ef6:	2101      	movs	r1, #1
   d5ef8:	f7ff fe3c 	bl	d5b74 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5efc:	4605      	mov	r5, r0
   d5efe:	b928      	cbnz	r0, d5f0c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d5f00:	7863      	ldrb	r3, [r4, #1]
   d5f02:	f043 0301 	orr.w	r3, r3, #1
   d5f06:	7063      	strb	r3, [r4, #1]
  return false;
   d5f08:	2000      	movs	r0, #0
   d5f0a:	e7f0      	b.n	d5eee <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5f0c:	7803      	ldrb	r3, [r0, #0]
   d5f0e:	2be5      	cmp	r3, #229	; 0xe5
   d5f10:	d0f6      	beq.n	d5f00 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d5f12:	7823      	ldrb	r3, [r4, #0]
   d5f14:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5f16:	bf44      	itt	mi
   d5f18:	69e3      	ldrmi	r3, [r4, #28]
   d5f1a:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5f1c:	8c23      	ldrh	r3, [r4, #32]
   d5f1e:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5f20:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5f22:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d5f24:	4b09      	ldr	r3, [pc, #36]	; (d5f4c <_ZN7FatFile4syncEv+0x68>)
   d5f26:	681b      	ldr	r3, [r3, #0]
   d5f28:	b12b      	cbz	r3, d5f36 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5f2a:	f100 0116 	add.w	r1, r0, #22
   d5f2e:	3018      	adds	r0, #24
   d5f30:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5f32:	8b2b      	ldrh	r3, [r5, #24]
   d5f34:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5f36:	78a3      	ldrb	r3, [r4, #2]
   d5f38:	f023 0304 	bic.w	r3, r3, #4
   d5f3c:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d5f3e:	68a0      	ldr	r0, [r4, #8]
   d5f40:	f7ff fdc2 	bl	d5ac8 <_ZN9FatVolume9cacheSyncEv>
   d5f44:	2800      	cmp	r0, #0
   d5f46:	d0db      	beq.n	d5f00 <_ZN7FatFile4syncEv+0x1c>
   d5f48:	e7d0      	b.n	d5eec <_ZN7FatFile4syncEv+0x8>
   d5f4a:	bf00      	nop
   d5f4c:	2003e5a4 	.word	0x2003e5a4

000d5f50 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d5f50:	b510      	push	{r4, lr}
   d5f52:	4604      	mov	r4, r0
  bool rtn = sync();
   d5f54:	f7ff ffc6 	bl	d5ee4 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5f58:	2300      	movs	r3, #0
   d5f5a:	7023      	strb	r3, [r4, #0]
}
   d5f5c:	bd10      	pop	{r4, pc}

000d5f5e <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5f5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5f60:	b093      	sub	sp, #76	; 0x4c
   d5f62:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5f64:	2300      	movs	r3, #0
   d5f66:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d5f6a:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5f6c:	9201      	str	r2, [sp, #4]
   d5f6e:	4606      	mov	r6, r0
   d5f70:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d5f72:	b113      	cbz	r3, d5f7a <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d5f74:	2000      	movs	r0, #0
}
   d5f76:	b013      	add	sp, #76	; 0x4c
   d5f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d5f7a:	780b      	ldrb	r3, [r1, #0]
   d5f7c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5f80:	d0f8      	beq.n	d5f74 <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d5f82:	7813      	ldrb	r3, [r2, #0]
   d5f84:	2b2f      	cmp	r3, #47	; 0x2f
   d5f86:	d112      	bne.n	d5fae <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d5f88:	9a01      	ldr	r2, [sp, #4]
   d5f8a:	7813      	ldrb	r3, [r2, #0]
   d5f8c:	2b2f      	cmp	r3, #47	; 0x2f
   d5f8e:	d102      	bne.n	d5f96 <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d5f90:	3201      	adds	r2, #1
   d5f92:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d5f94:	e7f8      	b.n	d5f88 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d5f96:	68a1      	ldr	r1, [r4, #8]
   d5f98:	b91b      	cbnz	r3, d5fa2 <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d5f9a:	4630      	mov	r0, r6
   d5f9c:	f7ff fdf9 	bl	d5b92 <_ZN7FatFile8openRootEP9FatVolume>
   d5fa0:	e7e9      	b.n	d5f76 <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d5fa2:	a809      	add	r0, sp, #36	; 0x24
   d5fa4:	f7ff fdf5 	bl	d5b92 <_ZN7FatFile8openRootEP9FatVolume>
   d5fa8:	2800      	cmp	r0, #0
   d5faa:	d0e3      	beq.n	d5f74 <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d5fac:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d5fae:	9801      	ldr	r0, [sp, #4]
   d5fb0:	aa01      	add	r2, sp, #4
   d5fb2:	a903      	add	r1, sp, #12
   d5fb4:	f000 f8f6 	bl	d61a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d5fb8:	2800      	cmp	r0, #0
   d5fba:	d0db      	beq.n	d5f74 <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d5fbc:	9b01      	ldr	r3, [sp, #4]
   d5fbe:	781b      	ldrb	r3, [r3, #0]
   d5fc0:	b19b      	cbz	r3, d5fea <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d5fc2:	2300      	movs	r3, #0
   d5fc4:	aa03      	add	r2, sp, #12
   d5fc6:	4621      	mov	r1, r4
   d5fc8:	4630      	mov	r0, r6
   d5fca:	f000 fa1f 	bl	d640c <_ZN7FatFile4openEPS_P7fname_ti>
   d5fce:	2800      	cmp	r0, #0
   d5fd0:	d0d0      	beq.n	d5f74 <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d5fd2:	4635      	mov	r5, r6
   d5fd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5fd6:	ac09      	add	r4, sp, #36	; 0x24
   d5fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5fda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5fdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5fde:	682b      	ldr	r3, [r5, #0]
   d5fe0:	6023      	str	r3, [r4, #0]
    close();
   d5fe2:	4630      	mov	r0, r6
   d5fe4:	f7ff ffb4 	bl	d5f50 <_ZN7FatFile5closeEv>
  while (1) {
   d5fe8:	e7e0      	b.n	d5fac <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d5fea:	463b      	mov	r3, r7
   d5fec:	aa03      	add	r2, sp, #12
   d5fee:	4621      	mov	r1, r4
   d5ff0:	4630      	mov	r0, r6
   d5ff2:	f000 fa0b 	bl	d640c <_ZN7FatFile4openEPS_P7fname_ti>
   d5ff6:	e7be      	b.n	d5f76 <_ZN7FatFile4openEPS_PKci+0x18>

000d5ff8 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d5ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d5ffc:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d5ffe:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6000:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d6002:	4604      	mov	r4, r0
   d6004:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6006:	d55b      	bpl.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
   d6008:	7883      	ldrb	r3, [r0, #2]
   d600a:	079a      	lsls	r2, r3, #30
   d600c:	d558      	bpl.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d600e:	071b      	lsls	r3, r3, #28
   d6010:	d451      	bmi.n	d60b6 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d6012:	6963      	ldr	r3, [r4, #20]
   d6014:	43db      	mvns	r3, r3
   d6016:	42bb      	cmp	r3, r7
   d6018:	d352      	bcc.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
   d601a:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d601c:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d6020:	6966      	ldr	r6, [r4, #20]
   d6022:	f1b8 0f00 	cmp.w	r8, #0
   d6026:	f000 8091 	beq.w	d614c <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d602a:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d602c:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d602e:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d6032:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d6036:	d10e      	bne.n	d6056 <_ZN7FatFile5writeEPKvj+0x5e>
   d6038:	b96d      	cbnz	r5, d6056 <_ZN7FatFile5writeEPKvj+0x5e>
   d603a:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d603c:	2900      	cmp	r1, #0
   d603e:	d046      	beq.n	d60ce <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d6040:	4652      	mov	r2, sl
   d6042:	f000 fc0e 	bl	d6862 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d6046:	2800      	cmp	r0, #0
   d6048:	db3a      	blt.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d604a:	d104      	bne.n	d6056 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d604c:	4620      	mov	r0, r4
   d604e:	f7ff fd48 	bl	d5ae2 <_ZN7FatFile10addClusterEv>
   d6052:	2800      	cmp	r0, #0
   d6054:	d034      	beq.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d6056:	6921      	ldr	r1, [r4, #16]
   d6058:	68a0      	ldr	r0, [r4, #8]
   d605a:	f000 fbfc 	bl	d6856 <_ZNK9FatVolume17clusterFirstBlockEm>
   d605e:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d6060:	68a0      	ldr	r0, [r4, #8]
   d6062:	b915      	cbnz	r5, d606a <_ZN7FatFile5writeEPKvj+0x72>
   d6064:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d6068:	d23f      	bcs.n	d60ea <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d606a:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d606e:	4546      	cmp	r6, r8
   d6070:	bf28      	it	cs
   d6072:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6074:	2d00      	cmp	r5, #0
   d6076:	d136      	bne.n	d60e6 <_ZN7FatFile5writeEPKvj+0xee>
   d6078:	6962      	ldr	r2, [r4, #20]
   d607a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d607c:	429a      	cmp	r2, r3
   d607e:	bf34      	ite	cc
   d6080:	2201      	movcc	r2, #1
   d6082:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d6084:	3024      	adds	r0, #36	; 0x24
   d6086:	f000 fbc3 	bl	d6810 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d608a:	b1c8      	cbz	r0, d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d608c:	4428      	add	r0, r5
   d608e:	4632      	mov	r2, r6
   d6090:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6092:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d6094:	f002 fe14 	bl	d8cc0 <memcpy>
      if (512 == (n + blockOffset)) {
   d6098:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d609c:	d104      	bne.n	d60a8 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d609e:	68a0      	ldr	r0, [r4, #8]
   d60a0:	3024      	adds	r0, #36	; 0x24
   d60a2:	f000 fb8d 	bl	d67c0 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d60a6:	b158      	cbz	r0, d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d60a8:	6963      	ldr	r3, [r4, #20]
   d60aa:	4433      	add	r3, r6
   d60ac:	6163      	str	r3, [r4, #20]
    src += n;
   d60ae:	44b1      	add	r9, r6
    nToWrite -= n;
   d60b0:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d60b4:	e7b4      	b.n	d6020 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d60b6:	69c1      	ldr	r1, [r0, #28]
   d60b8:	f7ff fe64 	bl	d5d84 <_ZN7FatFile7seekSetEm>
   d60bc:	2800      	cmp	r0, #0
   d60be:	d1a8      	bne.n	d6012 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d60c0:	7863      	ldrb	r3, [r4, #1]
   d60c2:	f043 0301 	orr.w	r3, r3, #1
   d60c6:	7063      	strb	r3, [r4, #1]
  return -1;
   d60c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d60cc:	e050      	b.n	d6170 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d60ce:	6a23      	ldr	r3, [r4, #32]
   d60d0:	b93b      	cbnz	r3, d60e2 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d60d2:	4620      	mov	r0, r4
   d60d4:	f7ff fd05 	bl	d5ae2 <_ZN7FatFile10addClusterEv>
   d60d8:	2800      	cmp	r0, #0
   d60da:	d0f1      	beq.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d60dc:	6923      	ldr	r3, [r4, #16]
   d60de:	6223      	str	r3, [r4, #32]
   d60e0:	e7b9      	b.n	d6056 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d60e2:	6123      	str	r3, [r4, #16]
   d60e4:	e7b7      	b.n	d6056 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d60e6:	2201      	movs	r2, #1
   d60e8:	e7cc      	b.n	d6084 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d60ea:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d60ee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d60f0:	d31b      	bcc.n	d612a <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d60f2:	f890 c004 	ldrb.w	ip, [r0, #4]
   d60f6:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d60fa:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d60fc:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d6100:	4573      	cmp	r3, lr
   d6102:	bf28      	it	cs
   d6104:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6106:	4291      	cmp	r1, r2
      n = 512*nb;
   d6108:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d610c:	d307      	bcc.n	d611e <_ZN7FatFile5writeEPKvj+0x126>
   d610e:	441a      	add	r2, r3
   d6110:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d6112:	bf82      	ittt	hi
   d6114:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d6118:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d611c:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d611e:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d6120:	464a      	mov	r2, r9
   d6122:	6828      	ldr	r0, [r5, #0]
   d6124:	f000 ff53 	bl	d6fce <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d6128:	e7bd      	b.n	d60a6 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d612a:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d612c:	bf02      	ittt	eq
   d612e:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d6132:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6136:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d6138:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d613a:	464a      	mov	r2, r9
   d613c:	6818      	ldr	r0, [r3, #0]
   d613e:	f000 fed0 	bl	d6ee2 <_ZN9SdSpiCard10writeBlockEmPKh>
   d6142:	2800      	cmp	r0, #0
   d6144:	d0bc      	beq.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d6146:	f44f 7600 	mov.w	r6, #512	; 0x200
   d614a:	e7ad      	b.n	d60a8 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d614c:	69e2      	ldr	r2, [r4, #28]
   d614e:	78a3      	ldrb	r3, [r4, #2]
   d6150:	42b2      	cmp	r2, r6
   d6152:	d204      	bcs.n	d615e <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d6154:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d6156:	f043 0304 	orr.w	r3, r3, #4
   d615a:	70a3      	strb	r3, [r4, #2]
   d615c:	e003      	b.n	d6166 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d615e:	4a08      	ldr	r2, [pc, #32]	; (d6180 <_ZN7FatFile5writeEPKvj+0x188>)
   d6160:	6812      	ldr	r2, [r2, #0]
   d6162:	2a00      	cmp	r2, #0
   d6164:	d1f7      	bne.n	d6156 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d6166:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d616a:	2b00      	cmp	r3, #0
   d616c:	db02      	blt.n	d6174 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d616e:	4638      	mov	r0, r7
}
   d6170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d6174:	4620      	mov	r0, r4
   d6176:	f7ff feb5 	bl	d5ee4 <_ZN7FatFile4syncEv>
   d617a:	2800      	cmp	r0, #0
   d617c:	d1f7      	bne.n	d616e <_ZN7FatFile5writeEPKvj+0x176>
   d617e:	e79f      	b.n	d60c0 <_ZN7FatFile5writeEPKvj+0xc8>
   d6180:	2003e5a4 	.word	0x2003e5a4

000d6184 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6184:	1e41      	subs	r1, r0, #1
   d6186:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d618a:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d618c:	0842      	lsrs	r2, r0, #1
   d618e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d6192:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6196:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d619a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d619c:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d619e:	d1f5      	bne.n	d618c <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d61a0:	4770      	bx	lr
	...

000d61a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d61a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d61a8:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d61aa:	f810 3b01 	ldrb.w	r3, [r0], #1
   d61ae:	2b20      	cmp	r3, #32
   d61b0:	d0fa      	beq.n	d61a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d61b2:	4d6b      	ldr	r5, [pc, #428]	; (d6360 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d61b4:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d61b6:	2400      	movs	r4, #0
    c = path[len];
   d61b8:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d61ba:	b1c3      	cbz	r3, d61ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d61bc:	2b2f      	cmp	r3, #47	; 0x2f
   d61be:	d016      	beq.n	d61ee <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d61c0:	2b5c      	cmp	r3, #92	; 0x5c
   d61c2:	d102      	bne.n	d61ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d61c4:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d61c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d61ca:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d61ce:	b2c0      	uxtb	r0, r0
   d61d0:	281d      	cmp	r0, #29
   d61d2:	d803      	bhi.n	d61dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d61d4:	fa25 f000 	lsr.w	r0, r5, r0
   d61d8:	07c0      	lsls	r0, r0, #31
   d61da:	d4f3      	bmi.n	d61c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d61dc:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d61e0:	283c      	cmp	r0, #60	; 0x3c
   d61e2:	d0ef      	beq.n	d61c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d61e4:	3b20      	subs	r3, #32
   d61e6:	2b5e      	cmp	r3, #94	; 0x5e
   d61e8:	d8ec      	bhi.n	d61c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d61ea:	3401      	adds	r4, #1
    c = path[len];
   d61ec:	e7e4      	b.n	d61b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d61ee:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d61f0:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d61f2:	4607      	mov	r7, r0
   d61f4:	f810 5b01 	ldrb.w	r5, [r0], #1
   d61f8:	2d20      	cmp	r5, #32
   d61fa:	d0fa      	beq.n	d61f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d61fc:	2d2f      	cmp	r5, #47	; 0x2f
   d61fe:	d0f8      	beq.n	d61f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6200:	6017      	str	r7, [r2, #0]
  while (len) {
   d6202:	b14c      	cbz	r4, d6218 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6204:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6208:	2a2e      	cmp	r2, #46	; 0x2e
   d620a:	d001      	beq.n	d6210 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d620c:	2a20      	cmp	r2, #32
   d620e:	d101      	bne.n	d6214 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d6210:	3c01      	subs	r4, #1
  while (len) {
   d6212:	e7f6      	b.n	d6202 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d6214:	2cff      	cmp	r4, #255	; 0xff
   d6216:	dcd5      	bgt.n	d61c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d6218:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d621a:	f101 030d 	add.w	r3, r1, #13
   d621e:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d6222:	2020      	movs	r0, #32
   d6224:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d6228:	4293      	cmp	r3, r2
   d622a:	d1fb      	bne.n	d6224 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d622c:	f04f 0800 	mov.w	r8, #0
   d6230:	f816 3008 	ldrb.w	r3, [r6, r8]
   d6234:	2b2e      	cmp	r3, #46	; 0x2e
   d6236:	d001      	beq.n	d623c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d6238:	2b20      	cmp	r3, #32
   d623a:	d102      	bne.n	d6242 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d623c:	f108 0801 	add.w	r8, r8, #1
   d6240:	e7f6      	b.n	d6230 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d6242:	fab8 f088 	clz	r0, r8
   d6246:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d6248:	1e65      	subs	r5, r4, #1
   d624a:	1c6b      	adds	r3, r5, #1
   d624c:	d002      	beq.n	d6254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d624e:	5d73      	ldrb	r3, [r6, r5]
   d6250:	2b2e      	cmp	r3, #46	; 0x2e
   d6252:	d114      	bne.n	d627e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d6254:	f04f 0900 	mov.w	r9, #0
   d6258:	2707      	movs	r7, #7
   d625a:	464a      	mov	r2, r9
   d625c:	46ca      	mov	sl, r9
   d625e:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d6262:	45a0      	cmp	r8, r4
   d6264:	da69      	bge.n	d633a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d6266:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d626a:	2b20      	cmp	r3, #32
   d626c:	d003      	beq.n	d6276 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d626e:	2b2e      	cmp	r3, #46	; 0x2e
   d6270:	d107      	bne.n	d6282 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6272:	45a8      	cmp	r8, r5
   d6274:	d012      	beq.n	d629c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6276:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6278:	f108 0801 	add.w	r8, r8, #1
   d627c:	e7f1      	b.n	d6262 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d627e:	3d01      	subs	r5, #1
   d6280:	e7e3      	b.n	d624a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d6282:	2b22      	cmp	r3, #34	; 0x22
   d6284:	d008      	beq.n	d6298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d6286:	2b7c      	cmp	r3, #124	; 0x7c
   d6288:	d006      	beq.n	d6298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d628a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d628e:	f1bc 0f05 	cmp.w	ip, #5
   d6292:	d80b      	bhi.n	d62ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6294:	2b2d      	cmp	r3, #45	; 0x2d
   d6296:	d013      	beq.n	d62c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6298:	45a8      	cmp	r8, r5
   d629a:	d15c      	bne.n	d6356 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d629c:	2f0a      	cmp	r7, #10
   d629e:	d04b      	beq.n	d6338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d62a0:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d62a2:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d62a4:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d62a6:	f04f 0e10 	mov.w	lr, #16
   d62aa:	e7e5      	b.n	d6278 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d62ac:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d62b0:	f1bc 0f05 	cmp.w	ip, #5
   d62b4:	d9f0      	bls.n	d6298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d62b6:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d62ba:	f1bc 0f02 	cmp.w	ip, #2
   d62be:	d9eb      	bls.n	d6298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d62c0:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d62c4:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d62c8:	d8e6      	bhi.n	d6298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d62ca:	45a8      	cmp	r8, r5
   d62cc:	d0e6      	beq.n	d629c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d62ce:	42ba      	cmp	r2, r7
   d62d0:	d830      	bhi.n	d6334 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d62d2:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d62d6:	f1bc 0f19 	cmp.w	ip, #25
   d62da:	d81a      	bhi.n	d6312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d62dc:	3b20      	subs	r3, #32
        lc |= bit;
   d62de:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d62e2:	b2db      	uxtb	r3, r3
        lc |= bit;
   d62e4:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d62e8:	f102 0c01 	add.w	ip, r2, #1
   d62ec:	fa5f fc8c 	uxtb.w	ip, ip
   d62f0:	440a      	add	r2, r1
      if (i < 7) {
   d62f2:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d62f6:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d62f8:	d801      	bhi.n	d62fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d62fa:	f881 c00c 	strb.w	ip, [r1, #12]
   d62fe:	4662      	mov	r2, ip
   d6300:	e7ba      	b.n	d6278 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6302:	45a8      	cmp	r8, r5
   d6304:	dc18      	bgt.n	d6338 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6306:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6308:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d630a:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d630c:	f04f 0e10 	mov.w	lr, #16
   d6310:	e7b1      	b.n	d6276 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d6312:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d6316:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d631a:	bf98      	it	ls
   d631c:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d6320:	e7e2      	b.n	d62e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d6322:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d6324:	2001      	movs	r0, #1
   d6326:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d6328:	4419      	add	r1, r3
   d632a:	237e      	movs	r3, #126	; 0x7e
   d632c:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d632e:	2331      	movs	r3, #49	; 0x31
   d6330:	738b      	strb	r3, [r1, #14]
   d6332:	e748      	b.n	d61c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d6334:	2f0a      	cmp	r7, #10
   d6336:	d1e4      	bne.n	d6302 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d6338:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d633a:	7b4b      	ldrb	r3, [r1, #13]
   d633c:	2b20      	cmp	r3, #32
   d633e:	f43f af41 	beq.w	d61c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d6342:	2800      	cmp	r0, #0
   d6344:	d0ed      	beq.n	d6322 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d6346:	ea1a 0f09 	tst.w	sl, r9
   d634a:	bf18      	it	ne
   d634c:	f04f 0902 	movne.w	r9, #2
   d6350:	f881 9000 	strb.w	r9, [r1]
   d6354:	e737      	b.n	d61c6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d6356:	42ba      	cmp	r2, r7
   d6358:	d8ec      	bhi.n	d6334 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d635a:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d635c:	2000      	movs	r0, #0
   d635e:	e7c3      	b.n	d62e8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d6360:	31000101 	.word	0x31000101

000d6364 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d6364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d6368:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d636c:	4606      	mov	r6, r0
   d636e:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6370:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6372:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6374:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6378:	6861      	ldr	r1, [r4, #4]
   d637a:	68a2      	ldr	r2, [r4, #8]
   d637c:	186b      	adds	r3, r5, r1
   d637e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6380:	4411      	add	r1, r2
   d6382:	4291      	cmp	r1, r2
   d6384:	d006      	beq.n	d6394 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6386:	f812 0b01 	ldrb.w	r0, [r2], #1
   d638a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d638e:	4043      	eors	r3, r0
   d6390:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6392:	e7f6      	b.n	d6382 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6394:	f1b9 0f03 	cmp.w	r9, #3
   d6398:	bf28      	it	cs
   d639a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d639e:	f109 0204 	add.w	r2, r9, #4
   d63a2:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d63a4:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d63a8:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d63aa:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d63ac:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d63ae:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d63b0:	bf94      	ite	ls
   d63b2:	3130      	addls	r1, #48	; 0x30
   d63b4:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d63b6:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d63b8:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d63ba:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d63be:	d1f1      	bne.n	d63a4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d63c0:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d63c4:	2100      	movs	r1, #0
   d63c6:	735f      	strb	r7, [r3, #13]
   d63c8:	4630      	mov	r0, r6
   d63ca:	f7ff fcdb 	bl	d5d84 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d63ce:	2101      	movs	r1, #1
   d63d0:	4630      	mov	r0, r6
   d63d2:	f7ff fcb8 	bl	d5d46 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d63d6:	4601      	mov	r1, r0
   d63d8:	b928      	cbnz	r0, d63e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d63da:	7870      	ldrb	r0, [r6, #1]
   d63dc:	fab0 f080 	clz	r0, r0
   d63e0:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d63e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d63e6:	7803      	ldrb	r3, [r0, #0]
   d63e8:	b16b      	cbz	r3, d6406 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d63ea:	7ac3      	ldrb	r3, [r0, #11]
   d63ec:	071b      	lsls	r3, r3, #28
   d63ee:	d4ee      	bmi.n	d63ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d63f0:	220b      	movs	r2, #11
   d63f2:	4640      	mov	r0, r8
   d63f4:	f002 fc56 	bl	d8ca4 <memcmp>
   d63f8:	2800      	cmp	r0, #0
   d63fa:	d1e8      	bne.n	d63ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d63fc:	3501      	adds	r5, #1
   d63fe:	b2ad      	uxth	r5, r5
   d6400:	2d64      	cmp	r5, #100	; 0x64
   d6402:	d1b9      	bne.n	d6378 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6404:	e7ed      	b.n	d63e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d6406:	2001      	movs	r0, #1
   d6408:	e7eb      	b.n	d63e2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d640c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d640c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6410:	ed2d 8b02 	vpush	{d8}
   d6414:	b089      	sub	sp, #36	; 0x24
   d6416:	460d      	mov	r5, r1
   d6418:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d641a:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d641c:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d641e:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d6422:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d6424:	d105      	bne.n	d6432 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d6426:	2000      	movs	r0, #0
}
   d6428:	b009      	add	sp, #36	; 0x24
   d642a:	ecbd 8b02 	vpop	{d8}
   d642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d6432:	9b06      	ldr	r3, [sp, #24]
   d6434:	781b      	ldrb	r3, [r3, #0]
   d6436:	2b00      	cmp	r3, #0
   d6438:	d1f5      	bne.n	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d643a:	6853      	ldr	r3, [r2, #4]
   d643c:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d643e:	7813      	ldrb	r3, [r2, #0]
   d6440:	0799      	lsls	r1, r3, #30
   d6442:	bf1c      	itt	ne
   d6444:	9b04      	ldrne	r3, [sp, #16]
   d6446:	f103 070c 	addne.w	r7, r3, #12
   d644a:	f04f 0100 	mov.w	r1, #0
   d644e:	bf18      	it	ne
   d6450:	230d      	movne	r3, #13
   d6452:	4628      	mov	r0, r5
   d6454:	bf1d      	ittte	ne
   d6456:	fbb7 f7f3 	udivne	r7, r7, r3
   d645a:	3701      	addne	r7, #1
   d645c:	b2ff      	uxtbne	r7, r7
   d645e:	2701      	moveq	r7, #1
   d6460:	f7ff fc90 	bl	d5d84 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6464:	f108 020d 	add.w	r2, r8, #13
  }
   d6468:	2300      	movs	r3, #0
   d646a:	ee08 2a10 	vmov	s16, r2
   d646e:	469b      	mov	fp, r3
   d6470:	461c      	mov	r4, r3
   d6472:	461e      	mov	r6, r3
   d6474:	9303      	str	r3, [sp, #12]
   d6476:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6478:	696a      	ldr	r2, [r5, #20]
   d647a:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d647c:	2101      	movs	r1, #1
   d647e:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6480:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6484:	f7ff fc5f 	bl	d5d46 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6488:	9b07      	ldr	r3, [sp, #28]
   d648a:	2800      	cmp	r0, #0
   d648c:	d16e      	bne.n	d656c <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d648e:	786b      	ldrb	r3, [r5, #1]
   d6490:	2b00      	cmp	r3, #0
   d6492:	d1c8      	bne.n	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6494:	9b05      	ldr	r3, [sp, #20]
   d6496:	059a      	lsls	r2, r3, #22
   d6498:	d5c5      	bpl.n	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d649a:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d649e:	3b01      	subs	r3, #1
   d64a0:	2b01      	cmp	r3, #1
   d64a2:	d8c0      	bhi.n	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d64a4:	9b03      	ldr	r3, [sp, #12]
   d64a6:	2c00      	cmp	r4, #0
   d64a8:	bf08      	it	eq
   d64aa:	464b      	moveq	r3, r9
   d64ac:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d64ae:	42bc      	cmp	r4, r7
   d64b0:	f0c0 8103 	bcc.w	d66ba <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d64b4:	f1ba 0f00 	cmp.w	sl, #0
   d64b8:	f040 811b 	bne.w	d66f2 <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d64bc:	9b03      	ldr	r3, [sp, #12]
   d64be:	4628      	mov	r0, r5
   d64c0:	0159      	lsls	r1, r3, #5
   d64c2:	f7ff fc5f 	bl	d5d84 <_ZN7FatFile7seekSetEm>
   d64c6:	2800      	cmp	r0, #0
   d64c8:	d0ad      	beq.n	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d64ca:	3f01      	subs	r7, #1
   d64cc:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d64d0:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d64d2:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d64d6:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d64d8:	2e00      	cmp	r6, #0
   d64da:	f000 8121 	beq.w	d6720 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d64de:	2100      	movs	r1, #0
   d64e0:	4628      	mov	r0, r5
   d64e2:	f7ff fc30 	bl	d5d46 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d64e6:	4604      	mov	r4, r0
   d64e8:	2800      	cmp	r0, #0
   d64ea:	d09c      	beq.n	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d64ec:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d64ee:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d64f2:	4556      	cmp	r6, sl
   d64f4:	f043 0301 	orr.w	r3, r3, #1
   d64f8:	bf0c      	ite	eq
   d64fa:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d64fe:	46b3      	movne	fp, r6
   d6500:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6504:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6508:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d650a:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d650e:	f108 000d 	add.w	r0, r8, #13
   d6512:	f7ff fe37 	bl	d6184 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6516:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d651a:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d651c:	f884 901a 	strb.w	r9, [r4, #26]
   d6520:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d6524:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d6528:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d652a:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d652e:	fb02 f20b 	mul.w	r2, r2, fp
   d6532:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6534:	9904      	ldr	r1, [sp, #16]
   d6536:	4291      	cmp	r1, r2
   d6538:	f240 80e3 	bls.w	d6702 <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d653c:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d6540:	2b04      	cmp	r3, #4
   d6542:	fa5f fe83 	uxtb.w	lr, r3
   d6546:	f103 0001 	add.w	r0, r3, #1
   d654a:	f200 80e0 	bhi.w	d670e <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d654e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d6552:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d6556:	280d      	cmp	r0, #13
   d6558:	f102 0201 	add.w	r2, r2, #1
   d655c:	4603      	mov	r3, r0
   d655e:	d1e9      	bne.n	d6534 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6560:	3e01      	subs	r6, #1
   d6562:	b2f6      	uxtb	r6, r6
   d6564:	e7b8      	b.n	d64d8 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d6566:	f04f 0a01 	mov.w	sl, #1
   d656a:	e785      	b.n	d6478 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d656c:	7802      	ldrb	r2, [r0, #0]
   d656e:	2ae5      	cmp	r2, #229	; 0xe5
   d6570:	d000      	beq.n	d6574 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d6572:	b97a      	cbnz	r2, d6594 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d6574:	9903      	ldr	r1, [sp, #12]
   d6576:	2c00      	cmp	r4, #0
   d6578:	bf08      	it	eq
   d657a:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d657c:	42bc      	cmp	r4, r7
        freeFound++;
   d657e:	bf38      	it	cc
   d6580:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d6582:	9103      	str	r1, [sp, #12]
        freeFound++;
   d6584:	bf38      	it	cc
   d6586:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d6588:	2a00      	cmp	r2, #0
   d658a:	d083      	beq.n	d6494 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d658c:	2ae5      	cmp	r2, #229	; 0xe5
   d658e:	d104      	bne.n	d659a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d6590:	2600      	movs	r6, #0
   d6592:	e771      	b.n	d6478 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d6594:	42bc      	cmp	r4, r7
   d6596:	bf38      	it	cc
   d6598:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d659a:	2a2e      	cmp	r2, #46	; 0x2e
   d659c:	d0f8      	beq.n	d6590 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d659e:	7ac1      	ldrb	r1, [r0, #11]
   d65a0:	290f      	cmp	r1, #15
   d65a2:	d15d      	bne.n	d6660 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d65a4:	bb3e      	cbnz	r6, d65f6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d65a6:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d65aa:	f43f af65 	beq.w	d6478 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d65ae:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d65b2:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d65b4:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d65b6:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d65ba:	f04f 0e0d 	mov.w	lr, #13
   d65be:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d65c2:	9a04      	ldr	r2, [sp, #16]
   d65c4:	4572      	cmp	r2, lr
   d65c6:	d9e3      	bls.n	d6590 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d65c8:	eba2 020e 	sub.w	r2, r2, lr
   d65cc:	9207      	str	r2, [sp, #28]
   d65ce:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d65d2:	f1bc 0f04 	cmp.w	ip, #4
   d65d6:	eb0c 090e 	add.w	r9, ip, lr
   d65da:	fa5f f28c 	uxtb.w	r2, ip
   d65de:	d814      	bhi.n	d660a <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d65e0:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d65e4:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d65e8:	9907      	ldr	r1, [sp, #28]
   d65ea:	458c      	cmp	ip, r1
   d65ec:	d11b      	bne.n	d6626 <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d65ee:	2a00      	cmp	r2, #0
   d65f0:	bf18      	it	ne
   d65f2:	2600      	movne	r6, #0
   d65f4:	e740      	b.n	d6478 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d65f6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d65fa:	fa5f fb8b 	uxtb.w	fp, fp
   d65fe:	455a      	cmp	r2, fp
   d6600:	d1c6      	bne.n	d6590 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6602:	7b42      	ldrb	r2, [r0, #13]
   d6604:	429a      	cmp	r2, r3
   d6606:	d0d6      	beq.n	d65b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d6608:	e7c2      	b.n	d6590 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d660a:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d660c:	bf95      	itete	ls
   d660e:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6612:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d6616:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d661a:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d661e:	bf94      	ite	ls
   d6620:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d6622:	8892      	ldrhhi	r2, [r2, #4]
   d6624:	e7e0      	b.n	d65e8 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6626:	2aff      	cmp	r2, #255	; 0xff
   d6628:	d8b2      	bhi.n	d6590 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d662a:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d662c:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d6630:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6632:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d6636:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d663a:	bf98      	it	ls
   d663c:	3220      	addls	r2, #32
   d663e:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d6642:	bf98      	it	ls
   d6644:	b2d2      	uxtbls	r2, r2
   d6646:	f1b9 0f19 	cmp.w	r9, #25
   d664a:	bf9c      	itt	ls
   d664c:	3120      	addls	r1, #32
   d664e:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d6650:	4291      	cmp	r1, r2
   d6652:	d19d      	bne.n	d6590 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d6654:	f10c 0c01 	add.w	ip, ip, #1
   d6658:	f1bc 0f0d 	cmp.w	ip, #13
   d665c:	d1b9      	bne.n	d65d2 <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d665e:	e70b      	b.n	d6478 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d6660:	070a      	lsls	r2, r1, #28
   d6662:	d495      	bmi.n	d6590 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d6664:	b166      	cbz	r6, d6680 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d6666:	f1bb 0f01 	cmp.w	fp, #1
   d666a:	9303      	str	r3, [sp, #12]
   d666c:	f47f aedb 	bne.w	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6670:	f7ff fd88 	bl	d6184 <_ZN7FatFile11lfnChecksumEPh>
   d6674:	9b03      	ldr	r3, [sp, #12]
   d6676:	4298      	cmp	r0, r3
   d6678:	f47f aed5 	bne.w	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d667c:	46b2      	mov	sl, r6
   d667e:	e00f      	b.n	d66a0 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6680:	ee18 1a10 	vmov	r1, s16
   d6684:	220b      	movs	r2, #11
   d6686:	9307      	str	r3, [sp, #28]
   d6688:	f002 fb0c 	bl	d8ca4 <memcmp>
   d668c:	9b07      	ldr	r3, [sp, #28]
   d668e:	2800      	cmp	r0, #0
   d6690:	f47f aef2 	bne.w	d6478 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6694:	f898 a000 	ldrb.w	sl, [r8]
   d6698:	f01a 0a01 	ands.w	sl, sl, #1
   d669c:	f47f af63 	bne.w	d6566 <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d66a0:	9b05      	ldr	r3, [sp, #20]
   d66a2:	0519      	lsls	r1, r3, #20
   d66a4:	f53f aebf 	bmi.w	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d66a8:	9b05      	ldr	r3, [sp, #20]
   d66aa:	9806      	ldr	r0, [sp, #24]
   d66ac:	f8cd a000 	str.w	sl, [sp]
   d66b0:	464a      	mov	r2, r9
   d66b2:	4629      	mov	r1, r5
   d66b4:	f7ff fba9 	bl	d5e0a <_ZN7FatFile15openCachedEntryEPS_tih>
   d66b8:	e6b6      	b.n	d6428 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d66ba:	2100      	movs	r1, #0
   d66bc:	4628      	mov	r0, r5
   d66be:	f7ff fb42 	bl	d5d46 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d66c2:	b998      	cbnz	r0, d66ec <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d66c4:	786b      	ldrb	r3, [r5, #1]
   d66c6:	2b00      	cmp	r3, #0
   d66c8:	f47f aead 	bne.w	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d66cc:	4628      	mov	r0, r5
   d66ce:	f7ff fa13 	bl	d5af8 <_ZN7FatFile13addDirClusterEv>
   d66d2:	2800      	cmp	r0, #0
   d66d4:	f43f aea7 	beq.w	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d66d8:	68ab      	ldr	r3, [r5, #8]
   d66da:	791b      	ldrb	r3, [r3, #4]
   d66dc:	2b01      	cmp	r3, #1
   d66de:	f63f aee9 	bhi.w	d64b4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d66e2:	3410      	adds	r4, #16
   d66e4:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d66e6:	42a7      	cmp	r7, r4
   d66e8:	d8f0      	bhi.n	d66cc <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d66ea:	e6e3      	b.n	d64b4 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d66ec:	3401      	adds	r4, #1
   d66ee:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d66f0:	e6dd      	b.n	d64ae <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d66f2:	4641      	mov	r1, r8
   d66f4:	4628      	mov	r0, r5
   d66f6:	f7ff fe35 	bl	d6364 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d66fa:	2800      	cmp	r0, #0
   d66fc:	f47f aede 	bne.w	d64bc <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d6700:	e691      	b.n	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6702:	bf14      	ite	ne
   d6704:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6708:	2100      	moveq	r1, #0
   d670a:	b289      	uxth	r1, r1
   d670c:	e718      	b.n	d6540 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d670e:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d6712:	bf94      	ite	ls
   d6714:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d6718:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d671c:	8099      	strh	r1, [r3, #4]
   d671e:	e71a      	b.n	d6556 <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d6720:	4631      	mov	r1, r6
   d6722:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d6724:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d6726:	f7ff fb0e 	bl	d5d46 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d672a:	4604      	mov	r4, r0
   d672c:	2800      	cmp	r0, #0
   d672e:	f43f ae7a 	beq.w	d6426 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d6732:	2220      	movs	r2, #32
   d6734:	4631      	mov	r1, r6
   d6736:	f002 fad1 	bl	d8cdc <memset>
  memcpy(dir->name, fname->sfn, 11);
   d673a:	4643      	mov	r3, r8
   d673c:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d6740:	6022      	str	r2, [r4, #0]
   d6742:	685a      	ldr	r2, [r3, #4]
   d6744:	6062      	str	r2, [r4, #4]
   d6746:	891a      	ldrh	r2, [r3, #8]
   d6748:	8122      	strh	r2, [r4, #8]
   d674a:	7a9b      	ldrb	r3, [r3, #10]
   d674c:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d674e:	f898 3000 	ldrb.w	r3, [r8]
   d6752:	f003 0318 	and.w	r3, r3, #24
   d6756:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d6758:	4b0f      	ldr	r3, [pc, #60]	; (d6798 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d675a:	681b      	ldr	r3, [r3, #0]
   d675c:	b19b      	cbz	r3, d6786 <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d675e:	f104 010e 	add.w	r1, r4, #14
   d6762:	f104 0010 	add.w	r0, r4, #16
   d6766:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d6768:	8a23      	ldrh	r3, [r4, #16]
   d676a:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d676c:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d676e:	89e3      	ldrh	r3, [r4, #14]
   d6770:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d6772:	68aa      	ldr	r2, [r5, #8]
   d6774:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6778:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d677c:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d6780:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d6784:	e790      	b.n	d66a8 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d6786:	2321      	movs	r3, #33	; 0x21
   d6788:	7423      	strb	r3, [r4, #16]
   d678a:	2328      	movs	r3, #40	; 0x28
   d678c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d678e:	2308      	movs	r3, #8
   d6790:	73a6      	strb	r6, [r4, #14]
   d6792:	73e3      	strb	r3, [r4, #15]
   d6794:	e7e8      	b.n	d6768 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d6796:	bf00      	nop
   d6798:	2003e5a4 	.word	0x2003e5a4

000d679c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d679c:	b513      	push	{r0, r1, r4, lr}
   d679e:	4604      	mov	r4, r0
    }
   d67a0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d67a2:	b159      	cbz	r1, d67bc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d67a4:	9101      	str	r1, [sp, #4]
   d67a6:	f002 fac5 	bl	d8d34 <strlen>
   d67aa:	6823      	ldr	r3, [r4, #0]
   d67ac:	9901      	ldr	r1, [sp, #4]
   d67ae:	68db      	ldr	r3, [r3, #12]
   d67b0:	4602      	mov	r2, r0
   d67b2:	4620      	mov	r0, r4
    }
   d67b4:	b002      	add	sp, #8
   d67b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d67ba:	4718      	bx	r3
    }
   d67bc:	b002      	add	sp, #8
   d67be:	bd10      	pop	{r4, pc}

000d67c0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d67c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d67c2:	7803      	ldrb	r3, [r0, #0]
   d67c4:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d67c6:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d67c8:	d520      	bpl.n	d680c <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d67ca:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d67cc:	6881      	ldr	r1, [r0, #8]
   d67ce:	f100 020c 	add.w	r2, r0, #12
   d67d2:	6818      	ldr	r0, [r3, #0]
   d67d4:	9201      	str	r2, [sp, #4]
   d67d6:	f000 fb84 	bl	d6ee2 <_ZN9SdSpiCard10writeBlockEmPKh>
   d67da:	9a01      	ldr	r2, [sp, #4]
   d67dc:	4605      	mov	r5, r0
   d67de:	b918      	cbnz	r0, d67e8 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d67e0:	2500      	movs	r5, #0
}
   d67e2:	4628      	mov	r0, r5
   d67e4:	b003      	add	sp, #12
   d67e6:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d67e8:	7823      	ldrb	r3, [r4, #0]
   d67ea:	079b      	lsls	r3, r3, #30
   d67ec:	d404      	bmi.n	d67f8 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d67ee:	7823      	ldrb	r3, [r4, #0]
   d67f0:	f023 0301 	bic.w	r3, r3, #1
   d67f4:	7023      	strb	r3, [r4, #0]
   d67f6:	e7f4      	b.n	d67e2 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d67f8:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d67fc:	6919      	ldr	r1, [r3, #16]
   d67fe:	4401      	add	r1, r0
   d6800:	6818      	ldr	r0, [r3, #0]
   d6802:	f000 fb6e 	bl	d6ee2 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6806:	2800      	cmp	r0, #0
   d6808:	d1f1      	bne.n	d67ee <_ZN8FatCache4syncEv+0x2e>
   d680a:	e7e9      	b.n	d67e0 <_ZN8FatCache4syncEv+0x20>
  return true;
   d680c:	2501      	movs	r5, #1
   d680e:	e7e8      	b.n	d67e2 <_ZN8FatCache4syncEv+0x22>

000d6810 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6810:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d6812:	6883      	ldr	r3, [r0, #8]
   d6814:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d6816:	4604      	mov	r4, r0
   d6818:	460e      	mov	r6, r1
   d681a:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d681c:	d009      	beq.n	d6832 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d681e:	f7ff ffcf 	bl	d67c0 <_ZN8FatCache4syncEv>
   d6822:	b908      	cbnz	r0, d6828 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d6824:	2000      	movs	r0, #0
}
   d6826:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d6828:	076b      	lsls	r3, r5, #29
   d682a:	d50a      	bpl.n	d6842 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d682c:	2300      	movs	r3, #0
   d682e:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d6830:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d6832:	7822      	ldrb	r2, [r4, #0]
   d6834:	f005 0503 	and.w	r5, r5, #3
   d6838:	4620      	mov	r0, r4
   d683a:	4315      	orrs	r5, r2
   d683c:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d6840:	e7f1      	b.n	d6826 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d6842:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d6844:	f104 020c 	add.w	r2, r4, #12
   d6848:	6818      	ldr	r0, [r3, #0]
   d684a:	4631      	mov	r1, r6
   d684c:	f000 fac0 	bl	d6dd0 <_ZN9SdSpiCard9readBlockEmPh>
   d6850:	2800      	cmp	r0, #0
   d6852:	d1eb      	bne.n	d682c <_ZN8FatCache4readEmh+0x1c>
   d6854:	e7e6      	b.n	d6824 <_ZN8FatCache4readEmh+0x14>

000d6856 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d6856:	7983      	ldrb	r3, [r0, #6]
   d6858:	6940      	ldr	r0, [r0, #20]
   d685a:	3902      	subs	r1, #2
   d685c:	4099      	lsls	r1, r3
}
   d685e:	4408      	add	r0, r1
   d6860:	4770      	bx	lr

000d6862 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6862:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d6864:	b570      	push	{r4, r5, r6, lr}
   d6866:	4605      	mov	r5, r0
   d6868:	460c      	mov	r4, r1
   d686a:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d686c:	d802      	bhi.n	d6874 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d686e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6872:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d6874:	69c3      	ldr	r3, [r0, #28]
   d6876:	428b      	cmp	r3, r1
   d6878:	d3f9      	bcc.n	d686e <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d687a:	79c3      	ldrb	r3, [r0, #7]
   d687c:	2b20      	cmp	r3, #32
   d687e:	d116      	bne.n	d68ae <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d6880:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d6882:	2202      	movs	r2, #2
   d6884:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6888:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d688c:	f7ff ffc0 	bl	d6810 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6890:	2800      	cmp	r0, #0
   d6892:	d0ec      	beq.n	d686e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d6894:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6898:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d689c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d68a0:	69ea      	ldr	r2, [r5, #28]
   d68a2:	429a      	cmp	r2, r3
  *value = next;
   d68a4:	bf26      	itte	cs
   d68a6:	6033      	strcs	r3, [r6, #0]
  return 1;
   d68a8:	2001      	movcs	r0, #1
    return 0;
   d68aa:	2000      	movcc	r0, #0
   d68ac:	e7e1      	b.n	d6872 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d68ae:	2b10      	cmp	r3, #16
   d68b0:	d1dd      	bne.n	d686e <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d68b2:	6983      	ldr	r3, [r0, #24]
   d68b4:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d68b8:	2202      	movs	r2, #2
   d68ba:	4419      	add	r1, r3
   d68bc:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d68c0:	f7ff ffa6 	bl	d6810 <_ZN8FatCache4readEmh>
    if (!pc) {
   d68c4:	2800      	cmp	r0, #0
   d68c6:	d0d2      	beq.n	d686e <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d68c8:	b2e4      	uxtb	r4, r4
   d68ca:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d68ce:	e7e7      	b.n	d68a0 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d68d0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d68d0:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d68d2:	b538      	push	{r3, r4, r5, lr}
   d68d4:	460c      	mov	r4, r1
   d68d6:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d68d8:	d801      	bhi.n	d68de <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d68da:	2000      	movs	r0, #0
}
   d68dc:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d68de:	69c3      	ldr	r3, [r0, #28]
   d68e0:	428b      	cmp	r3, r1
   d68e2:	d3fa      	bcc.n	d68da <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d68e4:	79c3      	ldrb	r3, [r0, #7]
   d68e6:	2b20      	cmp	r3, #32
   d68e8:	d10f      	bne.n	d690a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d68ea:	6981      	ldr	r1, [r0, #24]
   d68ec:	2203      	movs	r2, #3
   d68ee:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d68f2:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d68f6:	f7ff ff8b 	bl	d6810 <_ZN8FatCache4readEmh>
    if (!pc) {
   d68fa:	2800      	cmp	r0, #0
   d68fc:	d0ed      	beq.n	d68da <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d68fe:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6902:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d6906:	2001      	movs	r0, #1
   d6908:	e7e8      	b.n	d68dc <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d690a:	2b10      	cmp	r3, #16
   d690c:	d1e5      	bne.n	d68da <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d690e:	6983      	ldr	r3, [r0, #24]
   d6910:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6914:	2203      	movs	r2, #3
   d6916:	4419      	add	r1, r3
   d6918:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d691c:	f7ff ff78 	bl	d6810 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6920:	2800      	cmp	r0, #0
   d6922:	d0da      	beq.n	d68da <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d6924:	b2e4      	uxtb	r4, r4
   d6926:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d692a:	e7ec      	b.n	d6906 <_ZN9FatVolume6fatPutEmm+0x36>

000d692c <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d692c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d6930:	68c4      	ldr	r4, [r0, #12]
   d6932:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d6934:	4605      	mov	r5, r0
   d6936:	460e      	mov	r6, r1
   d6938:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d693a:	d301      	bcc.n	d6940 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d693c:	2701      	movs	r7, #1
   d693e:	e001      	b.n	d6944 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d6940:	460c      	mov	r4, r1
    setStart = false;
   d6942:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d6944:	69eb      	ldr	r3, [r5, #28]
    find++;
   d6946:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d6948:	42a3      	cmp	r3, r4
   d694a:	d202      	bcs.n	d6952 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d694c:	b9c7      	cbnz	r7, d6980 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d694e:	68ec      	ldr	r4, [r5, #12]
   d6950:	e7f4      	b.n	d693c <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d6952:	42a6      	cmp	r6, r4
   d6954:	d014      	beq.n	d6980 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d6956:	aa01      	add	r2, sp, #4
   d6958:	4621      	mov	r1, r4
   d695a:	4628      	mov	r0, r5
   d695c:	f7ff ff81 	bl	d6862 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6960:	2800      	cmp	r0, #0
   d6962:	db0d      	blt.n	d6980 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d6964:	d0ee      	beq.n	d6944 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d6966:	9b01      	ldr	r3, [sp, #4]
   d6968:	2b00      	cmp	r3, #0
   d696a:	d1eb      	bne.n	d6944 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d696c:	b107      	cbz	r7, d6970 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d696e:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6970:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d6974:	4621      	mov	r1, r4
   d6976:	4628      	mov	r0, r5
   d6978:	f7ff ffaa 	bl	d68d0 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d697c:	4607      	mov	r7, r0
   d697e:	b920      	cbnz	r0, d698a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d6980:	2700      	movs	r7, #0
}
   d6982:	4638      	mov	r0, r7
   d6984:	b002      	add	sp, #8
   d6986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d698a:	b916      	cbnz	r6, d6992 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d698c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6990:	e7f7      	b.n	d6982 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d6992:	4622      	mov	r2, r4
   d6994:	4631      	mov	r1, r6
   d6996:	4628      	mov	r0, r5
   d6998:	f7ff ff9a 	bl	d68d0 <_ZN9FatVolume6fatPutEmm>
   d699c:	2800      	cmp	r0, #0
   d699e:	d1f5      	bne.n	d698c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d69a0:	e7ee      	b.n	d6980 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d69a2 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d69a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d69a4:	4605      	mov	r5, r0
   d69a6:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d69a8:	aa01      	add	r2, sp, #4
   d69aa:	4621      	mov	r1, r4
   d69ac:	4628      	mov	r0, r5
   d69ae:	f7ff ff58 	bl	d6862 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d69b2:	1e06      	subs	r6, r0, #0
   d69b4:	db10      	blt.n	d69d8 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d69b6:	2200      	movs	r2, #0
   d69b8:	4621      	mov	r1, r4
   d69ba:	4628      	mov	r0, r5
   d69bc:	f7ff ff88 	bl	d68d0 <_ZN9FatVolume6fatPutEmm>
   d69c0:	b150      	cbz	r0, d69d8 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d69c2:	68eb      	ldr	r3, [r5, #12]
   d69c4:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d69c6:	bf24      	itt	cs
   d69c8:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d69cc:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d69ce:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d69d0:	2e00      	cmp	r6, #0
   d69d2:	d1e9      	bne.n	d69a8 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d69d4:	b002      	add	sp, #8
   d69d6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d69d8:	2000      	movs	r0, #0
   d69da:	e7fb      	b.n	d69d4 <_ZN9FatVolume9freeChainEm+0x32>

000d69dc <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d69dc:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d69de:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d69e0:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d69e2:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d69e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d69e8:	4604      	mov	r4, r0
  m_fatType = 0;
   d69ea:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d69ec:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d69f0:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d69f2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d69f6:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d69f8:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d69fc:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6a00:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6a04:	460d      	mov	r5, r1
   d6a06:	b1b9      	cbz	r1, d6a38 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d6a08:	2904      	cmp	r1, #4
   d6a0a:	d901      	bls.n	d6a10 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6a0c:	2000      	movs	r0, #0
}
   d6a0e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d6a10:	4611      	mov	r1, r2
   d6a12:	4630      	mov	r0, r6
   d6a14:	f7ff fefc 	bl	d6810 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6a18:	2800      	cmp	r0, #0
   d6a1a:	d0f7      	beq.n	d6a0c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6a1c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6a20:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6a24:	065b      	lsls	r3, r3, #25
   d6a26:	d1f1      	bne.n	d6a0c <_ZN9FatVolume4initEh+0x30>
   d6a28:	f105 011b 	add.w	r1, r5, #27
   d6a2c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d6a30:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d6a34:	2d00      	cmp	r5, #0
   d6a36:	d0e9      	beq.n	d6a0c <_ZN9FatVolume4initEh+0x30>
   d6a38:	2200      	movs	r2, #0
   d6a3a:	4629      	mov	r1, r5
   d6a3c:	4630      	mov	r0, r6
   d6a3e:	f7ff fee7 	bl	d6810 <_ZN8FatCache4readEmh>
  if (!pc) {
   d6a42:	2800      	cmp	r0, #0
   d6a44:	d0e2      	beq.n	d6a0c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d6a46:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6a4e:	d1dd      	bne.n	d6a0c <_ZN9FatVolume4initEh+0x30>
   d6a50:	7c03      	ldrb	r3, [r0, #16]
   d6a52:	2b02      	cmp	r3, #2
   d6a54:	d1da      	bne.n	d6a0c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d6a56:	89c3      	ldrh	r3, [r0, #14]
   d6a58:	2b00      	cmp	r3, #0
   d6a5a:	d0d7      	beq.n	d6a0c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d6a5c:	7b41      	ldrb	r1, [r0, #13]
   d6a5e:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d6a60:	1e4b      	subs	r3, r1, #1
   d6a62:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d6a64:	2300      	movs	r3, #0
   d6a66:	71a3      	strb	r3, [r4, #6]
   d6a68:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6a6a:	2301      	movs	r3, #1
   d6a6c:	4299      	cmp	r1, r3
   d6a6e:	d007      	beq.n	d6a80 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d6a70:	3e01      	subs	r6, #1
   d6a72:	d0cb      	beq.n	d6a0c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6a74:	79a2      	ldrb	r2, [r4, #6]
   d6a76:	005b      	lsls	r3, r3, #1
   d6a78:	3201      	adds	r2, #1
   d6a7a:	b2db      	uxtb	r3, r3
   d6a7c:	71a2      	strb	r2, [r4, #6]
   d6a7e:	e7f5      	b.n	d6a6c <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d6a80:	8ac1      	ldrh	r1, [r0, #22]
   d6a82:	b901      	cbnz	r1, d6a86 <_ZN9FatVolume4initEh+0xaa>
   d6a84:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d6a86:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d6a88:	89c3      	ldrh	r3, [r0, #14]
   d6a8a:	442b      	add	r3, r5
   d6a8c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d6a8e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6a92:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6a94:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d6a98:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d6a9a:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d6a9e:	0149      	lsls	r1, r1, #5
   d6aa0:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d6aa4:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d6aa8:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d6aaa:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d6aae:	b902      	cbnz	r2, d6ab2 <_ZN9FatVolume4initEh+0xd6>
   d6ab0:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6ab2:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d6ab4:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6ab6:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d6ab8:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d6aba:	1c4b      	adds	r3, r1, #1
   d6abc:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d6abe:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6ac2:	4299      	cmp	r1, r3
   d6ac4:	d802      	bhi.n	d6acc <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d6ac6:	230c      	movs	r3, #12
   d6ac8:	71e3      	strb	r3, [r4, #7]
   d6aca:	e79f      	b.n	d6a0c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d6acc:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6ad0:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d6ad2:	bf85      	ittet	hi
   d6ad4:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6ad6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d6ad8:	2310      	movls	r3, #16
    m_fatType = 32;
   d6ada:	2320      	movhi	r3, #32
   d6adc:	71e3      	strb	r3, [r4, #7]
  return true;
   d6ade:	2001      	movs	r0, #1
   d6ae0:	e795      	b.n	d6a0e <_ZN9FatVolume4initEh+0x32>
	...

000d6ae4 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6ae4:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6ae6:	4e0e      	ldr	r6, [pc, #56]	; (d6b20 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6ae8:	460d      	mov	r5, r1
   d6aea:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6aec:	f000 faf2 	bl	d70d4 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6af0:	6833      	ldr	r3, [r6, #0]
   d6af2:	1ac0      	subs	r0, r0, r3
   d6af4:	4b0b      	ldr	r3, [pc, #44]	; (d6b24 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6af6:	4298      	cmp	r0, r3
   d6af8:	d908      	bls.n	d6b0c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6afa:	f000 faf3 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6afe:	4b0a      	ldr	r3, [pc, #40]	; (d6b28 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6b00:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6b02:	f000 fc7b 	bl	d73fc <spark_process>
   d6b06:	f000 fae5 	bl	d70d4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6b0a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6b0c:	f000 faea 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6b10:	b280      	uxth	r0, r0
   d6b12:	1b40      	subs	r0, r0, r5
}
   d6b14:	42a0      	cmp	r0, r4
   d6b16:	bfd4      	ite	le
   d6b18:	2000      	movle	r0, #0
   d6b1a:	2001      	movgt	r0, #1
   d6b1c:	bd70      	pop	{r4, r5, r6, pc}
   d6b1e:	bf00      	nop
   d6b20:	2003e5ac 	.word	0x2003e5ac
   d6b24:	000186a0 	.word	0x000186a0
   d6b28:	2003e738 	.word	0x2003e738

000d6b2c <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6b2c:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6b2e:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d6b30:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6b32:	b94d      	cbnz	r5, d6b48 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6b34:	6840      	ldr	r0, [r0, #4]
   d6b36:	f000 fa6b 	bl	d7010 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d6b3a:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6b3c:	4629      	mov	r1, r5
   d6b3e:	7d18      	ldrb	r0, [r3, #20]
   d6b40:	f001 fb4b 	bl	d81da <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6b44:	2301      	movs	r3, #1
   d6b46:	7223      	strb	r3, [r4, #8]
  }
}
   d6b48:	bd38      	pop	{r3, r4, r5, pc}

000d6b4a <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d6b4a:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d6b4c:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d6b4e:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6b50:	b16b      	cbz	r3, d6b6e <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d6b52:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d6b54:	2101      	movs	r1, #1
   d6b56:	7d18      	ldrb	r0, [r3, #20]
   d6b58:	f001 fb3f 	bl	d81da <digitalWrite>
     m_spiDriver->send(data);
   d6b5c:	6860      	ldr	r0, [r4, #4]
   d6b5e:	21ff      	movs	r1, #255	; 0xff
   d6b60:	f000 fa88 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d6b64:	6860      	ldr	r0, [r4, #4]
   d6b66:	f000 fa67 	bl	d7038 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d6b6a:	2300      	movs	r3, #0
   d6b6c:	7223      	strb	r3, [r4, #8]
  }
}
   d6b6e:	bd10      	pop	{r4, pc}

000d6b70 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d6b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b72:	4604      	mov	r4, r0
   d6b74:	460d      	mov	r5, r1
   d6b76:	4616      	mov	r6, r2
   d6b78:	f000 fab4 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d6b7c:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d6b7e:	6860      	ldr	r0, [r4, #4]
   d6b80:	f000 fa5d 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d6b84:	28ff      	cmp	r0, #255	; 0xff
   d6b86:	7260      	strb	r0, [r4, #9]
   d6b88:	d10e      	bne.n	d6ba8 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d6b8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b8e:	4639      	mov	r1, r7
   d6b90:	4620      	mov	r0, r4
   d6b92:	f7ff ffa7 	bl	d6ae4 <_ZN9SdSpiCard10isTimedOutEtt>
   d6b96:	2800      	cmp	r0, #0
   d6b98:	d0f1      	beq.n	d6b7e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d6b9a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d6b9c:	4620      	mov	r0, r4
   d6b9e:	7023      	strb	r3, [r4, #0]
   d6ba0:	f7ff ffd3 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6ba4:	2000      	movs	r0, #0
}
   d6ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d6ba8:	28fe      	cmp	r0, #254	; 0xfe
   d6baa:	d001      	beq.n	d6bb0 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d6bac:	2350      	movs	r3, #80	; 0x50
   d6bae:	e7f5      	b.n	d6b9c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d6bb0:	6860      	ldr	r0, [r4, #4]
   d6bb2:	4632      	mov	r2, r6
   d6bb4:	4629      	mov	r1, r5
   d6bb6:	f000 fa47 	bl	d7048 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d6bba:	7260      	strb	r0, [r4, #9]
   d6bbc:	b108      	cbz	r0, d6bc2 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d6bbe:	2360      	movs	r3, #96	; 0x60
   d6bc0:	e7ec      	b.n	d6b9c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d6bc2:	6860      	ldr	r0, [r4, #4]
   d6bc4:	f000 fa3b 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
   d6bc8:	6860      	ldr	r0, [r4, #4]
   d6bca:	f000 fa38 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
   d6bce:	2001      	movs	r0, #1
   d6bd0:	e7e9      	b.n	d6ba6 <_ZN9SdSpiCard8readDataEPhj+0x36>

000d6bd2 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6bd2:	b570      	push	{r4, r5, r6, lr}
   d6bd4:	4604      	mov	r4, r0
   d6bd6:	460e      	mov	r6, r1
   d6bd8:	f000 fa84 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
   d6bdc:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6bde:	4632      	mov	r2, r6
   d6be0:	4629      	mov	r1, r5
   d6be2:	4620      	mov	r0, r4
   d6be4:	f7ff ff7e 	bl	d6ae4 <_ZN9SdSpiCard10isTimedOutEtt>
   d6be8:	b930      	cbnz	r0, d6bf8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6bea:	6860      	ldr	r0, [r4, #4]
   d6bec:	f000 fa27 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6bf0:	28ff      	cmp	r0, #255	; 0xff
   d6bf2:	d1f4      	bne.n	d6bde <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6bf4:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6bf6:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d6bf8:	2000      	movs	r0, #0
   d6bfa:	e7fc      	b.n	d6bf6 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d6bfc <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6bfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d6bfe:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6c00:	9201      	str	r2, [sp, #4]
   d6c02:	4604      	mov	r4, r0
   d6c04:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d6c06:	b90b      	cbnz	r3, d6c0c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6c08:	f7ff ff90 	bl	d6b2c <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d6c0c:	b125      	cbz	r5, d6c18 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d6c0e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6c12:	4620      	mov	r0, r4
   d6c14:	f7ff ffdd 	bl	d6bd2 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d6c18:	6860      	ldr	r0, [r4, #4]
   d6c1a:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6c1e:	f000 fa29 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
   d6c22:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d6c24:	af01      	add	r7, sp, #4
   d6c26:	5db9      	ldrb	r1, [r7, r6]
   d6c28:	6860      	ldr	r0, [r4, #4]
   d6c2a:	f000 fa23 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d6c2e:	3e01      	subs	r6, #1
   d6c30:	d2f9      	bcs.n	d6c26 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6c32:	2d00      	cmp	r5, #0
   d6c34:	6860      	ldr	r0, [r4, #4]
   d6c36:	bf0c      	ite	eq
   d6c38:	2195      	moveq	r1, #149	; 0x95
   d6c3a:	2187      	movne	r1, #135	; 0x87
   d6c3c:	f000 fa1a 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6c40:	6860      	ldr	r0, [r4, #4]
   d6c42:	f000 f9fc 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
   d6c46:	250b      	movs	r5, #11
   d6c48:	6860      	ldr	r0, [r4, #4]
   d6c4a:	f000 f9f8 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6c4e:	0603      	lsls	r3, r0, #24
   d6c50:	7260      	strb	r0, [r4, #9]
   d6c52:	d503      	bpl.n	d6c5c <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d6c54:	3d01      	subs	r5, #1
   d6c56:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6c5a:	d1f5      	bne.n	d6c48 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d6c5c:	b003      	add	sp, #12
   d6c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6c60 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6c60:	b570      	push	{r4, r5, r6, lr}
   d6c62:	4604      	mov	r4, r0
   d6c64:	460d      	mov	r5, r1
   d6c66:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d6c68:	2137      	movs	r1, #55	; 0x37
   d6c6a:	2200      	movs	r2, #0
   d6c6c:	f7ff ffc6 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6c70:	4632      	mov	r2, r6
   d6c72:	4629      	mov	r1, r5
   d6c74:	4620      	mov	r0, r4
  }
   d6c76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d6c7a:	f7ff bfbf 	b.w	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
	...

000d6c80 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6c84:	2500      	movs	r5, #0
   d6c86:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6c88:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6c8a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6c8c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6c8e:	4604      	mov	r4, r0
   d6c90:	4690      	mov	r8, r2
   d6c92:	461e      	mov	r6, r3
   d6c94:	f000 fa26 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d6c98:	4641      	mov	r1, r8
   d6c9a:	4607      	mov	r7, r0
   d6c9c:	6860      	ldr	r0, [r4, #4]
   d6c9e:	f000 f9bb 	bl	d7018 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6ca2:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d6ca4:	4a49      	ldr	r2, [pc, #292]	; (d6dcc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d6ca6:	721d      	strb	r5, [r3, #8]
   d6ca8:	2501      	movs	r5, #1
   d6caa:	60da      	str	r2, [r3, #12]
   d6cac:	821d      	strh	r5, [r3, #16]
  spiStart();
   d6cae:	4620      	mov	r0, r4
   d6cb0:	f7ff ff3c 	bl	d6b2c <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d6cb4:	6863      	ldr	r3, [r4, #4]
   d6cb6:	4629      	mov	r1, r5
   d6cb8:	7d18      	ldrb	r0, [r3, #20]
   d6cba:	f001 fa8e 	bl	d81da <digitalWrite>
   d6cbe:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d6cc0:	6860      	ldr	r0, [r4, #4]
   d6cc2:	21ff      	movs	r1, #255	; 0xff
   d6cc4:	3d01      	subs	r5, #1
   d6cc6:	f000 f9d5 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d6cca:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6cce:	d1f7      	bne.n	d6cc0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d6cd0:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6cd2:	4629      	mov	r1, r5
   d6cd4:	7d18      	ldrb	r0, [r3, #20]
   d6cd6:	f001 fa80 	bl	d81da <digitalWrite>
  }
   d6cda:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6cdc:	2200      	movs	r2, #0
   d6cde:	4611      	mov	r1, r2
   d6ce0:	4620      	mov	r0, r4
   d6ce2:	f7ff ff8b 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6ce6:	2801      	cmp	r0, #1
   d6ce8:	4680      	mov	r8, r0
   d6cea:	d018      	beq.n	d6d1e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d6cec:	3d01      	subs	r5, #1
   d6cee:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6cf2:	d107      	bne.n	d6d04 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d6cf4:	2320      	movs	r3, #32
  spiStop();
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	7023      	strb	r3, [r4, #0]
   d6cfa:	f7ff ff26 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6cfe:	2000      	movs	r0, #0
}
   d6d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d6d04:	6860      	ldr	r0, [r4, #4]
   d6d06:	21fd      	movs	r1, #253	; 0xfd
   d6d08:	f000 f9b4 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
   d6d0c:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d6d10:	6860      	ldr	r0, [r4, #4]
   d6d12:	f000 f994 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d6d16:	f1b8 0801 	subs.w	r8, r8, #1
   d6d1a:	d1f9      	bne.n	d6d10 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d6d1c:	e7de      	b.n	d6cdc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6d1e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6d22:	2108      	movs	r1, #8
   d6d24:	4620      	mov	r0, r4
   d6d26:	f7ff ff69 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6d2a:	2805      	cmp	r0, #5
   d6d2c:	d114      	bne.n	d6d58 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d6d2e:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6d32:	2500      	movs	r5, #0
   d6d34:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6d36:	462a      	mov	r2, r5
   d6d38:	2129      	movs	r1, #41	; 0x29
   d6d3a:	4620      	mov	r0, r4
   d6d3c:	f7ff ff90 	bl	d6c60 <_ZN9SdSpiCard8cardAcmdEhm>
   d6d40:	4602      	mov	r2, r0
   d6d42:	b1d8      	cbz	r0, d6d7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6d44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6d48:	4639      	mov	r1, r7
   d6d4a:	4620      	mov	r0, r4
   d6d4c:	f7ff feca 	bl	d6ae4 <_ZN9SdSpiCard10isTimedOutEtt>
   d6d50:	2800      	cmp	r0, #0
   d6d52:	d0f0      	beq.n	d6d36 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d6d54:	2343      	movs	r3, #67	; 0x43
   d6d56:	e7ce      	b.n	d6cf6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d6d58:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d6d5a:	6860      	ldr	r0, [r4, #4]
   d6d5c:	f000 f96f 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
   d6d60:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d6d62:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6d66:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d6d68:	d1f7      	bne.n	d6d5a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d6d6a:	28aa      	cmp	r0, #170	; 0xaa
   d6d6c:	d104      	bne.n	d6d78 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d6d6e:	2302      	movs	r3, #2
   d6d70:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6d72:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d6d76:	e7dd      	b.n	d6d34 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d6d78:	2325      	movs	r3, #37	; 0x25
   d6d7a:	e7bc      	b.n	d6cf6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d6d7c:	7aa3      	ldrb	r3, [r4, #10]
   d6d7e:	2b02      	cmp	r3, #2
   d6d80:	d118      	bne.n	d6db4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d6d82:	213a      	movs	r1, #58	; 0x3a
   d6d84:	4620      	mov	r0, r4
   d6d86:	f7ff ff39 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6d8a:	b108      	cbz	r0, d6d90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d6d8c:	2337      	movs	r3, #55	; 0x37
   d6d8e:	e7b2      	b.n	d6cf6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d6d90:	6860      	ldr	r0, [r4, #4]
   d6d92:	f000 f954 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6d96:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6d9a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d6d9c:	bf04      	itt	eq
   d6d9e:	2303      	moveq	r3, #3
   d6da0:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d6da2:	6860      	ldr	r0, [r4, #4]
   d6da4:	f000 f94b 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
   d6da8:	6860      	ldr	r0, [r4, #4]
   d6daa:	f000 f948 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
   d6dae:	6860      	ldr	r0, [r4, #4]
   d6db0:	f000 f945 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d6db4:	4620      	mov	r0, r4
   d6db6:	f7ff fec8 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6dba:	6863      	ldr	r3, [r4, #4]
   d6dbc:	7930      	ldrb	r0, [r6, #4]
   d6dbe:	68b1      	ldr	r1, [r6, #8]
   d6dc0:	89b2      	ldrh	r2, [r6, #12]
   d6dc2:	821a      	strh	r2, [r3, #16]
   d6dc4:	7218      	strb	r0, [r3, #8]
   d6dc6:	60d9      	str	r1, [r3, #12]
  return true;
   d6dc8:	2001      	movs	r0, #1
   d6dca:	e799      	b.n	d6d00 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d6dcc:	0003d090 	.word	0x0003d090

000d6dd0 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6dd0:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6dd2:	7a83      	ldrb	r3, [r0, #10]
   d6dd4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6dd6:	bf18      	it	ne
   d6dd8:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6dda:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d6ddc:	460a      	mov	r2, r1
   d6dde:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6de0:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d6de2:	f7ff ff0b 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6de6:	b130      	cbz	r0, d6df6 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d6de8:	2330      	movs	r3, #48	; 0x30
   d6dea:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6dec:	4620      	mov	r0, r4
   d6dee:	f7ff feac 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6df2:	2500      	movs	r5, #0
   d6df4:	e00b      	b.n	d6e0e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d6df6:	4629      	mov	r1, r5
   d6df8:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	f7ff feb7 	bl	d6b70 <_ZN9SdSpiCard8readDataEPhj>
   d6e02:	4605      	mov	r5, r0
   d6e04:	2800      	cmp	r0, #0
   d6e06:	d0f1      	beq.n	d6dec <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d6e08:	4620      	mov	r0, r4
   d6e0a:	f7ff fe9e 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
}
   d6e0e:	4628      	mov	r0, r5
   d6e10:	bd38      	pop	{r3, r4, r5, pc}

000d6e12 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6e12:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6e14:	7a83      	ldrb	r3, [r0, #10]
   d6e16:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6e18:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d6e1a:	bf18      	it	ne
   d6e1c:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d6e1e:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6e20:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d6e22:	f7ff feeb 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6e26:	b130      	cbz	r0, d6e36 <_ZN9SdSpiCard9readStartEm+0x24>
   d6e28:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d6e2a:	4620      	mov	r0, r4
   d6e2c:	7023      	strb	r3, [r4, #0]
   d6e2e:	f7ff fe8c 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6e32:	2000      	movs	r0, #0
}
   d6e34:	bd10      	pop	{r4, pc}
  return true;
   d6e36:	2001      	movs	r0, #1
   d6e38:	e7fc      	b.n	d6e34 <_ZN9SdSpiCard9readStartEm+0x22>

000d6e3a <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d6e3a:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6e3c:	2200      	movs	r2, #0
   d6e3e:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d6e40:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6e42:	f7ff fedb 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6e46:	b130      	cbz	r0, d6e56 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6e48:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d6e4a:	4620      	mov	r0, r4
   d6e4c:	7023      	strb	r3, [r4, #0]
   d6e4e:	f7ff fe7c 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6e52:	2000      	movs	r0, #0
}
   d6e54:	bd10      	pop	{r4, pc}
  spiStop();
   d6e56:	4620      	mov	r0, r4
   d6e58:	f7ff fe77 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6e5c:	2001      	movs	r0, #1
   d6e5e:	e7f9      	b.n	d6e54 <_ZN9SdSpiCard8readStopEv+0x1a>

000d6e60 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e62:	4604      	mov	r4, r0
   d6e64:	4616      	mov	r6, r2
   d6e66:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6e68:	f7ff ffd3 	bl	d6e12 <_ZN9SdSpiCard9readStartEm>
   d6e6c:	b168      	cbz	r0, d6e8a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d6e6e:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6e70:	b2ab      	uxth	r3, r5
   d6e72:	429f      	cmp	r7, r3
   d6e74:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d6e78:	d909      	bls.n	d6e8e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d6e7a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6e7e:	4620      	mov	r0, r4
   d6e80:	f7ff fe76 	bl	d6b70 <_ZN9SdSpiCard8readDataEPhj>
   d6e84:	3501      	adds	r5, #1
   d6e86:	2800      	cmp	r0, #0
   d6e88:	d1f2      	bne.n	d6e70 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d6e8a:	2000      	movs	r0, #0
   d6e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d6e8e:	4620      	mov	r0, r4
}
   d6e90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d6e94:	f7ff bfd1 	b.w	d6e3a <_ZN9SdSpiCard8readStopEv>

000d6e98 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6e98:	b538      	push	{r3, r4, r5, lr}
   d6e9a:	4604      	mov	r4, r0
   d6e9c:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d6e9e:	6840      	ldr	r0, [r0, #4]
   d6ea0:	f000 f8e8 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d6ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6ea8:	6860      	ldr	r0, [r4, #4]
   d6eaa:	4629      	mov	r1, r5
   d6eac:	f000 f8e6 	bl	d707c <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d6eb0:	6860      	ldr	r0, [r4, #4]
   d6eb2:	21ff      	movs	r1, #255	; 0xff
   d6eb4:	f000 f8de 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
   d6eb8:	6860      	ldr	r0, [r4, #4]
   d6eba:	21ff      	movs	r1, #255	; 0xff
   d6ebc:	f000 f8da 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6ec0:	6860      	ldr	r0, [r4, #4]
   d6ec2:	f000 f8bc 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6ec6:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6ec8:	f000 001f 	and.w	r0, r0, #31
   d6ecc:	2805      	cmp	r0, #5
   d6ece:	d006      	beq.n	d6ede <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d6ed0:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6ed2:	4620      	mov	r0, r4
   d6ed4:	7023      	strb	r3, [r4, #0]
   d6ed6:	f7ff fe38 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6eda:	2000      	movs	r0, #0
}
   d6edc:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d6ede:	2001      	movs	r0, #1
   d6ee0:	e7fc      	b.n	d6edc <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d6ee2 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6ee2:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6ee4:	7a83      	ldrb	r3, [r0, #10]
   d6ee6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6ee8:	bf18      	it	ne
   d6eea:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6eec:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d6eee:	460a      	mov	r2, r1
   d6ef0:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6ef2:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d6ef4:	f7ff fe82 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6ef8:	4606      	mov	r6, r0
   d6efa:	b130      	cbz	r0, d6f0a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d6efc:	2332      	movs	r3, #50	; 0x32
   d6efe:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6f00:	4620      	mov	r0, r4
   d6f02:	f7ff fe22 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6f06:	2500      	movs	r5, #0
   d6f08:	e01f      	b.n	d6f4a <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d6f0a:	462a      	mov	r2, r5
   d6f0c:	21fe      	movs	r1, #254	; 0xfe
   d6f0e:	4620      	mov	r0, r4
   d6f10:	f7ff ffc2 	bl	d6e98 <_ZN9SdSpiCard9writeDataEhPKh>
   d6f14:	2800      	cmp	r0, #0
   d6f16:	d0f3      	beq.n	d6f00 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6f18:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6f1c:	4620      	mov	r0, r4
   d6f1e:	f7ff fe58 	bl	d6bd2 <_ZN9SdSpiCard11waitNotBusyEt>
   d6f22:	4605      	mov	r5, r0
   d6f24:	b908      	cbnz	r0, d6f2a <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d6f26:	235a      	movs	r3, #90	; 0x5a
   d6f28:	e7e9      	b.n	d6efe <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6f2a:	4632      	mov	r2, r6
   d6f2c:	210d      	movs	r1, #13
   d6f2e:	4620      	mov	r0, r4
   d6f30:	f7ff fe64 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6f34:	b108      	cbz	r0, d6f3a <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d6f36:	2329      	movs	r3, #41	; 0x29
   d6f38:	e7e1      	b.n	d6efe <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d6f3a:	6860      	ldr	r0, [r4, #4]
   d6f3c:	f000 f87f 	bl	d703e <_ZN14SdSpiAltDriver7receiveEv>
   d6f40:	2800      	cmp	r0, #0
   d6f42:	d1f8      	bne.n	d6f36 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d6f44:	4620      	mov	r0, r4
   d6f46:	f7ff fe00 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
}
   d6f4a:	4628      	mov	r0, r5
   d6f4c:	bd70      	pop	{r4, r5, r6, pc}

000d6f4e <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d6f4e:	b513      	push	{r0, r1, r4, lr}
   d6f50:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6f52:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d6f56:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6f58:	f7ff fe3b 	bl	d6bd2 <_ZN9SdSpiCard11waitNotBusyEt>
   d6f5c:	9a01      	ldr	r2, [sp, #4]
   d6f5e:	b930      	cbnz	r0, d6f6e <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d6f60:	235b      	movs	r3, #91	; 0x5b
   d6f62:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6f64:	4620      	mov	r0, r4
   d6f66:	f7ff fdf0 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6f6a:	2000      	movs	r0, #0
   d6f6c:	e005      	b.n	d6f7a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6f6e:	21fc      	movs	r1, #252	; 0xfc
   d6f70:	4620      	mov	r0, r4
   d6f72:	f7ff ff91 	bl	d6e98 <_ZN9SdSpiCard9writeDataEhPKh>
   d6f76:	2800      	cmp	r0, #0
   d6f78:	d0f4      	beq.n	d6f64 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d6f7a:	b002      	add	sp, #8
   d6f7c:	bd10      	pop	{r4, pc}

000d6f7e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6f7e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d6f80:	7a83      	ldrb	r3, [r0, #10]
   d6f82:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6f84:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d6f86:	bf18      	it	ne
   d6f88:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d6f8a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d6f8c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d6f8e:	f7ff fe35 	bl	d6bfc <_ZN9SdSpiCard11cardCommandEhm>
   d6f92:	b130      	cbz	r0, d6fa2 <_ZN9SdSpiCard10writeStartEm+0x24>
   d6f94:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6f96:	4620      	mov	r0, r4
   d6f98:	7023      	strb	r3, [r4, #0]
   d6f9a:	f7ff fdd6 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6f9e:	2000      	movs	r0, #0
}
   d6fa0:	bd10      	pop	{r4, pc}
  return true;
   d6fa2:	2001      	movs	r0, #1
   d6fa4:	e7fc      	b.n	d6fa0 <_ZN9SdSpiCard10writeStartEm+0x22>

000d6fa6 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d6fa6:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6fa8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d6fac:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6fae:	f7ff fe10 	bl	d6bd2 <_ZN9SdSpiCard11waitNotBusyEt>
   d6fb2:	4605      	mov	r5, r0
   d6fb4:	b930      	cbnz	r0, d6fc4 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d6fb6:	2356      	movs	r3, #86	; 0x56
   d6fb8:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d6fba:	4620      	mov	r0, r4
   d6fbc:	f7ff fdc5 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d6fc0:	4628      	mov	r0, r5
   d6fc2:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d6fc4:	6860      	ldr	r0, [r4, #4]
   d6fc6:	21fd      	movs	r1, #253	; 0xfd
   d6fc8:	f000 f854 	bl	d7074 <_ZN14SdSpiAltDriver4sendEh>
   d6fcc:	e7f5      	b.n	d6fba <_ZN9SdSpiCard9writeStopEv+0x14>

000d6fce <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d6fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6fd0:	4604      	mov	r4, r0
   d6fd2:	4616      	mov	r6, r2
   d6fd4:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d6fd6:	f7ff ffd2 	bl	d6f7e <_ZN9SdSpiCard10writeStartEm>
   d6fda:	b170      	cbz	r0, d6ffa <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d6fdc:	2500      	movs	r5, #0
   d6fde:	42bd      	cmp	r5, r7
   d6fe0:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d6fe4:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d6fe6:	d004      	beq.n	d6ff2 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d6fe8:	f7ff ffb1 	bl	d6f4e <_ZN9SdSpiCard9writeDataEPKh>
   d6fec:	b128      	cbz	r0, d6ffa <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d6fee:	3501      	adds	r5, #1
   d6ff0:	e7f5      	b.n	d6fde <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d6ff2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d6ff6:	f7ff bfd6 	b.w	d6fa6 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d6ffa:	4620      	mov	r0, r4
   d6ffc:	f7ff fda5 	bl	d6b4a <_ZN9SdSpiCard7spiStopEv>
}
   d7000:	2000      	movs	r0, #0
   d7002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7004 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7004:	4b01      	ldr	r3, [pc, #4]	; (d700c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7006:	2201      	movs	r2, #1
   d7008:	701a      	strb	r2, [r3, #0]
}
   d700a:	4770      	bx	lr
   d700c:	2003e5b0 	.word	0x2003e5b0

000d7010 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d7010:	1d01      	adds	r1, r0, #4
   d7012:	6800      	ldr	r0, [r0, #0]
   d7014:	f000 be10 	b.w	d7c38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d7018 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d7018:	b510      	push	{r4, lr}
   d701a:	4604      	mov	r4, r0
  m_csPin = csPin;
   d701c:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d701e:	6800      	ldr	r0, [r0, #0]
   d7020:	f000 fde0 	bl	d7be4 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d7024:	7d20      	ldrb	r0, [r4, #20]
   d7026:	2101      	movs	r1, #1
   d7028:	f001 f8c6 	bl	d81b8 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d702c:	7d20      	ldrb	r0, [r4, #20]
   d702e:	2101      	movs	r1, #1
}
   d7030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d7034:	f001 b8d1 	b.w	d81da <digitalWrite>

000d7038 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d7038:	6800      	ldr	r0, [r0, #0]
   d703a:	f000 bde4 	b.w	d7c06 <_ZN8SPIClass14endTransactionEv>

000d703e <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d703e:	6800      	ldr	r0, [r0, #0]
   d7040:	21ff      	movs	r1, #255	; 0xff
   d7042:	f000 be67 	b.w	d7d14 <_ZN8SPIClass8transferEh>
	...

000d7048 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d7048:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d704a:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d704c:	4a07      	ldr	r2, [pc, #28]	; (d706c <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d704e:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7050:	2500      	movs	r5, #0
   d7052:	4c07      	ldr	r4, [pc, #28]	; (d7070 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7054:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d7056:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d7058:	460a      	mov	r2, r1
   d705a:	4629      	mov	r1, r5
   d705c:	f000 fe60 	bl	d7d20 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d7060:	7823      	ldrb	r3, [r4, #0]
   d7062:	2b00      	cmp	r3, #0
   d7064:	d0fc      	beq.n	d7060 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d7066:	2000      	movs	r0, #0
   d7068:	b003      	add	sp, #12
   d706a:	bd30      	pop	{r4, r5, pc}
   d706c:	000d7005 	.word	0x000d7005
   d7070:	2003e5b0 	.word	0x2003e5b0

000d7074 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7074:	6800      	ldr	r0, [r0, #0]
   d7076:	f000 be4d 	b.w	d7d14 <_ZN8SPIClass8transferEh>
	...

000d707c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d707c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d707e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7080:	4a06      	ldr	r2, [pc, #24]	; (d709c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7082:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7084:	2500      	movs	r5, #0
   d7086:	4c06      	ldr	r4, [pc, #24]	; (d70a0 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7088:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d708a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d708c:	462a      	mov	r2, r5
   d708e:	f000 fe47 	bl	d7d20 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d7092:	7823      	ldrb	r3, [r4, #0]
   d7094:	2b00      	cmp	r3, #0
   d7096:	d0fc      	beq.n	d7092 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7098:	b003      	add	sp, #12
   d709a:	bd30      	pop	{r4, r5, pc}
   d709c:	000d7005 	.word	0x000d7005
   d70a0:	2003e5b0 	.word	0x2003e5b0

000d70a4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d70a4:	b508      	push	{r3, lr}
   d70a6:	4b02      	ldr	r3, [pc, #8]	; (d70b0 <os_mutex_recursive_create+0xc>)
   d70a8:	681b      	ldr	r3, [r3, #0]
   d70aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d70ac:	9301      	str	r3, [sp, #4]
   d70ae:	bd08      	pop	{r3, pc}
   d70b0:	00030248 	.word	0x00030248

000d70b4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d70b4:	b508      	push	{r3, lr}
   d70b6:	4b02      	ldr	r3, [pc, #8]	; (d70c0 <HAL_RNG_GetRandomNumber+0xc>)
   d70b8:	681b      	ldr	r3, [r3, #0]
   d70ba:	685b      	ldr	r3, [r3, #4]
   d70bc:	9301      	str	r3, [sp, #4]
   d70be:	bd08      	pop	{r3, pc}
   d70c0:	00030218 	.word	0x00030218

000d70c4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d70c4:	b508      	push	{r3, lr}
   d70c6:	4b02      	ldr	r3, [pc, #8]	; (d70d0 <HAL_Delay_Microseconds+0xc>)
   d70c8:	681b      	ldr	r3, [r3, #0]
   d70ca:	68db      	ldr	r3, [r3, #12]
   d70cc:	9301      	str	r3, [sp, #4]
   d70ce:	bd08      	pop	{r3, pc}
   d70d0:	00030218 	.word	0x00030218

000d70d4 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d70d4:	b508      	push	{r3, lr}
   d70d6:	4b02      	ldr	r3, [pc, #8]	; (d70e0 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d70d8:	681b      	ldr	r3, [r3, #0]
   d70da:	691b      	ldr	r3, [r3, #16]
   d70dc:	9301      	str	r3, [sp, #4]
   d70de:	bd08      	pop	{r3, pc}
   d70e0:	00030218 	.word	0x00030218

000d70e4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d70e4:	b508      	push	{r3, lr}
   d70e6:	4b02      	ldr	r3, [pc, #8]	; (d70f0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d70e8:	681b      	ldr	r3, [r3, #0]
   d70ea:	695b      	ldr	r3, [r3, #20]
   d70ec:	9301      	str	r3, [sp, #4]
   d70ee:	bd08      	pop	{r3, pc}
   d70f0:	00030218 	.word	0x00030218

000d70f4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d70f4:	b508      	push	{r3, lr}
   d70f6:	4b02      	ldr	r3, [pc, #8]	; (d7100 <HAL_Pin_Mode+0xc>)
   d70f8:	681b      	ldr	r3, [r3, #0]
   d70fa:	689b      	ldr	r3, [r3, #8]
   d70fc:	9301      	str	r3, [sp, #4]
   d70fe:	bd08      	pop	{r3, pc}
   d7100:	0003022c 	.word	0x0003022c

000d7104 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7104:	b508      	push	{r3, lr}
   d7106:	4b02      	ldr	r3, [pc, #8]	; (d7110 <HAL_Get_Pin_Mode+0xc>)
   d7108:	681b      	ldr	r3, [r3, #0]
   d710a:	68db      	ldr	r3, [r3, #12]
   d710c:	9301      	str	r3, [sp, #4]
   d710e:	bd08      	pop	{r3, pc}
   d7110:	0003022c 	.word	0x0003022c

000d7114 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d7114:	b508      	push	{r3, lr}
   d7116:	4b02      	ldr	r3, [pc, #8]	; (d7120 <HAL_GPIO_Write+0xc>)
   d7118:	681b      	ldr	r3, [r3, #0]
   d711a:	691b      	ldr	r3, [r3, #16]
   d711c:	9301      	str	r3, [sp, #4]
   d711e:	bd08      	pop	{r3, pc}
   d7120:	0003022c 	.word	0x0003022c

000d7124 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d7124:	b508      	push	{r3, lr}
   d7126:	4b02      	ldr	r3, [pc, #8]	; (d7130 <hal_i2c_begin+0xc>)
   d7128:	681b      	ldr	r3, [r3, #0]
   d712a:	68db      	ldr	r3, [r3, #12]
   d712c:	9301      	str	r3, [sp, #4]
   d712e:	bd08      	pop	{r3, pc}
   d7130:	00030228 	.word	0x00030228

000d7134 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <hal_i2c_begin_transmission+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	699b      	ldr	r3, [r3, #24]
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	00030228 	.word	0x00030228

000d7144 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <hal_i2c_end_transmission+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	69db      	ldr	r3, [r3, #28]
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	00030228 	.word	0x00030228

000d7154 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <hal_i2c_write+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	6a1b      	ldr	r3, [r3, #32]
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	00030228 	.word	0x00030228

000d7164 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <hal_i2c_available+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	00030228 	.word	0x00030228

000d7174 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <hal_i2c_read+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	00030228 	.word	0x00030228

000d7184 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <hal_i2c_peek+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	00030228 	.word	0x00030228

000d7194 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <hal_i2c_flush+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	00030228 	.word	0x00030228

000d71a4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d71a4:	b508      	push	{r3, lr}
   d71a6:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <hal_i2c_is_enabled+0xc>)
   d71a8:	681b      	ldr	r3, [r3, #0]
   d71aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d71ac:	9301      	str	r3, [sp, #4]
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	00030228 	.word	0x00030228

000d71b4 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d71b4:	b508      	push	{r3, lr}
   d71b6:	4b02      	ldr	r3, [pc, #8]	; (d71c0 <hal_i2c_init+0xc>)
   d71b8:	681b      	ldr	r3, [r3, #0]
   d71ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d71bc:	9301      	str	r3, [sp, #4]
   d71be:	bd08      	pop	{r3, pc}
   d71c0:	00030228 	.word	0x00030228

000d71c4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d71c4:	b508      	push	{r3, lr}
   d71c6:	4b02      	ldr	r3, [pc, #8]	; (d71d0 <hal_i2c_request_ex+0xc>)
   d71c8:	681b      	ldr	r3, [r3, #0]
   d71ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d71cc:	9301      	str	r3, [sp, #4]
   d71ce:	bd08      	pop	{r3, pc}
   d71d0:	00030228 	.word	0x00030228

000d71d4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d71d4:	b508      	push	{r3, lr}
   d71d6:	4b02      	ldr	r3, [pc, #8]	; (d71e0 <inet_inet_ntop+0xc>)
   d71d8:	681b      	ldr	r3, [r3, #0]
   d71da:	695b      	ldr	r3, [r3, #20]
   d71dc:	9301      	str	r3, [sp, #4]
   d71de:	bd08      	pop	{r3, pc}
   d71e0:	00030264 	.word	0x00030264

000d71e4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d71e4:	b508      	push	{r3, lr}
   d71e6:	4b02      	ldr	r3, [pc, #8]	; (d71f0 <netdb_freeaddrinfo+0xc>)
   d71e8:	681b      	ldr	r3, [r3, #0]
   d71ea:	689b      	ldr	r3, [r3, #8]
   d71ec:	9301      	str	r3, [sp, #4]
   d71ee:	bd08      	pop	{r3, pc}
   d71f0:	00030268 	.word	0x00030268

000d71f4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d71f4:	b508      	push	{r3, lr}
   d71f6:	4b02      	ldr	r3, [pc, #8]	; (d7200 <netdb_getaddrinfo+0xc>)
   d71f8:	681b      	ldr	r3, [r3, #0]
   d71fa:	68db      	ldr	r3, [r3, #12]
   d71fc:	9301      	str	r3, [sp, #4]
   d71fe:	bd08      	pop	{r3, pc}
   d7200:	00030268 	.word	0x00030268

000d7204 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7204:	b508      	push	{r3, lr}
   d7206:	4b02      	ldr	r3, [pc, #8]	; (d7210 <hal_spi_begin+0xc>)
   d7208:	681b      	ldr	r3, [r3, #0]
   d720a:	681b      	ldr	r3, [r3, #0]
   d720c:	9301      	str	r3, [sp, #4]
   d720e:	bd08      	pop	{r3, pc}
   d7210:	00030230 	.word	0x00030230

000d7214 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d7214:	b508      	push	{r3, lr}
   d7216:	4b02      	ldr	r3, [pc, #8]	; (d7220 <hal_spi_transfer+0xc>)
   d7218:	681b      	ldr	r3, [r3, #0]
   d721a:	695b      	ldr	r3, [r3, #20]
   d721c:	9301      	str	r3, [sp, #4]
   d721e:	bd08      	pop	{r3, pc}
   d7220:	00030230 	.word	0x00030230

000d7224 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d7224:	b508      	push	{r3, lr}
   d7226:	4b02      	ldr	r3, [pc, #8]	; (d7230 <hal_spi_init+0xc>)
   d7228:	681b      	ldr	r3, [r3, #0]
   d722a:	69db      	ldr	r3, [r3, #28]
   d722c:	9301      	str	r3, [sp, #4]
   d722e:	bd08      	pop	{r3, pc}
   d7230:	00030230 	.word	0x00030230

000d7234 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d7234:	b508      	push	{r3, lr}
   d7236:	4b02      	ldr	r3, [pc, #8]	; (d7240 <hal_spi_is_enabled+0xc>)
   d7238:	681b      	ldr	r3, [r3, #0]
   d723a:	6a1b      	ldr	r3, [r3, #32]
   d723c:	9301      	str	r3, [sp, #4]
   d723e:	bd08      	pop	{r3, pc}
   d7240:	00030230 	.word	0x00030230

000d7244 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d7244:	b508      	push	{r3, lr}
   d7246:	4b02      	ldr	r3, [pc, #8]	; (d7250 <hal_spi_info+0xc>)
   d7248:	681b      	ldr	r3, [r3, #0]
   d724a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d724c:	9301      	str	r3, [sp, #4]
   d724e:	bd08      	pop	{r3, pc}
   d7250:	00030230 	.word	0x00030230

000d7254 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d7254:	b508      	push	{r3, lr}
   d7256:	4b02      	ldr	r3, [pc, #8]	; (d7260 <hal_spi_transfer_dma+0xc>)
   d7258:	681b      	ldr	r3, [r3, #0]
   d725a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d725c:	9301      	str	r3, [sp, #4]
   d725e:	bd08      	pop	{r3, pc}
   d7260:	00030230 	.word	0x00030230

000d7264 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d7264:	b508      	push	{r3, lr}
   d7266:	4b02      	ldr	r3, [pc, #8]	; (d7270 <hal_spi_transfer_dma_status+0xc>)
   d7268:	681b      	ldr	r3, [r3, #0]
   d726a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d726c:	9301      	str	r3, [sp, #4]
   d726e:	bd08      	pop	{r3, pc}
   d7270:	00030230 	.word	0x00030230

000d7274 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7274:	b508      	push	{r3, lr}
   d7276:	4b02      	ldr	r3, [pc, #8]	; (d7280 <hal_spi_set_settings+0xc>)
   d7278:	681b      	ldr	r3, [r3, #0]
   d727a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d727c:	9301      	str	r3, [sp, #4]
   d727e:	bd08      	pop	{r3, pc}
   d7280:	00030230 	.word	0x00030230

000d7284 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7284:	b508      	push	{r3, lr}
   d7286:	4b02      	ldr	r3, [pc, #8]	; (d7290 <hal_spi_acquire+0xc>)
   d7288:	681b      	ldr	r3, [r3, #0]
   d728a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d728c:	9301      	str	r3, [sp, #4]
   d728e:	bd08      	pop	{r3, pc}
   d7290:	00030230 	.word	0x00030230

000d7294 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7294:	b508      	push	{r3, lr}
   d7296:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <hal_spi_release+0xc>)
   d7298:	681b      	ldr	r3, [r3, #0]
   d729a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d729c:	9301      	str	r3, [sp, #4]
   d729e:	bd08      	pop	{r3, pc}
   d72a0:	00030230 	.word	0x00030230

000d72a4 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d72a4:	b508      	push	{r3, lr}
   d72a6:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <hal_usart_init+0xc>)
   d72a8:	681b      	ldr	r3, [r3, #0]
   d72aa:	681b      	ldr	r3, [r3, #0]
   d72ac:	9301      	str	r3, [sp, #4]
   d72ae:	bd08      	pop	{r3, pc}
   d72b0:	0003023c 	.word	0x0003023c

000d72b4 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d72b4:	b508      	push	{r3, lr}
   d72b6:	4b02      	ldr	r3, [pc, #8]	; (d72c0 <hal_usart_write+0xc>)
   d72b8:	681b      	ldr	r3, [r3, #0]
   d72ba:	68db      	ldr	r3, [r3, #12]
   d72bc:	9301      	str	r3, [sp, #4]
   d72be:	bd08      	pop	{r3, pc}
   d72c0:	0003023c 	.word	0x0003023c

000d72c4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d72c4:	b508      	push	{r3, lr}
   d72c6:	4b02      	ldr	r3, [pc, #8]	; (d72d0 <hal_usart_available+0xc>)
   d72c8:	681b      	ldr	r3, [r3, #0]
   d72ca:	691b      	ldr	r3, [r3, #16]
   d72cc:	9301      	str	r3, [sp, #4]
   d72ce:	bd08      	pop	{r3, pc}
   d72d0:	0003023c 	.word	0x0003023c

000d72d4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d72d4:	b508      	push	{r3, lr}
   d72d6:	4b02      	ldr	r3, [pc, #8]	; (d72e0 <hal_usart_read+0xc>)
   d72d8:	681b      	ldr	r3, [r3, #0]
   d72da:	695b      	ldr	r3, [r3, #20]
   d72dc:	9301      	str	r3, [sp, #4]
   d72de:	bd08      	pop	{r3, pc}
   d72e0:	0003023c 	.word	0x0003023c

000d72e4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d72e4:	b508      	push	{r3, lr}
   d72e6:	4b02      	ldr	r3, [pc, #8]	; (d72f0 <hal_usart_peek+0xc>)
   d72e8:	681b      	ldr	r3, [r3, #0]
   d72ea:	699b      	ldr	r3, [r3, #24]
   d72ec:	9301      	str	r3, [sp, #4]
   d72ee:	bd08      	pop	{r3, pc}
   d72f0:	0003023c 	.word	0x0003023c

000d72f4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d72f4:	b508      	push	{r3, lr}
   d72f6:	4b02      	ldr	r3, [pc, #8]	; (d7300 <hal_usart_flush+0xc>)
   d72f8:	681b      	ldr	r3, [r3, #0]
   d72fa:	69db      	ldr	r3, [r3, #28]
   d72fc:	9301      	str	r3, [sp, #4]
   d72fe:	bd08      	pop	{r3, pc}
   d7300:	0003023c 	.word	0x0003023c

000d7304 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7304:	b508      	push	{r3, lr}
   d7306:	4b02      	ldr	r3, [pc, #8]	; (d7310 <hal_usart_is_enabled+0xc>)
   d7308:	681b      	ldr	r3, [r3, #0]
   d730a:	6a1b      	ldr	r3, [r3, #32]
   d730c:	9301      	str	r3, [sp, #4]
   d730e:	bd08      	pop	{r3, pc}
   d7310:	0003023c 	.word	0x0003023c

000d7314 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d7314:	b508      	push	{r3, lr}
   d7316:	4b02      	ldr	r3, [pc, #8]	; (d7320 <hal_usart_available_data_for_write+0xc>)
   d7318:	681b      	ldr	r3, [r3, #0]
   d731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d731c:	9301      	str	r3, [sp, #4]
   d731e:	bd08      	pop	{r3, pc}
   d7320:	0003023c 	.word	0x0003023c

000d7324 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d7324:	b508      	push	{r3, lr}
   d7326:	4b02      	ldr	r3, [pc, #8]	; (d7330 <HAL_USB_USART_Init+0xc>)
   d7328:	681b      	ldr	r3, [r3, #0]
   d732a:	681b      	ldr	r3, [r3, #0]
   d732c:	9301      	str	r3, [sp, #4]
   d732e:	bd08      	pop	{r3, pc}
   d7330:	0003024c 	.word	0x0003024c

000d7334 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d7334:	b508      	push	{r3, lr}
   d7336:	4b02      	ldr	r3, [pc, #8]	; (d7340 <HAL_USB_USART_Begin+0xc>)
   d7338:	681b      	ldr	r3, [r3, #0]
   d733a:	685b      	ldr	r3, [r3, #4]
   d733c:	9301      	str	r3, [sp, #4]
   d733e:	bd08      	pop	{r3, pc}
   d7340:	0003024c 	.word	0x0003024c

000d7344 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d7344:	b508      	push	{r3, lr}
   d7346:	4b02      	ldr	r3, [pc, #8]	; (d7350 <HAL_USB_USART_Available_Data+0xc>)
   d7348:	681b      	ldr	r3, [r3, #0]
   d734a:	691b      	ldr	r3, [r3, #16]
   d734c:	9301      	str	r3, [sp, #4]
   d734e:	bd08      	pop	{r3, pc}
   d7350:	0003024c 	.word	0x0003024c

000d7354 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d7354:	b508      	push	{r3, lr}
   d7356:	4b02      	ldr	r3, [pc, #8]	; (d7360 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d7358:	681b      	ldr	r3, [r3, #0]
   d735a:	695b      	ldr	r3, [r3, #20]
   d735c:	9301      	str	r3, [sp, #4]
   d735e:	bd08      	pop	{r3, pc}
   d7360:	0003024c 	.word	0x0003024c

000d7364 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7364:	b508      	push	{r3, lr}
   d7366:	4b02      	ldr	r3, [pc, #8]	; (d7370 <HAL_USB_USART_Receive_Data+0xc>)
   d7368:	681b      	ldr	r3, [r3, #0]
   d736a:	699b      	ldr	r3, [r3, #24]
   d736c:	9301      	str	r3, [sp, #4]
   d736e:	bd08      	pop	{r3, pc}
   d7370:	0003024c 	.word	0x0003024c

000d7374 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7374:	b508      	push	{r3, lr}
   d7376:	4b02      	ldr	r3, [pc, #8]	; (d7380 <HAL_USB_USART_Send_Data+0xc>)
   d7378:	681b      	ldr	r3, [r3, #0]
   d737a:	69db      	ldr	r3, [r3, #28]
   d737c:	9301      	str	r3, [sp, #4]
   d737e:	bd08      	pop	{r3, pc}
   d7380:	0003024c 	.word	0x0003024c

000d7384 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7384:	b508      	push	{r3, lr}
   d7386:	4b02      	ldr	r3, [pc, #8]	; (d7390 <HAL_USB_USART_Flush_Data+0xc>)
   d7388:	681b      	ldr	r3, [r3, #0]
   d738a:	6a1b      	ldr	r3, [r3, #32]
   d738c:	9301      	str	r3, [sp, #4]
   d738e:	bd08      	pop	{r3, pc}
   d7390:	0003024c 	.word	0x0003024c

000d7394 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d7394:	b508      	push	{r3, lr}
   d7396:	4b02      	ldr	r3, [pc, #8]	; (d73a0 <HAL_USB_USART_Is_Enabled+0xc>)
   d7398:	681b      	ldr	r3, [r3, #0]
   d739a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d739c:	9301      	str	r3, [sp, #4]
   d739e:	bd08      	pop	{r3, pc}
   d73a0:	0003024c 	.word	0x0003024c

000d73a4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d73a4:	b508      	push	{r3, lr}
   d73a6:	4b02      	ldr	r3, [pc, #8]	; (d73b0 <set_system_mode+0xc>)
   d73a8:	681b      	ldr	r3, [r3, #0]
   d73aa:	685b      	ldr	r3, [r3, #4]
   d73ac:	9301      	str	r3, [sp, #4]
   d73ae:	bd08      	pop	{r3, pc}
   d73b0:	00030220 	.word	0x00030220

000d73b4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d73b4:	b508      	push	{r3, lr}
   d73b6:	4b02      	ldr	r3, [pc, #8]	; (d73c0 <system_delay_ms+0xc>)
   d73b8:	681b      	ldr	r3, [r3, #0]
   d73ba:	695b      	ldr	r3, [r3, #20]
   d73bc:	9301      	str	r3, [sp, #4]
   d73be:	bd08      	pop	{r3, pc}
   d73c0:	00030220 	.word	0x00030220

000d73c4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d73c4:	b508      	push	{r3, lr}
   d73c6:	4b02      	ldr	r3, [pc, #8]	; (d73d0 <system_thread_set_state+0xc>)
   d73c8:	681b      	ldr	r3, [r3, #0]
   d73ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d73cc:	9301      	str	r3, [sp, #4]
   d73ce:	bd08      	pop	{r3, pc}
   d73d0:	00030220 	.word	0x00030220

000d73d4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d73d4:	b508      	push	{r3, lr}
   d73d6:	4b03      	ldr	r3, [pc, #12]	; (d73e4 <system_ctrl_set_app_request_handler+0x10>)
   d73d8:	681b      	ldr	r3, [r3, #0]
   d73da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d73de:	9301      	str	r3, [sp, #4]
   d73e0:	bd08      	pop	{r3, pc}
   d73e2:	0000      	.short	0x0000
   d73e4:	00030220 	.word	0x00030220

000d73e8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d73e8:	b508      	push	{r3, lr}
   d73ea:	4b03      	ldr	r3, [pc, #12]	; (d73f8 <system_ctrl_set_result+0x10>)
   d73ec:	681b      	ldr	r3, [r3, #0]
   d73ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d73f2:	9301      	str	r3, [sp, #4]
   d73f4:	bd08      	pop	{r3, pc}
   d73f6:	0000      	.short	0x0000
   d73f8:	00030220 	.word	0x00030220

000d73fc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d73fc:	b508      	push	{r3, lr}
   d73fe:	4b02      	ldr	r3, [pc, #8]	; (d7408 <spark_process+0xc>)
   d7400:	681b      	ldr	r3, [r3, #0]
   d7402:	689b      	ldr	r3, [r3, #8]
   d7404:	9301      	str	r3, [sp, #4]
   d7406:	bd08      	pop	{r3, pc}
   d7408:	00030244 	.word	0x00030244

000d740c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d740c:	b508      	push	{r3, lr}
   d740e:	4b02      	ldr	r3, [pc, #8]	; (d7418 <spark_set_random_seed_from_cloud_handler+0xc>)
   d7410:	681b      	ldr	r3, [r3, #0]
   d7412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d7414:	9301      	str	r3, [sp, #4]
   d7416:	bd08      	pop	{r3, pc}
   d7418:	00030244 	.word	0x00030244

000d741c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d741c:	b508      	push	{r3, lr}
   d741e:	4b02      	ldr	r3, [pc, #8]	; (d7428 <network_connect+0xc>)
   d7420:	681b      	ldr	r3, [r3, #0]
   d7422:	685b      	ldr	r3, [r3, #4]
   d7424:	9301      	str	r3, [sp, #4]
   d7426:	bd08      	pop	{r3, pc}
   d7428:	00030240 	.word	0x00030240

000d742c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d742c:	b508      	push	{r3, lr}
   d742e:	4b02      	ldr	r3, [pc, #8]	; (d7438 <network_connecting+0xc>)
   d7430:	681b      	ldr	r3, [r3, #0]
   d7432:	689b      	ldr	r3, [r3, #8]
   d7434:	9301      	str	r3, [sp, #4]
   d7436:	bd08      	pop	{r3, pc}
   d7438:	00030240 	.word	0x00030240

000d743c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d743c:	b508      	push	{r3, lr}
   d743e:	4b02      	ldr	r3, [pc, #8]	; (d7448 <network_disconnect+0xc>)
   d7440:	681b      	ldr	r3, [r3, #0]
   d7442:	68db      	ldr	r3, [r3, #12]
   d7444:	9301      	str	r3, [sp, #4]
   d7446:	bd08      	pop	{r3, pc}
   d7448:	00030240 	.word	0x00030240

000d744c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d744c:	b508      	push	{r3, lr}
   d744e:	4b02      	ldr	r3, [pc, #8]	; (d7458 <network_ready+0xc>)
   d7450:	681b      	ldr	r3, [r3, #0]
   d7452:	691b      	ldr	r3, [r3, #16]
   d7454:	9301      	str	r3, [sp, #4]
   d7456:	bd08      	pop	{r3, pc}
   d7458:	00030240 	.word	0x00030240

000d745c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d745c:	b508      	push	{r3, lr}
   d745e:	4b02      	ldr	r3, [pc, #8]	; (d7468 <network_on+0xc>)
   d7460:	681b      	ldr	r3, [r3, #0]
   d7462:	695b      	ldr	r3, [r3, #20]
   d7464:	9301      	str	r3, [sp, #4]
   d7466:	bd08      	pop	{r3, pc}
   d7468:	00030240 	.word	0x00030240

000d746c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d746c:	b508      	push	{r3, lr}
   d746e:	4b02      	ldr	r3, [pc, #8]	; (d7478 <network_off+0xc>)
   d7470:	681b      	ldr	r3, [r3, #0]
   d7472:	699b      	ldr	r3, [r3, #24]
   d7474:	9301      	str	r3, [sp, #4]
   d7476:	bd08      	pop	{r3, pc}
   d7478:	00030240 	.word	0x00030240

000d747c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d747c:	b508      	push	{r3, lr}
   d747e:	4b02      	ldr	r3, [pc, #8]	; (d7488 <network_listen+0xc>)
   d7480:	681b      	ldr	r3, [r3, #0]
   d7482:	69db      	ldr	r3, [r3, #28]
   d7484:	9301      	str	r3, [sp, #4]
   d7486:	bd08      	pop	{r3, pc}
   d7488:	00030240 	.word	0x00030240

000d748c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <network_listening+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	6a1b      	ldr	r3, [r3, #32]
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	00030240 	.word	0x00030240

000d749c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <network_set_listen_timeout+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	00030240 	.word	0x00030240

000d74ac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <network_get_listen_timeout+0xc>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d74b4:	9301      	str	r3, [sp, #4]
   d74b6:	bd08      	pop	{r3, pc}
   d74b8:	00030240 	.word	0x00030240

000d74bc <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d74bc:	b508      	push	{r3, lr}
   d74be:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <network_is_on+0xc>)
   d74c0:	681b      	ldr	r3, [r3, #0]
   d74c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d74c4:	9301      	str	r3, [sp, #4]
   d74c6:	bd08      	pop	{r3, pc}
   d74c8:	00030240 	.word	0x00030240

000d74cc <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d74cc:	b508      	push	{r3, lr}
   d74ce:	4b02      	ldr	r3, [pc, #8]	; (d74d8 <network_is_off+0xc>)
   d74d0:	681b      	ldr	r3, [r3, #0]
   d74d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	bd08      	pop	{r3, pc}
   d74d8:	00030240 	.word	0x00030240

000d74dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d74dc:	b508      	push	{r3, lr}
   d74de:	4b02      	ldr	r3, [pc, #8]	; (d74e8 <malloc+0xc>)
   d74e0:	681b      	ldr	r3, [r3, #0]
   d74e2:	681b      	ldr	r3, [r3, #0]
   d74e4:	9301      	str	r3, [sp, #4]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	0003021c 	.word	0x0003021c

000d74ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d74ec:	b508      	push	{r3, lr}
   d74ee:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <free+0xc>)
   d74f0:	681b      	ldr	r3, [r3, #0]
   d74f2:	685b      	ldr	r3, [r3, #4]
   d74f4:	9301      	str	r3, [sp, #4]
   d74f6:	bd08      	pop	{r3, pc}
   d74f8:	0003021c 	.word	0x0003021c

000d74fc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d74fc:	b508      	push	{r3, lr}
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <vsnprintf+0xc>)
   d7500:	681b      	ldr	r3, [r3, #0]
   d7502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	0003021c 	.word	0x0003021c

000d750c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d750c:	b508      	push	{r3, lr}
   d750e:	4b02      	ldr	r3, [pc, #8]	; (d7518 <newlib_impure_ptr_callback+0xc>)
   d7510:	681b      	ldr	r3, [r3, #0]
   d7512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7514:	9301      	str	r3, [sp, #4]
   d7516:	bd08      	pop	{r3, pc}
   d7518:	0003021c 	.word	0x0003021c

000d751c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d751c:	2100      	movs	r1, #0
   d751e:	f7ff bf49 	b.w	d73b4 <system_delay_ms>
	...

000d7524 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d7524:	4802      	ldr	r0, [pc, #8]	; (d7530 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d7526:	2300      	movs	r3, #0
   d7528:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d752a:	f7ff bdbb 	b.w	d70a4 <os_mutex_recursive_create>
   d752e:	bf00      	nop
   d7530:	2003e5b4 	.word	0x2003e5b4

000d7534 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7534:	2200      	movs	r2, #0
   d7536:	6840      	ldr	r0, [r0, #4]
   d7538:	4611      	mov	r1, r2
   d753a:	f7ff bfa7 	b.w	d748c <network_listening>

000d753e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d753e:	2200      	movs	r2, #0
   d7540:	6840      	ldr	r0, [r0, #4]
   d7542:	4611      	mov	r1, r2
   d7544:	f7ff bfb2 	b.w	d74ac <network_get_listen_timeout>

000d7548 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7548:	6840      	ldr	r0, [r0, #4]
   d754a:	2200      	movs	r2, #0
   d754c:	f7ff bfa6 	b.w	d749c <network_set_listen_timeout>

000d7550 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7550:	6840      	ldr	r0, [r0, #4]
   d7552:	2200      	movs	r2, #0
   d7554:	f081 0101 	eor.w	r1, r1, #1
   d7558:	f7ff bf90 	b.w	d747c <network_listen>

000d755c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d755c:	2300      	movs	r3, #0
   d755e:	6840      	ldr	r0, [r0, #4]
   d7560:	461a      	mov	r2, r3
   d7562:	4619      	mov	r1, r3
   d7564:	f7ff bf82 	b.w	d746c <network_off>

000d7568 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7568:	2300      	movs	r3, #0
   d756a:	6840      	ldr	r0, [r0, #4]
   d756c:	461a      	mov	r2, r3
   d756e:	4619      	mov	r1, r3
   d7570:	f7ff bf74 	b.w	d745c <network_on>

000d7574 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7574:	2200      	movs	r2, #0
   d7576:	6840      	ldr	r0, [r0, #4]
   d7578:	4611      	mov	r1, r2
   d757a:	f7ff bf67 	b.w	d744c <network_ready>

000d757e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d757e:	2200      	movs	r2, #0
   d7580:	6840      	ldr	r0, [r0, #4]
   d7582:	4611      	mov	r1, r2
   d7584:	f7ff bf52 	b.w	d742c <network_connecting>

000d7588 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7588:	6840      	ldr	r0, [r0, #4]
   d758a:	2200      	movs	r2, #0
   d758c:	2102      	movs	r1, #2
   d758e:	f7ff bf55 	b.w	d743c <network_disconnect>

000d7592 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7592:	2300      	movs	r3, #0
   d7594:	6840      	ldr	r0, [r0, #4]
   d7596:	461a      	mov	r2, r3
   d7598:	f7ff bf40 	b.w	d741c <network_connect>

000d759c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d759c:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d759e:	2203      	movs	r2, #3
   d75a0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d75a2:	4a02      	ldr	r2, [pc, #8]	; (d75ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d75a4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d75a6:	4770      	bx	lr
   d75a8:	2003e5b8 	.word	0x2003e5b8
   d75ac:	000d91b0 	.word	0x000d91b0

000d75b0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d75b0:	4770      	bx	lr

000d75b2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d75b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75b4:	4606      	mov	r6, r0
   d75b6:	4615      	mov	r5, r2
   d75b8:	460c      	mov	r4, r1
   d75ba:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d75bc:	42bc      	cmp	r4, r7
   d75be:	d006      	beq.n	d75ce <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d75c0:	6833      	ldr	r3, [r6, #0]
   d75c2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d75c6:	689b      	ldr	r3, [r3, #8]
   d75c8:	4630      	mov	r0, r6
   d75ca:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d75cc:	e7f6      	b.n	d75bc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d75ce:	4628      	mov	r0, r5
   d75d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75d2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d75d2:	7c00      	ldrb	r0, [r0, #16]
   d75d4:	2200      	movs	r2, #0
   d75d6:	f7ff bdbd 	b.w	d7154 <hal_i2c_write>

000d75da <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d75da:	7c00      	ldrb	r0, [r0, #16]
   d75dc:	2100      	movs	r1, #0
   d75de:	f7ff bdc1 	b.w	d7164 <hal_i2c_available>

000d75e2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d75e2:	7c00      	ldrb	r0, [r0, #16]
   d75e4:	2100      	movs	r1, #0
   d75e6:	f7ff bdc5 	b.w	d7174 <hal_i2c_read>

000d75ea <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d75ea:	7c00      	ldrb	r0, [r0, #16]
   d75ec:	2100      	movs	r1, #0
   d75ee:	f7ff bdc9 	b.w	d7184 <hal_i2c_peek>

000d75f2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d75f2:	7c00      	ldrb	r0, [r0, #16]
   d75f4:	2100      	movs	r1, #0
   d75f6:	f7ff bdcd 	b.w	d7194 <hal_i2c_flush>

000d75fa <_ZN7TwoWireD0Ev>:
   d75fa:	b510      	push	{r4, lr}
   d75fc:	2114      	movs	r1, #20
   d75fe:	4604      	mov	r4, r0
   d7600:	f000 fe42 	bl	d8288 <_ZdlPvj>
   d7604:	4620      	mov	r0, r4
   d7606:	bd10      	pop	{r4, pc}

000d7608 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7608:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d760a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d760e:	4604      	mov	r4, r0
   d7610:	4608      	mov	r0, r1
   d7612:	2100      	movs	r1, #0
   d7614:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7618:	4b03      	ldr	r3, [pc, #12]	; (d7628 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d761a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d761c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d761e:	4611      	mov	r1, r2
   d7620:	f7ff fdc8 	bl	d71b4 <hal_i2c_init>
}
   d7624:	4620      	mov	r0, r4
   d7626:	bd10      	pop	{r4, pc}
   d7628:	000d91ec 	.word	0x000d91ec

000d762c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d762c:	2300      	movs	r3, #0
   d762e:	7c00      	ldrb	r0, [r0, #16]
   d7630:	461a      	mov	r2, r3
   d7632:	4619      	mov	r1, r3
   d7634:	f7ff bd76 	b.w	d7124 <hal_i2c_begin>

000d7638 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7638:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d763a:	2200      	movs	r2, #0
   d763c:	2314      	movs	r3, #20
   d763e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7642:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7646:	780b      	ldrb	r3, [r1, #0]
   d7648:	f88d 3008 	strb.w	r3, [sp, #8]
   d764c:	684b      	ldr	r3, [r1, #4]
   d764e:	9303      	str	r3, [sp, #12]
   d7650:	68cb      	ldr	r3, [r1, #12]
   d7652:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7654:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7656:	7a0b      	ldrb	r3, [r1, #8]
   d7658:	9305      	str	r3, [sp, #20]
   d765a:	a901      	add	r1, sp, #4
   d765c:	f7ff fdb2 	bl	d71c4 <hal_i2c_request_ex>
}
   d7660:	b007      	add	sp, #28
   d7662:	f85d fb04 	ldr.w	pc, [sp], #4

000d7666 <_ZN7TwoWire11requestFromEhjh>:
{
   d7666:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7668:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d766a:	f88d 1000 	strb.w	r1, [sp]
   d766e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7672:	9103      	str	r1, [sp, #12]
   d7674:	bf18      	it	ne
   d7676:	2301      	movne	r3, #1
   d7678:	4669      	mov	r1, sp
    size_ = size;
   d767a:	9201      	str	r2, [sp, #4]
   d767c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7680:	f7ff ffda 	bl	d7638 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7684:	b005      	add	sp, #20
   d7686:	f85d fb04 	ldr.w	pc, [sp], #4

000d768a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d768a:	2301      	movs	r3, #1
   d768c:	f7ff bfeb 	b.w	d7666 <_ZN7TwoWire11requestFromEhjh>

000d7690 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7690:	7c00      	ldrb	r0, [r0, #16]
   d7692:	2200      	movs	r2, #0
   d7694:	f7ff bd4e 	b.w	d7134 <hal_i2c_begin_transmission>

000d7698 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7698:	b2c9      	uxtb	r1, r1
   d769a:	f7ff bff9 	b.w	d7690 <_ZN7TwoWire17beginTransmissionEh>

000d769e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d769e:	7c00      	ldrb	r0, [r0, #16]
   d76a0:	2200      	movs	r2, #0
   d76a2:	f7ff bd4f 	b.w	d7144 <hal_i2c_end_transmission>

000d76a6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d76a6:	2101      	movs	r1, #1
   d76a8:	f7ff bff9 	b.w	d769e <_ZN7TwoWire15endTransmissionEh>

000d76ac <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d76ac:	4770      	bx	lr

000d76ae <_ZN9IPAddressD0Ev>:
   d76ae:	b510      	push	{r4, lr}
   d76b0:	2118      	movs	r1, #24
   d76b2:	4604      	mov	r4, r0
   d76b4:	f000 fde8 	bl	d8288 <_ZdlPvj>
   d76b8:	4620      	mov	r0, r4
   d76ba:	bd10      	pop	{r4, pc}

000d76bc <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d76bc:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d76be:	7d03      	ldrb	r3, [r0, #20]
   d76c0:	2b06      	cmp	r3, #6
{
   d76c2:	b08d      	sub	sp, #52	; 0x34
   d76c4:	460e      	mov	r6, r1
   d76c6:	f100 0704 	add.w	r7, r0, #4
   d76ca:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d76ce:	d012      	beq.n	d76f6 <_ZNK9IPAddress7printToER5Print+0x3a>
   d76d0:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d76d4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d76d8:	220a      	movs	r2, #10
   d76da:	4630      	mov	r0, r6
   d76dc:	f000 f945 	bl	d796a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d76e0:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d76e2:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d76e4:	d019      	beq.n	d771a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d76e6:	2c00      	cmp	r4, #0
   d76e8:	d0f4      	beq.n	d76d4 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d76ea:	212e      	movs	r1, #46	; 0x2e
   d76ec:	4630      	mov	r0, r6
   d76ee:	f000 f921 	bl	d7934 <_ZN5Print5printEc>
   d76f2:	4404      	add	r4, r0
   d76f4:	e7ee      	b.n	d76d4 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d76f6:	232f      	movs	r3, #47	; 0x2f
   d76f8:	466a      	mov	r2, sp
   d76fa:	4639      	mov	r1, r7
   d76fc:	200a      	movs	r0, #10
		buf[0] = 0;
   d76fe:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7702:	f7ff fd67 	bl	d71d4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7706:	4668      	mov	r0, sp
   d7708:	f001 fb14 	bl	d8d34 <strlen>
   d770c:	6833      	ldr	r3, [r6, #0]
   d770e:	4602      	mov	r2, r0
   d7710:	68db      	ldr	r3, [r3, #12]
   d7712:	4669      	mov	r1, sp
   d7714:	4630      	mov	r0, r6
   d7716:	4798      	blx	r3
   d7718:	4604      	mov	r4, r0
    }
    return n;
}
   d771a:	4620      	mov	r0, r4
   d771c:	b00d      	add	sp, #52	; 0x34
   d771e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7720 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7720:	b510      	push	{r4, lr}
   d7722:	4b05      	ldr	r3, [pc, #20]	; (d7738 <_ZN9IPAddressC1Ev+0x18>)
   d7724:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7726:	2211      	movs	r2, #17
   d7728:	f840 3b04 	str.w	r3, [r0], #4
   d772c:	2100      	movs	r1, #0
   d772e:	f001 fad5 	bl	d8cdc <memset>
}
   d7732:	4620      	mov	r0, r4
   d7734:	bd10      	pop	{r4, pc}
   d7736:	bf00      	nop
   d7738:	000d9214 	.word	0x000d9214

000d773c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d773c:	4603      	mov	r3, r0
   d773e:	4a07      	ldr	r2, [pc, #28]	; (d775c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7740:	b510      	push	{r4, lr}
   d7742:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7746:	f101 0210 	add.w	r2, r1, #16
   d774a:	f851 4b04 	ldr.w	r4, [r1], #4
   d774e:	f843 4b04 	str.w	r4, [r3], #4
   d7752:	4291      	cmp	r1, r2
   d7754:	d1f9      	bne.n	d774a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7756:	780a      	ldrb	r2, [r1, #0]
   d7758:	701a      	strb	r2, [r3, #0]
}
   d775a:	bd10      	pop	{r4, pc}
   d775c:	000d9214 	.word	0x000d9214

000d7760 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7760:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7762:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7766:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d776a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d776e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7772:	2304      	movs	r3, #4
   d7774:	6041      	str	r1, [r0, #4]
   d7776:	7503      	strb	r3, [r0, #20]
}
   d7778:	bd10      	pop	{r4, pc}

000d777a <_ZN9IPAddressaSEPKh>:
{
   d777a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d777c:	78cb      	ldrb	r3, [r1, #3]
   d777e:	9300      	str	r3, [sp, #0]
   d7780:	788b      	ldrb	r3, [r1, #2]
   d7782:	784a      	ldrb	r2, [r1, #1]
   d7784:	7809      	ldrb	r1, [r1, #0]
   d7786:	f7ff ffeb 	bl	d7760 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d778a:	b002      	add	sp, #8
   d778c:	bd10      	pop	{r4, pc}
	...

000d7790 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7790:	4b01      	ldr	r3, [pc, #4]	; (d7798 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7792:	4a02      	ldr	r2, [pc, #8]	; (d779c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7794:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7796:	4770      	bx	lr
   d7798:	2003e5c0 	.word	0x2003e5c0
   d779c:	000d9220 	.word	0x000d9220

000d77a0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d77a0:	2300      	movs	r3, #0
   d77a2:	6840      	ldr	r0, [r0, #4]
   d77a4:	461a      	mov	r2, r3
   d77a6:	f7ff be39 	b.w	d741c <network_connect>

000d77aa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d77aa:	6840      	ldr	r0, [r0, #4]
   d77ac:	2200      	movs	r2, #0
   d77ae:	2102      	movs	r1, #2
   d77b0:	f7ff be44 	b.w	d743c <network_disconnect>

000d77b4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d77b4:	2200      	movs	r2, #0
   d77b6:	6840      	ldr	r0, [r0, #4]
   d77b8:	4611      	mov	r1, r2
   d77ba:	f7ff be37 	b.w	d742c <network_connecting>

000d77be <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d77be:	2200      	movs	r2, #0
   d77c0:	6840      	ldr	r0, [r0, #4]
   d77c2:	4611      	mov	r1, r2
   d77c4:	f7ff be42 	b.w	d744c <network_ready>

000d77c8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d77c8:	2300      	movs	r3, #0
   d77ca:	6840      	ldr	r0, [r0, #4]
   d77cc:	461a      	mov	r2, r3
   d77ce:	4619      	mov	r1, r3
   d77d0:	f7ff be44 	b.w	d745c <network_on>

000d77d4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d77d4:	2300      	movs	r3, #0
   d77d6:	6840      	ldr	r0, [r0, #4]
   d77d8:	461a      	mov	r2, r3
   d77da:	4619      	mov	r1, r3
   d77dc:	f7ff be46 	b.w	d746c <network_off>

000d77e0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d77e0:	6840      	ldr	r0, [r0, #4]
   d77e2:	2100      	movs	r1, #0
   d77e4:	f7ff be6a 	b.w	d74bc <network_is_on>

000d77e8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d77e8:	6840      	ldr	r0, [r0, #4]
   d77ea:	2100      	movs	r1, #0
   d77ec:	f7ff be6e 	b.w	d74cc <network_is_off>

000d77f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d77f0:	6840      	ldr	r0, [r0, #4]
   d77f2:	2200      	movs	r2, #0
   d77f4:	f081 0101 	eor.w	r1, r1, #1
   d77f8:	f7ff be40 	b.w	d747c <network_listen>

000d77fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d77fc:	6840      	ldr	r0, [r0, #4]
   d77fe:	2200      	movs	r2, #0
   d7800:	f7ff be4c 	b.w	d749c <network_set_listen_timeout>

000d7804 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7804:	2200      	movs	r2, #0
   d7806:	6840      	ldr	r0, [r0, #4]
   d7808:	4611      	mov	r1, r2
   d780a:	f7ff be4f 	b.w	d74ac <network_get_listen_timeout>

000d780e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d780e:	2200      	movs	r2, #0
   d7810:	6840      	ldr	r0, [r0, #4]
   d7812:	4611      	mov	r1, r2
   d7814:	f7ff be3a 	b.w	d748c <network_listening>

000d7818 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7818:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d781c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d781e:	b095      	sub	sp, #84	; 0x54
   d7820:	4616      	mov	r6, r2
   d7822:	460d      	mov	r5, r1
   d7824:	4607      	mov	r7, r0
    IPAddress addr;
   d7826:	f7ff ff7b 	bl	d7720 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d782a:	4621      	mov	r1, r4
   d782c:	2218      	movs	r2, #24
   d782e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7830:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7832:	f001 fa53 	bl	d8cdc <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7836:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7838:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d783c:	4621      	mov	r1, r4
   d783e:	466b      	mov	r3, sp
   d7840:	aa0c      	add	r2, sp, #48	; 0x30
   d7842:	4630      	mov	r0, r6
   d7844:	f7ff fcd6 	bl	d71f4 <netdb_getaddrinfo>
    if (!r) {
   d7848:	4604      	mov	r4, r0
   d784a:	2800      	cmp	r0, #0
   d784c:	d146      	bne.n	d78dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d784e:	4602      	mov	r2, r0
   d7850:	2101      	movs	r1, #1
   d7852:	6868      	ldr	r0, [r5, #4]
   d7854:	f7ff fdfa 	bl	d744c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7858:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d785a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d785c:	4622      	mov	r2, r4
   d785e:	6868      	ldr	r0, [r5, #4]
   d7860:	f7ff fdf4 	bl	d744c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7864:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7866:	4681      	mov	r9, r0
        bool ok = false;
   d7868:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d786a:	2e00      	cmp	r6, #0
   d786c:	d036      	beq.n	d78dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d786e:	2900      	cmp	r1, #0
   d7870:	d134      	bne.n	d78dc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7872:	6873      	ldr	r3, [r6, #4]
   d7874:	2b02      	cmp	r3, #2
   d7876:	d003      	beq.n	d7880 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7878:	2b0a      	cmp	r3, #10
   d787a:	d00b      	beq.n	d7894 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d787c:	69f6      	ldr	r6, [r6, #28]
   d787e:	e7f4      	b.n	d786a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7880:	f1b8 0f00 	cmp.w	r8, #0
   d7884:	d004      	beq.n	d7890 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7886:	6971      	ldr	r1, [r6, #20]
   d7888:	4638      	mov	r0, r7
   d788a:	3104      	adds	r1, #4
   d788c:	f7ff ff75 	bl	d777a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7890:	4641      	mov	r1, r8
   d7892:	e7f3      	b.n	d787c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7894:	f1b9 0f00 	cmp.w	r9, #0
   d7898:	d101      	bne.n	d789e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d789a:	4649      	mov	r1, r9
   d789c:	e7ee      	b.n	d787c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d789e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d78a0:	2210      	movs	r2, #16
   d78a2:	a801      	add	r0, sp, #4
   d78a4:	f001 fa1a 	bl	d8cdc <memset>
                    a.v = 6;
   d78a8:	2306      	movs	r3, #6
   d78aa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d78ae:	ad01      	add	r5, sp, #4
   d78b0:	f104 0308 	add.w	r3, r4, #8
   d78b4:	3418      	adds	r4, #24
   d78b6:	6818      	ldr	r0, [r3, #0]
   d78b8:	6859      	ldr	r1, [r3, #4]
   d78ba:	462a      	mov	r2, r5
   d78bc:	c203      	stmia	r2!, {r0, r1}
   d78be:	3308      	adds	r3, #8
   d78c0:	42a3      	cmp	r3, r4
   d78c2:	4615      	mov	r5, r2
   d78c4:	d1f7      	bne.n	d78b6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d78c6:	a901      	add	r1, sp, #4
   d78c8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d78ca:	ad07      	add	r5, sp, #28
   d78cc:	f7ff ff36 	bl	d773c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d78d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d78d2:	1d3c      	adds	r4, r7, #4
   d78d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d78d6:	682b      	ldr	r3, [r5, #0]
   d78d8:	7023      	strb	r3, [r4, #0]
   d78da:	e7de      	b.n	d789a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d78dc:	9800      	ldr	r0, [sp, #0]
   d78de:	f7ff fc81 	bl	d71e4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d78e2:	4638      	mov	r0, r7
   d78e4:	b015      	add	sp, #84	; 0x54
   d78e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d78ec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d78ec:	4b02      	ldr	r3, [pc, #8]	; (d78f8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d78ee:	4a03      	ldr	r2, [pc, #12]	; (d78fc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d78f0:	601a      	str	r2, [r3, #0]
   d78f2:	2200      	movs	r2, #0
   d78f4:	605a      	str	r2, [r3, #4]

} // spark
   d78f6:	4770      	bx	lr
   d78f8:	2003e5c4 	.word	0x2003e5c4
   d78fc:	000d922c 	.word	0x000d922c

000d7900 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7902:	4606      	mov	r6, r0
   d7904:	460d      	mov	r5, r1
  size_t n = 0;
   d7906:	188f      	adds	r7, r1, r2
   d7908:	2400      	movs	r4, #0
  while (size--) {
   d790a:	42bd      	cmp	r5, r7
   d790c:	d00c      	beq.n	d7928 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d790e:	6833      	ldr	r3, [r6, #0]
   d7910:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7914:	689b      	ldr	r3, [r3, #8]
   d7916:	4630      	mov	r0, r6
   d7918:	4798      	blx	r3
     if (chunk>=0)
   d791a:	1e03      	subs	r3, r0, #0
   d791c:	db01      	blt.n	d7922 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d791e:	441c      	add	r4, r3
  while (size--) {
   d7920:	e7f3      	b.n	d790a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7922:	2c00      	cmp	r4, #0
   d7924:	bf08      	it	eq
   d7926:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7928:	4620      	mov	r0, r4
   d792a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d792c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d792c:	b508      	push	{r3, lr}
  return write(str);
   d792e:	f7fe ff35 	bl	d679c <_ZN5Print5writeEPKc>
}
   d7932:	bd08      	pop	{r3, pc}

000d7934 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d7934:	6803      	ldr	r3, [r0, #0]
   d7936:	689b      	ldr	r3, [r3, #8]
   d7938:	4718      	bx	r3

000d793a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d793a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d793c:	210d      	movs	r1, #13
{
   d793e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7940:	f7ff fff8 	bl	d7934 <_ZN5Print5printEc>
  n += print('\n');
   d7944:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7946:	4604      	mov	r4, r0
  n += print('\n');
   d7948:	4628      	mov	r0, r5
   d794a:	f7ff fff3 	bl	d7934 <_ZN5Print5printEc>
  return n;
}
   d794e:	4420      	add	r0, r4
   d7950:	bd38      	pop	{r3, r4, r5, pc}

000d7952 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7952:	b538      	push	{r3, r4, r5, lr}
   d7954:	4605      	mov	r5, r0
  return write(str);
   d7956:	f7fe ff21 	bl	d679c <_ZN5Print5writeEPKc>
   d795a:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d795c:	4628      	mov	r0, r5
   d795e:	f7ff ffec 	bl	d793a <_ZN5Print7printlnEv>
  return n;
}
   d7962:	4420      	add	r0, r4
   d7964:	bd38      	pop	{r3, r4, r5, pc}

000d7966 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d7966:	f7ff bff4 	b.w	d7952 <_ZN5Print7printlnEPKc>

000d796a <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d796a:	b530      	push	{r4, r5, lr}
   d796c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d796e:	2300      	movs	r3, #0
   d7970:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7974:	2a01      	cmp	r2, #1
   d7976:	bf98      	it	ls
   d7978:	220a      	movls	r2, #10
   d797a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d797c:	460d      	mov	r5, r1
   d797e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7982:	fb01 5312 	mls	r3, r1, r2, r5
   d7986:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d798a:	2b09      	cmp	r3, #9
   d798c:	bf94      	ite	ls
   d798e:	3330      	addls	r3, #48	; 0x30
   d7990:	3337      	addhi	r3, #55	; 0x37
   d7992:	b2db      	uxtb	r3, r3
  } while(n);
   d7994:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7996:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d799a:	d9ef      	bls.n	d797c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d799c:	4621      	mov	r1, r4
   d799e:	f7fe fefd 	bl	d679c <_ZN5Print5writeEPKc>
}
   d79a2:	b00b      	add	sp, #44	; 0x2c
   d79a4:	bd30      	pop	{r4, r5, pc}
	...

000d79a8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d79a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d79ac:	ec55 4b10 	vmov	r4, r5, d0
   d79b0:	4606      	mov	r6, r0
   d79b2:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d79b4:	ee10 2a10 	vmov	r2, s0
   d79b8:	ee10 0a10 	vmov	r0, s0
   d79bc:	462b      	mov	r3, r5
   d79be:	4629      	mov	r1, r5
   d79c0:	f001 f8bc 	bl	d8b3c <__aeabi_dcmpun>
   d79c4:	b140      	cbz	r0, d79d8 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d79c6:	4953      	ldr	r1, [pc, #332]	; (d7b14 <_ZN5Print10printFloatEdh+0x16c>)
   d79c8:	4630      	mov	r0, r6
   d79ca:	f7fe fee7 	bl	d679c <_ZN5Print5writeEPKc>
   d79ce:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d79d0:	4650      	mov	r0, sl
   d79d2:	b003      	add	sp, #12
   d79d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d79d8:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d79dc:	4b4e      	ldr	r3, [pc, #312]	; (d7b18 <_ZN5Print10printFloatEdh+0x170>)
   d79de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d79e2:	4620      	mov	r0, r4
   d79e4:	4649      	mov	r1, r9
   d79e6:	f001 f8a9 	bl	d8b3c <__aeabi_dcmpun>
   d79ea:	b948      	cbnz	r0, d7a00 <_ZN5Print10printFloatEdh+0x58>
   d79ec:	4b4a      	ldr	r3, [pc, #296]	; (d7b18 <_ZN5Print10printFloatEdh+0x170>)
   d79ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d79f2:	4620      	mov	r0, r4
   d79f4:	4649      	mov	r1, r9
   d79f6:	f001 f883 	bl	d8b00 <__aeabi_dcmple>
   d79fa:	b908      	cbnz	r0, d7a00 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d79fc:	4947      	ldr	r1, [pc, #284]	; (d7b1c <_ZN5Print10printFloatEdh+0x174>)
   d79fe:	e7e3      	b.n	d79c8 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7a00:	4b47      	ldr	r3, [pc, #284]	; (d7b20 <_ZN5Print10printFloatEdh+0x178>)
   d7a02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7a06:	4620      	mov	r0, r4
   d7a08:	4629      	mov	r1, r5
   d7a0a:	f001 f88d 	bl	d8b28 <__aeabi_dcmpgt>
   d7a0e:	b108      	cbz	r0, d7a14 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7a10:	4944      	ldr	r1, [pc, #272]	; (d7b24 <_ZN5Print10printFloatEdh+0x17c>)
   d7a12:	e7d9      	b.n	d79c8 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7a14:	4b44      	ldr	r3, [pc, #272]	; (d7b28 <_ZN5Print10printFloatEdh+0x180>)
   d7a16:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7a1a:	4620      	mov	r0, r4
   d7a1c:	4629      	mov	r1, r5
   d7a1e:	f001 f865 	bl	d8aec <__aeabi_dcmplt>
   d7a22:	2800      	cmp	r0, #0
   d7a24:	d1f4      	bne.n	d7a10 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d7a26:	2200      	movs	r2, #0
   d7a28:	2300      	movs	r3, #0
   d7a2a:	4620      	mov	r0, r4
   d7a2c:	4629      	mov	r1, r5
   d7a2e:	f001 f85d 	bl	d8aec <__aeabi_dcmplt>
   d7a32:	b1d0      	cbz	r0, d7a6a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7a34:	212d      	movs	r1, #45	; 0x2d
   d7a36:	4630      	mov	r0, r6
   d7a38:	f7ff ff7c 	bl	d7934 <_ZN5Print5printEc>
     number = -number;
   d7a3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7a40:	4682      	mov	sl, r0
     number = -number;
   d7a42:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7a44:	4939      	ldr	r1, [pc, #228]	; (d7b2c <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7a46:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7b34 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7a4a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d7a4e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7a50:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7a54:	fa5f f38b 	uxtb.w	r3, fp
   d7a58:	429f      	cmp	r7, r3
   d7a5a:	d908      	bls.n	d7a6e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7a5c:	4642      	mov	r2, r8
   d7a5e:	464b      	mov	r3, r9
   d7a60:	f000 fefc 	bl	d885c <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7a64:	f10b 0b01 	add.w	fp, fp, #1
   d7a68:	e7f4      	b.n	d7a54 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7a6a:	4682      	mov	sl, r0
   d7a6c:	e7ea      	b.n	d7a44 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7a6e:	4622      	mov	r2, r4
   d7a70:	462b      	mov	r3, r5
   d7a72:	f000 fc13 	bl	d829c <__adddf3>
   d7a76:	460d      	mov	r5, r1
   d7a78:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7a7a:	f001 f89d 	bl	d8bb8 <__aeabi_d2uiz>
   d7a7e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7a80:	f000 fd48 	bl	d8514 <__aeabi_ui2d>
   d7a84:	4602      	mov	r2, r0
   d7a86:	460b      	mov	r3, r1
   d7a88:	4620      	mov	r0, r4
   d7a8a:	4629      	mov	r1, r5
   d7a8c:	f000 fc04 	bl	d8298 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d7a90:	220a      	movs	r2, #10
   d7a92:	4604      	mov	r4, r0
   d7a94:	460d      	mov	r5, r1
   d7a96:	4630      	mov	r0, r6
   d7a98:	4641      	mov	r1, r8
   d7a9a:	f7ff ff66 	bl	d796a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7a9e:	4482      	add	sl, r0
  if (digits > 0) {
   d7aa0:	b127      	cbz	r7, d7aac <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7aa2:	4923      	ldr	r1, [pc, #140]	; (d7b30 <_ZN5Print10printFloatEdh+0x188>)
   d7aa4:	4630      	mov	r0, r6
   d7aa6:	f7fe fe79 	bl	d679c <_ZN5Print5writeEPKc>
    n += print(".");
   d7aaa:	4482      	add	sl, r0
    remainder *= 10.0;
   d7aac:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7b34 <_ZN5Print10printFloatEdh+0x18c>
   d7ab0:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7ab4:	3f01      	subs	r7, #1
   d7ab6:	b2ff      	uxtb	r7, r7
   d7ab8:	2fff      	cmp	r7, #255	; 0xff
   d7aba:	d089      	beq.n	d79d0 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7abc:	4642      	mov	r2, r8
   d7abe:	464b      	mov	r3, r9
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	4629      	mov	r1, r5
   d7ac4:	f000 fda0 	bl	d8608 <__aeabi_dmul>
   d7ac8:	4604      	mov	r4, r0
   d7aca:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7acc:	f001 f84c 	bl	d8b68 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7ad0:	f1b0 0b00 	subs.w	fp, r0, #0
   d7ad4:	da1a      	bge.n	d7b0c <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7ad6:	212d      	movs	r1, #45	; 0x2d
   d7ad8:	4630      	mov	r0, r6
   d7ada:	f7ff ff2b 	bl	d7934 <_ZN5Print5printEc>
            val = -n;
   d7ade:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7ae2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7ae4:	220a      	movs	r2, #10
   d7ae6:	4630      	mov	r0, r6
   d7ae8:	9301      	str	r3, [sp, #4]
   d7aea:	f7ff ff3e 	bl	d796a <_ZN5Print11printNumberEmh>
   d7aee:	9b01      	ldr	r3, [sp, #4]
   d7af0:	4418      	add	r0, r3
    n += print(toPrint);
   d7af2:	4482      	add	sl, r0
    remainder -= toPrint;
   d7af4:	4658      	mov	r0, fp
   d7af6:	f000 fd1d 	bl	d8534 <__aeabi_i2d>
   d7afa:	4602      	mov	r2, r0
   d7afc:	460b      	mov	r3, r1
   d7afe:	4620      	mov	r0, r4
   d7b00:	4629      	mov	r1, r5
   d7b02:	f000 fbc9 	bl	d8298 <__aeabi_dsub>
   d7b06:	4604      	mov	r4, r0
   d7b08:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7b0a:	e7d3      	b.n	d7ab4 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7b0c:	4659      	mov	r1, fp
        size_t t = 0;
   d7b0e:	2300      	movs	r3, #0
   d7b10:	e7e8      	b.n	d7ae4 <_ZN5Print10printFloatEdh+0x13c>
   d7b12:	bf00      	nop
   d7b14:	000d9260 	.word	0x000d9260
   d7b18:	7fefffff 	.word	0x7fefffff
   d7b1c:	000d9264 	.word	0x000d9264
   d7b20:	41efffff 	.word	0x41efffff
   d7b24:	000d9268 	.word	0x000d9268
   d7b28:	c1efffff 	.word	0xc1efffff
   d7b2c:	3fe00000 	.word	0x3fe00000
   d7b30:	000d926c 	.word	0x000d926c
   d7b34:	40240000 	.word	0x40240000

000d7b38 <_ZN5Print5printEfi>:
{
   d7b38:	b538      	push	{r3, r4, r5, lr}
   d7b3a:	4604      	mov	r4, r0
   d7b3c:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d7b40:	b2cd      	uxtb	r5, r1
   d7b42:	f000 fd09 	bl	d8558 <__aeabi_f2d>
   d7b46:	ec41 0b10 	vmov	d0, r0, r1
   d7b4a:	4629      	mov	r1, r5
   d7b4c:	4620      	mov	r0, r4
}
   d7b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d7b52:	f7ff bf29 	b.w	d79a8 <_ZN5Print10printFloatEdh>

000d7b56 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7b5a:	b086      	sub	sp, #24
   d7b5c:	af00      	add	r7, sp, #0
   d7b5e:	4605      	mov	r5, r0
   d7b60:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7b62:	1d38      	adds	r0, r7, #4
   d7b64:	2114      	movs	r1, #20
{
   d7b66:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7b68:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7b6a:	f7ff fcc7 	bl	d74fc <vsnprintf>

    if (n<bufsize)
   d7b6e:	2813      	cmp	r0, #19
   d7b70:	d80e      	bhi.n	d7b90 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7b72:	1d39      	adds	r1, r7, #4
   d7b74:	4628      	mov	r0, r5
   d7b76:	f7fe fe11 	bl	d679c <_ZN5Print5writeEPKc>
   d7b7a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7b7c:	b11e      	cbz	r6, d7b86 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7b7e:	4628      	mov	r0, r5
   d7b80:	f7ff fedb 	bl	d793a <_ZN5Print7printlnEv>
   d7b84:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7b86:	4620      	mov	r0, r4
   d7b88:	3718      	adds	r7, #24
   d7b8a:	46bd      	mov	sp, r7
   d7b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7b90:	f100 0308 	add.w	r3, r0, #8
   d7b94:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7b98:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7b9a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7b9e:	4622      	mov	r2, r4
   d7ba0:	1c41      	adds	r1, r0, #1
   d7ba2:	683b      	ldr	r3, [r7, #0]
   d7ba4:	4668      	mov	r0, sp
   d7ba6:	f7ff fca9 	bl	d74fc <vsnprintf>
  return write(str);
   d7baa:	4669      	mov	r1, sp
   d7bac:	4628      	mov	r0, r5
   d7bae:	f7fe fdf5 	bl	d679c <_ZN5Print5writeEPKc>
   d7bb2:	4604      	mov	r4, r0
   d7bb4:	46c5      	mov	sp, r8
   d7bb6:	e7e1      	b.n	d7b7c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7bb8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d7bb8:	4b01      	ldr	r3, [pc, #4]	; (d7bc0 <_GLOBAL__sub_I_RGB+0x8>)
   d7bba:	2200      	movs	r2, #0
   d7bbc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7bbe:	4770      	bx	lr
   d7bc0:	2003e5cc 	.word	0x2003e5cc

000d7bc4 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d7bc4:	2100      	movs	r1, #0
   d7bc6:	f7ff bb5d 	b.w	d7284 <hal_spi_acquire>

000d7bca <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7bca:	2100      	movs	r1, #0
   d7bcc:	f7ff bb62 	b.w	d7294 <hal_spi_release>

000d7bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7bd0:	b510      	push	{r4, lr}
   d7bd2:	4604      	mov	r4, r0
   d7bd4:	4608      	mov	r0, r1
{
    _spi = spi;
   d7bd6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7bd8:	f7ff fb24 	bl	d7224 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7bdc:	2300      	movs	r3, #0
   d7bde:	6063      	str	r3, [r4, #4]
}
   d7be0:	4620      	mov	r0, r4
   d7be2:	bd10      	pop	{r4, pc}

000d7be4 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7be4:	b510      	push	{r4, lr}
   d7be6:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7be8:	7800      	ldrb	r0, [r0, #0]
   d7bea:	f7ff ffeb 	bl	d7bc4 <_ZN8SPIClass4lockEv.isra.0>
   d7bee:	b948      	cbnz	r0, d7c04 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d7bf0:	7820      	ldrb	r0, [r4, #0]
   d7bf2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7bf6:	f7ff fb05 	bl	d7204 <hal_spi_begin>
        unlock();
   d7bfa:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d7c00:	f7ff bfe3 	b.w	d7bca <_ZN8SPIClass6unlockEv.isra.0>
}
   d7c04:	bd10      	pop	{r4, pc}

000d7c06 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7c06:	7800      	ldrb	r0, [r0, #0]
   d7c08:	f7ff bfdf 	b.w	d7bca <_ZN8SPIClass6unlockEv.isra.0>

000d7c0c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7c0c:	0840      	lsrs	r0, r0, #1
{
   d7c0e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7c10:	6018      	str	r0, [r3, #0]
   d7c12:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7c14:	6818      	ldr	r0, [r3, #0]
   d7c16:	4288      	cmp	r0, r1
   d7c18:	b2e5      	uxtb	r5, r4
   d7c1a:	d906      	bls.n	d7c2a <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7c1c:	3401      	adds	r4, #1
   d7c1e:	2c08      	cmp	r4, #8
   d7c20:	d002      	beq.n	d7c28 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7c22:	0840      	lsrs	r0, r0, #1
   d7c24:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d7c26:	e7f5      	b.n	d7c14 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7c28:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d7c2a:	4b02      	ldr	r3, [pc, #8]	; (d7c34 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7c2c:	5d5b      	ldrb	r3, [r3, r5]
   d7c2e:	7013      	strb	r3, [r2, #0]
}
   d7c30:	bd30      	pop	{r4, r5, pc}
   d7c32:	bf00      	nop
   d7c34:	000d926e 	.word	0x000d926e

000d7c38 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d7c38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7c3c:	4606      	mov	r6, r0
   d7c3e:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d7c40:	7800      	ldrb	r0, [r0, #0]
{
   d7c42:	460c      	mov	r4, r1
    CHECK(lock());
   d7c44:	f7ff ffbe 	bl	d7bc4 <_ZN8SPIClass4lockEv.isra.0>
   d7c48:	2800      	cmp	r0, #0
   d7c4a:	db1b      	blt.n	d7c84 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d7c4c:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7c4e:	2214      	movs	r2, #20
   d7c50:	2100      	movs	r1, #0
   d7c52:	a809      	add	r0, sp, #36	; 0x24
   d7c54:	f001 f842 	bl	d8cdc <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7c58:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7c5a:	2200      	movs	r2, #0
   d7c5c:	a909      	add	r1, sp, #36	; 0x24
   d7c5e:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d7c60:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d7c64:	f7ff faee 	bl	d7244 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7c68:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d7c6c:	b113      	cbz	r3, d7c74 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d7c6e:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7c72:	b155      	cbz	r5, d7c8a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d7c74:	2700      	movs	r7, #0
   d7c76:	46b9      	mov	r9, r7
   d7c78:	46b8      	mov	r8, r7
   d7c7a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d7c7c:	7923      	ldrb	r3, [r4, #4]
   d7c7e:	b15d      	cbz	r5, d7c98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d7c80:	b1c3      	cbz	r3, d7cb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d7c82:	2000      	movs	r0, #0
}
   d7c84:	b00f      	add	sp, #60	; 0x3c
   d7c86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d7c8a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7c8e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7c92:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7c96:	e7f1      	b.n	d7c7c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7c98:	2b00      	cmp	r3, #0
   d7c9a:	d135      	bne.n	d7d08 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d7c9c:	68a3      	ldr	r3, [r4, #8]
   d7c9e:	4543      	cmp	r3, r8
   d7ca0:	d108      	bne.n	d7cb4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d7ca2:	f88d 9020 	strb.w	r9, [sp, #32]
   d7ca6:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7caa:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7cae:	89a3      	ldrh	r3, [r4, #12]
   d7cb0:	429a      	cmp	r2, r3
   d7cb2:	d0e6      	beq.n	d7c82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d7cb4:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7cb6:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7cb8:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7cbc:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7cbe:	ab04      	add	r3, sp, #16
   d7cc0:	f10d 020f 	add.w	r2, sp, #15
   d7cc4:	f7ff ffa2 	bl	d7c0c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d7cc8:	7921      	ldrb	r1, [r4, #4]
   d7cca:	b985      	cbnz	r5, d7cee <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d7ccc:	b989      	cbnz	r1, d7cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7cce:	68a3      	ldr	r3, [r4, #8]
   d7cd0:	4543      	cmp	r3, r8
   d7cd2:	d30e      	bcc.n	d7cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d7cd4:	f88d 9020 	strb.w	r9, [sp, #32]
   d7cd8:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7cdc:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7ce0:	89a3      	ldrh	r3, [r4, #12]
   d7ce2:	429a      	cmp	r2, r3
   d7ce4:	d105      	bne.n	d7cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7ce6:	9b04      	ldr	r3, [sp, #16]
   d7ce8:	4543      	cmp	r3, r8
   d7cea:	d102      	bne.n	d7cf2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7cec:	e7c9      	b.n	d7c82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d7cee:	2900      	cmp	r1, #0
   d7cf0:	d1f9      	bne.n	d7ce6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d7cf2:	2300      	movs	r3, #0
   d7cf4:	9301      	str	r3, [sp, #4]
   d7cf6:	7b63      	ldrb	r3, [r4, #13]
   d7cf8:	9300      	str	r3, [sp, #0]
   d7cfa:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7cfe:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7d00:	7830      	ldrb	r0, [r6, #0]
   d7d02:	f7ff fab7 	bl	d7274 <hal_spi_set_settings>
   d7d06:	e7bc      	b.n	d7c82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d7d08:	e9cd 5500 	strd	r5, r5, [sp]
   d7d0c:	462b      	mov	r3, r5
   d7d0e:	462a      	mov	r2, r5
   d7d10:	2101      	movs	r1, #1
   d7d12:	e7f5      	b.n	d7d00 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7d14 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7d14:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d7d16:	7800      	ldrb	r0, [r0, #0]
   d7d18:	f7ff fa7c 	bl	d7214 <hal_spi_transfer>
}
   d7d1c:	b2c0      	uxtb	r0, r0
   d7d1e:	bd08      	pop	{r3, pc}

000d7d20 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7d20:	b530      	push	{r4, r5, lr}
   d7d22:	b087      	sub	sp, #28
   d7d24:	4604      	mov	r4, r0
   d7d26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7d28:	9500      	str	r5, [sp, #0]
   d7d2a:	7800      	ldrb	r0, [r0, #0]
   d7d2c:	f7ff fa92 	bl	d7254 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d7d30:	b93d      	cbnz	r5, d7d42 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d7d32:	7820      	ldrb	r0, [r4, #0]
   d7d34:	a902      	add	r1, sp, #8
   d7d36:	f7ff fa95 	bl	d7264 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d7d3a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7d3e:	07db      	lsls	r3, r3, #31
   d7d40:	d4f7      	bmi.n	d7d32 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d7d42:	b007      	add	sp, #28
   d7d44:	bd30      	pop	{r4, r5, pc}
	...

000d7d48 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7d48:	4b05      	ldr	r3, [pc, #20]	; (d7d60 <_GLOBAL__sub_I_System+0x18>)
   d7d4a:	2202      	movs	r2, #2
   d7d4c:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7d4e:	4b05      	ldr	r3, [pc, #20]	; (d7d64 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d7d50:	4a05      	ldr	r2, [pc, #20]	; (d7d68 <_GLOBAL__sub_I_System+0x20>)
   d7d52:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d7d54:	2000      	movs	r0, #0
   d7d56:	6018      	str	r0, [r3, #0]
   d7d58:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d7d5a:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7d5c:	f7ff bb22 	b.w	d73a4 <set_system_mode>
   d7d60:	2003e5e8 	.word	0x2003e5e8
   d7d64:	2003e5dc 	.word	0x2003e5dc
   d7d68:	ffff0000 	.word	0xffff0000

000d7d6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7d6c:	4b02      	ldr	r3, [pc, #8]	; (d7d78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7d6e:	681a      	ldr	r2, [r3, #0]
   d7d70:	4b02      	ldr	r3, [pc, #8]	; (d7d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7d72:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7d74:	4770      	bx	lr
   d7d76:	bf00      	nop
   d7d78:	2003e038 	.word	0x2003e038
   d7d7c:	2003e5ec 	.word	0x2003e5ec

000d7d80 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7d80:	4770      	bx	lr

000d7d82 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7d82:	7441      	strb	r1, [r0, #17]
}
   d7d84:	4770      	bx	lr

000d7d86 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7d86:	4770      	bx	lr

000d7d88 <_ZN11USARTSerial17availableForWriteEv>:
{
   d7d88:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7d8a:	7c00      	ldrb	r0, [r0, #16]
   d7d8c:	f7ff fac2 	bl	d7314 <hal_usart_available_data_for_write>
}
   d7d90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7d94:	bd08      	pop	{r3, pc}

000d7d96 <_ZN11USARTSerial9availableEv>:
{
   d7d96:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7d98:	7c00      	ldrb	r0, [r0, #16]
   d7d9a:	f7ff fa93 	bl	d72c4 <hal_usart_available>
}
   d7d9e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7da2:	bd08      	pop	{r3, pc}

000d7da4 <_ZN11USARTSerial4peekEv>:
{
   d7da4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7da6:	7c00      	ldrb	r0, [r0, #16]
   d7da8:	f7ff fa9c 	bl	d72e4 <hal_usart_peek>
}
   d7dac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7db0:	bd08      	pop	{r3, pc}

000d7db2 <_ZN11USARTSerial4readEv>:
{
   d7db2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7db4:	7c00      	ldrb	r0, [r0, #16]
   d7db6:	f7ff fa8d 	bl	d72d4 <hal_usart_read>
}
   d7dba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7dbe:	bd08      	pop	{r3, pc}

000d7dc0 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d7dc0:	7c00      	ldrb	r0, [r0, #16]
   d7dc2:	f7ff ba97 	b.w	d72f4 <hal_usart_flush>

000d7dc6 <_ZN11USARTSerial5writeEh>:
{
   d7dc6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7dc8:	7c45      	ldrb	r5, [r0, #17]
{
   d7dca:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7dcc:	b12d      	cbz	r5, d7dda <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d7dce:	7c20      	ldrb	r0, [r4, #16]
}
   d7dd0:	b003      	add	sp, #12
   d7dd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7dd6:	f7ff ba6d 	b.w	d72b4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7dda:	7c00      	ldrb	r0, [r0, #16]
   d7ddc:	9101      	str	r1, [sp, #4]
   d7dde:	f7ff fa99 	bl	d7314 <hal_usart_available_data_for_write>
   d7de2:	2800      	cmp	r0, #0
   d7de4:	9901      	ldr	r1, [sp, #4]
   d7de6:	dcf2      	bgt.n	d7dce <_ZN11USARTSerial5writeEh+0x8>
}
   d7de8:	4628      	mov	r0, r5
   d7dea:	b003      	add	sp, #12
   d7dec:	bd30      	pop	{r4, r5, pc}

000d7dee <_ZN11USARTSerialD0Ev>:
   d7dee:	b510      	push	{r4, lr}
   d7df0:	2114      	movs	r1, #20
   d7df2:	4604      	mov	r4, r0
   d7df4:	f000 fa48 	bl	d8288 <_ZdlPvj>
   d7df8:	4620      	mov	r0, r4
   d7dfa:	bd10      	pop	{r4, pc}

000d7dfc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7dfc:	b510      	push	{r4, lr}
   d7dfe:	f04f 0c00 	mov.w	ip, #0
   d7e02:	4604      	mov	r4, r0
   d7e04:	4608      	mov	r0, r1
   d7e06:	4611      	mov	r1, r2
   d7e08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7e0c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7e10:	4a04      	ldr	r2, [pc, #16]	; (d7e24 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7e12:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7e14:	2201      	movs	r2, #1
  _serial = serial;
   d7e16:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7e18:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7e1a:	461a      	mov	r2, r3
   d7e1c:	f7ff fa42 	bl	d72a4 <hal_usart_init>
}
   d7e20:	4620      	mov	r0, r4
   d7e22:	bd10      	pop	{r4, pc}
   d7e24:	000d929c 	.word	0x000d929c

000d7e28 <_Z22__fetch_global_Serial1v>:
{
   d7e28:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7e2a:	4c0d      	ldr	r4, [pc, #52]	; (d7e60 <_Z22__fetch_global_Serial1v+0x38>)
   d7e2c:	7821      	ldrb	r1, [r4, #0]
   d7e2e:	f3bf 8f5b 	dmb	ish
   d7e32:	f011 0101 	ands.w	r1, r1, #1
   d7e36:	d110      	bne.n	d7e5a <_Z22__fetch_global_Serial1v+0x32>
   d7e38:	4620      	mov	r0, r4
   d7e3a:	9101      	str	r1, [sp, #4]
   d7e3c:	f7fc f931 	bl	d40a2 <__cxa_guard_acquire>
   d7e40:	9901      	ldr	r1, [sp, #4]
   d7e42:	b150      	cbz	r0, d7e5a <_Z22__fetch_global_Serial1v+0x32>
   d7e44:	4b07      	ldr	r3, [pc, #28]	; (d7e64 <_Z22__fetch_global_Serial1v+0x3c>)
   d7e46:	4a08      	ldr	r2, [pc, #32]	; (d7e68 <_Z22__fetch_global_Serial1v+0x40>)
   d7e48:	4808      	ldr	r0, [pc, #32]	; (d7e6c <_Z22__fetch_global_Serial1v+0x44>)
   d7e4a:	f7ff ffd7 	bl	d7dfc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7e4e:	4620      	mov	r0, r4
   d7e50:	f7fc f92c 	bl	d40ac <__cxa_guard_release>
   d7e54:	4806      	ldr	r0, [pc, #24]	; (d7e70 <_Z22__fetch_global_Serial1v+0x48>)
   d7e56:	f000 ff1f 	bl	d8c98 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7e5a:	4804      	ldr	r0, [pc, #16]	; (d7e6c <_Z22__fetch_global_Serial1v+0x44>)
   d7e5c:	b002      	add	sp, #8
   d7e5e:	bd10      	pop	{r4, pc}
   d7e60:	2003e5f0 	.word	0x2003e5f0
   d7e64:	2003e678 	.word	0x2003e678
   d7e68:	2003e5f4 	.word	0x2003e5f4
   d7e6c:	2003e6fc 	.word	0x2003e6fc
   d7e70:	000d7d87 	.word	0x000d7d87

000d7e74 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e74:	7441      	strb	r1, [r0, #17]
}
   d7e76:	4770      	bx	lr

000d7e78 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7e78:	4770      	bx	lr

000d7e7a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7e7a:	4770      	bx	lr

000d7e7c <_ZN9USBSerial4readEv>:
{
   d7e7c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7e7e:	2100      	movs	r1, #0
   d7e80:	7c00      	ldrb	r0, [r0, #16]
   d7e82:	f7ff fa6f 	bl	d7364 <HAL_USB_USART_Receive_Data>
}
   d7e86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e8a:	bd08      	pop	{r3, pc}

000d7e8c <_ZN9USBSerial4peekEv>:
{
   d7e8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7e8e:	2101      	movs	r1, #1
   d7e90:	7c00      	ldrb	r0, [r0, #16]
   d7e92:	f7ff fa67 	bl	d7364 <HAL_USB_USART_Receive_Data>
}
   d7e96:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e9a:	bd08      	pop	{r3, pc}

000d7e9c <_ZN9USBSerial17availableForWriteEv>:
{
   d7e9c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7e9e:	7c00      	ldrb	r0, [r0, #16]
   d7ea0:	f7ff fa58 	bl	d7354 <HAL_USB_USART_Available_Data_For_Write>
}
   d7ea4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ea8:	bd08      	pop	{r3, pc}

000d7eaa <_ZN9USBSerial9availableEv>:
{
   d7eaa:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7eac:	7c00      	ldrb	r0, [r0, #16]
   d7eae:	f7ff fa49 	bl	d7344 <HAL_USB_USART_Available_Data>
}
   d7eb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7eb6:	bd08      	pop	{r3, pc}

000d7eb8 <_ZN9USBSerial5writeEh>:
{
   d7eb8:	b513      	push	{r0, r1, r4, lr}
   d7eba:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ebc:	7c00      	ldrb	r0, [r0, #16]
{
   d7ebe:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7ec0:	f7ff fa48 	bl	d7354 <HAL_USB_USART_Available_Data_For_Write>
   d7ec4:	2800      	cmp	r0, #0
   d7ec6:	9901      	ldr	r1, [sp, #4]
   d7ec8:	dc01      	bgt.n	d7ece <_ZN9USBSerial5writeEh+0x16>
   d7eca:	7c60      	ldrb	r0, [r4, #17]
   d7ecc:	b120      	cbz	r0, d7ed8 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7ece:	7c20      	ldrb	r0, [r4, #16]
   d7ed0:	f7ff fa50 	bl	d7374 <HAL_USB_USART_Send_Data>
   d7ed4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7ed8:	b002      	add	sp, #8
   d7eda:	bd10      	pop	{r4, pc}

000d7edc <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7edc:	7c00      	ldrb	r0, [r0, #16]
   d7ede:	f7ff ba51 	b.w	d7384 <HAL_USB_USART_Flush_Data>

000d7ee2 <_ZN9USBSerialD0Ev>:
   d7ee2:	b510      	push	{r4, lr}
   d7ee4:	2114      	movs	r1, #20
   d7ee6:	4604      	mov	r4, r0
   d7ee8:	f000 f9ce 	bl	d8288 <_ZdlPvj>
   d7eec:	4620      	mov	r0, r4
   d7eee:	bd10      	pop	{r4, pc}

000d7ef0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7ef0:	b510      	push	{r4, lr}
   d7ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7ef6:	4604      	mov	r4, r0
   d7ef8:	4608      	mov	r0, r1
   d7efa:	2100      	movs	r1, #0
   d7efc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7f00:	4b04      	ldr	r3, [pc, #16]	; (d7f14 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7f02:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7f04:	2301      	movs	r3, #1
  _serial = serial;
   d7f06:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7f08:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7f0a:	4611      	mov	r1, r2
   d7f0c:	f7ff fa0a 	bl	d7324 <HAL_USB_USART_Init>
}
   d7f10:	4620      	mov	r0, r4
   d7f12:	bd10      	pop	{r4, pc}
   d7f14:	000d92cc 	.word	0x000d92cc

000d7f18 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7f18:	7c00      	ldrb	r0, [r0, #16]
   d7f1a:	2200      	movs	r2, #0
   d7f1c:	f7ff ba0a 	b.w	d7334 <HAL_USB_USART_Begin>

000d7f20 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d7f20:	7c00      	ldrb	r0, [r0, #16]
   d7f22:	f7ff ba37 	b.w	d7394 <HAL_USB_USART_Is_Enabled>

000d7f26 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d7f26:	f7ff bffb 	b.w	d7f20 <_ZN9USBSerial9isEnabledEv>

000d7f2a <_Z19acquireSerialBufferv>:
{
   d7f2a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7f2c:	2214      	movs	r2, #20
{
   d7f2e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7f30:	2100      	movs	r1, #0
   d7f32:	f000 fed3 	bl	d8cdc <memset>
}
   d7f36:	4620      	mov	r0, r4
   d7f38:	bd10      	pop	{r4, pc}
	...

000d7f3c <_Z16_fetch_usbserialv>:
{
   d7f3c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f3e:	4c0f      	ldr	r4, [pc, #60]	; (d7f7c <_Z16_fetch_usbserialv+0x40>)
{
   d7f40:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7f42:	a803      	add	r0, sp, #12
   d7f44:	f7ff fff1 	bl	d7f2a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f48:	7821      	ldrb	r1, [r4, #0]
   d7f4a:	f3bf 8f5b 	dmb	ish
   d7f4e:	f011 0101 	ands.w	r1, r1, #1
   d7f52:	d10f      	bne.n	d7f74 <_Z16_fetch_usbserialv+0x38>
   d7f54:	4620      	mov	r0, r4
   d7f56:	9101      	str	r1, [sp, #4]
   d7f58:	f7fc f8a3 	bl	d40a2 <__cxa_guard_acquire>
   d7f5c:	9901      	ldr	r1, [sp, #4]
   d7f5e:	b148      	cbz	r0, d7f74 <_Z16_fetch_usbserialv+0x38>
   d7f60:	aa03      	add	r2, sp, #12
   d7f62:	4807      	ldr	r0, [pc, #28]	; (d7f80 <_Z16_fetch_usbserialv+0x44>)
   d7f64:	f7ff ffc4 	bl	d7ef0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7f68:	4620      	mov	r0, r4
   d7f6a:	f7fc f89f 	bl	d40ac <__cxa_guard_release>
   d7f6e:	4805      	ldr	r0, [pc, #20]	; (d7f84 <_Z16_fetch_usbserialv+0x48>)
   d7f70:	f000 fe92 	bl	d8c98 <atexit>
	return _usbserial;
}
   d7f74:	4802      	ldr	r0, [pc, #8]	; (d7f80 <_Z16_fetch_usbserialv+0x44>)
   d7f76:	b008      	add	sp, #32
   d7f78:	bd10      	pop	{r4, pc}
   d7f7a:	bf00      	nop
   d7f7c:	2003e710 	.word	0x2003e710
   d7f80:	2003e714 	.word	0x2003e714
   d7f84:	000d7e79 	.word	0x000d7e79

000d7f88 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7f88:	2200      	movs	r2, #0
   d7f8a:	6840      	ldr	r0, [r0, #4]
   d7f8c:	4611      	mov	r1, r2
   d7f8e:	f7ff ba5d 	b.w	d744c <network_ready>

000d7f92 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7f92:	2200      	movs	r2, #0
   d7f94:	6840      	ldr	r0, [r0, #4]
   d7f96:	4611      	mov	r1, r2
   d7f98:	f7ff ba78 	b.w	d748c <network_listening>

000d7f9c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7f9c:	2200      	movs	r2, #0
   d7f9e:	6840      	ldr	r0, [r0, #4]
   d7fa0:	4611      	mov	r1, r2
   d7fa2:	f7ff ba83 	b.w	d74ac <network_get_listen_timeout>

000d7fa6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7fa6:	6840      	ldr	r0, [r0, #4]
   d7fa8:	2200      	movs	r2, #0
   d7faa:	f7ff ba77 	b.w	d749c <network_set_listen_timeout>

000d7fae <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7fae:	6840      	ldr	r0, [r0, #4]
   d7fb0:	2200      	movs	r2, #0
   d7fb2:	f081 0101 	eor.w	r1, r1, #1
   d7fb6:	f7ff ba61 	b.w	d747c <network_listen>

000d7fba <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7fba:	2300      	movs	r3, #0
   d7fbc:	6840      	ldr	r0, [r0, #4]
   d7fbe:	461a      	mov	r2, r3
   d7fc0:	4619      	mov	r1, r3
   d7fc2:	f7ff ba53 	b.w	d746c <network_off>

000d7fc6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7fc6:	2300      	movs	r3, #0
   d7fc8:	6840      	ldr	r0, [r0, #4]
   d7fca:	461a      	mov	r2, r3
   d7fcc:	4619      	mov	r1, r3
   d7fce:	f7ff ba45 	b.w	d745c <network_on>

000d7fd2 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7fd2:	2200      	movs	r2, #0
   d7fd4:	6840      	ldr	r0, [r0, #4]
   d7fd6:	4611      	mov	r1, r2
   d7fd8:	f7ff ba28 	b.w	d742c <network_connecting>

000d7fdc <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7fdc:	6840      	ldr	r0, [r0, #4]
   d7fde:	2200      	movs	r2, #0
   d7fe0:	2102      	movs	r1, #2
   d7fe2:	f7ff ba2b 	b.w	d743c <network_disconnect>

000d7fe6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7fe6:	2300      	movs	r3, #0
   d7fe8:	6840      	ldr	r0, [r0, #4]
   d7fea:	461a      	mov	r2, r3
   d7fec:	f7ff ba16 	b.w	d741c <network_connect>

000d7ff0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d7ff0:	4b02      	ldr	r3, [pc, #8]	; (d7ffc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d7ff2:	2204      	movs	r2, #4
   d7ff4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7ff6:	4a02      	ldr	r2, [pc, #8]	; (d8000 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7ff8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7ffa:	4770      	bx	lr
   d7ffc:	2003e728 	.word	0x2003e728
   d8000:	000d92fc 	.word	0x000d92fc

000d8004 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8004:	4b01      	ldr	r3, [pc, #4]	; (d800c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8006:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8008:	4770      	bx	lr
   d800a:	bf00      	nop
   d800c:	2003e03c 	.word	0x2003e03c

000d8010 <serialEventRun>:
{
   d8010:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8012:	4b0b      	ldr	r3, [pc, #44]	; (d8040 <serialEventRun+0x30>)
   d8014:	b143      	cbz	r3, d8028 <serialEventRun+0x18>
   d8016:	f7ff ff91 	bl	d7f3c <_Z16_fetch_usbserialv>
   d801a:	6803      	ldr	r3, [r0, #0]
   d801c:	691b      	ldr	r3, [r3, #16]
   d801e:	4798      	blx	r3
   d8020:	2800      	cmp	r0, #0
   d8022:	dd01      	ble.n	d8028 <serialEventRun+0x18>
        serialEvent();
   d8024:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8028:	4b06      	ldr	r3, [pc, #24]	; (d8044 <serialEventRun+0x34>)
   d802a:	b143      	cbz	r3, d803e <serialEventRun+0x2e>
   d802c:	f7ff fefc 	bl	d7e28 <_Z22__fetch_global_Serial1v>
   d8030:	6803      	ldr	r3, [r0, #0]
   d8032:	691b      	ldr	r3, [r3, #16]
   d8034:	4798      	blx	r3
   d8036:	2800      	cmp	r0, #0
   d8038:	dd01      	ble.n	d803e <serialEventRun+0x2e>
        serialEvent1();
   d803a:	f3af 8000 	nop.w
}
   d803e:	bd08      	pop	{r3, pc}
	...

000d8048 <_post_loop>:
{
   d8048:	b508      	push	{r3, lr}
	serialEventRun();
   d804a:	f7ff ffe1 	bl	d8010 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d804e:	f7ff f849 	bl	d70e4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8052:	4b01      	ldr	r3, [pc, #4]	; (d8058 <_post_loop+0x10>)
   d8054:	6018      	str	r0, [r3, #0]
}
   d8056:	bd08      	pop	{r3, pc}
   d8058:	2003e738 	.word	0x2003e738

000d805c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d805c:	4805      	ldr	r0, [pc, #20]	; (d8074 <_Z33system_initialize_user_backup_ramv+0x18>)
   d805e:	4a06      	ldr	r2, [pc, #24]	; (d8078 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d8060:	4906      	ldr	r1, [pc, #24]	; (d807c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d8062:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8064:	1a12      	subs	r2, r2, r0
   d8066:	f000 fe2b 	bl	d8cc0 <memcpy>
    __backup_sram_signature = signature;
   d806a:	4b05      	ldr	r3, [pc, #20]	; (d8080 <_Z33system_initialize_user_backup_ramv+0x24>)
   d806c:	4a05      	ldr	r2, [pc, #20]	; (d8084 <_Z33system_initialize_user_backup_ramv+0x28>)
   d806e:	601a      	str	r2, [r3, #0]
}
   d8070:	bd08      	pop	{r3, pc}
   d8072:	bf00      	nop
   d8074:	2003f400 	.word	0x2003f400
   d8078:	2003f404 	.word	0x2003f404
   d807c:	000d9360 	.word	0x000d9360
   d8080:	2003f400 	.word	0x2003f400
   d8084:	9a271c1e 	.word	0x9a271c1e

000d8088 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8088:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d808a:	2300      	movs	r3, #0
   d808c:	9300      	str	r3, [sp, #0]
   d808e:	461a      	mov	r2, r3
   d8090:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8094:	f7ff f9a8 	bl	d73e8 <system_ctrl_set_result>
}
   d8098:	b003      	add	sp, #12
   d809a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d80a0 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d80a0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d80a2:	8843      	ldrh	r3, [r0, #2]
   d80a4:	2b0a      	cmp	r3, #10
   d80a6:	d008      	beq.n	d80ba <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d80a8:	2b50      	cmp	r3, #80	; 0x50
   d80aa:	d10b      	bne.n	d80c4 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d80ac:	4b09      	ldr	r3, [pc, #36]	; (d80d4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d80ae:	681b      	ldr	r3, [r3, #0]
   d80b0:	b14b      	cbz	r3, d80c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d80b2:	b003      	add	sp, #12
   d80b4:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d80b8:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d80ba:	f7ff ffe5 	bl	d8088 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d80be:	b003      	add	sp, #12
   d80c0:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d80c4:	2300      	movs	r3, #0
   d80c6:	9300      	str	r3, [sp, #0]
   d80c8:	461a      	mov	r2, r3
   d80ca:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d80ce:	f7ff f98b 	bl	d73e8 <system_ctrl_set_result>
}
   d80d2:	e7f4      	b.n	d80be <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d80d4:	2003e734 	.word	0x2003e734

000d80d8 <module_user_init_hook>:
{
   d80d8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d80da:	4812      	ldr	r0, [pc, #72]	; (d8124 <module_user_init_hook+0x4c>)
   d80dc:	2100      	movs	r1, #0
   d80de:	f7ff fa15 	bl	d750c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d80e2:	4b11      	ldr	r3, [pc, #68]	; (d8128 <module_user_init_hook+0x50>)
   d80e4:	681a      	ldr	r2, [r3, #0]
   d80e6:	4b11      	ldr	r3, [pc, #68]	; (d812c <module_user_init_hook+0x54>)
   d80e8:	429a      	cmp	r2, r3
   d80ea:	4b11      	ldr	r3, [pc, #68]	; (d8130 <module_user_init_hook+0x58>)
   d80ec:	bf0c      	ite	eq
   d80ee:	2201      	moveq	r2, #1
   d80f0:	2200      	movne	r2, #0
   d80f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d80f4:	d001      	beq.n	d80fa <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d80f6:	f7ff ffb1 	bl	d805c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d80fa:	f7fe ffdb 	bl	d70b4 <HAL_RNG_GetRandomNumber>
   d80fe:	4604      	mov	r4, r0
    srand(seed);
   d8100:	f000 fdf4 	bl	d8cec <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8104:	4b0b      	ldr	r3, [pc, #44]	; (d8134 <module_user_init_hook+0x5c>)
   d8106:	b113      	cbz	r3, d810e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8108:	4620      	mov	r0, r4
   d810a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d810e:	2100      	movs	r1, #0
   d8110:	4808      	ldr	r0, [pc, #32]	; (d8134 <module_user_init_hook+0x5c>)
   d8112:	f7ff f97b 	bl	d740c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d811a:	4807      	ldr	r0, [pc, #28]	; (d8138 <module_user_init_hook+0x60>)
   d811c:	2100      	movs	r1, #0
   d811e:	f7ff b959 	b.w	d73d4 <system_ctrl_set_app_request_handler>
   d8122:	bf00      	nop
   d8124:	000d8005 	.word	0x000d8005
   d8128:	2003f400 	.word	0x2003f400
   d812c:	9a271c1e 	.word	0x9a271c1e
   d8130:	2003e730 	.word	0x2003e730
   d8134:	00000000 	.word	0x00000000
   d8138:	000d80a1 	.word	0x000d80a1

000d813c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d813c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d813e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8140:	d902      	bls.n	d8148 <pinAvailable+0xc>
    return false;
   d8142:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8144:	b002      	add	sp, #8
   d8146:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d8148:	f1a0 030b 	sub.w	r3, r0, #11
   d814c:	2b02      	cmp	r3, #2
   d814e:	d81a      	bhi.n	d8186 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8150:	4c17      	ldr	r4, [pc, #92]	; (d81b0 <pinAvailable+0x74>)
   d8152:	7821      	ldrb	r1, [r4, #0]
   d8154:	f3bf 8f5b 	dmb	ish
   d8158:	f011 0101 	ands.w	r1, r1, #1
   d815c:	d10b      	bne.n	d8176 <pinAvailable+0x3a>
   d815e:	4620      	mov	r0, r4
   d8160:	9101      	str	r1, [sp, #4]
   d8162:	f7fb ff9e 	bl	d40a2 <__cxa_guard_acquire>
   d8166:	9901      	ldr	r1, [sp, #4]
   d8168:	b128      	cbz	r0, d8176 <pinAvailable+0x3a>
   d816a:	4812      	ldr	r0, [pc, #72]	; (d81b4 <pinAvailable+0x78>)
   d816c:	f7ff fd30 	bl	d7bd0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8170:	4620      	mov	r0, r4
   d8172:	f7fb ff9b 	bl	d40ac <__cxa_guard_release>
   d8176:	4b0f      	ldr	r3, [pc, #60]	; (d81b4 <pinAvailable+0x78>)
   d8178:	7818      	ldrb	r0, [r3, #0]
   d817a:	f7ff f85b 	bl	d7234 <hal_spi_is_enabled>
   d817e:	2800      	cmp	r0, #0
   d8180:	d1df      	bne.n	d8142 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8182:	2001      	movs	r0, #1
   d8184:	e7de      	b.n	d8144 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8186:	2801      	cmp	r0, #1
   d8188:	d809      	bhi.n	d819e <pinAvailable+0x62>
   d818a:	f000 f859 	bl	d8240 <_Z19__fetch_global_Wirev>
   d818e:	2100      	movs	r1, #0
   d8190:	7c00      	ldrb	r0, [r0, #16]
   d8192:	f7ff f807 	bl	d71a4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8196:	f080 0001 	eor.w	r0, r0, #1
   d819a:	b2c0      	uxtb	r0, r0
   d819c:	e7d2      	b.n	d8144 <pinAvailable+0x8>
   d819e:	3809      	subs	r0, #9
   d81a0:	2801      	cmp	r0, #1
   d81a2:	d8ee      	bhi.n	d8182 <pinAvailable+0x46>
   d81a4:	f7ff fe40 	bl	d7e28 <_Z22__fetch_global_Serial1v>
   d81a8:	7c00      	ldrb	r0, [r0, #16]
   d81aa:	f7ff f8ab 	bl	d7304 <hal_usart_is_enabled>
   d81ae:	e7f2      	b.n	d8196 <pinAvailable+0x5a>
   d81b0:	2003e0a4 	.word	0x2003e0a4
   d81b4:	2003e0a8 	.word	0x2003e0a8

000d81b8 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d81b8:	2823      	cmp	r0, #35	; 0x23
{
   d81ba:	b538      	push	{r3, r4, r5, lr}
   d81bc:	4604      	mov	r4, r0
   d81be:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d81c0:	d80a      	bhi.n	d81d8 <pinMode+0x20>
   d81c2:	29ff      	cmp	r1, #255	; 0xff
   d81c4:	d008      	beq.n	d81d8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d81c6:	f7ff ffb9 	bl	d813c <pinAvailable>
   d81ca:	b128      	cbz	r0, d81d8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d81cc:	4629      	mov	r1, r5
   d81ce:	4620      	mov	r0, r4
}
   d81d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d81d4:	f7fe bf8e 	b.w	d70f4 <HAL_Pin_Mode>
}
   d81d8:	bd38      	pop	{r3, r4, r5, pc}

000d81da <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d81da:	b538      	push	{r3, r4, r5, lr}
   d81dc:	4604      	mov	r4, r0
   d81de:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d81e0:	f7fe ff90 	bl	d7104 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d81e4:	28ff      	cmp	r0, #255	; 0xff
   d81e6:	d010      	beq.n	d820a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d81e8:	2806      	cmp	r0, #6
   d81ea:	d804      	bhi.n	d81f6 <digitalWrite+0x1c>
   d81ec:	234d      	movs	r3, #77	; 0x4d
   d81ee:	fa23 f000 	lsr.w	r0, r3, r0
   d81f2:	07c3      	lsls	r3, r0, #31
   d81f4:	d409      	bmi.n	d820a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d81f6:	4620      	mov	r0, r4
   d81f8:	f7ff ffa0 	bl	d813c <pinAvailable>
   d81fc:	b128      	cbz	r0, d820a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d81fe:	4629      	mov	r1, r5
   d8200:	4620      	mov	r0, r4
}
   d8202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8206:	f7fe bf85 	b.w	d7114 <HAL_GPIO_Write>
}
   d820a:	bd38      	pop	{r3, r4, r5, pc}

000d820c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d820c:	4770      	bx	lr
	...

000d8210 <_Z17acquireWireBufferv>:
{
   d8210:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d8212:	2300      	movs	r3, #0
   d8214:	2520      	movs	r5, #32
   d8216:	8043      	strh	r3, [r0, #2]
   d8218:	2314      	movs	r3, #20
{
   d821a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d821c:	8003      	strh	r3, [r0, #0]
   d821e:	6085      	str	r5, [r0, #8]
   d8220:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8222:	4906      	ldr	r1, [pc, #24]	; (d823c <_Z17acquireWireBufferv+0x2c>)
   d8224:	4628      	mov	r0, r5
   d8226:	f000 f831 	bl	d828c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d822a:	4904      	ldr	r1, [pc, #16]	; (d823c <_Z17acquireWireBufferv+0x2c>)
	};
   d822c:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d822e:	4628      	mov	r0, r5
   d8230:	f000 f82c 	bl	d828c <_ZnajRKSt9nothrow_t>
	};
   d8234:	60e0      	str	r0, [r4, #12]
}
   d8236:	4620      	mov	r0, r4
   d8238:	bd38      	pop	{r3, r4, r5, pc}
   d823a:	bf00      	nop
   d823c:	000d9330 	.word	0x000d9330

000d8240 <_Z19__fetch_global_Wirev>:
{
   d8240:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8242:	4d0e      	ldr	r5, [pc, #56]	; (d827c <_Z19__fetch_global_Wirev+0x3c>)
   d8244:	7829      	ldrb	r1, [r5, #0]
   d8246:	f3bf 8f5b 	dmb	ish
   d824a:	f011 0401 	ands.w	r4, r1, #1
{
   d824e:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8250:	d111      	bne.n	d8276 <_Z19__fetch_global_Wirev+0x36>
   d8252:	4628      	mov	r0, r5
   d8254:	f7fb ff25 	bl	d40a2 <__cxa_guard_acquire>
   d8258:	b168      	cbz	r0, d8276 <_Z19__fetch_global_Wirev+0x36>
   d825a:	a801      	add	r0, sp, #4
   d825c:	f7ff ffd8 	bl	d8210 <_Z17acquireWireBufferv>
   d8260:	aa01      	add	r2, sp, #4
   d8262:	4621      	mov	r1, r4
   d8264:	4806      	ldr	r0, [pc, #24]	; (d8280 <_Z19__fetch_global_Wirev+0x40>)
   d8266:	f7ff f9cf 	bl	d7608 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d826a:	4628      	mov	r0, r5
   d826c:	f7fb ff1e 	bl	d40ac <__cxa_guard_release>
   d8270:	4804      	ldr	r0, [pc, #16]	; (d8284 <_Z19__fetch_global_Wirev+0x44>)
   d8272:	f000 fd11 	bl	d8c98 <atexit>
	return wire;
}
   d8276:	4802      	ldr	r0, [pc, #8]	; (d8280 <_Z19__fetch_global_Wirev+0x40>)
   d8278:	b007      	add	sp, #28
   d827a:	bd30      	pop	{r4, r5, pc}
   d827c:	2003e73c 	.word	0x2003e73c
   d8280:	2003e740 	.word	0x2003e740
   d8284:	000d820d 	.word	0x000d820d

000d8288 <_ZdlPvj>:
   d8288:	f7fb bf09 	b.w	d409e <_ZdlPv>

000d828c <_ZnajRKSt9nothrow_t>:
   d828c:	f7fb bf05 	b.w	d409a <_Znaj>

000d8290 <__aeabi_drsub>:
   d8290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8294:	e002      	b.n	d829c <__adddf3>
   d8296:	bf00      	nop

000d8298 <__aeabi_dsub>:
   d8298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d829c <__adddf3>:
   d829c:	b530      	push	{r4, r5, lr}
   d829e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d82a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d82a6:	ea94 0f05 	teq	r4, r5
   d82aa:	bf08      	it	eq
   d82ac:	ea90 0f02 	teqeq	r0, r2
   d82b0:	bf1f      	itttt	ne
   d82b2:	ea54 0c00 	orrsne.w	ip, r4, r0
   d82b6:	ea55 0c02 	orrsne.w	ip, r5, r2
   d82ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d82be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d82c2:	f000 80e2 	beq.w	d848a <__adddf3+0x1ee>
   d82c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d82ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d82ce:	bfb8      	it	lt
   d82d0:	426d      	neglt	r5, r5
   d82d2:	dd0c      	ble.n	d82ee <__adddf3+0x52>
   d82d4:	442c      	add	r4, r5
   d82d6:	ea80 0202 	eor.w	r2, r0, r2
   d82da:	ea81 0303 	eor.w	r3, r1, r3
   d82de:	ea82 0000 	eor.w	r0, r2, r0
   d82e2:	ea83 0101 	eor.w	r1, r3, r1
   d82e6:	ea80 0202 	eor.w	r2, r0, r2
   d82ea:	ea81 0303 	eor.w	r3, r1, r3
   d82ee:	2d36      	cmp	r5, #54	; 0x36
   d82f0:	bf88      	it	hi
   d82f2:	bd30      	pophi	{r4, r5, pc}
   d82f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d82f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d82fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8304:	d002      	beq.n	d830c <__adddf3+0x70>
   d8306:	4240      	negs	r0, r0
   d8308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d830c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8310:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8318:	d002      	beq.n	d8320 <__adddf3+0x84>
   d831a:	4252      	negs	r2, r2
   d831c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8320:	ea94 0f05 	teq	r4, r5
   d8324:	f000 80a7 	beq.w	d8476 <__adddf3+0x1da>
   d8328:	f1a4 0401 	sub.w	r4, r4, #1
   d832c:	f1d5 0e20 	rsbs	lr, r5, #32
   d8330:	db0d      	blt.n	d834e <__adddf3+0xb2>
   d8332:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8336:	fa22 f205 	lsr.w	r2, r2, r5
   d833a:	1880      	adds	r0, r0, r2
   d833c:	f141 0100 	adc.w	r1, r1, #0
   d8340:	fa03 f20e 	lsl.w	r2, r3, lr
   d8344:	1880      	adds	r0, r0, r2
   d8346:	fa43 f305 	asr.w	r3, r3, r5
   d834a:	4159      	adcs	r1, r3
   d834c:	e00e      	b.n	d836c <__adddf3+0xd0>
   d834e:	f1a5 0520 	sub.w	r5, r5, #32
   d8352:	f10e 0e20 	add.w	lr, lr, #32
   d8356:	2a01      	cmp	r2, #1
   d8358:	fa03 fc0e 	lsl.w	ip, r3, lr
   d835c:	bf28      	it	cs
   d835e:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8362:	fa43 f305 	asr.w	r3, r3, r5
   d8366:	18c0      	adds	r0, r0, r3
   d8368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d836c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8370:	d507      	bpl.n	d8382 <__adddf3+0xe6>
   d8372:	f04f 0e00 	mov.w	lr, #0
   d8376:	f1dc 0c00 	rsbs	ip, ip, #0
   d837a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d837e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8386:	d31b      	bcc.n	d83c0 <__adddf3+0x124>
   d8388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d838c:	d30c      	bcc.n	d83a8 <__adddf3+0x10c>
   d838e:	0849      	lsrs	r1, r1, #1
   d8390:	ea5f 0030 	movs.w	r0, r0, rrx
   d8394:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8398:	f104 0401 	add.w	r4, r4, #1
   d839c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d83a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d83a4:	f080 809a 	bcs.w	d84dc <__adddf3+0x240>
   d83a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d83ac:	bf08      	it	eq
   d83ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d83b2:	f150 0000 	adcs.w	r0, r0, #0
   d83b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d83ba:	ea41 0105 	orr.w	r1, r1, r5
   d83be:	bd30      	pop	{r4, r5, pc}
   d83c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d83c4:	4140      	adcs	r0, r0
   d83c6:	eb41 0101 	adc.w	r1, r1, r1
   d83ca:	3c01      	subs	r4, #1
   d83cc:	bf28      	it	cs
   d83ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d83d2:	d2e9      	bcs.n	d83a8 <__adddf3+0x10c>
   d83d4:	f091 0f00 	teq	r1, #0
   d83d8:	bf04      	itt	eq
   d83da:	4601      	moveq	r1, r0
   d83dc:	2000      	moveq	r0, #0
   d83de:	fab1 f381 	clz	r3, r1
   d83e2:	bf08      	it	eq
   d83e4:	3320      	addeq	r3, #32
   d83e6:	f1a3 030b 	sub.w	r3, r3, #11
   d83ea:	f1b3 0220 	subs.w	r2, r3, #32
   d83ee:	da0c      	bge.n	d840a <__adddf3+0x16e>
   d83f0:	320c      	adds	r2, #12
   d83f2:	dd08      	ble.n	d8406 <__adddf3+0x16a>
   d83f4:	f102 0c14 	add.w	ip, r2, #20
   d83f8:	f1c2 020c 	rsb	r2, r2, #12
   d83fc:	fa01 f00c 	lsl.w	r0, r1, ip
   d8400:	fa21 f102 	lsr.w	r1, r1, r2
   d8404:	e00c      	b.n	d8420 <__adddf3+0x184>
   d8406:	f102 0214 	add.w	r2, r2, #20
   d840a:	bfd8      	it	le
   d840c:	f1c2 0c20 	rsble	ip, r2, #32
   d8410:	fa01 f102 	lsl.w	r1, r1, r2
   d8414:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8418:	bfdc      	itt	le
   d841a:	ea41 010c 	orrle.w	r1, r1, ip
   d841e:	4090      	lslle	r0, r2
   d8420:	1ae4      	subs	r4, r4, r3
   d8422:	bfa2      	ittt	ge
   d8424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8428:	4329      	orrge	r1, r5
   d842a:	bd30      	popge	{r4, r5, pc}
   d842c:	ea6f 0404 	mvn.w	r4, r4
   d8430:	3c1f      	subs	r4, #31
   d8432:	da1c      	bge.n	d846e <__adddf3+0x1d2>
   d8434:	340c      	adds	r4, #12
   d8436:	dc0e      	bgt.n	d8456 <__adddf3+0x1ba>
   d8438:	f104 0414 	add.w	r4, r4, #20
   d843c:	f1c4 0220 	rsb	r2, r4, #32
   d8440:	fa20 f004 	lsr.w	r0, r0, r4
   d8444:	fa01 f302 	lsl.w	r3, r1, r2
   d8448:	ea40 0003 	orr.w	r0, r0, r3
   d844c:	fa21 f304 	lsr.w	r3, r1, r4
   d8450:	ea45 0103 	orr.w	r1, r5, r3
   d8454:	bd30      	pop	{r4, r5, pc}
   d8456:	f1c4 040c 	rsb	r4, r4, #12
   d845a:	f1c4 0220 	rsb	r2, r4, #32
   d845e:	fa20 f002 	lsr.w	r0, r0, r2
   d8462:	fa01 f304 	lsl.w	r3, r1, r4
   d8466:	ea40 0003 	orr.w	r0, r0, r3
   d846a:	4629      	mov	r1, r5
   d846c:	bd30      	pop	{r4, r5, pc}
   d846e:	fa21 f004 	lsr.w	r0, r1, r4
   d8472:	4629      	mov	r1, r5
   d8474:	bd30      	pop	{r4, r5, pc}
   d8476:	f094 0f00 	teq	r4, #0
   d847a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d847e:	bf06      	itte	eq
   d8480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8484:	3401      	addeq	r4, #1
   d8486:	3d01      	subne	r5, #1
   d8488:	e74e      	b.n	d8328 <__adddf3+0x8c>
   d848a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d848e:	bf18      	it	ne
   d8490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8494:	d029      	beq.n	d84ea <__adddf3+0x24e>
   d8496:	ea94 0f05 	teq	r4, r5
   d849a:	bf08      	it	eq
   d849c:	ea90 0f02 	teqeq	r0, r2
   d84a0:	d005      	beq.n	d84ae <__adddf3+0x212>
   d84a2:	ea54 0c00 	orrs.w	ip, r4, r0
   d84a6:	bf04      	itt	eq
   d84a8:	4619      	moveq	r1, r3
   d84aa:	4610      	moveq	r0, r2
   d84ac:	bd30      	pop	{r4, r5, pc}
   d84ae:	ea91 0f03 	teq	r1, r3
   d84b2:	bf1e      	ittt	ne
   d84b4:	2100      	movne	r1, #0
   d84b6:	2000      	movne	r0, #0
   d84b8:	bd30      	popne	{r4, r5, pc}
   d84ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d84be:	d105      	bne.n	d84cc <__adddf3+0x230>
   d84c0:	0040      	lsls	r0, r0, #1
   d84c2:	4149      	adcs	r1, r1
   d84c4:	bf28      	it	cs
   d84c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d84ca:	bd30      	pop	{r4, r5, pc}
   d84cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d84d0:	bf3c      	itt	cc
   d84d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d84d6:	bd30      	popcc	{r4, r5, pc}
   d84d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d84dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d84e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d84e4:	f04f 0000 	mov.w	r0, #0
   d84e8:	bd30      	pop	{r4, r5, pc}
   d84ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d84ee:	bf1a      	itte	ne
   d84f0:	4619      	movne	r1, r3
   d84f2:	4610      	movne	r0, r2
   d84f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d84f8:	bf1c      	itt	ne
   d84fa:	460b      	movne	r3, r1
   d84fc:	4602      	movne	r2, r0
   d84fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8502:	bf06      	itte	eq
   d8504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8508:	ea91 0f03 	teqeq	r1, r3
   d850c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8510:	bd30      	pop	{r4, r5, pc}
   d8512:	bf00      	nop

000d8514 <__aeabi_ui2d>:
   d8514:	f090 0f00 	teq	r0, #0
   d8518:	bf04      	itt	eq
   d851a:	2100      	moveq	r1, #0
   d851c:	4770      	bxeq	lr
   d851e:	b530      	push	{r4, r5, lr}
   d8520:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8524:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8528:	f04f 0500 	mov.w	r5, #0
   d852c:	f04f 0100 	mov.w	r1, #0
   d8530:	e750      	b.n	d83d4 <__adddf3+0x138>
   d8532:	bf00      	nop

000d8534 <__aeabi_i2d>:
   d8534:	f090 0f00 	teq	r0, #0
   d8538:	bf04      	itt	eq
   d853a:	2100      	moveq	r1, #0
   d853c:	4770      	bxeq	lr
   d853e:	b530      	push	{r4, r5, lr}
   d8540:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8544:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d854c:	bf48      	it	mi
   d854e:	4240      	negmi	r0, r0
   d8550:	f04f 0100 	mov.w	r1, #0
   d8554:	e73e      	b.n	d83d4 <__adddf3+0x138>
   d8556:	bf00      	nop

000d8558 <__aeabi_f2d>:
   d8558:	0042      	lsls	r2, r0, #1
   d855a:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d855e:	ea4f 0131 	mov.w	r1, r1, rrx
   d8562:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8566:	bf1f      	itttt	ne
   d8568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d856c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8574:	4770      	bxne	lr
   d8576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d857a:	bf08      	it	eq
   d857c:	4770      	bxeq	lr
   d857e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8582:	bf04      	itt	eq
   d8584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8588:	4770      	bxeq	lr
   d858a:	b530      	push	{r4, r5, lr}
   d858c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8598:	e71c      	b.n	d83d4 <__adddf3+0x138>
   d859a:	bf00      	nop

000d859c <__aeabi_ul2d>:
   d859c:	ea50 0201 	orrs.w	r2, r0, r1
   d85a0:	bf08      	it	eq
   d85a2:	4770      	bxeq	lr
   d85a4:	b530      	push	{r4, r5, lr}
   d85a6:	f04f 0500 	mov.w	r5, #0
   d85aa:	e00a      	b.n	d85c2 <__aeabi_l2d+0x16>

000d85ac <__aeabi_l2d>:
   d85ac:	ea50 0201 	orrs.w	r2, r0, r1
   d85b0:	bf08      	it	eq
   d85b2:	4770      	bxeq	lr
   d85b4:	b530      	push	{r4, r5, lr}
   d85b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d85ba:	d502      	bpl.n	d85c2 <__aeabi_l2d+0x16>
   d85bc:	4240      	negs	r0, r0
   d85be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d85c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d85c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d85ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d85ce:	f43f aed8 	beq.w	d8382 <__adddf3+0xe6>
   d85d2:	f04f 0203 	mov.w	r2, #3
   d85d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d85da:	bf18      	it	ne
   d85dc:	3203      	addne	r2, #3
   d85de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d85e2:	bf18      	it	ne
   d85e4:	3203      	addne	r2, #3
   d85e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d85ea:	f1c2 0320 	rsb	r3, r2, #32
   d85ee:	fa00 fc03 	lsl.w	ip, r0, r3
   d85f2:	fa20 f002 	lsr.w	r0, r0, r2
   d85f6:	fa01 fe03 	lsl.w	lr, r1, r3
   d85fa:	ea40 000e 	orr.w	r0, r0, lr
   d85fe:	fa21 f102 	lsr.w	r1, r1, r2
   d8602:	4414      	add	r4, r2
   d8604:	e6bd      	b.n	d8382 <__adddf3+0xe6>
   d8606:	bf00      	nop

000d8608 <__aeabi_dmul>:
   d8608:	b570      	push	{r4, r5, r6, lr}
   d860a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d860e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8616:	bf1d      	ittte	ne
   d8618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d861c:	ea94 0f0c 	teqne	r4, ip
   d8620:	ea95 0f0c 	teqne	r5, ip
   d8624:	f000 f8de 	bleq	d87e4 <__aeabi_dmul+0x1dc>
   d8628:	442c      	add	r4, r5
   d862a:	ea81 0603 	eor.w	r6, r1, r3
   d862e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d863a:	bf18      	it	ne
   d863c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8648:	d038      	beq.n	d86bc <__aeabi_dmul+0xb4>
   d864a:	fba0 ce02 	umull	ip, lr, r0, r2
   d864e:	f04f 0500 	mov.w	r5, #0
   d8652:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d865a:	fbe0 e503 	umlal	lr, r5, r0, r3
   d865e:	f04f 0600 	mov.w	r6, #0
   d8662:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8666:	f09c 0f00 	teq	ip, #0
   d866a:	bf18      	it	ne
   d866c:	f04e 0e01 	orrne.w	lr, lr, #1
   d8670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d867c:	d204      	bcs.n	d8688 <__aeabi_dmul+0x80>
   d867e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8682:	416d      	adcs	r5, r5
   d8684:	eb46 0606 	adc.w	r6, r6, r6
   d8688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d868c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d869c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d86a0:	bf88      	it	hi
   d86a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d86a6:	d81e      	bhi.n	d86e6 <__aeabi_dmul+0xde>
   d86a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d86ac:	bf08      	it	eq
   d86ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d86b2:	f150 0000 	adcs.w	r0, r0, #0
   d86b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d86ba:	bd70      	pop	{r4, r5, r6, pc}
   d86bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d86c0:	ea46 0101 	orr.w	r1, r6, r1
   d86c4:	ea40 0002 	orr.w	r0, r0, r2
   d86c8:	ea81 0103 	eor.w	r1, r1, r3
   d86cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d86d0:	bfc2      	ittt	gt
   d86d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d86d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d86da:	bd70      	popgt	{r4, r5, r6, pc}
   d86dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86e0:	f04f 0e00 	mov.w	lr, #0
   d86e4:	3c01      	subs	r4, #1
   d86e6:	f300 80ab 	bgt.w	d8840 <__aeabi_dmul+0x238>
   d86ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d86ee:	bfde      	ittt	le
   d86f0:	2000      	movle	r0, #0
   d86f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d86f6:	bd70      	pople	{r4, r5, r6, pc}
   d86f8:	f1c4 0400 	rsb	r4, r4, #0
   d86fc:	3c20      	subs	r4, #32
   d86fe:	da35      	bge.n	d876c <__aeabi_dmul+0x164>
   d8700:	340c      	adds	r4, #12
   d8702:	dc1b      	bgt.n	d873c <__aeabi_dmul+0x134>
   d8704:	f104 0414 	add.w	r4, r4, #20
   d8708:	f1c4 0520 	rsb	r5, r4, #32
   d870c:	fa00 f305 	lsl.w	r3, r0, r5
   d8710:	fa20 f004 	lsr.w	r0, r0, r4
   d8714:	fa01 f205 	lsl.w	r2, r1, r5
   d8718:	ea40 0002 	orr.w	r0, r0, r2
   d871c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8728:	fa21 f604 	lsr.w	r6, r1, r4
   d872c:	eb42 0106 	adc.w	r1, r2, r6
   d8730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8734:	bf08      	it	eq
   d8736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d873a:	bd70      	pop	{r4, r5, r6, pc}
   d873c:	f1c4 040c 	rsb	r4, r4, #12
   d8740:	f1c4 0520 	rsb	r5, r4, #32
   d8744:	fa00 f304 	lsl.w	r3, r0, r4
   d8748:	fa20 f005 	lsr.w	r0, r0, r5
   d874c:	fa01 f204 	lsl.w	r2, r1, r4
   d8750:	ea40 0002 	orr.w	r0, r0, r2
   d8754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d875c:	f141 0100 	adc.w	r1, r1, #0
   d8760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8764:	bf08      	it	eq
   d8766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d876a:	bd70      	pop	{r4, r5, r6, pc}
   d876c:	f1c4 0520 	rsb	r5, r4, #32
   d8770:	fa00 f205 	lsl.w	r2, r0, r5
   d8774:	ea4e 0e02 	orr.w	lr, lr, r2
   d8778:	fa20 f304 	lsr.w	r3, r0, r4
   d877c:	fa01 f205 	lsl.w	r2, r1, r5
   d8780:	ea43 0302 	orr.w	r3, r3, r2
   d8784:	fa21 f004 	lsr.w	r0, r1, r4
   d8788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d878c:	fa21 f204 	lsr.w	r2, r1, r4
   d8790:	ea20 0002 	bic.w	r0, r0, r2
   d8794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d879c:	bf08      	it	eq
   d879e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87a2:	bd70      	pop	{r4, r5, r6, pc}
   d87a4:	f094 0f00 	teq	r4, #0
   d87a8:	d10f      	bne.n	d87ca <__aeabi_dmul+0x1c2>
   d87aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d87ae:	0040      	lsls	r0, r0, #1
   d87b0:	eb41 0101 	adc.w	r1, r1, r1
   d87b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d87b8:	bf08      	it	eq
   d87ba:	3c01      	subeq	r4, #1
   d87bc:	d0f7      	beq.n	d87ae <__aeabi_dmul+0x1a6>
   d87be:	ea41 0106 	orr.w	r1, r1, r6
   d87c2:	f095 0f00 	teq	r5, #0
   d87c6:	bf18      	it	ne
   d87c8:	4770      	bxne	lr
   d87ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d87ce:	0052      	lsls	r2, r2, #1
   d87d0:	eb43 0303 	adc.w	r3, r3, r3
   d87d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d87d8:	bf08      	it	eq
   d87da:	3d01      	subeq	r5, #1
   d87dc:	d0f7      	beq.n	d87ce <__aeabi_dmul+0x1c6>
   d87de:	ea43 0306 	orr.w	r3, r3, r6
   d87e2:	4770      	bx	lr
   d87e4:	ea94 0f0c 	teq	r4, ip
   d87e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d87ec:	bf18      	it	ne
   d87ee:	ea95 0f0c 	teqne	r5, ip
   d87f2:	d00c      	beq.n	d880e <__aeabi_dmul+0x206>
   d87f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d87f8:	bf18      	it	ne
   d87fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d87fe:	d1d1      	bne.n	d87a4 <__aeabi_dmul+0x19c>
   d8800:	ea81 0103 	eor.w	r1, r1, r3
   d8804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8808:	f04f 0000 	mov.w	r0, #0
   d880c:	bd70      	pop	{r4, r5, r6, pc}
   d880e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8812:	bf06      	itte	eq
   d8814:	4610      	moveq	r0, r2
   d8816:	4619      	moveq	r1, r3
   d8818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d881c:	d019      	beq.n	d8852 <__aeabi_dmul+0x24a>
   d881e:	ea94 0f0c 	teq	r4, ip
   d8822:	d102      	bne.n	d882a <__aeabi_dmul+0x222>
   d8824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8828:	d113      	bne.n	d8852 <__aeabi_dmul+0x24a>
   d882a:	ea95 0f0c 	teq	r5, ip
   d882e:	d105      	bne.n	d883c <__aeabi_dmul+0x234>
   d8830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8834:	bf1c      	itt	ne
   d8836:	4610      	movne	r0, r2
   d8838:	4619      	movne	r1, r3
   d883a:	d10a      	bne.n	d8852 <__aeabi_dmul+0x24a>
   d883c:	ea81 0103 	eor.w	r1, r1, r3
   d8840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d884c:	f04f 0000 	mov.w	r0, #0
   d8850:	bd70      	pop	{r4, r5, r6, pc}
   d8852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d885a:	bd70      	pop	{r4, r5, r6, pc}

000d885c <__aeabi_ddiv>:
   d885c:	b570      	push	{r4, r5, r6, lr}
   d885e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d886a:	bf1d      	ittte	ne
   d886c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8870:	ea94 0f0c 	teqne	r4, ip
   d8874:	ea95 0f0c 	teqne	r5, ip
   d8878:	f000 f8a7 	bleq	d89ca <__aeabi_ddiv+0x16e>
   d887c:	eba4 0405 	sub.w	r4, r4, r5
   d8880:	ea81 0e03 	eor.w	lr, r1, r3
   d8884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8888:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d888c:	f000 8088 	beq.w	d89a0 <__aeabi_ddiv+0x144>
   d8890:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d889c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d88a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d88a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d88a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d88ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d88b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d88b4:	429d      	cmp	r5, r3
   d88b6:	bf08      	it	eq
   d88b8:	4296      	cmpeq	r6, r2
   d88ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d88be:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d88c2:	d202      	bcs.n	d88ca <__aeabi_ddiv+0x6e>
   d88c4:	085b      	lsrs	r3, r3, #1
   d88c6:	ea4f 0232 	mov.w	r2, r2, rrx
   d88ca:	1ab6      	subs	r6, r6, r2
   d88cc:	eb65 0503 	sbc.w	r5, r5, r3
   d88d0:	085b      	lsrs	r3, r3, #1
   d88d2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d88da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d88de:	ebb6 0e02 	subs.w	lr, r6, r2
   d88e2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88e6:	bf22      	ittt	cs
   d88e8:	1ab6      	subcs	r6, r6, r2
   d88ea:	4675      	movcs	r5, lr
   d88ec:	ea40 000c 	orrcs.w	r0, r0, ip
   d88f0:	085b      	lsrs	r3, r3, #1
   d88f2:	ea4f 0232 	mov.w	r2, r2, rrx
   d88f6:	ebb6 0e02 	subs.w	lr, r6, r2
   d88fa:	eb75 0e03 	sbcs.w	lr, r5, r3
   d88fe:	bf22      	ittt	cs
   d8900:	1ab6      	subcs	r6, r6, r2
   d8902:	4675      	movcs	r5, lr
   d8904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8908:	085b      	lsrs	r3, r3, #1
   d890a:	ea4f 0232 	mov.w	r2, r2, rrx
   d890e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8912:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8916:	bf22      	ittt	cs
   d8918:	1ab6      	subcs	r6, r6, r2
   d891a:	4675      	movcs	r5, lr
   d891c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8920:	085b      	lsrs	r3, r3, #1
   d8922:	ea4f 0232 	mov.w	r2, r2, rrx
   d8926:	ebb6 0e02 	subs.w	lr, r6, r2
   d892a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d892e:	bf22      	ittt	cs
   d8930:	1ab6      	subcs	r6, r6, r2
   d8932:	4675      	movcs	r5, lr
   d8934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8938:	ea55 0e06 	orrs.w	lr, r5, r6
   d893c:	d018      	beq.n	d8970 <__aeabi_ddiv+0x114>
   d893e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8946:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d894a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d894e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d895a:	d1c0      	bne.n	d88de <__aeabi_ddiv+0x82>
   d895c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8960:	d10b      	bne.n	d897a <__aeabi_ddiv+0x11e>
   d8962:	ea41 0100 	orr.w	r1, r1, r0
   d8966:	f04f 0000 	mov.w	r0, #0
   d896a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d896e:	e7b6      	b.n	d88de <__aeabi_ddiv+0x82>
   d8970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8974:	bf04      	itt	eq
   d8976:	4301      	orreq	r1, r0
   d8978:	2000      	moveq	r0, #0
   d897a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d897e:	bf88      	it	hi
   d8980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8984:	f63f aeaf 	bhi.w	d86e6 <__aeabi_dmul+0xde>
   d8988:	ebb5 0c03 	subs.w	ip, r5, r3
   d898c:	bf04      	itt	eq
   d898e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8996:	f150 0000 	adcs.w	r0, r0, #0
   d899a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d899e:	bd70      	pop	{r4, r5, r6, pc}
   d89a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d89a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d89a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d89ac:	bfc2      	ittt	gt
   d89ae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d89b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d89b6:	bd70      	popgt	{r4, r5, r6, pc}
   d89b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d89bc:	f04f 0e00 	mov.w	lr, #0
   d89c0:	3c01      	subs	r4, #1
   d89c2:	e690      	b.n	d86e6 <__aeabi_dmul+0xde>
   d89c4:	ea45 0e06 	orr.w	lr, r5, r6
   d89c8:	e68d      	b.n	d86e6 <__aeabi_dmul+0xde>
   d89ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d89ce:	ea94 0f0c 	teq	r4, ip
   d89d2:	bf08      	it	eq
   d89d4:	ea95 0f0c 	teqeq	r5, ip
   d89d8:	f43f af3b 	beq.w	d8852 <__aeabi_dmul+0x24a>
   d89dc:	ea94 0f0c 	teq	r4, ip
   d89e0:	d10a      	bne.n	d89f8 <__aeabi_ddiv+0x19c>
   d89e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d89e6:	f47f af34 	bne.w	d8852 <__aeabi_dmul+0x24a>
   d89ea:	ea95 0f0c 	teq	r5, ip
   d89ee:	f47f af25 	bne.w	d883c <__aeabi_dmul+0x234>
   d89f2:	4610      	mov	r0, r2
   d89f4:	4619      	mov	r1, r3
   d89f6:	e72c      	b.n	d8852 <__aeabi_dmul+0x24a>
   d89f8:	ea95 0f0c 	teq	r5, ip
   d89fc:	d106      	bne.n	d8a0c <__aeabi_ddiv+0x1b0>
   d89fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8a02:	f43f aefd 	beq.w	d8800 <__aeabi_dmul+0x1f8>
   d8a06:	4610      	mov	r0, r2
   d8a08:	4619      	mov	r1, r3
   d8a0a:	e722      	b.n	d8852 <__aeabi_dmul+0x24a>
   d8a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8a10:	bf18      	it	ne
   d8a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8a16:	f47f aec5 	bne.w	d87a4 <__aeabi_dmul+0x19c>
   d8a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8a1e:	f47f af0d 	bne.w	d883c <__aeabi_dmul+0x234>
   d8a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8a26:	f47f aeeb 	bne.w	d8800 <__aeabi_dmul+0x1f8>
   d8a2a:	e712      	b.n	d8852 <__aeabi_dmul+0x24a>

000d8a2c <__gedf2>:
   d8a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8a30:	e006      	b.n	d8a40 <__cmpdf2+0x4>
   d8a32:	bf00      	nop

000d8a34 <__ledf2>:
   d8a34:	f04f 0c01 	mov.w	ip, #1
   d8a38:	e002      	b.n	d8a40 <__cmpdf2+0x4>
   d8a3a:	bf00      	nop

000d8a3c <__cmpdf2>:
   d8a3c:	f04f 0c01 	mov.w	ip, #1
   d8a40:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8a50:	bf18      	it	ne
   d8a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8a56:	d01b      	beq.n	d8a90 <__cmpdf2+0x54>
   d8a58:	b001      	add	sp, #4
   d8a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8a5e:	bf0c      	ite	eq
   d8a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8a64:	ea91 0f03 	teqne	r1, r3
   d8a68:	bf02      	ittt	eq
   d8a6a:	ea90 0f02 	teqeq	r0, r2
   d8a6e:	2000      	moveq	r0, #0
   d8a70:	4770      	bxeq	lr
   d8a72:	f110 0f00 	cmn.w	r0, #0
   d8a76:	ea91 0f03 	teq	r1, r3
   d8a7a:	bf58      	it	pl
   d8a7c:	4299      	cmppl	r1, r3
   d8a7e:	bf08      	it	eq
   d8a80:	4290      	cmpeq	r0, r2
   d8a82:	bf2c      	ite	cs
   d8a84:	17d8      	asrcs	r0, r3, #31
   d8a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8a8a:	f040 0001 	orr.w	r0, r0, #1
   d8a8e:	4770      	bx	lr
   d8a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8a98:	d102      	bne.n	d8aa0 <__cmpdf2+0x64>
   d8a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8a9e:	d107      	bne.n	d8ab0 <__cmpdf2+0x74>
   d8aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8aa8:	d1d6      	bne.n	d8a58 <__cmpdf2+0x1c>
   d8aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8aae:	d0d3      	beq.n	d8a58 <__cmpdf2+0x1c>
   d8ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8ab4:	4770      	bx	lr
   d8ab6:	bf00      	nop

000d8ab8 <__aeabi_cdrcmple>:
   d8ab8:	4684      	mov	ip, r0
   d8aba:	4610      	mov	r0, r2
   d8abc:	4662      	mov	r2, ip
   d8abe:	468c      	mov	ip, r1
   d8ac0:	4619      	mov	r1, r3
   d8ac2:	4663      	mov	r3, ip
   d8ac4:	e000      	b.n	d8ac8 <__aeabi_cdcmpeq>
   d8ac6:	bf00      	nop

000d8ac8 <__aeabi_cdcmpeq>:
   d8ac8:	b501      	push	{r0, lr}
   d8aca:	f7ff ffb7 	bl	d8a3c <__cmpdf2>
   d8ace:	2800      	cmp	r0, #0
   d8ad0:	bf48      	it	mi
   d8ad2:	f110 0f00 	cmnmi.w	r0, #0
   d8ad6:	bd01      	pop	{r0, pc}

000d8ad8 <__aeabi_dcmpeq>:
   d8ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8adc:	f7ff fff4 	bl	d8ac8 <__aeabi_cdcmpeq>
   d8ae0:	bf0c      	ite	eq
   d8ae2:	2001      	moveq	r0, #1
   d8ae4:	2000      	movne	r0, #0
   d8ae6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8aea:	bf00      	nop

000d8aec <__aeabi_dcmplt>:
   d8aec:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8af0:	f7ff ffea 	bl	d8ac8 <__aeabi_cdcmpeq>
   d8af4:	bf34      	ite	cc
   d8af6:	2001      	movcc	r0, #1
   d8af8:	2000      	movcs	r0, #0
   d8afa:	f85d fb08 	ldr.w	pc, [sp], #8
   d8afe:	bf00      	nop

000d8b00 <__aeabi_dcmple>:
   d8b00:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b04:	f7ff ffe0 	bl	d8ac8 <__aeabi_cdcmpeq>
   d8b08:	bf94      	ite	ls
   d8b0a:	2001      	movls	r0, #1
   d8b0c:	2000      	movhi	r0, #0
   d8b0e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b12:	bf00      	nop

000d8b14 <__aeabi_dcmpge>:
   d8b14:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b18:	f7ff ffce 	bl	d8ab8 <__aeabi_cdrcmple>
   d8b1c:	bf94      	ite	ls
   d8b1e:	2001      	movls	r0, #1
   d8b20:	2000      	movhi	r0, #0
   d8b22:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b26:	bf00      	nop

000d8b28 <__aeabi_dcmpgt>:
   d8b28:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b2c:	f7ff ffc4 	bl	d8ab8 <__aeabi_cdrcmple>
   d8b30:	bf34      	ite	cc
   d8b32:	2001      	movcc	r0, #1
   d8b34:	2000      	movcs	r0, #0
   d8b36:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b3a:	bf00      	nop

000d8b3c <__aeabi_dcmpun>:
   d8b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b44:	d102      	bne.n	d8b4c <__aeabi_dcmpun+0x10>
   d8b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8b4a:	d10a      	bne.n	d8b62 <__aeabi_dcmpun+0x26>
   d8b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b54:	d102      	bne.n	d8b5c <__aeabi_dcmpun+0x20>
   d8b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b5a:	d102      	bne.n	d8b62 <__aeabi_dcmpun+0x26>
   d8b5c:	f04f 0000 	mov.w	r0, #0
   d8b60:	4770      	bx	lr
   d8b62:	f04f 0001 	mov.w	r0, #1
   d8b66:	4770      	bx	lr

000d8b68 <__aeabi_d2iz>:
   d8b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8b70:	d215      	bcs.n	d8b9e <__aeabi_d2iz+0x36>
   d8b72:	d511      	bpl.n	d8b98 <__aeabi_d2iz+0x30>
   d8b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8b7c:	d912      	bls.n	d8ba4 <__aeabi_d2iz+0x3c>
   d8b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8b8e:	fa23 f002 	lsr.w	r0, r3, r2
   d8b92:	bf18      	it	ne
   d8b94:	4240      	negne	r0, r0
   d8b96:	4770      	bx	lr
   d8b98:	f04f 0000 	mov.w	r0, #0
   d8b9c:	4770      	bx	lr
   d8b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8ba2:	d105      	bne.n	d8bb0 <__aeabi_d2iz+0x48>
   d8ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8ba8:	bf08      	it	eq
   d8baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8bae:	4770      	bx	lr
   d8bb0:	f04f 0000 	mov.w	r0, #0
   d8bb4:	4770      	bx	lr
   d8bb6:	bf00      	nop

000d8bb8 <__aeabi_d2uiz>:
   d8bb8:	004a      	lsls	r2, r1, #1
   d8bba:	d211      	bcs.n	d8be0 <__aeabi_d2uiz+0x28>
   d8bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8bc0:	d211      	bcs.n	d8be6 <__aeabi_d2uiz+0x2e>
   d8bc2:	d50d      	bpl.n	d8be0 <__aeabi_d2uiz+0x28>
   d8bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8bcc:	d40e      	bmi.n	d8bec <__aeabi_d2uiz+0x34>
   d8bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8bda:	fa23 f002 	lsr.w	r0, r3, r2
   d8bde:	4770      	bx	lr
   d8be0:	f04f 0000 	mov.w	r0, #0
   d8be4:	4770      	bx	lr
   d8be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8bea:	d102      	bne.n	d8bf2 <__aeabi_d2uiz+0x3a>
   d8bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8bf0:	4770      	bx	lr
   d8bf2:	f04f 0000 	mov.w	r0, #0
   d8bf6:	4770      	bx	lr

000d8bf8 <__aeabi_d2f>:
   d8bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8c00:	bf24      	itt	cs
   d8c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8c0a:	d90d      	bls.n	d8c28 <__aeabi_d2f+0x30>
   d8c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8c20:	bf08      	it	eq
   d8c22:	f020 0001 	biceq.w	r0, r0, #1
   d8c26:	4770      	bx	lr
   d8c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8c2c:	d121      	bne.n	d8c72 <__aeabi_d2f+0x7a>
   d8c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8c32:	bfbc      	itt	lt
   d8c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8c38:	4770      	bxlt	lr
   d8c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8c42:	f1c2 0218 	rsb	r2, r2, #24
   d8c46:	f1c2 0c20 	rsb	ip, r2, #32
   d8c4a:	fa10 f30c 	lsls.w	r3, r0, ip
   d8c4e:	fa20 f002 	lsr.w	r0, r0, r2
   d8c52:	bf18      	it	ne
   d8c54:	f040 0001 	orrne.w	r0, r0, #1
   d8c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8c60:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8c64:	ea40 000c 	orr.w	r0, r0, ip
   d8c68:	fa23 f302 	lsr.w	r3, r3, r2
   d8c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8c70:	e7cc      	b.n	d8c0c <__aeabi_d2f+0x14>
   d8c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8c76:	d107      	bne.n	d8c88 <__aeabi_d2f+0x90>
   d8c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8c7c:	bf1e      	ittt	ne
   d8c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8c86:	4770      	bxne	lr
   d8c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8c94:	4770      	bx	lr
   d8c96:	bf00      	nop

000d8c98 <atexit>:
   d8c98:	2300      	movs	r3, #0
   d8c9a:	4601      	mov	r1, r0
   d8c9c:	461a      	mov	r2, r3
   d8c9e:	4618      	mov	r0, r3
   d8ca0:	f000 b850 	b.w	d8d44 <__register_exitproc>

000d8ca4 <memcmp>:
   d8ca4:	b530      	push	{r4, r5, lr}
   d8ca6:	3901      	subs	r1, #1
   d8ca8:	2400      	movs	r4, #0
   d8caa:	42a2      	cmp	r2, r4
   d8cac:	d101      	bne.n	d8cb2 <memcmp+0xe>
   d8cae:	2000      	movs	r0, #0
   d8cb0:	e005      	b.n	d8cbe <memcmp+0x1a>
   d8cb2:	5d03      	ldrb	r3, [r0, r4]
   d8cb4:	3401      	adds	r4, #1
   d8cb6:	5d0d      	ldrb	r5, [r1, r4]
   d8cb8:	42ab      	cmp	r3, r5
   d8cba:	d0f6      	beq.n	d8caa <memcmp+0x6>
   d8cbc:	1b58      	subs	r0, r3, r5
   d8cbe:	bd30      	pop	{r4, r5, pc}

000d8cc0 <memcpy>:
   d8cc0:	440a      	add	r2, r1
   d8cc2:	4291      	cmp	r1, r2
   d8cc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8cc8:	d100      	bne.n	d8ccc <memcpy+0xc>
   d8cca:	4770      	bx	lr
   d8ccc:	b510      	push	{r4, lr}
   d8cce:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8cd6:	4291      	cmp	r1, r2
   d8cd8:	d1f9      	bne.n	d8cce <memcpy+0xe>
   d8cda:	bd10      	pop	{r4, pc}

000d8cdc <memset>:
   d8cdc:	4402      	add	r2, r0
   d8cde:	4603      	mov	r3, r0
   d8ce0:	4293      	cmp	r3, r2
   d8ce2:	d100      	bne.n	d8ce6 <memset+0xa>
   d8ce4:	4770      	bx	lr
   d8ce6:	f803 1b01 	strb.w	r1, [r3], #1
   d8cea:	e7f9      	b.n	d8ce0 <memset+0x4>

000d8cec <srand>:
   d8cec:	b538      	push	{r3, r4, r5, lr}
   d8cee:	4b0d      	ldr	r3, [pc, #52]	; (d8d24 <srand+0x38>)
   d8cf0:	681d      	ldr	r5, [r3, #0]
   d8cf2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8cf4:	4604      	mov	r4, r0
   d8cf6:	b97b      	cbnz	r3, d8d18 <srand+0x2c>
   d8cf8:	2018      	movs	r0, #24
   d8cfa:	f7fe fbef 	bl	d74dc <malloc>
   d8cfe:	4a0a      	ldr	r2, [pc, #40]	; (d8d28 <srand+0x3c>)
   d8d00:	4b0a      	ldr	r3, [pc, #40]	; (d8d2c <srand+0x40>)
   d8d02:	63a8      	str	r0, [r5, #56]	; 0x38
   d8d04:	e9c0 2300 	strd	r2, r3, [r0]
   d8d08:	4b09      	ldr	r3, [pc, #36]	; (d8d30 <srand+0x44>)
   d8d0a:	6083      	str	r3, [r0, #8]
   d8d0c:	230b      	movs	r3, #11
   d8d0e:	8183      	strh	r3, [r0, #12]
   d8d10:	2201      	movs	r2, #1
   d8d12:	2300      	movs	r3, #0
   d8d14:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8d18:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8d1a:	2200      	movs	r2, #0
   d8d1c:	611c      	str	r4, [r3, #16]
   d8d1e:	615a      	str	r2, [r3, #20]
   d8d20:	bd38      	pop	{r3, r4, r5, pc}
   d8d22:	bf00      	nop
   d8d24:	2003e03c 	.word	0x2003e03c
   d8d28:	abcd330e 	.word	0xabcd330e
   d8d2c:	e66d1234 	.word	0xe66d1234
   d8d30:	0005deec 	.word	0x0005deec

000d8d34 <strlen>:
   d8d34:	4603      	mov	r3, r0
   d8d36:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8d3a:	2a00      	cmp	r2, #0
   d8d3c:	d1fb      	bne.n	d8d36 <strlen+0x2>
   d8d3e:	1a18      	subs	r0, r3, r0
   d8d40:	3801      	subs	r0, #1
   d8d42:	4770      	bx	lr

000d8d44 <__register_exitproc>:
   d8d44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8d48:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d8e04 <__register_exitproc+0xc0>
   d8d4c:	4606      	mov	r6, r0
   d8d4e:	f8d8 0000 	ldr.w	r0, [r8]
   d8d52:	461f      	mov	r7, r3
   d8d54:	460d      	mov	r5, r1
   d8d56:	4691      	mov	r9, r2
   d8d58:	f000 f856 	bl	d8e08 <__retarget_lock_acquire_recursive>
   d8d5c:	4b25      	ldr	r3, [pc, #148]	; (d8df4 <__register_exitproc+0xb0>)
   d8d5e:	681c      	ldr	r4, [r3, #0]
   d8d60:	b934      	cbnz	r4, d8d70 <__register_exitproc+0x2c>
   d8d62:	4c25      	ldr	r4, [pc, #148]	; (d8df8 <__register_exitproc+0xb4>)
   d8d64:	601c      	str	r4, [r3, #0]
   d8d66:	4b25      	ldr	r3, [pc, #148]	; (d8dfc <__register_exitproc+0xb8>)
   d8d68:	b113      	cbz	r3, d8d70 <__register_exitproc+0x2c>
   d8d6a:	681b      	ldr	r3, [r3, #0]
   d8d6c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d8d70:	6863      	ldr	r3, [r4, #4]
   d8d72:	2b1f      	cmp	r3, #31
   d8d74:	dd07      	ble.n	d8d86 <__register_exitproc+0x42>
   d8d76:	f8d8 0000 	ldr.w	r0, [r8]
   d8d7a:	f000 f847 	bl	d8e0c <__retarget_lock_release_recursive>
   d8d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8d86:	b34e      	cbz	r6, d8ddc <__register_exitproc+0x98>
   d8d88:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d8d8c:	b988      	cbnz	r0, d8db2 <__register_exitproc+0x6e>
   d8d8e:	4b1c      	ldr	r3, [pc, #112]	; (d8e00 <__register_exitproc+0xbc>)
   d8d90:	b923      	cbnz	r3, d8d9c <__register_exitproc+0x58>
   d8d92:	f8d8 0000 	ldr.w	r0, [r8]
   d8d96:	f000 f838 	bl	d8e0a <__retarget_lock_release>
   d8d9a:	e7f0      	b.n	d8d7e <__register_exitproc+0x3a>
   d8d9c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d8da0:	f7fe fb9c 	bl	d74dc <malloc>
   d8da4:	2800      	cmp	r0, #0
   d8da6:	d0f4      	beq.n	d8d92 <__register_exitproc+0x4e>
   d8da8:	2300      	movs	r3, #0
   d8daa:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d8dae:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d8db2:	6863      	ldr	r3, [r4, #4]
   d8db4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d8db8:	2201      	movs	r2, #1
   d8dba:	409a      	lsls	r2, r3
   d8dbc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d8dc0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d8dc4:	4313      	orrs	r3, r2
   d8dc6:	2e02      	cmp	r6, #2
   d8dc8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d8dcc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d8dd0:	bf02      	ittt	eq
   d8dd2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d8dd6:	431a      	orreq	r2, r3
   d8dd8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d8ddc:	6863      	ldr	r3, [r4, #4]
   d8dde:	f8d8 0000 	ldr.w	r0, [r8]
   d8de2:	1c5a      	adds	r2, r3, #1
   d8de4:	3302      	adds	r3, #2
   d8de6:	6062      	str	r2, [r4, #4]
   d8de8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d8dec:	f000 f80e 	bl	d8e0c <__retarget_lock_release_recursive>
   d8df0:	2000      	movs	r0, #0
   d8df2:	e7c6      	b.n	d8d82 <__register_exitproc+0x3e>
   d8df4:	2003e7e0 	.word	0x2003e7e0
   d8df8:	2003e754 	.word	0x2003e754
   d8dfc:	00000000 	.word	0x00000000
   d8e00:	000d74dd 	.word	0x000d74dd
   d8e04:	2003e0a0 	.word	0x2003e0a0

000d8e08 <__retarget_lock_acquire_recursive>:
   d8e08:	4770      	bx	lr

000d8e0a <__retarget_lock_release>:
   d8e0a:	4770      	bx	lr

000d8e0c <__retarget_lock_release_recursive>:
   d8e0c:	4770      	bx	lr

000d8e0e <link_code_end>:
	...

000d8e10 <dynalib_user>:
   d8e10:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8e20:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   d8e30:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d8e40:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d8e50:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   d8e60:	4f4d 4544 7525 003e 6f43 6c75 2064 6f6e     MODE%u>.Could no
   d8e70:	2074 6966 646e 4120 3753 3433 0031 6f43     t find AS7341.Co
   d8e80:	6c75 6e64 7427 6620 6e69 2064 5452 0043     uldn't find RTC.
   d8e90:	5452 2043 7369 4e20 544f 7220 6e75 696e     RTC is NOT runni
   d8ea0:	676e 0021 5741 3539 3332 6e20 746f 6620     ng!.AW9523 not f
   d8eb0:	756f 646e 203f 6843 6365 206b 6977 6972     ound? Check wiri
   d8ec0:	676e 0021 5741 3539 3332 6620 756f 646e     ng!.AW9523 found
   d8ed0:	0021 5f32 3531 325f 5f34 3037 6d30 5f73     !.2_15_24_700ms_
   d8ee0:	3231 7838 745f 7268 756f 6867 685f 6c6f     128x_through_hol
   d8ef0:	5f65 6964 756c 6974 6e6f 2e73 7363 0076     e_dilutions.csv.
   d8f00:	6144 6574 6120 646e 5420 6d69 2c65 5341     Date and Time,AS
   d8f10:	4554 2c50 5441 4d49 2c45 4147 4e49 4c2c     TEP,ATIME,GAIN,L
   d8f20:	4445 5320 6174 7574 2c73 454c 2044 6e49     ED Status,LED In
   d8f30:	6574 736e 7469 2c79 6554 7473 532c 6365     tensity,Test,Sec
   d8f40:	6e6f 7364 4d2c 6c69 696c 6573 6f63 646e     onds,Millisecond
   d8f50:	2c73 7954 6570 462c 2031 4228 7361 6369     s,Type,F1 (Basic
   d8f60:	2c29 3246 2820 6142 6973 2963 462c 2033     ),F2 (Basic),F3 
   d8f70:	4228 7361 6369 2c29 3446 2820 6142 6973     (Basic),F4 (Basi
   d8f80:	2963 462c 2035 4228 7361 6369 2c29 3646     c),F5 (Basic),F6
   d8f90:	2820 6142 6973 2963 462c 2037 4228 7361      (Basic),F7 (Bas
   d8fa0:	6369 2c29 3846 2820 6142 6973 2963 432c     ic),F8 (Basic),C
   d8fb0:	656c 7261 2820 6142 6973 2963 4e2c 5249     lear (Basic),NIR
   d8fc0:	2820 6142 6973 2963 542c 7079 2c65 3146      (Basic),Type,F1
   d8fd0:	2820 6152 2977 462c 2032 5228 7761 2c29      (Raw),F2 (Raw),
   d8fe0:	3346 2820 6152 2977 462c 2034 5228 7761     F3 (Raw),F4 (Raw
   d8ff0:	2c29 3546 2820 6152 2977 462c 2036 5228     ),F5 (Raw),F6 (R
   d9000:	7761 2c29 3746 2820 6152 2977 462c 2038     aw),F7 (Raw),F8 
   d9010:	5228 7761 2c29 6c43 6165 2072 5228 7761     (Raw),Clear (Raw
   d9020:	2c29 494e 2052 5228 7761 0029 7245 6f72     ),NIR (Raw).Erro
   d9030:	2072 706f 6e65 6e69 2067 6966 656c 0021     r opening file!.
   d9040:	7245 6f72 2072 6572 6461 6e69 2067 6c61     Error reading al
   d9050:	206c 6863 6e61 656e 736c 0021 2820 2900     l channels!. (.)
   d9060:	0020 454c 2044 4e4f 3200 3535 3600 302e      .LED ON.255.6.0
   d9070:	4200 5341 4349 4320 554f 544e 0053 4152     .BASIC COUNTS.RA
   d9080:	2057 4156 554c 5345 4600 2031 3134 6e35     W VALUES.F1 415n
   d9090:	206d 203a 2000 0020 6152 2077 6156 756c     m : .  .Raw Valu
   d90a0:	2065 203a 4600 2032 3434 6e35 206d 203a     e : .F2 445nm : 
   d90b0:	4600 2033 3834 6e30 206d 203a 4600 2034     .F3 480nm : .F4 
   d90c0:	3135 6e35 206d 203a 4600 2035 3535 6e35     515nm : .F5 555n
   d90d0:	206d 203a 4600 2036 3935 6e30 206d 203a     m : .F6 590nm : 
   d90e0:	4600 2037 3336 6e30 206d 203a 4600 2038     .F7 630nm : .F8 
   d90f0:	3836 6e30 206d 203a 4300 656c 7261 2020     680nm : .Clear  
   d9100:	2020 203a 4e00 5249 2020 2020 2020 203a       : .NIR      : 
   d9110:	4c00 4445 3020 6f20 6666 4c00 4445 3120     .LED 0 off.LED 1
   d9120:	2030 666f 0066 0000                         0 off...

000d9128 <_ZTVN8particle11SPISettingsE>:
	...
   d9130:	4155 000d 40b3 000d 40d1 000d               UA...@...@..

000d913c <_ZTV4File>:
	...
   d9144:	40cf 000d 40df 000d 411f 000d 4119 000d     .@...@...A...A..
   d9154:	40b5 000d 40f9 000d 40f3 000d 40ed 000d     .@...@...@...@..

000d9164 <CSWTCH.61>:
   d9164:	0000 3f00 0000 3f80 0000 4000 0000 4080     ...?...?...@...@
   d9174:	0000 4100 0000 4180 0000 4200 0000 4280     ...A...A...B...B
   d9184:	0000 4300 0000 4380 0000 4400               ...C...C...D

000d9190 <_ZTV15Adafruit_AS7341>:
	...
   d9198:	4c91 000d                                   .L..

000d919c <_ZL11daysInMonth>:
   d919c:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

000d91a8 <_ZTVN5spark13EthernetClassE>:
	...
   d91b0:	7593 000d 7589 000d 757f 000d 7575 000d     .u...u...u..uu..
   d91c0:	7569 000d 755d 000d 77e1 000d 77e9 000d     iu..]u...w...w..
   d91d0:	7551 000d 7549 000d 753f 000d 7535 000d     Qu..Iu..?u..5u..
   d91e0:	7819 000d                                   .x..

000d91e4 <_ZTV7TwoWire>:
	...
   d91ec:	75b1 000d 75fb 000d 75d3 000d 75b3 000d     .u...u...u...u..
   d91fc:	75db 000d 75e3 000d 75eb 000d 75f3 000d     .u...u...u...u..

000d920c <_ZTV9IPAddress>:
	...
   d9214:	76bd 000d 76ad 000d 76af 000d 7061 0070     .v...v...v..app.

000d9224 <_ZTVN5spark12NetworkClassE>:
	...
   d922c:	77a1 000d 77ab 000d 77b5 000d 77bf 000d     .w...w...w...w..
   d923c:	77c9 000d 77d5 000d 77e1 000d 77e9 000d     .w...w...w...w..
   d924c:	77f1 000d 77fd 000d 7805 000d 780f 000d     .w...w...x...x..
   d925c:	7819 000d 616e 006e 6e69 0066 766f 0066     .x..nan.inf.ovf.
   d926c:	002e                                        ..

000d926e <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d926e:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d927e:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d928e:	6d69 0065 0000                              ime...

000d9294 <_ZTV11USARTSerial>:
	...
   d929c:	7d81 000d 7def 000d 7dc7 000d 7901 000d     .}...}...}...y..
   d92ac:	7d97 000d 7db3 000d 7da5 000d 7dc1 000d     .}...}...}...}..
   d92bc:	7d83 000d 7d89 000d                         .}...}..

000d92c4 <_ZTV9USBSerial>:
	...
   d92cc:	7e7b 000d 7ee3 000d 7eb9 000d 7901 000d     {~...~...~...y..
   d92dc:	7eab 000d 7e7d 000d 7e8d 000d 7edd 000d     .~..}~...~...~..
   d92ec:	7e9d 000d 7e75 000d                         .~..u~..

000d92f4 <_ZTVN5spark9WiFiClassE>:
	...
   d92fc:	7fe7 000d 7fdd 000d 7fd3 000d 7f89 000d     ................
   d930c:	7fc7 000d 7fbb 000d 77e1 000d 77e9 000d     .........w...w..
   d931c:	7faf 000d 7fa7 000d 7f9d 000d 7f93 000d     ................
   d932c:	7819 000d                                   .x..

000d9330 <_ZSt7nothrow>:
	...

000d9331 <link_const_variable_data_end>:
   d9331:	00          	.byte	0x00
	...

000d9334 <link_constructors_location>:
   d9334:	000d4b4d 	.word	0x000d4b4d
   d9338:	000d7525 	.word	0x000d7525
   d933c:	000d759d 	.word	0x000d759d
   d9340:	000d7791 	.word	0x000d7791
   d9344:	000d78ed 	.word	0x000d78ed
   d9348:	000d7bb9 	.word	0x000d7bb9
   d934c:	000d7d49 	.word	0x000d7d49
   d9350:	000d7d6d 	.word	0x000d7d6d
   d9354:	000d7ff1 	.word	0x000d7ff1

000d9358 <link_constructors_end>:
	...
