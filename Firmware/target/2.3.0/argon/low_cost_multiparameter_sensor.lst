
/Users/jessiewynne/low_cost_multiparameter_sensor/target/2.3.0/argon/low_cost_multiparameter_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005440  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9460  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000c4  2003dfdc  000d9464  0001dfdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000750  2003e0a0  2003e0a0  0002e0a0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9528  000d9528  00029528  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9550  000d9550  00029550  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0023a0d5  00000000  00000000  00029554  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00020d06  00000000  00000000  00263629  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00032833  00000000  00000000  0028432f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b98  00000000  00000000  002b6b62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00008220  00000000  00000000  002b96fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000464f7  00000000  00000000  002c191a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00055782  00000000  00000000  00307e11  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010d257  00000000  00000000  0035d593  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007d4c  00000000  00000000  0046a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f004 fe8d 	bl	d8d50 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f004 fe95 	bl	d8d6c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003dfdc 	.word	0x2003dfdc
   d404c:	000d9464 	.word	0x000d9464
   d4050:	2003e0a0 	.word	0x2003e0a0
   d4054:	2003e0a0 	.word	0x2003e0a0
   d4058:	2003e7ed 	.word	0x2003e7ed

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 f881 	bl	d8168 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9430 	.word	0x000d9430
   d4080:	000d9454 	.word	0x000d9454

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b8ce 	b.w	d4224 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd43 	bl	d4b14 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 b821 	b.w	d80d8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f003 ba69 	b.w	d756c <malloc>

000d409a <_Znaj>:
   d409a:	f003 ba67 	b.w	d756c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f003 ba6d 	b.w	d757c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d40b2:	4770      	bx	lr

000d40b4 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
   d40b4:	7c03      	ldrb	r3, [r0, #16]
   d40b6:	f013 0308 	ands.w	r3, r3, #8
   d40ba:	bf1e      	ittt	ne
   d40bc:	6ac3      	ldrne	r3, [r0, #44]	; 0x2c
   d40be:	6a40      	ldrne	r0, [r0, #36]	; 0x24
   d40c0:	1a1b      	subne	r3, r3, r0
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
   d40c2:	2b00      	cmp	r3, #0
  }
   d40c4:	bfac      	ite	ge
   d40c6:	4618      	movge	r0, r3
   d40c8:	f06f 4000 	mvnlt.w	r0, #2147483648	; 0x80000000
   d40cc:	4770      	bx	lr

000d40ce <_ZN4FileD1Ev>:
class File : public FatFile, public Stream {
   d40ce:	4770      	bx	lr

000d40d0 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d40d0:	b510      	push	{r4, lr}
  }
   d40d2:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d40d4:	4604      	mov	r4, r0
  }
   d40d6:	f004 f91f 	bl	d8318 <_ZdlPvj>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}

000d40de <_ZN4FileD0Ev>:
   d40de:	b510      	push	{r4, lr}
   d40e0:	2134      	movs	r1, #52	; 0x34
   d40e2:	4604      	mov	r4, r0
   d40e4:	f004 f918 	bl	d8318 <_ZdlPvj>
   d40e8:	4620      	mov	r0, r4
   d40ea:	bd10      	pop	{r4, pc}

000d40ec <_ZN4File5flushEv>:
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
   d40ec:	3010      	adds	r0, #16
   d40ee:	f001 bf41 	b.w	d5f74 <_ZN7FatFile4syncEv>

000d40f2 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
   d40f2:	3010      	adds	r0, #16
   d40f4:	f001 be5c 	b.w	d5db0 <_ZN7FatFile4peekEv>

000d40f8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
   d40f8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
   d40fa:	2201      	movs	r2, #1
   d40fc:	f10d 0107 	add.w	r1, sp, #7
   d4100:	3010      	adds	r0, #16
   d4102:	f001 fda7 	bl	d5c54 <_ZN7FatFile4readEPvj>
   d4106:	2801      	cmp	r0, #1
   d4108:	bf0c      	ite	eq
   d410a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d410e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    return FatFile::read();
  }
   d4112:	b003      	add	sp, #12
   d4114:	f85d fb04 	ldr.w	pc, [sp], #4

000d4118 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
   d4118:	3010      	adds	r0, #16
   d411a:	f001 bfb5 	b.w	d6088 <_ZN7FatFile5writeEPKvj>

000d411e <_ZN4File5writeEh>:
  size_t write(uint8_t b) {
   d411e:	b507      	push	{r0, r1, r2, lr}
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
   d4120:	2201      	movs	r2, #1
   d4122:	f88d 1007 	strb.w	r1, [sp, #7]
   d4126:	3010      	adds	r0, #16
   d4128:	f10d 0107 	add.w	r1, sp, #7
   d412c:	f001 ffac 	bl	d6088 <_ZN7FatFile5writeEPKvj>
  }
   d4130:	b003      	add	sp, #12
   d4132:	f85d fb04 	ldr.w	pc, [sp], #4

000d4136 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4136:	b40e      	push	{r1, r2, r3}
   d4138:	b503      	push	{r0, r1, lr}
   d413a:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d413c:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d413e:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4142:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4144:	f003 fd4f 	bl	d7be6 <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4148:	b002      	add	sp, #8
   d414a:	f85d eb04 	ldr.w	lr, [sp], #4
   d414e:	b003      	add	sp, #12
   d4150:	4770      	bx	lr
	...

000d4154 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4154:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4156:	4604      	mov	r4, r0
   d4158:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d415a:	7922      	ldrb	r2, [r4, #4]
   d415c:	68a3      	ldr	r3, [r4, #8]
   d415e:	b132      	cbz	r2, d416e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4160:	b9a3      	cbnz	r3, d418c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4162:	490b      	ldr	r1, [pc, #44]	; (d4190 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4164:	b002      	add	sp, #8
   d4166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d416a:	f003 bc27 	b.w	d79bc <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d416e:	4a09      	ldr	r2, [pc, #36]	; (d4194 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4170:	7b26      	ldrb	r6, [r4, #12]
   d4172:	4d09      	ldr	r5, [pc, #36]	; (d4198 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4174:	4909      	ldr	r1, [pc, #36]	; (d419c <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4176:	7b64      	ldrb	r4, [r4, #13]
   d4178:	2e01      	cmp	r6, #1
   d417a:	bf18      	it	ne
   d417c:	4629      	movne	r1, r5
   d417e:	e9cd 1400 	strd	r1, r4, [sp]
   d4182:	4907      	ldr	r1, [pc, #28]	; (d41a0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4184:	f7ff ffd7 	bl	d4136 <_ZN5Print6printfEPKcz>
  }
   d4188:	b002      	add	sp, #8
   d418a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d418c:	4a05      	ldr	r2, [pc, #20]	; (d41a4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d418e:	e7ef      	b.n	d4170 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4190:	000d8ec5 	.word	0x000d8ec5
   d4194:	000d90f1 	.word	0x000d90f1
   d4198:	000d8ec1 	.word	0x000d8ec1
   d419c:	000d8ebd 	.word	0x000d8ebd
   d41a0:	000d8edb 	.word	0x000d8edb
   d41a4:	000d8eb4 	.word	0x000d8eb4

000d41a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41a8:	b530      	push	{r4, r5, lr}
   d41aa:	b085      	sub	sp, #20
class SPISettings : public Printable {
   d41ac:	4b1b      	ldr	r3, [pc, #108]	; (d421c <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x74>)
   d41ae:	9300      	str	r3, [sp, #0]
   d41b0:	7913      	ldrb	r3, [r2, #4]
   d41b2:	f88d 3004 	strb.w	r3, [sp, #4]
   d41b6:	6893      	ldr	r3, [r2, #8]
   d41b8:	9302      	str	r3, [sp, #8]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41ba:	f500 658c 	add.w	r5, r0, #1120	; 0x460
   d41be:	8993      	ldrh	r3, [r2, #12]
   d41c0:	f8ad 300c 	strh.w	r3, [sp, #12]
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
   d41c4:	4604      	mov	r4, r0
    return m_card.begin(&m_spi, csPin, spiSettings) &&
   d41c6:	460a      	mov	r2, r1
   d41c8:	466b      	mov	r3, sp
   d41ca:	f200 416c 	addw	r1, r0, #1132	; 0x46c
   d41ce:	4628      	mov	r0, r5
   d41d0:	f002 fd9e 	bl	d6d10 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>
   d41d4:	b910      	cbnz	r0, d41dc <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x34>
   d41d6:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
   d41d8:	b005      	add	sp, #20
   d41da:	bd30      	pop	{r4, r5, pc}
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
   d41dc:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
   d41de:	f204 453c 	addw	r5, r4, #1084	; 0x43c
    vwd()->close();
   d41e2:	4628      	mov	r0, r5
   d41e4:	f001 fefc 	bl	d5fe0 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
   d41e8:	2101      	movs	r1, #1
   d41ea:	4620      	mov	r0, r4
   d41ec:	f002 fc3e 	bl	d6a6c <_ZN9FatVolume4initEh>
   d41f0:	4601      	mov	r1, r0
   d41f2:	b168      	cbz	r0, d4210 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x68>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
   d41f4:	4621      	mov	r1, r4
   d41f6:	4628      	mov	r0, r5
   d41f8:	f001 fd13 	bl	d5c22 <_ZN7FatFile8openRootEP9FatVolume>
   d41fc:	2800      	cmp	r0, #0
   d41fe:	d0ea      	beq.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    if (!dir->isDir()) {
   d4200:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
   d4204:	f013 0f70 	tst.w	r3, #112	; 0x70
   d4208:	d0e5      	beq.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
    m_cwd = dir;
   d420a:	4b05      	ldr	r3, [pc, #20]	; (d4220 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x78>)
   d420c:	601d      	str	r5, [r3, #0]
    return true;
   d420e:	e7e3      	b.n	d41d8 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x30>
    return (part ? init(part) : init(1) || init(0))
   d4210:	4620      	mov	r0, r4
   d4212:	f002 fc2b 	bl	d6a6c <_ZN9FatVolume4initEh>
   d4216:	2800      	cmp	r0, #0
   d4218:	d1ec      	bne.n	d41f4 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x4c>
   d421a:	e7dc      	b.n	d41d6 <_ZN5SdFat5beginEhN8particle11SPISettingsE+0x2e>
   d421c:	000d9224 	.word	0x000d9224
   d4220:	2003e5a8 	.word	0x2003e5a8

000d4224 <setup>:
SdFat SD;

SYSTEM_THREAD(ENABLED);
SYSTEM_MODE(SEMI_AUTOMATIC);

void setup() {
   d4224:	b570      	push	{r4, r5, r6, lr}
   d4226:	b08e      	sub	sp, #56	; 0x38
  Serial.begin(9600);
   d4228:	f003 fed0 	bl	d7fcc <_Z16_fetch_usbserialv>
   d422c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4230:	f003 feba 	bl	d7fa8 <_ZN9USBSerial5beginEl>

  // Wait for communication with the host computer serial monitor
  while (!Serial) {
   d4234:	f003 feca 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4238:	f003 febd 	bl	d7fb6 <_ZN9USBSerialcvbEv>
   d423c:	b918      	cbnz	r0, d4246 <setup+0x22>
    delay(1);
   d423e:	2001      	movs	r0, #1
   d4240:	f003 f9b4 	bl	d75ac <delay>
  while (!Serial) {
   d4244:	e7f6      	b.n	d4234 <setup+0x10>
  }

  if (!as7341.begin(0x39)){
   d4246:	f004 f843 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d424a:	2300      	movs	r3, #0
   d424c:	4602      	mov	r2, r0
   d424e:	2139      	movs	r1, #57	; 0x39
   d4250:	483f      	ldr	r0, [pc, #252]	; (d4350 <setup+0x12c>)
   d4252:	f000 fd2b 	bl	d4cac <_ZN15Adafruit_AS73415beginEhP7TwoWirel>
   d4256:	b940      	cbnz	r0, d426a <setup+0x46>
    Serial.println("Could not find AS7341");
   d4258:	f003 feb8 	bl	d7fcc <_Z16_fetch_usbserialv>
   d425c:	493d      	ldr	r1, [pc, #244]	; (d4354 <setup+0x130>)
   d425e:	f003 fbc0 	bl	d79e2 <_ZN5Print7printlnEPKc>
    while (1) { delay(10); }
   d4262:	200a      	movs	r0, #10
   d4264:	f003 f9a2 	bl	d75ac <delay>
   d4268:	e7fb      	b.n	d4262 <setup+0x3e>
  }

  as7341.setATIME(255);      
   d426a:	21ff      	movs	r1, #255	; 0xff
   d426c:	4838      	ldr	r0, [pc, #224]	; (d4350 <setup+0x12c>)
   d426e:	f000 fdf5 	bl	d4e5c <_ZN15Adafruit_AS73418setATIMEEh>
  as7341.setASTEP(999);
   d4272:	f240 31e7 	movw	r1, #999	; 0x3e7
   d4276:	4836      	ldr	r0, [pc, #216]	; (d4350 <setup+0x12c>)
   d4278:	f000 fe15 	bl	d4ea6 <_ZN15Adafruit_AS73418setASTEPEt>
  as7341.setGain(AS7341_GAIN_128X);
   d427c:	4834      	ldr	r0, [pc, #208]	; (d4350 <setup+0x12c>)
   d427e:	2108      	movs	r1, #8
   d4280:	f000 fe38 	bl	d4ef4 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>

  if (! rtc.begin()) {
   d4284:	4834      	ldr	r0, [pc, #208]	; (d4358 <setup+0x134>)
   d4286:	f001 fbd1 	bl	d5a2c <_ZN11RTC_PCF85235beginEv>
   d428a:	b928      	cbnz	r0, d4298 <setup+0x74>
    Serial.println("Couldn't find RTC");
   d428c:	f003 fe9e 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4290:	4932      	ldr	r1, [pc, #200]	; (d435c <setup+0x138>)
   d4292:	f003 fba6 	bl	d79e2 <_ZN5Print7printlnEPKc>
    while (1);
   d4296:	e7fe      	b.n	d4296 <setup+0x72>
  }

  if (! rtc.initialized()) {
   d4298:	482f      	ldr	r0, [pc, #188]	; (d4358 <setup+0x134>)
   d429a:	f001 fbc9 	bl	d5a30 <_ZN11RTC_PCF852311initializedEv>
   d429e:	b920      	cbnz	r0, d42aa <setup+0x86>
    Serial.println("RTC is NOT running!");
   d42a0:	f003 fe94 	bl	d7fcc <_Z16_fetch_usbserialv>
   d42a4:	492e      	ldr	r1, [pc, #184]	; (d4360 <setup+0x13c>)
   d42a6:	f003 fb9c 	bl	d79e2 <_ZN5Print7printlnEPKc>
  }

  if (! aw.begin(0x58)) {
   d42aa:	f004 f811 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d42ae:	2158      	movs	r1, #88	; 0x58
   d42b0:	4602      	mov	r2, r0
   d42b2:	482c      	ldr	r0, [pc, #176]	; (d4364 <setup+0x140>)
   d42b4:	f001 f87b 	bl	d53ae <_ZN15Adafruit_AW95235beginEhP7TwoWire>
   d42b8:	b940      	cbnz	r0, d42cc <setup+0xa8>
    Serial.println("AW9523 not found? Check wiring!");
   d42ba:	f003 fe87 	bl	d7fcc <_Z16_fetch_usbserialv>
   d42be:	492a      	ldr	r1, [pc, #168]	; (d4368 <setup+0x144>)
   d42c0:	f003 fb8f 	bl	d79e2 <_ZN5Print7printlnEPKc>
    while (1) delay(10);  // halt forever
   d42c4:	200a      	movs	r0, #10
   d42c6:	f003 f971 	bl	d75ac <delay>
   d42ca:	e7fb      	b.n	d42c4 <setup+0xa0>
  }

  Serial.println("AW9523 found!");
   d42cc:	f003 fe7e 	bl	d7fcc <_Z16_fetch_usbserialv>
   d42d0:	4926      	ldr	r1, [pc, #152]	; (d436c <setup+0x148>)
   d42d2:	4d27      	ldr	r5, [pc, #156]	; (d4370 <setup+0x14c>)

  for (int i = 0; i < NumLEDs; i++) {
    aw.pinMode(LedPins[i], AW9523_LED_MODE);
   d42d4:	4e23      	ldr	r6, [pc, #140]	; (d4364 <setup+0x140>)
  Serial.println("AW9523 found!");
   d42d6:	f003 fb84 	bl	d79e2 <_ZN5Print7printlnEPKc>
  for (int i = 0; i < NumLEDs; i++) {
   d42da:	2400      	movs	r4, #0
    aw.pinMode(LedPins[i], AW9523_LED_MODE);
   d42dc:	f815 1b01 	ldrb.w	r1, [r5], #1
   d42e0:	2203      	movs	r2, #3
   d42e2:	4630      	mov	r0, r6
  for (int i = 0; i < NumLEDs; i++) {
   d42e4:	3401      	adds	r4, #1
    aw.pinMode(LedPins[i], AW9523_LED_MODE);
   d42e6:	f001 f807 	bl	d52f8 <_ZN15Adafruit_AW95237pinModeEhh>
  for (int i = 0; i < NumLEDs; i++) {
   d42ea:	2c05      	cmp	r4, #5
   d42ec:	d1f6      	bne.n	d42dc <setup+0xb8>
      dataMode_{dataMode}
   d42ee:	4b21      	ldr	r3, [pc, #132]	; (d4374 <setup+0x150>)
   d42f0:	9301      	str	r3, [sp, #4]
   d42f2:	4b21      	ldr	r3, [pc, #132]	; (d4378 <setup+0x154>)
   d42f4:	9303      	str	r3, [sp, #12]
   d42f6:	2500      	movs	r5, #0
   d42f8:	2301      	movs	r3, #1
  }

  SD.begin(SD_CHIP_SELECT);
   d42fa:	aa01      	add	r2, sp, #4
   d42fc:	4621      	mov	r1, r4
   d42fe:	481f      	ldr	r0, [pc, #124]	; (d437c <setup+0x158>)
   d4300:	f8ad 3010 	strh.w	r3, [sp, #16]
   d4304:	f88d 5008 	strb.w	r5, [sp, #8]
   d4308:	f7ff ff4e 	bl	d41a8 <_ZN5SdFat5beginEhN8particle11SPISettingsE>
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d430c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4310:	9303      	str	r3, [sp, #12]
  File() {}
   d4312:	4b1b      	ldr	r3, [pc, #108]	; (d4380 <setup+0x15c>)
   d4314:	9301      	str	r3, [sp, #4]
    tmpFile.open(vwd(), path, oflag);
   d4316:	4a1b      	ldr	r2, [pc, #108]	; (d4384 <setup+0x160>)
   d4318:	491b      	ldr	r1, [pc, #108]	; (d4388 <setup+0x164>)
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d431a:	f8ad 5014 	strh.w	r5, [sp, #20]
   d431e:	f244 2302 	movw	r3, #16898	; 0x4202
   d4322:	a805      	add	r0, sp, #20
    Print() : write_error(0) {}
   d4324:	9502      	str	r5, [sp, #8]
   d4326:	f001 fe62 	bl	d5fee <_ZN7FatFile4openEPS_PKci>

  File file = SD.open("2_15_24_700ms_128x_through_hole_dilutions.csv", FILE_WRITE);

  if (file) {
   d432a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d432e:	b143      	cbz	r3, d4342 <setup+0x11e>
    file.println("Date and Time,ASTEP,ATIME,GAIN,LED Status,LED Intensity,Test,Seconds,Milliseconds,Type,F1 (Basic),F2 (Basic),F3 (Basic),F4 (Basic),F5 (Basic),F6 (Basic),F7 (Basic),F8 (Basic),Clear (Basic),NIR (Basic),Type,F1 (Raw),F2 (Raw),F3 (Raw),F4 (Raw),F5 (Raw),F6 (Raw),F7 (Raw),F8 (Raw),Clear (Raw),NIR (Raw)"); // Headers
   d4330:	4916      	ldr	r1, [pc, #88]	; (d438c <setup+0x168>)
   d4332:	a801      	add	r0, sp, #4
   d4334:	f003 fb55 	bl	d79e2 <_ZN5Print7printlnEPKc>
    file.close();
   d4338:	a805      	add	r0, sp, #20
   d433a:	f001 fe51 	bl	d5fe0 <_ZN7FatFile5closeEv>
  } else {
    Serial.println(F("Error opening file!"));
  }
}
   d433e:	b00e      	add	sp, #56	; 0x38
   d4340:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println(F("Error opening file!"));
   d4342:	f003 fe43 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4346:	4912      	ldr	r1, [pc, #72]	; (d4390 <setup+0x16c>)
   d4348:	f003 fb55 	bl	d79f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
}
   d434c:	e7f7      	b.n	d433e <setup+0x11a>
   d434e:	bf00      	nop
   d4350:	2003e540 	.word	0x2003e540
   d4354:	000d8ef8 	.word	0x000d8ef8
   d4358:	2003e5a0 	.word	0x2003e5a0
   d435c:	000d8f0e 	.word	0x000d8f0e
   d4360:	000d8f20 	.word	0x000d8f20
   d4364:	2003e568 	.word	0x2003e568
   d4368:	000d8f34 	.word	0x000d8f34
   d436c:	000d8f54 	.word	0x000d8f54
   d4370:	000d9258 	.word	0x000d9258
   d4374:	000d9224 	.word	0x000d9224
   d4378:	02faf080 	.word	0x02faf080
   d437c:	2003e0b0 	.word	0x2003e0b0
   d4380:	000d9238 	.word	0x000d9238
   d4384:	000d8f62 	.word	0x000d8f62
   d4388:	2003e4ec 	.word	0x2003e4ec
   d438c:	000d8f90 	.word	0x000d8f90
   d4390:	000d90bc 	.word	0x000d90bc

000d4394 <_Z8blinkLEDhi>:
  while (1) {
    delay(1);
  }
}

void blinkLED(uint8_t ledIndex, int blinkCount) {
   d4394:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  for (int i = 0; i < blinkCount; i++) {
    aw.analogWrite(LedPins[ledIndex], LEDbright);
   d4398:	f8df 9050 	ldr.w	r9, [pc, #80]	; d43ec <_Z8blinkLEDhi+0x58>
   d439c:	f8df 8050 	ldr.w	r8, [pc, #80]	; d43f0 <_Z8blinkLEDhi+0x5c>
   d43a0:	4f10      	ldr	r7, [pc, #64]	; (d43e4 <_Z8blinkLEDhi+0x50>)
void blinkLED(uint8_t ledIndex, int blinkCount) {
   d43a2:	4605      	mov	r5, r0
   d43a4:	460e      	mov	r6, r1
  for (int i = 0; i < blinkCount; i++) {
   d43a6:	2400      	movs	r4, #0
   d43a8:	42b4      	cmp	r4, r6
   d43aa:	da18      	bge.n	d43de <_Z8blinkLEDhi+0x4a>
    aw.analogWrite(LedPins[ledIndex], LEDbright);
   d43ac:	f819 3005 	ldrb.w	r3, [r9, r5]
   d43b0:	f898 2000 	ldrb.w	r2, [r8]
   d43b4:	9301      	str	r3, [sp, #4]
   d43b6:	4619      	mov	r1, r3
   d43b8:	4638      	mov	r0, r7
   d43ba:	f000 ff79 	bl	d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>
    delay(500);
   d43be:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d43c2:	f003 f8f3 	bl	d75ac <delay>
    aw.analogWrite(LedPins[ledIndex], LEDdim);
   d43c6:	4b08      	ldr	r3, [pc, #32]	; (d43e8 <_Z8blinkLEDhi+0x54>)
   d43c8:	9901      	ldr	r1, [sp, #4]
   d43ca:	781a      	ldrb	r2, [r3, #0]
   d43cc:	4638      	mov	r0, r7
   d43ce:	f000 ff6f 	bl	d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>
    delay(500);
   d43d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d43d6:	f003 f8e9 	bl	d75ac <delay>
  for (int i = 0; i < blinkCount; i++) {
   d43da:	3401      	adds	r4, #1
   d43dc:	e7e4      	b.n	d43a8 <_Z8blinkLEDhi+0x14>
  }
}
   d43de:	b003      	add	sp, #12
   d43e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d43e4:	2003e568 	.word	0x2003e568
   d43e8:	2003e0ac 	.word	0x2003e0ac
   d43ec:	000d9258 	.word	0x000d9258
   d43f0:	2003dfdc 	.word	0x2003dfdc

000d43f4 <_Z9turnOnLEDhm>:

void turnOnLED(uint8_t ledIndex, unsigned long duration) {
   d43f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43f8:	4606      	mov	r6, r0
   d43fa:	460f      	mov	r7, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d43fc:	f002 feba 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < duration) {
    for (int i = 0; i < NumLEDs; i++) {
      if (i == ledIndex) {
        aw.analogWrite(LedPins[i], LEDbright);
      } else {
        aw.analogWrite(LedPins[i], LEDdim);
   d4400:	f8df 903c 	ldr.w	r9, [pc, #60]	; d4440 <_Z9turnOnLEDhm+0x4c>
   d4404:	f8df 803c 	ldr.w	r8, [pc, #60]	; d4444 <_Z9turnOnLEDhm+0x50>
   d4408:	4605      	mov	r5, r0
   d440a:	f002 feb3 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
  while (millis() - startTime < duration) {
   d440e:	1b40      	subs	r0, r0, r5
   d4410:	42b8      	cmp	r0, r7
   d4412:	d213      	bcs.n	d443c <_Z9turnOnLEDhm+0x48>
   d4414:	f8df a030 	ldr.w	sl, [pc, #48]	; d4448 <_Z9turnOnLEDhm+0x54>
        aw.analogWrite(LedPins[i], LEDbright);
   d4418:	f8df b030 	ldr.w	fp, [pc, #48]	; d444c <_Z9turnOnLEDhm+0x58>
    for (int i = 0; i < NumLEDs; i++) {
   d441c:	2400      	movs	r4, #0
      if (i == ledIndex) {
   d441e:	42a6      	cmp	r6, r4
        aw.analogWrite(LedPins[i], LEDbright);
   d4420:	bf0c      	ite	eq
   d4422:	f89b 2000 	ldrbeq.w	r2, [fp]
        aw.analogWrite(LedPins[i], LEDdim);
   d4426:	f899 2000 	ldrbne.w	r2, [r9]
   d442a:	f81a 1b01 	ldrb.w	r1, [sl], #1
   d442e:	4640      	mov	r0, r8
    for (int i = 0; i < NumLEDs; i++) {
   d4430:	3401      	adds	r4, #1
        aw.analogWrite(LedPins[i], LEDdim);
   d4432:	f000 ff3d 	bl	d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>
    for (int i = 0; i < NumLEDs; i++) {
   d4436:	2c05      	cmp	r4, #5
   d4438:	d1f1      	bne.n	d441e <_Z9turnOnLEDhm+0x2a>
   d443a:	e7e6      	b.n	d440a <_Z9turnOnLEDhm+0x16>
      }
    }
  }
}
   d443c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4440:	2003e0ac 	.word	0x2003e0ac
   d4444:	2003e568 	.word	0x2003e568
   d4448:	000d9258 	.word	0x000d9258
   d444c:	2003dfdc 	.word	0x2003dfdc

000d4450 <_ZN5Print5printItLi0EEEjT_i>:
    size_t vprintf(bool newline, const char* format, va_list args) __attribute__ ((format(printf, 3, 0)));
};

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
   d4450:	b410      	push	{r4}
{
    if (base == 0) {
   d4452:	b92a      	cbnz	r2, d4460 <_ZN5Print5printItLi0EEEjT_i+0x10>
        return write(n);
   d4454:	6802      	ldr	r2, [r0, #0]
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
    }
}
   d4456:	f85d 4b04 	ldr.w	r4, [sp], #4
        return write(n);
   d445a:	6892      	ldr	r2, [r2, #8]
   d445c:	b2c9      	uxtb	r1, r1
   d445e:	4710      	bx	r2
}
   d4460:	f85d 4b04 	ldr.w	r4, [sp], #4
        return printNumber(val, base) + t;
   d4464:	b2d2      	uxtb	r2, r2
   d4466:	f003 bac8 	b.w	d79fa <_ZN5Print11printNumberEmh>
	...

000d446c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523>:

void fileprintresults(SdFat &sd, RTC_PCF8523 &rtc) {
   d446c:	b570      	push	{r4, r5, r6, lr}
   d446e:	b0a2      	sub	sp, #136	; 0x88
   d4470:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4474:	9317      	str	r3, [sp, #92]	; 0x5c
   d4476:	4b0f      	ldr	r3, [pc, #60]	; (d44b4 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x48>)
   d4478:	4a0f      	ldr	r2, [pc, #60]	; (d44b8 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x4c>)
   d447a:	9315      	str	r3, [sp, #84]	; 0x54
   d447c:	f200 413c 	addw	r1, r0, #1084	; 0x43c
   d4480:	2400      	movs	r4, #0
   d4482:	f244 2302 	movw	r3, #16898	; 0x4202
   d4486:	a819      	add	r0, sp, #100	; 0x64
   d4488:	f8ad 4064 	strh.w	r4, [sp, #100]	; 0x64
    Print() : write_error(0) {}
   d448c:	9416      	str	r4, [sp, #88]	; 0x58
  DateTime now = rtc.now();

  uint16_t readings[12];
  float counts[12];

  if (!as7341.readAllChannels(readings)){
   d448e:	ad03      	add	r5, sp, #12
   d4490:	f001 fdad 	bl	d5fee <_ZN7FatFile4openEPS_PKci>
  DateTime now = rtc.now();
   d4494:	a801      	add	r0, sp, #4
   d4496:	f001 faec 	bl	d5a72 <_ZN11RTC_PCF85233nowEv>
  if (!as7341.readAllChannels(readings)){
   d449a:	4808      	ldr	r0, [pc, #32]	; (d44bc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x50>)
   d449c:	4629      	mov	r1, r5
   d449e:	f000 fe94 	bl	d51ca <_ZN15Adafruit_AS734115readAllChannelsEPt>
   d44a2:	b978      	cbnz	r0, d44c4 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x58>
    Serial.println("Error reading all channels!");
   d44a4:	f003 fd92 	bl	d7fcc <_Z16_fetch_usbserialv>
   d44a8:	4905      	ldr	r1, [pc, #20]	; (d44c0 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x54>)
   d44aa:	f003 fa9a 	bl	d79e2 <_ZN5Print7printlnEPKc>
    file.close();
  }
  else {
    Serial.println(F("Error opening file!"));
  }
}
   d44ae:	b022      	add	sp, #136	; 0x88
   d44b0:	bd70      	pop	{r4, r5, r6, pc}
   d44b2:	bf00      	nop
   d44b4:	000d9238 	.word	0x000d9238
   d44b8:	000d8f62 	.word	0x000d8f62
   d44bc:	2003e540 	.word	0x2003e540
   d44c0:	000d90d0 	.word	0x000d90d0
    counts[i] = as7341.toBasicCounts(readings[i]);
   d44c4:	4ecd      	ldr	r6, [pc, #820]	; (d47fc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x390>)
    if(i == 4 || i == 5) continue;
   d44c6:	1f23      	subs	r3, r4, #4
   d44c8:	b2db      	uxtb	r3, r3
   d44ca:	2b01      	cmp	r3, #1
   d44cc:	d909      	bls.n	d44e2 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x76>
    counts[i] = as7341.toBasicCounts(readings[i]);
   d44ce:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
   d44d2:	4630      	mov	r0, r6
   d44d4:	f000 fd34 	bl	d4f40 <_ZN15Adafruit_AS734113toBasicCountsEt>
   d44d8:	ab09      	add	r3, sp, #36	; 0x24
   d44da:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   d44de:	ed83 0a00 	vstr	s0, [r3]
  for(uint8_t i = 0; i < 12; i++) {
   d44e2:	3401      	adds	r4, #1
   d44e4:	2c0c      	cmp	r4, #12
   d44e6:	d1ee      	bne.n	d44c6 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x5a>
  if (file) {
   d44e8:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
   d44ec:	2b00      	cmp	r3, #0
   d44ee:	f000 817e 	beq.w	d47ee <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x382>
    DateTime (uint16_t year, uint8_t month, uint8_t day,
                uint8_t hour =0, uint8_t min =0, uint8_t sec =0);
    DateTime (const DateTime& copy);
    DateTime (const char* date, const char* time);
    DateTime (const __FlashStringHelper* date, const __FlashStringHelper* time);
    uint16_t year() const       { return 2000 + yOff; }
   d44f2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    file.print(now.year(), DEC);
   d44f6:	220a      	movs	r2, #10
   d44f8:	f501 61fa 	add.w	r1, r1, #2000	; 0x7d0
   d44fc:	a815      	add	r0, sp, #84	; 0x54
   d44fe:	f7ff ffa7 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print('/');
   d4502:	212f      	movs	r1, #47	; 0x2f
   d4504:	a815      	add	r0, sp, #84	; 0x54
   d4506:	f003 fa5d 	bl	d79c4 <_ZN5Print5printEc>
        return printNumber(val, base) + t;
   d450a:	f89d 1005 	ldrb.w	r1, [sp, #5]
   d450e:	220a      	movs	r2, #10
   d4510:	a815      	add	r0, sp, #84	; 0x54
   d4512:	f003 fa72 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print('/');
   d4516:	212f      	movs	r1, #47	; 0x2f
   d4518:	a815      	add	r0, sp, #84	; 0x54
   d451a:	f003 fa53 	bl	d79c4 <_ZN5Print5printEc>
   d451e:	220a      	movs	r2, #10
   d4520:	f89d 1006 	ldrb.w	r1, [sp, #6]
   d4524:	a815      	add	r0, sp, #84	; 0x54
   d4526:	f003 fa68 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(" (");
   d452a:	49b5      	ldr	r1, [pc, #724]	; (d4800 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x394>)
   d452c:	a815      	add	r0, sp, #84	; 0x54
   d452e:	f003 fa45 	bl	d79bc <_ZN5Print5printEPKc>
    file.print(daysOfTheWeek[now.dayOfTheWeek()]);
   d4532:	a801      	add	r0, sp, #4
   d4534:	f001 fa64 	bl	d5a00 <_ZNK8DateTime12dayOfTheWeekEv>
   d4538:	49b2      	ldr	r1, [pc, #712]	; (d4804 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x398>)
   d453a:	b200      	sxth	r0, r0
   d453c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   d4540:	eb01 0180 	add.w	r1, r1, r0, lsl #2
   d4544:	a815      	add	r0, sp, #84	; 0x54
   d4546:	f003 fa39 	bl	d79bc <_ZN5Print5printEPKc>
    file.print(") ");
   d454a:	49af      	ldr	r1, [pc, #700]	; (d4808 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x39c>)
   d454c:	a815      	add	r0, sp, #84	; 0x54
   d454e:	f003 fa35 	bl	d79bc <_ZN5Print5printEPKc>
   d4552:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4556:	220a      	movs	r2, #10
   d4558:	a815      	add	r0, sp, #84	; 0x54
   d455a:	f003 fa4e 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(':');
   d455e:	213a      	movs	r1, #58	; 0x3a
   d4560:	a815      	add	r0, sp, #84	; 0x54
   d4562:	f003 fa2f 	bl	d79c4 <_ZN5Print5printEc>
   d4566:	f89d 1008 	ldrb.w	r1, [sp, #8]
   d456a:	220a      	movs	r2, #10
   d456c:	a815      	add	r0, sp, #84	; 0x54
   d456e:	f003 fa44 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(':');
   d4572:	213a      	movs	r1, #58	; 0x3a
   d4574:	a815      	add	r0, sp, #84	; 0x54
   d4576:	f003 fa25 	bl	d79c4 <_ZN5Print5printEc>
   d457a:	220a      	movs	r2, #10
   d457c:	f89d 1009 	ldrb.w	r1, [sp, #9]
   d4580:	a815      	add	r0, sp, #84	; 0x54
   d4582:	f003 fa3a 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(',');
   d4586:	212c      	movs	r1, #44	; 0x2c
   d4588:	a815      	add	r0, sp, #84	; 0x54
   d458a:	f003 fa1b 	bl	d79c4 <_ZN5Print5printEc>
    file.print(as7341.getASTEP());
   d458e:	489b      	ldr	r0, [pc, #620]	; (d47fc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x390>)
   d4590:	f000 fc9d 	bl	d4ece <_ZN15Adafruit_AS73418getASTEPEv>
   d4594:	220a      	movs	r2, #10
   d4596:	4601      	mov	r1, r0
   d4598:	a815      	add	r0, sp, #84	; 0x54
   d459a:	f7ff ff59 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d459e:	212c      	movs	r1, #44	; 0x2c
   d45a0:	a815      	add	r0, sp, #84	; 0x54
   d45a2:	f003 fa0f 	bl	d79c4 <_ZN5Print5printEc>
    file.print(as7341.getATIME());
   d45a6:	4895      	ldr	r0, [pc, #596]	; (d47fc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x390>)
   d45a8:	f000 fc6b 	bl	d4e82 <_ZN15Adafruit_AS73418getATIMEEv>
   d45ac:	220a      	movs	r2, #10
   d45ae:	4601      	mov	r1, r0
   d45b0:	a815      	add	r0, sp, #84	; 0x54
   d45b2:	f003 fa22 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(',');
   d45b6:	212c      	movs	r1, #44	; 0x2c
   d45b8:	a815      	add	r0, sp, #84	; 0x54
   d45ba:	f003 fa03 	bl	d79c4 <_ZN5Print5printEc>
    file.print(as7341.getGain());
   d45be:	488f      	ldr	r0, [pc, #572]	; (d47fc <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x390>)
   d45c0:	f000 fcab 	bl	d4f1a <_ZN15Adafruit_AS73417getGainEv>
   d45c4:	220a      	movs	r2, #10
   d45c6:	4601      	mov	r1, r0
   d45c8:	a815      	add	r0, sp, #84	; 0x54
   d45ca:	f003 fa16 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(',');
   d45ce:	212c      	movs	r1, #44	; 0x2c
   d45d0:	a815      	add	r0, sp, #84	; 0x54
   d45d2:	f003 f9f7 	bl	d79c4 <_ZN5Print5printEc>
    file.print("LED Status");
   d45d6:	498d      	ldr	r1, [pc, #564]	; (d480c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3a0>)
   d45d8:	a815      	add	r0, sp, #84	; 0x54
   d45da:	f003 f9ef 	bl	d79bc <_ZN5Print5printEPKc>
    file.print(',');
   d45de:	212c      	movs	r1, #44	; 0x2c
   d45e0:	a815      	add	r0, sp, #84	; 0x54
   d45e2:	f003 f9ef 	bl	d79c4 <_ZN5Print5printEc>
    file.print("LED Intensity");
   d45e6:	498a      	ldr	r1, [pc, #552]	; (d4810 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3a4>)
   d45e8:	a815      	add	r0, sp, #84	; 0x54
   d45ea:	f003 f9e7 	bl	d79bc <_ZN5Print5printEPKc>
    file.print(',');
   d45ee:	212c      	movs	r1, #44	; 0x2c
   d45f0:	a815      	add	r0, sp, #84	; 0x54
   d45f2:	f003 f9e7 	bl	d79c4 <_ZN5Print5printEc>
    file.print("6.0");
   d45f6:	4987      	ldr	r1, [pc, #540]	; (d4814 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3a8>)
   d45f8:	a815      	add	r0, sp, #84	; 0x54
   d45fa:	f003 f9df 	bl	d79bc <_ZN5Print5printEPKc>
    file.print(',');
   d45fe:	212c      	movs	r1, #44	; 0x2c
   d4600:	a815      	add	r0, sp, #84	; 0x54
   d4602:	f003 f9df 	bl	d79c4 <_ZN5Print5printEc>
   d4606:	f002 fdb5 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
   d460a:	220a      	movs	r2, #10
   d460c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4610:	fbb0 f1f1 	udiv	r1, r0, r1
   d4614:	a815      	add	r0, sp, #84	; 0x54
   d4616:	f003 f9f0 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(','); 
   d461a:	212c      	movs	r1, #44	; 0x2c
   d461c:	a815      	add	r0, sp, #84	; 0x54
   d461e:	f003 f9d1 	bl	d79c4 <_ZN5Print5printEc>
   d4622:	f002 fda7 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
   d4626:	220a      	movs	r2, #10
   d4628:	4601      	mov	r1, r0
   d462a:	a815      	add	r0, sp, #84	; 0x54
   d462c:	f003 f9e5 	bl	d79fa <_ZN5Print11printNumberEmh>
    file.print(',');
   d4630:	212c      	movs	r1, #44	; 0x2c
   d4632:	a815      	add	r0, sp, #84	; 0x54
   d4634:	f003 f9c6 	bl	d79c4 <_ZN5Print5printEc>
    file.print("BASIC COUNTS");
   d4638:	4977      	ldr	r1, [pc, #476]	; (d4818 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3ac>)
   d463a:	a815      	add	r0, sp, #84	; 0x54
   d463c:	f003 f9be 	bl	d79bc <_ZN5Print5printEPKc>
    file.print(',');
   d4640:	212c      	movs	r1, #44	; 0x2c
   d4642:	a815      	add	r0, sp, #84	; 0x54
   d4644:	f003 f9be 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[0]);
   d4648:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d464c:	2102      	movs	r1, #2
   d464e:	a815      	add	r0, sp, #84	; 0x54
   d4650:	f003 faba 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d4654:	212c      	movs	r1, #44	; 0x2c
   d4656:	a815      	add	r0, sp, #84	; 0x54
   d4658:	f003 f9b4 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[1]);
   d465c:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   d4660:	2102      	movs	r1, #2
   d4662:	a815      	add	r0, sp, #84	; 0x54
   d4664:	f003 fab0 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d4668:	212c      	movs	r1, #44	; 0x2c
   d466a:	a815      	add	r0, sp, #84	; 0x54
   d466c:	f003 f9aa 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[2]);
   d4670:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   d4674:	2102      	movs	r1, #2
   d4676:	a815      	add	r0, sp, #84	; 0x54
   d4678:	f003 faa6 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d467c:	212c      	movs	r1, #44	; 0x2c
   d467e:	a815      	add	r0, sp, #84	; 0x54
   d4680:	f003 f9a0 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[3]);
   d4684:	ed9d 0a0c 	vldr	s0, [sp, #48]	; 0x30
   d4688:	2102      	movs	r1, #2
   d468a:	a815      	add	r0, sp, #84	; 0x54
   d468c:	f003 fa9c 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d4690:	212c      	movs	r1, #44	; 0x2c
   d4692:	a815      	add	r0, sp, #84	; 0x54
   d4694:	f003 f996 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[6]);
   d4698:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   d469c:	2102      	movs	r1, #2
   d469e:	a815      	add	r0, sp, #84	; 0x54
   d46a0:	f003 fa92 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d46a4:	212c      	movs	r1, #44	; 0x2c
   d46a6:	a815      	add	r0, sp, #84	; 0x54
   d46a8:	f003 f98c 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[7]);
   d46ac:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   d46b0:	2102      	movs	r1, #2
   d46b2:	a815      	add	r0, sp, #84	; 0x54
   d46b4:	f003 fa88 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d46b8:	212c      	movs	r1, #44	; 0x2c
   d46ba:	a815      	add	r0, sp, #84	; 0x54
   d46bc:	f003 f982 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[8]);
   d46c0:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   d46c4:	2102      	movs	r1, #2
   d46c6:	a815      	add	r0, sp, #84	; 0x54
   d46c8:	f003 fa7e 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d46cc:	212c      	movs	r1, #44	; 0x2c
   d46ce:	a815      	add	r0, sp, #84	; 0x54
   d46d0:	f003 f978 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[9]);
   d46d4:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d46d8:	2102      	movs	r1, #2
   d46da:	a815      	add	r0, sp, #84	; 0x54
   d46dc:	f003 fa74 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d46e0:	212c      	movs	r1, #44	; 0x2c
   d46e2:	a815      	add	r0, sp, #84	; 0x54
   d46e4:	f003 f96e 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[10]);
   d46e8:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d46ec:	2102      	movs	r1, #2
   d46ee:	a815      	add	r0, sp, #84	; 0x54
   d46f0:	f003 fa6a 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d46f4:	212c      	movs	r1, #44	; 0x2c
   d46f6:	a815      	add	r0, sp, #84	; 0x54
   d46f8:	f003 f964 	bl	d79c4 <_ZN5Print5printEc>
    file.print(counts[11]);
   d46fc:	ed9d 0a14 	vldr	s0, [sp, #80]	; 0x50
   d4700:	2102      	movs	r1, #2
   d4702:	a815      	add	r0, sp, #84	; 0x54
   d4704:	f003 fa60 	bl	d7bc8 <_ZN5Print5printEfi>
    file.print(',');
   d4708:	212c      	movs	r1, #44	; 0x2c
   d470a:	a815      	add	r0, sp, #84	; 0x54
   d470c:	f003 f95a 	bl	d79c4 <_ZN5Print5printEc>
    file.print("RAW VALUES");
   d4710:	4942      	ldr	r1, [pc, #264]	; (d481c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3b0>)
   d4712:	a815      	add	r0, sp, #84	; 0x54
   d4714:	f003 f952 	bl	d79bc <_ZN5Print5printEPKc>
    file.print(',');
   d4718:	212c      	movs	r1, #44	; 0x2c
   d471a:	a815      	add	r0, sp, #84	; 0x54
   d471c:	f003 f952 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[0]);
   d4720:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4724:	220a      	movs	r2, #10
   d4726:	a815      	add	r0, sp, #84	; 0x54
   d4728:	f7ff fe92 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d472c:	212c      	movs	r1, #44	; 0x2c
   d472e:	a815      	add	r0, sp, #84	; 0x54
   d4730:	f003 f948 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[1]);
   d4734:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d4738:	220a      	movs	r2, #10
   d473a:	a815      	add	r0, sp, #84	; 0x54
   d473c:	f7ff fe88 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4740:	212c      	movs	r1, #44	; 0x2c
   d4742:	a815      	add	r0, sp, #84	; 0x54
   d4744:	f003 f93e 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[2]);
   d4748:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   d474c:	220a      	movs	r2, #10
   d474e:	a815      	add	r0, sp, #84	; 0x54
   d4750:	f7ff fe7e 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4754:	212c      	movs	r1, #44	; 0x2c
   d4756:	a815      	add	r0, sp, #84	; 0x54
   d4758:	f003 f934 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[3]);
   d475c:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   d4760:	220a      	movs	r2, #10
   d4762:	a815      	add	r0, sp, #84	; 0x54
   d4764:	f7ff fe74 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4768:	212c      	movs	r1, #44	; 0x2c
   d476a:	a815      	add	r0, sp, #84	; 0x54
   d476c:	f003 f92a 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[6]);
   d4770:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d4774:	220a      	movs	r2, #10
   d4776:	a815      	add	r0, sp, #84	; 0x54
   d4778:	f7ff fe6a 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d477c:	212c      	movs	r1, #44	; 0x2c
   d477e:	a815      	add	r0, sp, #84	; 0x54
   d4780:	f003 f920 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[7]);
   d4784:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   d4788:	220a      	movs	r2, #10
   d478a:	a815      	add	r0, sp, #84	; 0x54
   d478c:	f7ff fe60 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d4790:	212c      	movs	r1, #44	; 0x2c
   d4792:	a815      	add	r0, sp, #84	; 0x54
   d4794:	f003 f916 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[8]);
   d4798:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d479c:	220a      	movs	r2, #10
   d479e:	a815      	add	r0, sp, #84	; 0x54
   d47a0:	f7ff fe56 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d47a4:	212c      	movs	r1, #44	; 0x2c
   d47a6:	a815      	add	r0, sp, #84	; 0x54
   d47a8:	f003 f90c 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[9]);
   d47ac:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d47b0:	220a      	movs	r2, #10
   d47b2:	a815      	add	r0, sp, #84	; 0x54
   d47b4:	f7ff fe4c 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d47b8:	212c      	movs	r1, #44	; 0x2c
   d47ba:	a815      	add	r0, sp, #84	; 0x54
   d47bc:	f003 f902 	bl	d79c4 <_ZN5Print5printEc>
    file.print(readings[10]);
   d47c0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d47c4:	220a      	movs	r2, #10
   d47c6:	a815      	add	r0, sp, #84	; 0x54
   d47c8:	f7ff fe42 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
    file.print(',');
   d47cc:	212c      	movs	r1, #44	; 0x2c
   d47ce:	a815      	add	r0, sp, #84	; 0x54
   d47d0:	f003 f8f8 	bl	d79c4 <_ZN5Print5printEc>
   d47d4:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d47d8:	220a      	movs	r2, #10
   d47da:	a815      	add	r0, sp, #84	; 0x54
   d47dc:	f003 f90d 	bl	d79fa <_ZN5Print11printNumberEmh>
        n += println();
   d47e0:	a815      	add	r0, sp, #84	; 0x54
   d47e2:	f003 f8f2 	bl	d79ca <_ZN5Print7printlnEv>
    file.close();
   d47e6:	a819      	add	r0, sp, #100	; 0x64
   d47e8:	f001 fbfa 	bl	d5fe0 <_ZN7FatFile5closeEv>
   d47ec:	e65f      	b.n	d44ae <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x42>
    Serial.println(F("Error opening file!"));
   d47ee:	f003 fbed 	bl	d7fcc <_Z16_fetch_usbserialv>
   d47f2:	490b      	ldr	r1, [pc, #44]	; (d4820 <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x3b4>)
   d47f4:	f003 f8ff 	bl	d79f6 <_ZN5Print7printlnEPK19__FlashStringHelper>
    virtual ~Print() {}
   d47f8:	e659      	b.n	d44ae <_Z16fileprintresultsR5SdFatR11RTC_PCF8523+0x42>
   d47fa:	bf00      	nop
   d47fc:	2003e540 	.word	0x2003e540
   d4800:	000d90ec 	.word	0x000d90ec
   d4804:	2003dfe0 	.word	0x2003dfe0
   d4808:	000d90ef 	.word	0x000d90ef
   d480c:	000d90f2 	.word	0x000d90f2
   d4810:	000d90fd 	.word	0x000d90fd
   d4814:	000d910b 	.word	0x000d910b
   d4818:	000d910f 	.word	0x000d910f
   d481c:	000d911c 	.word	0x000d911c
   d4820:	000d90bc 	.word	0x000d90bc

000d4824 <_Z18serialprintresultsR11RTC_PCF8523>:

void serialprintresults(RTC_PCF8523 &rtc) {
   d4824:	b570      	push	{r4, r5, r6, lr}
   d4826:	b094      	sub	sp, #80	; 0x50
  DateTime now = rtc.now();
   d4828:	4668      	mov	r0, sp

  uint16_t readings[12];
  float counts[12];

  if (!as7341.readAllChannels(readings)){
   d482a:	ad02      	add	r5, sp, #8
  DateTime now = rtc.now();
   d482c:	f001 f921 	bl	d5a72 <_ZN11RTC_PCF85233nowEv>
  if (!as7341.readAllChannels(readings)){
   d4830:	48aa      	ldr	r0, [pc, #680]	; (d4adc <_Z18serialprintresultsR11RTC_PCF8523+0x2b8>)
   d4832:	4629      	mov	r1, r5
   d4834:	f000 fcc9 	bl	d51ca <_ZN15Adafruit_AS734115readAllChannelsEPt>
   d4838:	b930      	cbnz	r0, d4848 <_Z18serialprintresultsR11RTC_PCF8523+0x24>
    Serial.println("Error reading all channels!");
   d483a:	f003 fbc7 	bl	d7fcc <_Z16_fetch_usbserialv>
   d483e:	49a8      	ldr	r1, [pc, #672]	; (d4ae0 <_Z18serialprintresultsR11RTC_PCF8523+0x2bc>)

  Serial.print("NIR      : ");
  Serial.print(counts[11]);
  Serial.print(" (");
  Serial.print(readings[11]);
  Serial.println(" raw)");
   d4840:	f003 f8cf 	bl	d79e2 <_ZN5Print7printlnEPKc>
}
   d4844:	b014      	add	sp, #80	; 0x50
   d4846:	bd70      	pop	{r4, r5, r6, pc}
    counts[i] = as7341.toBasicCounts(readings[i]);
   d4848:	4ea4      	ldr	r6, [pc, #656]	; (d4adc <_Z18serialprintresultsR11RTC_PCF8523+0x2b8>)
   d484a:	2400      	movs	r4, #0
    if(i == 4 || i == 5) continue;
   d484c:	1f23      	subs	r3, r4, #4
   d484e:	b2db      	uxtb	r3, r3
   d4850:	2b01      	cmp	r3, #1
   d4852:	d909      	bls.n	d4868 <_Z18serialprintresultsR11RTC_PCF8523+0x44>
    counts[i] = as7341.toBasicCounts(readings[i]);
   d4854:	f835 1014 	ldrh.w	r1, [r5, r4, lsl #1]
   d4858:	4630      	mov	r0, r6
   d485a:	f000 fb71 	bl	d4f40 <_ZN15Adafruit_AS734113toBasicCountsEt>
   d485e:	ab08      	add	r3, sp, #32
   d4860:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   d4864:	ed83 0a00 	vstr	s0, [r3]
  for(uint8_t i = 0; i < 12; i++) {
   d4868:	3401      	adds	r4, #1
   d486a:	2c0c      	cmp	r4, #12
   d486c:	d1ee      	bne.n	d484c <_Z18serialprintresultsR11RTC_PCF8523+0x28>
  Serial.print(',');
   d486e:	f003 fbad 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4872:	212c      	movs	r1, #44	; 0x2c
   d4874:	f003 f8a6 	bl	d79c4 <_ZN5Print5printEc>
  Serial.println(millis() / 1000);
   d4878:	f003 fba8 	bl	d7fcc <_Z16_fetch_usbserialv>
   d487c:	4604      	mov	r4, r0
   d487e:	f002 fc79 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d4882:	220a      	movs	r2, #10
   d4884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4888:	fbb0 f1f1 	udiv	r1, r0, r1
   d488c:	4620      	mov	r0, r4
   d488e:	f003 f8b4 	bl	d79fa <_ZN5Print11printNumberEmh>
        n += println();
   d4892:	4620      	mov	r0, r4
   d4894:	f003 f899 	bl	d79ca <_ZN5Print7printlnEv>
  Serial.print("F1 415nm : ");
   d4898:	f003 fb98 	bl	d7fcc <_Z16_fetch_usbserialv>
   d489c:	4991      	ldr	r1, [pc, #580]	; (d4ae4 <_Z18serialprintresultsR11RTC_PCF8523+0x2c0>)
   d489e:	f003 f88d 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[0]);
   d48a2:	f003 fb93 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48a6:	ed9d 0a08 	vldr	s0, [sp, #32]
   d48aa:	2102      	movs	r1, #2
   d48ac:	f003 f98c 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d48b0:	f003 fb8c 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48b4:	498c      	ldr	r1, [pc, #560]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d48b6:	f003 f881 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[0]);
   d48ba:	f003 fb87 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48be:	220a      	movs	r2, #10
   d48c0:	f8bd 1008 	ldrh.w	r1, [sp, #8]
   d48c4:	f7ff fdc4 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d48c8:	f003 fb80 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48cc:	4987      	ldr	r1, [pc, #540]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d48ce:	f003 f888 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("F2 445nm : ");
   d48d2:	f003 fb7b 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48d6:	4986      	ldr	r1, [pc, #536]	; (d4af0 <_Z18serialprintresultsR11RTC_PCF8523+0x2cc>)
   d48d8:	f003 f870 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[1]);
   d48dc:	f003 fb76 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48e0:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   d48e4:	2102      	movs	r1, #2
   d48e6:	f003 f96f 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d48ea:	f003 fb6f 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48ee:	497e      	ldr	r1, [pc, #504]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d48f0:	f003 f864 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[1]);
   d48f4:	f003 fb6a 	bl	d7fcc <_Z16_fetch_usbserialv>
   d48f8:	220a      	movs	r2, #10
   d48fa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   d48fe:	f7ff fda7 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d4902:	f003 fb63 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4906:	4979      	ldr	r1, [pc, #484]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d4908:	f003 f86b 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("F3 480nm : ");
   d490c:	f003 fb5e 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4910:	4978      	ldr	r1, [pc, #480]	; (d4af4 <_Z18serialprintresultsR11RTC_PCF8523+0x2d0>)
   d4912:	f003 f853 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[2]);
   d4916:	f003 fb59 	bl	d7fcc <_Z16_fetch_usbserialv>
   d491a:	ed9d 0a0a 	vldr	s0, [sp, #40]	; 0x28
   d491e:	2102      	movs	r1, #2
   d4920:	f003 f952 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d4924:	f003 fb52 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4928:	496f      	ldr	r1, [pc, #444]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d492a:	f003 f847 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[2]);
   d492e:	f003 fb4d 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4932:	220a      	movs	r2, #10
   d4934:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4938:	f7ff fd8a 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d493c:	f003 fb46 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4940:	496a      	ldr	r1, [pc, #424]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d4942:	f003 f84e 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("F4 515nm : ");
   d4946:	f003 fb41 	bl	d7fcc <_Z16_fetch_usbserialv>
   d494a:	496b      	ldr	r1, [pc, #428]	; (d4af8 <_Z18serialprintresultsR11RTC_PCF8523+0x2d4>)
   d494c:	f003 f836 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[3]);
   d4950:	f003 fb3c 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4954:	ed9d 0a0b 	vldr	s0, [sp, #44]	; 0x2c
   d4958:	2102      	movs	r1, #2
   d495a:	f003 f935 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d495e:	f003 fb35 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4962:	4961      	ldr	r1, [pc, #388]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d4964:	f003 f82a 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[3]);
   d4968:	f003 fb30 	bl	d7fcc <_Z16_fetch_usbserialv>
   d496c:	220a      	movs	r2, #10
   d496e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   d4972:	f7ff fd6d 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d4976:	f003 fb29 	bl	d7fcc <_Z16_fetch_usbserialv>
   d497a:	495c      	ldr	r1, [pc, #368]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d497c:	f003 f831 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("F5 555nm : ");
   d4980:	f003 fb24 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4984:	495d      	ldr	r1, [pc, #372]	; (d4afc <_Z18serialprintresultsR11RTC_PCF8523+0x2d8>)
   d4986:	f003 f819 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[6]);
   d498a:	f003 fb1f 	bl	d7fcc <_Z16_fetch_usbserialv>
   d498e:	ed9d 0a0e 	vldr	s0, [sp, #56]	; 0x38
   d4992:	2102      	movs	r1, #2
   d4994:	f003 f918 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d4998:	f003 fb18 	bl	d7fcc <_Z16_fetch_usbserialv>
   d499c:	4952      	ldr	r1, [pc, #328]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d499e:	f003 f80d 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[6]);
   d49a2:	f003 fb13 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49a6:	220a      	movs	r2, #10
   d49a8:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   d49ac:	f7ff fd50 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d49b0:	f003 fb0c 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49b4:	494d      	ldr	r1, [pc, #308]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d49b6:	f003 f814 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("F6 590nm : ");
   d49ba:	f003 fb07 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49be:	4950      	ldr	r1, [pc, #320]	; (d4b00 <_Z18serialprintresultsR11RTC_PCF8523+0x2dc>)
   d49c0:	f002 fffc 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[7]);
   d49c4:	f003 fb02 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49c8:	ed9d 0a0f 	vldr	s0, [sp, #60]	; 0x3c
   d49cc:	2102      	movs	r1, #2
   d49ce:	f003 f8fb 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d49d2:	f003 fafb 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49d6:	4944      	ldr	r1, [pc, #272]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d49d8:	f002 fff0 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[7]);
   d49dc:	f003 faf6 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49e0:	220a      	movs	r2, #10
   d49e2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   d49e6:	f7ff fd33 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d49ea:	f003 faef 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49ee:	493f      	ldr	r1, [pc, #252]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d49f0:	f002 fff7 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("F7 630nm : ");
   d49f4:	f003 faea 	bl	d7fcc <_Z16_fetch_usbserialv>
   d49f8:	4942      	ldr	r1, [pc, #264]	; (d4b04 <_Z18serialprintresultsR11RTC_PCF8523+0x2e0>)
   d49fa:	f002 ffdf 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[8]);
   d49fe:	f003 fae5 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a02:	ed9d 0a10 	vldr	s0, [sp, #64]	; 0x40
   d4a06:	2102      	movs	r1, #2
   d4a08:	f003 f8de 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d4a0c:	f003 fade 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a10:	4935      	ldr	r1, [pc, #212]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d4a12:	f002 ffd3 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[8]);
   d4a16:	f003 fad9 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a1a:	220a      	movs	r2, #10
   d4a1c:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   d4a20:	f7ff fd16 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d4a24:	f003 fad2 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a28:	4930      	ldr	r1, [pc, #192]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d4a2a:	f002 ffda 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("F8 680nm : ");
   d4a2e:	f003 facd 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a32:	4935      	ldr	r1, [pc, #212]	; (d4b08 <_Z18serialprintresultsR11RTC_PCF8523+0x2e4>)
   d4a34:	f002 ffc2 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[9]);
   d4a38:	f003 fac8 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a3c:	ed9d 0a11 	vldr	s0, [sp, #68]	; 0x44
   d4a40:	2102      	movs	r1, #2
   d4a42:	f003 f8c1 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d4a46:	f003 fac1 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a4a:	4927      	ldr	r1, [pc, #156]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d4a4c:	f002 ffb6 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[9]);
   d4a50:	f003 fabc 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a54:	220a      	movs	r2, #10
   d4a56:	f8bd 101a 	ldrh.w	r1, [sp, #26]
   d4a5a:	f7ff fcf9 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d4a5e:	f003 fab5 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a62:	4922      	ldr	r1, [pc, #136]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d4a64:	f002 ffbd 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("Clear    : ");
   d4a68:	f003 fab0 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a6c:	4927      	ldr	r1, [pc, #156]	; (d4b0c <_Z18serialprintresultsR11RTC_PCF8523+0x2e8>)
   d4a6e:	f002 ffa5 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[10]);
   d4a72:	f003 faab 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a76:	ed9d 0a12 	vldr	s0, [sp, #72]	; 0x48
   d4a7a:	2102      	movs	r1, #2
   d4a7c:	f003 f8a4 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d4a80:	f003 faa4 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a84:	4918      	ldr	r1, [pc, #96]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d4a86:	f002 ff99 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[10]);
   d4a8a:	f003 fa9f 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a8e:	220a      	movs	r2, #10
   d4a90:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   d4a94:	f7ff fcdc 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d4a98:	f003 fa98 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4a9c:	4913      	ldr	r1, [pc, #76]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d4a9e:	f002 ffa0 	bl	d79e2 <_ZN5Print7printlnEPKc>
  Serial.print("NIR      : ");
   d4aa2:	f003 fa93 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4aa6:	491a      	ldr	r1, [pc, #104]	; (d4b10 <_Z18serialprintresultsR11RTC_PCF8523+0x2ec>)
   d4aa8:	f002 ff88 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(counts[11]);
   d4aac:	f003 fa8e 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4ab0:	ed9d 0a13 	vldr	s0, [sp, #76]	; 0x4c
   d4ab4:	2102      	movs	r1, #2
   d4ab6:	f003 f887 	bl	d7bc8 <_ZN5Print5printEfi>
  Serial.print(" (");
   d4aba:	f003 fa87 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4abe:	490a      	ldr	r1, [pc, #40]	; (d4ae8 <_Z18serialprintresultsR11RTC_PCF8523+0x2c4>)
   d4ac0:	f002 ff7c 	bl	d79bc <_ZN5Print5printEPKc>
  Serial.print(readings[11]);
   d4ac4:	f003 fa82 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4ac8:	f8bd 101e 	ldrh.w	r1, [sp, #30]
   d4acc:	220a      	movs	r2, #10
   d4ace:	f7ff fcbf 	bl	d4450 <_ZN5Print5printItLi0EEEjT_i>
  Serial.println(" raw)");
   d4ad2:	f003 fa7b 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4ad6:	4905      	ldr	r1, [pc, #20]	; (d4aec <_Z18serialprintresultsR11RTC_PCF8523+0x2c8>)
   d4ad8:	e6b2      	b.n	d4840 <_Z18serialprintresultsR11RTC_PCF8523+0x1c>
   d4ada:	bf00      	nop
   d4adc:	2003e540 	.word	0x2003e540
   d4ae0:	000d90d0 	.word	0x000d90d0
   d4ae4:	000d9127 	.word	0x000d9127
   d4ae8:	000d90ec 	.word	0x000d90ec
   d4aec:	000d9133 	.word	0x000d9133
   d4af0:	000d9139 	.word	0x000d9139
   d4af4:	000d9145 	.word	0x000d9145
   d4af8:	000d9151 	.word	0x000d9151
   d4afc:	000d915d 	.word	0x000d915d
   d4b00:	000d9169 	.word	0x000d9169
   d4b04:	000d9175 	.word	0x000d9175
   d4b08:	000d9181 	.word	0x000d9181
   d4b0c:	000d918d 	.word	0x000d918d
   d4b10:	000d9199 	.word	0x000d9199

000d4b14 <loop>:
  blinkLED(2, 2);
   d4b14:	2102      	movs	r1, #2
void loop() {
   d4b16:	b508      	push	{r3, lr}
  blinkLED(2, 2);
   d4b18:	4608      	mov	r0, r1
   d4b1a:	f7ff fc3b 	bl	d4394 <_Z8blinkLEDhi>
  Serial.println("begin chlorophyll measurements");
   d4b1e:	f003 fa55 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4b22:	4926      	ldr	r1, [pc, #152]	; (d4bbc <loop+0xa8>)
  aw.analogWrite(LedPins[1], LEDdim);
   d4b24:	4c26      	ldr	r4, [pc, #152]	; (d4bc0 <loop+0xac>)
  Serial.println("begin chlorophyll measurements");
   d4b26:	f002 ff5c 	bl	d79e2 <_ZN5Print7printlnEPKc>
  turnOnLED(1, 600);
   d4b2a:	f44f 7116 	mov.w	r1, #600	; 0x258
   d4b2e:	2001      	movs	r0, #1
   d4b30:	f7ff fc60 	bl	d43f4 <_Z9turnOnLEDhm>
  fileprintresults(SD, rtc);
   d4b34:	4923      	ldr	r1, [pc, #140]	; (d4bc4 <loop+0xb0>)
   d4b36:	4824      	ldr	r0, [pc, #144]	; (d4bc8 <loop+0xb4>)
   d4b38:	f7ff fc98 	bl	d446c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523>
  serialprintresults(rtc);
   d4b3c:	4821      	ldr	r0, [pc, #132]	; (d4bc4 <loop+0xb0>)
   d4b3e:	f7ff fe71 	bl	d4824 <_Z18serialprintresultsR11RTC_PCF8523>
  aw.analogWrite(LedPins[1], LEDdim);
   d4b42:	7822      	ldrb	r2, [r4, #0]
   d4b44:	4821      	ldr	r0, [pc, #132]	; (d4bcc <loop+0xb8>)
   d4b46:	2101      	movs	r1, #1
   d4b48:	f000 fbb2 	bl	d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>
  blinkLED(2, 2);
   d4b4c:	2102      	movs	r1, #2
   d4b4e:	4608      	mov	r0, r1
   d4b50:	f7ff fc20 	bl	d4394 <_Z8blinkLEDhi>
  Serial.println("End chlorophyll measurements");
   d4b54:	f003 fa3a 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4b58:	491d      	ldr	r1, [pc, #116]	; (d4bd0 <loop+0xbc>)
   d4b5a:	f002 ff42 	bl	d79e2 <_ZN5Print7printlnEPKc>
  blinkLED(2, 3);
   d4b5e:	2103      	movs	r1, #3
   d4b60:	2002      	movs	r0, #2
   d4b62:	f7ff fc17 	bl	d4394 <_Z8blinkLEDhi>
  Serial.println("Begin turbidity measurements");
   d4b66:	f003 fa31 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4b6a:	491a      	ldr	r1, [pc, #104]	; (d4bd4 <loop+0xc0>)
   d4b6c:	f002 ff39 	bl	d79e2 <_ZN5Print7printlnEPKc>
  turnOnLED(0, 600);
   d4b70:	f44f 7116 	mov.w	r1, #600	; 0x258
   d4b74:	2000      	movs	r0, #0
   d4b76:	f7ff fc3d 	bl	d43f4 <_Z9turnOnLEDhm>
  fileprintresults(SD, rtc);
   d4b7a:	4912      	ldr	r1, [pc, #72]	; (d4bc4 <loop+0xb0>)
   d4b7c:	4812      	ldr	r0, [pc, #72]	; (d4bc8 <loop+0xb4>)
   d4b7e:	f7ff fc75 	bl	d446c <_Z16fileprintresultsR5SdFatR11RTC_PCF8523>
  serialprintresults(rtc);
   d4b82:	4810      	ldr	r0, [pc, #64]	; (d4bc4 <loop+0xb0>)
   d4b84:	f7ff fe4e 	bl	d4824 <_Z18serialprintresultsR11RTC_PCF8523>
  aw.analogWrite(LedPins[4], LEDdim);
   d4b88:	7822      	ldrb	r2, [r4, #0]
   d4b8a:	4810      	ldr	r0, [pc, #64]	; (d4bcc <loop+0xb8>)
   d4b8c:	2105      	movs	r1, #5
   d4b8e:	f000 fb8f 	bl	d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>
  aw.analogWrite(LedPins[3], LEDdim);
   d4b92:	7822      	ldrb	r2, [r4, #0]
   d4b94:	480d      	ldr	r0, [pc, #52]	; (d4bcc <loop+0xb8>)
   d4b96:	210a      	movs	r1, #10
   d4b98:	f000 fb8a 	bl	d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>
  aw.analogWrite(LedPins[2], LEDbright);
   d4b9c:	4b0e      	ldr	r3, [pc, #56]	; (d4bd8 <loop+0xc4>)
   d4b9e:	480b      	ldr	r0, [pc, #44]	; (d4bcc <loop+0xb8>)
   d4ba0:	781a      	ldrb	r2, [r3, #0]
   d4ba2:	2103      	movs	r1, #3
   d4ba4:	f000 fb84 	bl	d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>
  Serial.println("End turbidity measurements");
   d4ba8:	f003 fa10 	bl	d7fcc <_Z16_fetch_usbserialv>
   d4bac:	490b      	ldr	r1, [pc, #44]	; (d4bdc <loop+0xc8>)
   d4bae:	f002 ff18 	bl	d79e2 <_ZN5Print7printlnEPKc>
    delay(1);
   d4bb2:	2001      	movs	r0, #1
   d4bb4:	f002 fcfa 	bl	d75ac <delay>
  while (1) {
   d4bb8:	e7fb      	b.n	d4bb2 <loop+0x9e>
   d4bba:	bf00      	nop
   d4bbc:	000d91a5 	.word	0x000d91a5
   d4bc0:	2003e0ac 	.word	0x2003e0ac
   d4bc4:	2003e5a0 	.word	0x2003e5a0
   d4bc8:	2003e0b0 	.word	0x2003e0b0
   d4bcc:	2003e568 	.word	0x2003e568
   d4bd0:	000d91c4 	.word	0x000d91c4
   d4bd4:	000d91e1 	.word	0x000d91e1
   d4bd8:	2003dfdc 	.word	0x2003dfdc
   d4bdc:	000d91fe 	.word	0x000d91fe

000d4be0 <_GLOBAL__sub_I_as7341>:
}
   d4be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
Adafruit_AS7341 as7341;
   d4be2:	4825      	ldr	r0, [pc, #148]	; (d4c78 <_GLOBAL__sub_I_as7341+0x98>)
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
   d4be4:	4c25      	ldr	r4, [pc, #148]	; (d4c7c <_GLOBAL__sub_I_as7341+0x9c>)

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4be6:	4d26      	ldr	r5, [pc, #152]	; (d4c80 <_GLOBAL__sub_I_as7341+0xa0>)
   d4be8:	f000 f858 	bl	d4c9c <_ZN15Adafruit_AS7341C1Ev>
Adafruit_AW9523 aw;
   d4bec:	4825      	ldr	r0, [pc, #148]	; (d4c84 <_GLOBAL__sub_I_as7341+0xa4>)
   d4bee:	f000 fb22 	bl	d5236 <_ZN15Adafruit_AW9523C1Ev>
   d4bf2:	4b25      	ldr	r3, [pc, #148]	; (d4c88 <_GLOBAL__sub_I_as7341+0xa8>)
   d4bf4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4bf8:	6099      	str	r1, [r3, #8]
   d4bfa:	4924      	ldr	r1, [pc, #144]	; (d4c8c <_GLOBAL__sub_I_as7341+0xac>)
   d4bfc:	6019      	str	r1, [r3, #0]
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
   d4bfe:	2164      	movs	r1, #100	; 0x64
   d4c00:	f884 1460 	strb.w	r1, [r4, #1120]	; 0x460
  {
   d4c04:	4922      	ldr	r1, [pc, #136]	; (d4c90 <_GLOBAL__sub_I_as7341+0xb0>)
   d4c06:	f8c4 1470 	str.w	r1, [r4, #1136]	; 0x470
   d4c0a:	2200      	movs	r2, #0
   d4c0c:	2101      	movs	r1, #1
   d4c0e:	821a      	strh	r2, [r3, #16]
    Print() : write_error(0) {}
   d4c10:	605a      	str	r2, [r3, #4]
   d4c12:	71e2      	strb	r2, [r4, #7]
   d4c14:	f8a4 243c 	strh.w	r2, [r4, #1084]	; 0x43c
   d4c18:	f884 246a 	strb.w	r2, [r4, #1130]	; 0x46a
   d4c1c:	f884 1474 	strb.w	r1, [r4, #1140]	; 0x474
   d4c20:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
   d4c24:	f8a4 247c 	strh.w	r2, [r4, #1148]	; 0x47c
   d4c28:	7829      	ldrb	r1, [r5, #0]
   d4c2a:	f3bf 8f5b 	dmb	ish
   d4c2e:	f011 0101 	ands.w	r1, r1, #1
   d4c32:	d10b      	bne.n	d4c4c <_GLOBAL__sub_I_as7341+0x6c>
   d4c34:	4628      	mov	r0, r5
   d4c36:	9101      	str	r1, [sp, #4]
   d4c38:	f7ff fa33 	bl	d40a2 <__cxa_guard_acquire>
   d4c3c:	9901      	ldr	r1, [sp, #4]
   d4c3e:	b128      	cbz	r0, d4c4c <_GLOBAL__sub_I_as7341+0x6c>
   d4c40:	4814      	ldr	r0, [pc, #80]	; (d4c94 <_GLOBAL__sub_I_as7341+0xb4>)
   d4c42:	f003 f80d 	bl	d7c60 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4c46:	4628      	mov	r0, r5
   d4c48:	f7ff fa30 	bl	d40ac <__cxa_guard_release>
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
   d4c4c:	4b11      	ldr	r3, [pc, #68]	; (d4c94 <_GLOBAL__sub_I_as7341+0xb4>)
   d4c4e:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
SYSTEM_THREAD(ENABLED);
   d4c52:	2100      	movs	r1, #0
   d4c54:	2001      	movs	r0, #1
   d4c56:	f002 fbfd 	bl	d7454 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c5a:	4b0f      	ldr	r3, [pc, #60]	; (d4c98 <_GLOBAL__sub_I_as7341+0xb8>)
   d4c5c:	2200      	movs	r2, #0
   d4c5e:	601a      	str	r2, [r3, #0]
   d4c60:	809a      	strh	r2, [r3, #4]
    SleepResult() {}
   d4c62:	719a      	strb	r2, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c64:	2002      	movs	r0, #2
    SleepResult() {}
   d4c66:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
   d4c6a:	609a      	str	r2, [r3, #8]
}
   d4c6c:	b003      	add	sp, #12
   d4c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        set_system_mode(mode);
   d4c72:	f002 bbdf 	b.w	d7434 <set_system_mode>
   d4c76:	bf00      	nop
   d4c78:	2003e540 	.word	0x2003e540
   d4c7c:	2003e0b0 	.word	0x2003e0b0
   d4c80:	2003e0a0 	.word	0x2003e0a0
   d4c84:	2003e568 	.word	0x2003e568
   d4c88:	2003e56c 	.word	0x2003e56c
   d4c8c:	000d9238 	.word	0x000d9238
   d4c90:	000d9224 	.word	0x000d9224
   d4c94:	2003e0a4 	.word	0x2003e0a4
   d4c98:	2003e534 	.word	0x2003e534

000d4c9c <_ZN15Adafruit_AS7341C1Ev>:

/**
 * @brief Construct a new Adafruit_AS7341::Adafruit_AS7341 object
 *
 */
Adafruit_AS7341::Adafruit_AS7341(void) {}
   d4c9c:	4a02      	ldr	r2, [pc, #8]	; (d4ca8 <_ZN15Adafruit_AS7341C1Ev+0xc>)
   d4c9e:	6002      	str	r2, [r0, #0]
   d4ca0:	2200      	movs	r2, #0
   d4ca2:	7102      	strb	r2, [r0, #4]
   d4ca4:	6082      	str	r2, [r0, #8]
   d4ca6:	4770      	bx	lr
   d4ca8:	000d9294 	.word	0x000d9294

000d4cac <_ZN15Adafruit_AS73415beginEhP7TwoWirel>:
 *    @param  sensor_id
 *            The unique ID to differentiate the sensors from others
 *    @return True if initialization was successful, otherwise false.
 */
bool Adafruit_AS7341::begin(uint8_t i2c_address, TwoWire *wire,
                            int32_t sensor_id) {
   d4cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4cb0:	4604      	mov	r4, r0
  if (i2c_dev) {
   d4cb2:	6880      	ldr	r0, [r0, #8]
                            int32_t sensor_id) {
   d4cb4:	460f      	mov	r7, r1
   d4cb6:	4690      	mov	r8, r2
   d4cb8:	461e      	mov	r6, r3
  if (i2c_dev) {
   d4cba:	b110      	cbz	r0, d4cc2 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x16>
    delete i2c_dev; // remove old interface
   d4cbc:	2110      	movs	r1, #16
   d4cbe:	f003 fb2b 	bl	d8318 <_ZdlPvj>
  }

  i2c_dev = new Adafruit_I2CDevice(i2c_address, wire);
   d4cc2:	2010      	movs	r0, #16
   d4cc4:	f7ff f9e7 	bl	d4096 <_Znwj>
   d4cc8:	4605      	mov	r5, r0
   d4cca:	b118      	cbz	r0, d4cd4 <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x28>
   d4ccc:	4642      	mov	r2, r8
   d4cce:	4639      	mov	r1, r7
   d4cd0:	f000 fca9 	bl	d5626 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d4cd4:	60a5      	str	r5, [r4, #8]

  if (!i2c_dev->begin()) {
   d4cd6:	2101      	movs	r1, #1
   d4cd8:	4628      	mov	r0, r5
   d4cda:	f000 fcc0 	bl	d565e <_ZN18Adafruit_I2CDevice5beginEb>
   d4cde:	b130      	cbz	r0, d4cee <_ZN15Adafruit_AS73415beginEhP7TwoWirel+0x42>
    return false;
  }

  return _init(sensor_id);
   d4ce0:	6823      	ldr	r3, [r4, #0]
   d4ce2:	4631      	mov	r1, r6
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	681b      	ldr	r3, [r3, #0]
}
   d4ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return _init(sensor_id);
   d4cec:	4718      	bx	r3
}
   d4cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4cf2 <_ZN15Adafruit_AS734111powerEnableEb>:
/**
 * @brief Sets the power state of the sensor
 *
 * @param enable_power true: on false: off
 */
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4cf2:	b570      	push	{r4, r5, r6, lr}
  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4cf4:	2501      	movs	r5, #1
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4cf6:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4cf8:	2600      	movs	r6, #0
   d4cfa:	e9cd 6500 	strd	r6, r5, [sp]
void Adafruit_AS7341::powerEnable(bool enable_power) {
   d4cfe:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d00:	462b      	mov	r3, r5
   d4d02:	6881      	ldr	r1, [r0, #8]
   d4d04:	2280      	movs	r2, #128	; 0x80
   d4d06:	a804      	add	r0, sp, #16
   d4d08:	f000 fb91 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits pon_en =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 0);
   d4d0c:	4633      	mov	r3, r6
   d4d0e:	462a      	mov	r2, r5
   d4d10:	a904      	add	r1, sp, #16
   d4d12:	a802      	add	r0, sp, #8
   d4d14:	f000 fc5c 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  pon_en.write(enable_power);
   d4d18:	4621      	mov	r1, r4
   d4d1a:	a802      	add	r0, sp, #8
   d4d1c:	f000 fc6a 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4d20:	b00a      	add	sp, #40	; 0x28
   d4d22:	bd70      	pop	{r4, r5, r6, pc}

000d4d24 <_ZN15Adafruit_AS73415_initEl>:
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4d24:	b570      	push	{r4, r5, r6, lr}
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4d26:	2501      	movs	r5, #1
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4d28:	b088      	sub	sp, #32
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4d2a:	2400      	movs	r4, #0
   d4d2c:	e9cd 4500 	strd	r4, r5, [sp]
   d4d30:	462b      	mov	r3, r5
   d4d32:	6881      	ldr	r1, [r0, #8]
   d4d34:	2292      	movs	r2, #146	; 0x92
bool Adafruit_AS7341::_init(int32_t sensor_id) {
   d4d36:	4606      	mov	r6, r0
      Adafruit_BusIO_Register(i2c_dev, AS7341_WHOAMI);
   d4d38:	a802      	add	r0, sp, #8
   d4d3a:	f000 fb78 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (chip_id.read() & 0xFC != AS7341_CHIP_ID << 2) {
   d4d3e:	a802      	add	r0, sp, #8
   d4d40:	f000 fc2a 	bl	d5598 <_ZN23Adafruit_BusIO_Register4readEv>
   d4d44:	07c3      	lsls	r3, r0, #31
   d4d46:	d406      	bmi.n	d4d56 <_ZN15Adafruit_AS73415_initEl+0x32>
  powerEnable(true);
   d4d48:	4630      	mov	r0, r6
   d4d4a:	4629      	mov	r1, r5
   d4d4c:	f7ff ffd1 	bl	d4cf2 <_ZN15Adafruit_AS734111powerEnableEb>
  return true;
   d4d50:	4628      	mov	r0, r5
}
   d4d52:	b008      	add	sp, #32
   d4d54:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d4d56:	4620      	mov	r0, r4
   d4d58:	e7fb      	b.n	d4d52 <_ZN15Adafruit_AS73415_initEl+0x2e>

000d4d5a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>:
 * @brief Enables measurement of spectral data
 *
 * @param enable_measurement true: enabled false: disabled
 * @return true: success false: failure
 */
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4d5a:	b510      	push	{r4, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d5c:	2301      	movs	r3, #1
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4d5e:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d60:	2200      	movs	r2, #0
   d4d62:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::enableSpectralMeasurement(bool enable_measurement) {
   d4d66:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d68:	2280      	movs	r2, #128	; 0x80
   d4d6a:	6881      	ldr	r1, [r0, #8]
   d4d6c:	a804      	add	r0, sp, #16
   d4d6e:	f000 fb5e 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_BusIO_RegisterBits spec_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 1);
   d4d72:	2301      	movs	r3, #1
   d4d74:	461a      	mov	r2, r3
   d4d76:	a904      	add	r1, sp, #16
   d4d78:	a802      	add	r0, sp, #8
   d4d7a:	f000 fc29 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  return spec_enable_bit.write(enable_measurement);
   d4d7e:	4621      	mov	r1, r4
   d4d80:	a802      	add	r0, sp, #8
   d4d82:	f000 fc37 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4d86:	b00a      	add	sp, #40	; 0x28
   d4d88:	bd10      	pop	{r4, pc}

000d4d8a <_ZN15Adafruit_AS734110enableSMUXEv>:

bool Adafruit_AS7341::enableSMUX(void) {
   d4d8a:	b530      	push	{r4, r5, lr}

  Adafruit_BusIO_Register enable_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d8c:	2501      	movs	r5, #1
bool Adafruit_AS7341::enableSMUX(void) {
   d4d8e:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_BusIO_Register(i2c_dev, AS7341_ENABLE);
   d4d90:	2400      	movs	r4, #0
   d4d92:	e9cd 4500 	strd	r4, r5, [sp]
   d4d96:	462b      	mov	r3, r5
   d4d98:	6881      	ldr	r1, [r0, #8]
   d4d9a:	2280      	movs	r2, #128	; 0x80
   d4d9c:	a804      	add	r0, sp, #16
   d4d9e:	f000 fb46 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_enable_bit =
      Adafruit_BusIO_RegisterBits(&enable_reg, 1, 4);
   d4da2:	462a      	mov	r2, r5
   d4da4:	2304      	movs	r3, #4
   d4da6:	a904      	add	r1, sp, #16
   d4da8:	a802      	add	r0, sp, #8
   d4daa:	f000 fc11 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>
  bool success = smux_enable_bit.write(true);
   d4dae:	4629      	mov	r1, r5
   d4db0:	a802      	add	r0, sp, #8
   d4db2:	f000 fc1f 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
   d4db6:	4605      	mov	r5, r0

  int timeOut = 1000; // Arbitrary value, but if it takes 1000 milliseconds then
                      // something is wrong
  int count = 0;
  while (smux_enable_bit.read() && count < timeOut) {
   d4db8:	a802      	add	r0, sp, #8
   d4dba:	f000 fc0e 	bl	d55da <_ZN27Adafruit_BusIO_RegisterBits4readEv>
   d4dbe:	b138      	cbz	r0, d4dd0 <_ZN15Adafruit_AS734110enableSMUXEv+0x46>
   d4dc0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   d4dc4:	d00b      	beq.n	d4dde <_ZN15Adafruit_AS734110enableSMUXEv+0x54>
    delay(1);
   d4dc6:	2001      	movs	r0, #1
   d4dc8:	f002 fbf0 	bl	d75ac <delay>
    count++;
   d4dcc:	3401      	adds	r4, #1
  while (smux_enable_bit.read() && count < timeOut) {
   d4dce:	e7f3      	b.n	d4db8 <_ZN15Adafruit_AS734110enableSMUXEv+0x2e>
  }
  if (count >= timeOut)
    return false;
   d4dd0:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
   d4dd4:	bf08      	it	eq
   d4dd6:	2500      	moveq	r5, #0
  else
    return success;
}
   d4dd8:	4628      	mov	r0, r5
   d4dda:	b00b      	add	sp, #44	; 0x2c
   d4ddc:	bd30      	pop	{r4, r5, pc}
    return false;
   d4dde:	2500      	movs	r5, #0
   d4de0:	e7fa      	b.n	d4dd8 <_ZN15Adafruit_AS734110enableSMUXEv+0x4e>

000d4de2 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>:
      Adafruit_BusIO_RegisterBits(&gpio2_reg, 1, 1);

  return gpio_output_value_bit.write(gpio_high);
}

bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4de2:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register cfg6_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4de4:	2301      	movs	r3, #1
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4de6:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4de8:	2200      	movs	r2, #0
   d4dea:	e9cd 2300 	strd	r2, r3, [sp]
bool Adafruit_AS7341::setSMUXCommand(as7341_smux_cmd_t command) {
   d4dee:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG6);
   d4df0:	22af      	movs	r2, #175	; 0xaf
   d4df2:	6881      	ldr	r1, [r0, #8]
   d4df4:	a804      	add	r0, sp, #16
   d4df6:	f000 fb1a 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits smux_command_bits =
      Adafruit_BusIO_RegisterBits(&cfg6_reg, 2, 3);
   d4dfa:	2303      	movs	r3, #3
   d4dfc:	2202      	movs	r2, #2
   d4dfe:	a904      	add	r1, sp, #16
   d4e00:	a802      	add	r0, sp, #8
   d4e02:	f000 fbe5 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return smux_command_bits.write(command);
   d4e06:	4621      	mov	r1, r4
   d4e08:	a802      	add	r0, sp, #8
   d4e0a:	f000 fbf3 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d4e0e:	b00a      	add	sp, #40	; 0x28
   d4e10:	bd10      	pop	{r4, pc}

000d4e12 <_ZN15Adafruit_AS734114getIsDataReadyEv>:
/**
 * @brief
 *
 * @return true: success false: failure
 */
bool Adafruit_AS7341::getIsDataReady() {
   d4e12:	b510      	push	{r4, lr}
  Adafruit_BusIO_Register status2_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   d4e14:	2300      	movs	r3, #0
bool Adafruit_AS7341::getIsDataReady() {
   d4e16:	b08a      	sub	sp, #40	; 0x28
      Adafruit_BusIO_Register(i2c_dev, AS7341_STATUS2);
   d4e18:	2401      	movs	r4, #1
   d4e1a:	e9cd 3400 	strd	r3, r4, [sp]
   d4e1e:	22a3      	movs	r2, #163	; 0xa3
   d4e20:	6881      	ldr	r1, [r0, #8]
   d4e22:	4623      	mov	r3, r4
   d4e24:	a804      	add	r0, sp, #16
   d4e26:	f000 fb02 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_BusIO_RegisterBits avalid_bit =
      Adafruit_BusIO_RegisterBits(&status2_reg, 1, 6);
   d4e2a:	2306      	movs	r3, #6
   d4e2c:	4622      	mov	r2, r4
   d4e2e:	a904      	add	r1, sp, #16
   d4e30:	a802      	add	r0, sp, #8
   d4e32:	f000 fbcd 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return avalid_bit.read();
   d4e36:	a802      	add	r0, sp, #8
   d4e38:	f000 fbcf 	bl	d55da <_ZN27Adafruit_BusIO_RegisterBits4readEv>
}
   d4e3c:	3800      	subs	r0, #0
   d4e3e:	bf18      	it	ne
   d4e40:	2001      	movne	r0, #1
   d4e42:	b00a      	add	sp, #40	; 0x28
   d4e44:	bd10      	pop	{r4, pc}

000d4e46 <_ZN15Adafruit_AS734112delayForDataEi.part.0>:
void Adafruit_AS7341::delayForData(int waitTime) {
   d4e46:	b510      	push	{r4, lr}
   d4e48:	4604      	mov	r4, r0
    while (!getIsDataReady()) {
   d4e4a:	4620      	mov	r0, r4
   d4e4c:	f7ff ffe1 	bl	d4e12 <_ZN15Adafruit_AS734114getIsDataReadyEv>
   d4e50:	b918      	cbnz	r0, d4e5a <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x14>
      delay(1);
   d4e52:	2001      	movs	r0, #1
   d4e54:	f002 fbaa 	bl	d75ac <delay>
    while (!getIsDataReady()) {
   d4e58:	e7f7      	b.n	d4e4a <_ZN15Adafruit_AS734112delayForDataEi.part.0+0x4>
}
   d4e5a:	bd10      	pop	{r4, pc}

000d4e5c <_ZN15Adafruit_AS73418setATIMEEh>:
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @param atime_value The integration time step count
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4e5c:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4e5e:	2301      	movs	r3, #1
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4e60:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4e62:	2500      	movs	r5, #0
   d4e64:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setATIME(uint8_t atime_value) {
   d4e68:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4e6a:	2281      	movs	r2, #129	; 0x81
   d4e6c:	6881      	ldr	r1, [r0, #8]
   d4e6e:	a802      	add	r0, sp, #8
   d4e70:	f000 fadd 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.write(atime_value);
   d4e74:	462a      	mov	r2, r5
   d4e76:	4621      	mov	r1, r4
   d4e78:	a802      	add	r0, sp, #8
   d4e7a:	f000 fb2f 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d4e7e:	b009      	add	sp, #36	; 0x24
   d4e80:	bd30      	pop	{r4, r5, pc}

000d4e82 <_ZN15Adafruit_AS73418getATIMEEv>:
 *
 * Total integration time will be `(ATIME + 1) * (ASTEP + 1) * 2.78µS`
 *
 * @return uint8_t The current integration time step count
 */
uint8_t Adafruit_AS7341::getATIME() {
   d4e82:	b500      	push	{lr}
  Adafruit_BusIO_Register atime_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4e84:	2301      	movs	r3, #1
uint8_t Adafruit_AS7341::getATIME() {
   d4e86:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ATIME);
   d4e88:	2200      	movs	r2, #0
   d4e8a:	e9cd 2300 	strd	r2, r3, [sp]
   d4e8e:	2281      	movs	r2, #129	; 0x81
   d4e90:	6881      	ldr	r1, [r0, #8]
   d4e92:	a802      	add	r0, sp, #8
   d4e94:	f000 facb 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return atime_reg.read();
   d4e98:	a802      	add	r0, sp, #8
   d4e9a:	f000 fb7d 	bl	d5598 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4e9e:	b2c0      	uxtb	r0, r0
   d4ea0:	b009      	add	sp, #36	; 0x24
   d4ea2:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ea6 <_ZN15Adafruit_AS73418setASTEPEt>:
 *
 * @param astep_value Integration time step size in 2.78 microsecon increments
 * Step size is `(astep_value+1) * 2.78 uS`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4ea6:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4ea8:	2301      	movs	r3, #1
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4eaa:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4eac:	2500      	movs	r5, #0
   d4eae:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setASTEP(uint16_t astep_value) {
   d4eb2:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4eb4:	2302      	movs	r3, #2
   d4eb6:	6881      	ldr	r1, [r0, #8]
   d4eb8:	22ca      	movs	r2, #202	; 0xca
   d4eba:	a802      	add	r0, sp, #8
   d4ebc:	f000 fab7 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.write(astep_value);
   d4ec0:	462a      	mov	r2, r5
   d4ec2:	4621      	mov	r1, r4
   d4ec4:	a802      	add	r0, sp, #8
   d4ec6:	f000 fb09 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d4eca:	b009      	add	sp, #36	; 0x24
   d4ecc:	bd30      	pop	{r4, r5, pc}

000d4ece <_ZN15Adafruit_AS73418getASTEPEv>:
 *
 * Step size is `(astep_value+1) * 2.78 uS`
 *
 * @return uint16_t The current integration time step size
 */
uint16_t Adafruit_AS7341::getASTEP() {
   d4ece:	b500      	push	{lr}
  Adafruit_BusIO_Register astep_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4ed0:	2300      	movs	r3, #0
uint16_t Adafruit_AS7341::getASTEP() {
   d4ed2:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_ASTEP_L, 2, LSBFIRST);
   d4ed4:	2201      	movs	r2, #1
   d4ed6:	e9cd 3200 	strd	r3, r2, [sp]
   d4eda:	2302      	movs	r3, #2
   d4edc:	6881      	ldr	r1, [r0, #8]
   d4ede:	22ca      	movs	r2, #202	; 0xca
   d4ee0:	a802      	add	r0, sp, #8
   d4ee2:	f000 faa4 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return astep_reg.read();
   d4ee6:	a802      	add	r0, sp, #8
   d4ee8:	f000 fb56 	bl	d5598 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4eec:	b280      	uxth	r0, r0
   d4eee:	b009      	add	sp, #36	; 0x24
   d4ef0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ef4 <_ZN15Adafruit_AS73417setGainE13as7341_gain_t>:
 * @brief Sets the ADC gain multiplier
 *
 * @param gain_value The gain amount. must be an `as7341_gain_t`
 * @return true: success false: failure
 */
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4ef4:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4ef6:	2301      	movs	r3, #1
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4ef8:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4efa:	2500      	movs	r5, #0
   d4efc:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AS7341::setGain(as7341_gain_t gain_value) {
   d4f00:	460c      	mov	r4, r1
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f02:	22aa      	movs	r2, #170	; 0xaa
   d4f04:	6881      	ldr	r1, [r0, #8]
   d4f06:	a802      	add	r0, sp, #8
   d4f08:	f000 fa91 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return cfg1_reg.write(gain_value);
   d4f0c:	462a      	mov	r2, r5
   d4f0e:	4621      	mov	r1, r4
   d4f10:	a802      	add	r0, sp, #8
   d4f12:	f000 fae3 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
  // AGAIN bitfield is only[0:4] but the rest is empty
}
   d4f16:	b009      	add	sp, #36	; 0x24
   d4f18:	bd30      	pop	{r4, r5, pc}

000d4f1a <_ZN15Adafruit_AS73417getGainEv>:
/**
 * @brief Returns the ADC gain multiplier
 *
 * @return as7341_gain_t The current ADC gain multiplier
 */
as7341_gain_t Adafruit_AS7341::getGain() {
   d4f1a:	b500      	push	{lr}
  Adafruit_BusIO_Register cfg1_reg =
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f1c:	2301      	movs	r3, #1
as7341_gain_t Adafruit_AS7341::getGain() {
   d4f1e:	b089      	sub	sp, #36	; 0x24
      Adafruit_BusIO_Register(i2c_dev, AS7341_CFG1);
   d4f20:	2200      	movs	r2, #0
   d4f22:	e9cd 2300 	strd	r2, r3, [sp]
   d4f26:	22aa      	movs	r2, #170	; 0xaa
   d4f28:	6881      	ldr	r1, [r0, #8]
   d4f2a:	a802      	add	r0, sp, #8
   d4f2c:	f000 fa7f 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return (as7341_gain_t)cfg1_reg.read();
   d4f30:	a802      	add	r0, sp, #8
   d4f32:	f000 fb31 	bl	d5598 <_ZN23Adafruit_BusIO_Register4readEv>
}
   d4f36:	b2c0      	uxtb	r0, r0
   d4f38:	b009      	add	sp, #36	; 0x24
   d4f3a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d4f40 <_ZN15Adafruit_AS734113toBasicCountsEt>:
 *
 * @param raw The raw ADC values to convert
 *
 * @return float The basic counts
 */
float Adafruit_AS7341::toBasicCounts(uint16_t raw) {
   d4f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f42:	ed2d 8b02 	vpush	{d8}
   d4f46:	460d      	mov	r5, r1
   d4f48:	4604      	mov	r4, r0
  float gain_val = 0;
  as7341_gain_t gain = getGain();
   d4f4a:	f7ff ffe6 	bl	d4f1a <_ZN15Adafruit_AS73417getGainEv>
  switch (gain) {
   d4f4e:	280a      	cmp	r0, #10
   d4f50:	bf97      	itett	ls
   d4f52:	4b1f      	ldrls	r3, [pc, #124]	; (d4fd0 <_ZN15Adafruit_AS734113toBasicCountsEt+0x90>)
  as7341_gain_t gain = getGain();
   d4f54:	eddf 8a1f 	vldrhi	s17, [pc, #124]	; d4fd4 <_ZN15Adafruit_AS734113toBasicCountsEt+0x94>
   d4f58:	eb03 0080 	addls.w	r0, r3, r0, lsl #2
   d4f5c:	edd0 8a00 	vldrls	s17, [r0]
    break;
  case AS7341_GAIN_512X:
    gain_val = 512;
    break;
  }
  return raw / (gain_val * (getATIME() + 1) * (getASTEP() + 1) * 2.78 / 1000);
   d4f60:	4620      	mov	r0, r4
   d4f62:	f7ff ff8e 	bl	d4e82 <_ZN15Adafruit_AS73418getATIMEEv>
   d4f66:	1c43      	adds	r3, r0, #1
   d4f68:	4620      	mov	r0, r4
   d4f6a:	ee08 3a10 	vmov	s16, r3
   d4f6e:	f7ff ffae 	bl	d4ece <_ZN15Adafruit_AS73418getASTEPEv>
   d4f72:	4604      	mov	r4, r0
   d4f74:	3401      	adds	r4, #1
   d4f76:	4628      	mov	r0, r5
   d4f78:	f003 fb24 	bl	d85c4 <__aeabi_i2d>
   d4f7c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
   d4f80:	ee07 4a90 	vmov	s15, r4
   d4f84:	ee28 8a28 	vmul.f32	s16, s16, s17
   d4f88:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4f8c:	4606      	mov	r6, r0
   d4f8e:	ee67 7a88 	vmul.f32	s15, s15, s16
   d4f92:	460f      	mov	r7, r1
   d4f94:	ee17 0a90 	vmov	r0, s15
   d4f98:	f003 fb26 	bl	d85e8 <__aeabi_f2d>
   d4f9c:	a30a      	add	r3, pc, #40	; (adr r3, d4fc8 <_ZN15Adafruit_AS734113toBasicCountsEt+0x88>)
   d4f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fa2:	f003 fb79 	bl	d8698 <__aeabi_dmul>
   d4fa6:	4b0c      	ldr	r3, [pc, #48]	; (d4fd8 <_ZN15Adafruit_AS734113toBasicCountsEt+0x98>)
   d4fa8:	2200      	movs	r2, #0
   d4faa:	f003 fc9f 	bl	d88ec <__aeabi_ddiv>
   d4fae:	4602      	mov	r2, r0
   d4fb0:	460b      	mov	r3, r1
   d4fb2:	4630      	mov	r0, r6
   d4fb4:	4639      	mov	r1, r7
   d4fb6:	f003 fc99 	bl	d88ec <__aeabi_ddiv>
   d4fba:	f003 fe65 	bl	d8c88 <__aeabi_d2f>
}
   d4fbe:	ecbd 8b02 	vpop	{d8}
   d4fc2:	ee00 0a10 	vmov	s0, r0
   d4fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4fc8:	a3d70a3d 	.word	0xa3d70a3d
   d4fcc:	40063d70 	.word	0x40063d70
   d4fd0:	000d9260 	.word	0x000d9260
   d4fd4:	00000000 	.word	0x00000000
   d4fd8:	408f4000 	.word	0x408f4000

000d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>:
 * @brief Write a byte to the given register
 *
 * @param addr Register address
 * @param val The value to set the register to
 */
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d4fdc:	b530      	push	{r4, r5, lr}
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d4fde:	2301      	movs	r3, #1
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d4fe0:	b089      	sub	sp, #36	; 0x24
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d4fe2:	2500      	movs	r5, #0
   d4fe4:	e9cd 5300 	strd	r5, r3, [sp]
void Adafruit_AS7341::writeRegister(byte addr, byte val) {
   d4fe8:	4614      	mov	r4, r2
  Adafruit_BusIO_Register reg = Adafruit_BusIO_Register(i2c_dev, addr);
   d4fea:	460a      	mov	r2, r1
   d4fec:	6881      	ldr	r1, [r0, #8]
   d4fee:	a802      	add	r0, sp, #8
   d4ff0:	f000 fa1d 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  reg.write(val);
   d4ff4:	462a      	mov	r2, r5
   d4ff6:	4621      	mov	r1, r4
   d4ff8:	a802      	add	r0, sp, #8
   d4ffa:	f000 fa6f 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
   d4ffe:	b009      	add	sp, #36	; 0x24
   d5000:	bd30      	pop	{r4, r5, pc}

000d5002 <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>:
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   d5002:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   d5004:	2230      	movs	r2, #48	; 0x30
   d5006:	2100      	movs	r1, #0
void Adafruit_AS7341::setup_F1F4_Clear_NIR() {
   d5008:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x30)); // F3 left set to ADC2
   d500a:	f7ff ffe7 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x01)); // F1 left set to ADC0
   d500e:	2201      	movs	r2, #1
   d5010:	4611      	mov	r1, r2
   d5012:	4620      	mov	r0, r4
   d5014:	f7ff ffe2 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // Reserved or disabled
   d5018:	4620      	mov	r0, r4
   d501a:	2200      	movs	r2, #0
   d501c:	2102      	movs	r1, #2
   d501e:	f7ff ffdd 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x00)); // F8 left disabled
   d5022:	4620      	mov	r0, r4
   d5024:	2200      	movs	r2, #0
   d5026:	2103      	movs	r1, #3
   d5028:	f7ff ffd8 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x00)); // F6 left disabled
   d502c:	4620      	mov	r0, r4
   d502e:	2200      	movs	r2, #0
   d5030:	2104      	movs	r1, #4
   d5032:	f7ff ffd3 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   d5036:	4620      	mov	r0, r4
   d5038:	2242      	movs	r2, #66	; 0x42
   d503a:	2105      	movs	r1, #5
   d503c:	f7ff ffce 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x00)); // F5 left disbled
   d5040:	4620      	mov	r0, r4
   d5042:	2200      	movs	r2, #0
   d5044:	2106      	movs	r1, #6
   d5046:	f7ff ffc9 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x00)); // F7 left disbled
   d504a:	4620      	mov	r0, r4
   d504c:	2200      	movs	r2, #0
   d504e:	2107      	movs	r1, #7
   d5050:	f7ff ffc4 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR connected to ADC4
   d5054:	4620      	mov	r0, r4
   d5056:	2250      	movs	r2, #80	; 0x50
   d5058:	2108      	movs	r1, #8
   d505a:	f7ff ffbf 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x00)); // F5 right disabled
   d505e:	4620      	mov	r0, r4
   d5060:	2200      	movs	r2, #0
   d5062:	2109      	movs	r1, #9
   d5064:	f7ff ffba 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x00)); // F7 right disabled
   d5068:	4620      	mov	r0, r4
   d506a:	2200      	movs	r2, #0
   d506c:	210a      	movs	r1, #10
   d506e:	f7ff ffb5 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   d5072:	4620      	mov	r0, r4
   d5074:	2200      	movs	r2, #0
   d5076:	210b      	movs	r1, #11
   d5078:	f7ff ffb0 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x20)); // F2 right connected to ADC1
   d507c:	4620      	mov	r0, r4
   d507e:	2220      	movs	r2, #32
   d5080:	210c      	movs	r1, #12
   d5082:	f7ff ffab 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x04)); // F4 right connected to ADC3
   d5086:	4620      	mov	r0, r4
   d5088:	2204      	movs	r2, #4
   d508a:	210d      	movs	r1, #13
   d508c:	f7ff ffa6 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0E), byte(0x00)); // F6/F8 right disabled
   d5090:	4620      	mov	r0, r4
   d5092:	2200      	movs	r2, #0
   d5094:	210e      	movs	r1, #14
   d5096:	f7ff ffa1 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x30)); // F3 right connected to AD2
   d509a:	4620      	mov	r0, r4
   d509c:	2230      	movs	r2, #48	; 0x30
   d509e:	210f      	movs	r1, #15
   d50a0:	f7ff ff9c 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x01)); // F1 right connected to AD0
   d50a4:	4620      	mov	r0, r4
   d50a6:	2201      	movs	r2, #1
   d50a8:	2110      	movs	r1, #16
   d50aa:	f7ff ff97 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   d50ae:	4620      	mov	r0, r4
   d50b0:	2250      	movs	r2, #80	; 0x50
   d50b2:	2111      	movs	r1, #17
   d50b4:	f7ff ff92 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   d50b8:	4620      	mov	r0, r4
   d50ba:	2200      	movs	r2, #0
   d50bc:	2112      	movs	r1, #18
   d50be:	f7ff ff8d 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d50c2:	4620      	mov	r0, r4
   d50c4:	2206      	movs	r2, #6
}
   d50c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d50ca:	2113      	movs	r1, #19
   d50cc:	f7ff bf86 	b.w	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>

000d50d0 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>:
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d50d0:	2200      	movs	r2, #0
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   d50d2:	b510      	push	{r4, lr}
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d50d4:	4611      	mov	r1, r2
void Adafruit_AS7341::setup_F5F8_Clear_NIR() {
   d50d6:	4604      	mov	r4, r0
  writeRegister(byte(0x00), byte(0x00)); // F3 left disable
   d50d8:	f7ff ff80 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x01), byte(0x00)); // F1 left disable
   d50dc:	4620      	mov	r0, r4
   d50de:	2200      	movs	r2, #0
   d50e0:	2101      	movs	r1, #1
   d50e2:	f7ff ff7b 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x02), byte(0x00)); // reserved/disable
   d50e6:	4620      	mov	r0, r4
   d50e8:	2200      	movs	r2, #0
   d50ea:	2102      	movs	r1, #2
   d50ec:	f7ff ff76 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x03), byte(0x40)); // F8 left connected to ADC3
   d50f0:	4620      	mov	r0, r4
   d50f2:	2240      	movs	r2, #64	; 0x40
   d50f4:	2103      	movs	r1, #3
   d50f6:	f7ff ff71 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x04), byte(0x02)); // F6 left connected to ADC1
   d50fa:	4620      	mov	r0, r4
   d50fc:	2202      	movs	r2, #2
   d50fe:	2104      	movs	r1, #4
   d5100:	f7ff ff6c 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x05), byte(0x00)); // F4/ F2 disabled
   d5104:	4620      	mov	r0, r4
   d5106:	2200      	movs	r2, #0
   d5108:	2105      	movs	r1, #5
   d510a:	f7ff ff67 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x06), byte(0x10)); // F5 left connected to ADC0
   d510e:	4620      	mov	r0, r4
   d5110:	2210      	movs	r2, #16
   d5112:	2106      	movs	r1, #6
   d5114:	f7ff ff62 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x07), byte(0x03)); // F7 left connected to ADC2
   d5118:	4620      	mov	r0, r4
   d511a:	2203      	movs	r2, #3
   d511c:	2107      	movs	r1, #7
   d511e:	f7ff ff5d 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x08), byte(0x50)); // CLEAR Connected to ADC4
   d5122:	4620      	mov	r0, r4
   d5124:	2250      	movs	r2, #80	; 0x50
   d5126:	2108      	movs	r1, #8
   d5128:	f7ff ff58 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x09), byte(0x10)); // F5 right connected to ADC0
   d512c:	4620      	mov	r0, r4
   d512e:	2210      	movs	r2, #16
   d5130:	2109      	movs	r1, #9
   d5132:	f7ff ff53 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0A), byte(0x03)); // F7 right connected to ADC2
   d5136:	4620      	mov	r0, r4
   d5138:	2203      	movs	r2, #3
   d513a:	210a      	movs	r1, #10
   d513c:	f7ff ff4e 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0B), byte(0x00)); // Reserved or disabled
   d5140:	4620      	mov	r0, r4
   d5142:	2200      	movs	r2, #0
   d5144:	210b      	movs	r1, #11
   d5146:	f7ff ff49 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0C), byte(0x00)); // F2 right disabled
   d514a:	4620      	mov	r0, r4
   d514c:	2200      	movs	r2, #0
   d514e:	210c      	movs	r1, #12
   d5150:	f7ff ff44 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0D), byte(0x00)); // F4 right disabled
   d5154:	4620      	mov	r0, r4
   d5156:	2200      	movs	r2, #0
   d5158:	210d      	movs	r1, #13
   d515a:	f7ff ff3f 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(
   d515e:	4620      	mov	r0, r4
   d5160:	2224      	movs	r2, #36	; 0x24
   d5162:	210e      	movs	r1, #14
   d5164:	f7ff ff3a 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x0F), byte(0x00)); // F3 right disabled
   d5168:	4620      	mov	r0, r4
   d516a:	2200      	movs	r2, #0
   d516c:	210f      	movs	r1, #15
   d516e:	f7ff ff35 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x10), byte(0x00)); // F1 right disabled
   d5172:	4620      	mov	r0, r4
   d5174:	2200      	movs	r2, #0
   d5176:	2110      	movs	r1, #16
   d5178:	f7ff ff30 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x11), byte(0x50)); // CLEAR right connected to AD4
   d517c:	4620      	mov	r0, r4
   d517e:	2250      	movs	r2, #80	; 0x50
   d5180:	2111      	movs	r1, #17
   d5182:	f7ff ff2b 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x12), byte(0x00)); // Reserved or disabled
   d5186:	4620      	mov	r0, r4
   d5188:	2200      	movs	r2, #0
   d518a:	2112      	movs	r1, #18
   d518c:	f7ff ff26 	bl	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d5190:	4620      	mov	r0, r4
   d5192:	2206      	movs	r2, #6
}
   d5194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeRegister(byte(0x13), byte(0x06)); // NIR connected to ADC5
   d5198:	2113      	movs	r1, #19
   d519a:	f7ff bf1f 	b.w	d4fdc <_ZN15Adafruit_AS734113writeRegisterEhh>

000d519e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>:
void Adafruit_AS7341::setSMUXLowChannels(bool f1_f4) {
   d519e:	b538      	push	{r3, r4, r5, lr}
   d51a0:	4604      	mov	r4, r0
   d51a2:	460d      	mov	r5, r1
  enableSpectralMeasurement(false);
   d51a4:	2100      	movs	r1, #0
   d51a6:	f7ff fdd8 	bl	d4d5a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  setSMUXCommand(AS7341_SMUX_CMD_WRITE);
   d51aa:	2102      	movs	r1, #2
   d51ac:	4620      	mov	r0, r4
   d51ae:	f7ff fe18 	bl	d4de2 <_ZN15Adafruit_AS734114setSMUXCommandE17as7341_smux_cmd_t>
    setup_F1F4_Clear_NIR();
   d51b2:	4620      	mov	r0, r4
  if (f1_f4) {
   d51b4:	b135      	cbz	r5, d51c4 <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x26>
    setup_F1F4_Clear_NIR();
   d51b6:	f7ff ff24 	bl	d5002 <_ZN15Adafruit_AS734120setup_F1F4_Clear_NIREv>
  enableSMUX();
   d51ba:	4620      	mov	r0, r4
}
   d51bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  enableSMUX();
   d51c0:	f7ff bde3 	b.w	d4d8a <_ZN15Adafruit_AS734110enableSMUXEv>
    setup_F5F8_Clear_NIR();
   d51c4:	f7ff ff84 	bl	d50d0 <_ZN15Adafruit_AS734120setup_F5F8_Clear_NIREv>
   d51c8:	e7f7      	b.n	d51ba <_ZN15Adafruit_AS734118setSMUXLowChannelsEb+0x1c>

000d51ca <_ZN15Adafruit_AS734115readAllChannelsEPt>:
bool Adafruit_AS7341::readAllChannels(uint16_t *readings_buffer) {
   d51ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d51ce:	4604      	mov	r4, r0
   d51d0:	b088      	sub	sp, #32
   d51d2:	460e      	mov	r6, r1
  setSMUXLowChannels(true);        // Configure SMUX to read low channels
   d51d4:	2101      	movs	r1, #1
   d51d6:	f7ff ffe2 	bl	d519e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   d51da:	2101      	movs	r1, #1
   d51dc:	4620      	mov	r0, r4
   d51de:	f7ff fdbc 	bl	d4d5a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
      Adafruit_BusIO_Register(i2c_dev, AS7341_CH0_DATA_L, 2);
   d51e2:	f04f 0800 	mov.w	r8, #0
   d51e6:	4620      	mov	r0, r4
   d51e8:	2701      	movs	r7, #1
   d51ea:	f7ff fe2c 	bl	d4e46 <_ZN15Adafruit_AS734112delayForDataEi.part.0>
   d51ee:	2302      	movs	r3, #2
   d51f0:	68a1      	ldr	r1, [r4, #8]
   d51f2:	2295      	movs	r2, #149	; 0x95
   d51f4:	e9cd 8700 	strd	r8, r7, [sp]
   d51f8:	a802      	add	r0, sp, #8
   d51fa:	f000 f918 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   d51fe:	220c      	movs	r2, #12
   d5200:	4631      	mov	r1, r6
   d5202:	a802      	add	r0, sp, #8
   d5204:	f000 f988 	bl	d5518 <_ZN23Adafruit_BusIO_Register4readEPhh>
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   d5208:	4641      	mov	r1, r8
  bool low_success = channel_data_reg.read((uint8_t *)readings_buffer, 12);
   d520a:	4605      	mov	r5, r0
  setSMUXLowChannels(false);       // Configure SMUX to read high channels
   d520c:	4620      	mov	r0, r4
   d520e:	f7ff ffc6 	bl	d519e <_ZN15Adafruit_AS734118setSMUXLowChannelsEb>
  enableSpectralMeasurement(true); // Start integration
   d5212:	4639      	mov	r1, r7
   d5214:	4620      	mov	r0, r4
   d5216:	f7ff fda0 	bl	d4d5a <_ZN15Adafruit_AS734125enableSpectralMeasurementEb>
  if (waitTime == 0) // Wait forever
   d521a:	4620      	mov	r0, r4
   d521c:	f7ff fe13 	bl	d4e46 <_ZN15Adafruit_AS734112delayForDataEi.part.0>
  return low_success &&
   d5220:	b12d      	cbz	r5, d522e <_ZN15Adafruit_AS734115readAllChannelsEPt+0x64>
         channel_data_reg.read((uint8_t *)&readings_buffer[6], 12);
   d5222:	220c      	movs	r2, #12
   d5224:	18b1      	adds	r1, r6, r2
   d5226:	a802      	add	r0, sp, #8
   d5228:	f000 f976 	bl	d5518 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d522c:	4605      	mov	r5, r0
}
   d522e:	4628      	mov	r0, r5
   d5230:	b008      	add	sp, #32
   d5232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5236 <_ZN15Adafruit_AW9523C1Ev>:
#include "Adafruit_AW9523.h"

/*!
 *    @brief  Instantiates a new AW9523 class
 */
Adafruit_AW9523::Adafruit_AW9523(void) {}
   d5236:	2200      	movs	r2, #0
   d5238:	6002      	str	r2, [r0, #0]
   d523a:	4770      	bx	lr

000d523c <_ZN15Adafruit_AW95235resetEv>:

/*!
 *    @brief  Perform a soft reset over I2C
 *    @return True I2C reset command was acknowledged
 */
bool Adafruit_AW9523::reset(void) {
   d523c:	b510      	push	{r4, lr}
  Adafruit_I2CRegister resetreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   d523e:	2301      	movs	r3, #1
bool Adafruit_AW9523::reset(void) {
   d5240:	b088      	sub	sp, #32
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_SOFTRESET);
   d5242:	2400      	movs	r4, #0
   d5244:	e9cd 4300 	strd	r4, r3, [sp]
   d5248:	227f      	movs	r2, #127	; 0x7f
   d524a:	6801      	ldr	r1, [r0, #0]
   d524c:	a802      	add	r0, sp, #8
   d524e:	f000 f8ee 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  return resetreg.write(0);
   d5252:	4622      	mov	r2, r4
   d5254:	4621      	mov	r1, r4
   d5256:	a802      	add	r0, sp, #8
   d5258:	f000 f940 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d525c:	b008      	add	sp, #32
   d525e:	bd10      	pop	{r4, pc}

000d5260 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>:
/*!
 *    @brief  Sets interrupt watch for all 16 GPIO, 1 == enabled
 *    @param  pins 16-bits of pins we may want INT enabled
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d5260:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister int0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d5262:	2301      	movs	r3, #1
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d5264:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d5266:	2500      	movs	r5, #0
   d5268:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::interruptEnableGPIO(uint16_t pins) {
   d526c:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_INTENABLE0, 2, LSBFIRST);
   d526e:	2302      	movs	r3, #2
   d5270:	6801      	ldr	r1, [r0, #0]
   d5272:	2206      	movs	r2, #6
   d5274:	a802      	add	r0, sp, #8
   d5276:	f000 f8da 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!int0reg.write(~pins)) {
   d527a:	462a      	mov	r2, r5
   d527c:	43e1      	mvns	r1, r4
   d527e:	a802      	add	r0, sp, #8
   d5280:	f000 f92c 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }
  return true;
}
   d5284:	b009      	add	sp, #36	; 0x24
   d5286:	bd30      	pop	{r4, r5, pc}

000d5288 <_ZN15Adafruit_AW952318configureDirectionEt>:
/*!
 *    @brief  Sets direction for all 16 GPIO, 1 == output, 0 == input
 *    @param  pins 16-bits of pins we want to set direction
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d5288:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d528a:	2301      	movs	r3, #1
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d528c:	b089      	sub	sp, #36	; 0x24
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d528e:	2500      	movs	r5, #0
   d5290:	e9cd 5300 	strd	r5, r3, [sp]
bool Adafruit_AW9523::configureDirection(uint16_t pins) {
   d5294:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5296:	2302      	movs	r3, #2
   d5298:	6801      	ldr	r1, [r0, #0]
   d529a:	2204      	movs	r2, #4
   d529c:	a802      	add	r0, sp, #8
   d529e:	f000 f8c6 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (!conf0reg.write(~pins)) {
   d52a2:	462a      	mov	r2, r5
   d52a4:	43e1      	mvns	r1, r4
   d52a6:	a802      	add	r0, sp, #8
   d52a8:	f000 f918 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
    return false;
  }

  return true;
}
   d52ac:	b009      	add	sp, #36	; 0x24
   d52ae:	bd30      	pop	{r4, r5, pc}

000d52b0 <_ZN15Adafruit_AW952311analogWriteEhh>:
/*!
 *    @brief  Sets constant-current setting for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  val Ratio to set, from 0 (off) to 255 (max current)
 */
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   d52b0:	b530      	push	{r4, r5, lr}
  uint8_t reg;

  // See Table 13. 256 step dimming control register
  if ((pin >= 0) && (pin <= 7)) {
   d52b2:	2907      	cmp	r1, #7
void Adafruit_AW9523::analogWrite(uint8_t pin, uint8_t val) {
   d52b4:	4614      	mov	r4, r2
   d52b6:	b089      	sub	sp, #36	; 0x24
   d52b8:	f04f 0200 	mov.w	r2, #0
  if ((pin >= 0) && (pin <= 7)) {
   d52bc:	d810      	bhi.n	d52e0 <_ZN15Adafruit_AW952311analogWriteEhh+0x30>
    reg = 0x24 + pin;
   d52be:	3124      	adds	r1, #36	; 0x24
  }
  if ((pin >= 8) && (pin <= 11)) {
    reg = 0x20 + pin - 8;
  }
  if ((pin >= 12) && (pin <= 15)) {
    reg = 0x2C + pin - 12;
   d52c0:	b2ca      	uxtb	r2, r1
  }

  Adafruit_I2CRegister ledCCreg = Adafruit_I2CRegister(i2c_dev, reg);
   d52c2:	2301      	movs	r3, #1
   d52c4:	2500      	movs	r5, #0
   d52c6:	e9cd 5300 	strd	r5, r3, [sp]
   d52ca:	6801      	ldr	r1, [r0, #0]
   d52cc:	a802      	add	r0, sp, #8
   d52ce:	f000 f8ae 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  ledCCreg.write(val);
   d52d2:	462a      	mov	r2, r5
   d52d4:	4621      	mov	r1, r4
   d52d6:	a802      	add	r0, sp, #8
   d52d8:	f000 f900 	bl	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>
}
   d52dc:	b009      	add	sp, #36	; 0x24
   d52de:	bd30      	pop	{r4, r5, pc}
  if ((pin >= 8) && (pin <= 11)) {
   d52e0:	f1a1 0308 	sub.w	r3, r1, #8
   d52e4:	2b03      	cmp	r3, #3
   d52e6:	d801      	bhi.n	d52ec <_ZN15Adafruit_AW952311analogWriteEhh+0x3c>
    reg = 0x20 + pin - 8;
   d52e8:	3118      	adds	r1, #24
   d52ea:	e7e9      	b.n	d52c0 <_ZN15Adafruit_AW952311analogWriteEhh+0x10>
  if ((pin >= 12) && (pin <= 15)) {
   d52ec:	f1a1 030c 	sub.w	r3, r1, #12
   d52f0:	2b03      	cmp	r3, #3
   d52f2:	d8e6      	bhi.n	d52c2 <_ZN15Adafruit_AW952311analogWriteEhh+0x12>
    reg = 0x2C + pin - 12;
   d52f4:	3120      	adds	r1, #32
   d52f6:	e7e3      	b.n	d52c0 <_ZN15Adafruit_AW952311analogWriteEhh+0x10>

000d52f8 <_ZN15Adafruit_AW95237pinModeEhh>:
 *    @brief  Sets pin mode / direction for one pin
 *    @param  pin GPIO to set, from 0 to 15 inclusive
 *    @param  mode Can be INPUT, OUTPUT for GPIO digital, or AW9523_LED_MODE for
 * constant current LED drive
 */
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d52f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  // GPIO Direction
  Adafruit_I2CRegister conf0reg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d52fc:	2401      	movs	r4, #1
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d52fe:	b092      	sub	sp, #72	; 0x48
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d5300:	2600      	movs	r6, #0
   d5302:	e9cd 6400 	strd	r6, r4, [sp]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d5306:	460f      	mov	r7, r1
   d5308:	4680      	mov	r8, r0
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d530a:	6801      	ldr	r1, [r0, #0]
void Adafruit_AW9523::pinMode(uint8_t pin, uint8_t mode) {
   d530c:	4615      	mov	r5, r2
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_CONFIG0, 2, LSBFIRST);
   d530e:	2302      	movs	r3, #2
   d5310:	2204      	movs	r2, #4
   d5312:	a806      	add	r0, sp, #24
   d5314:	f000 f88b 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits confbit =
      Adafruit_I2CRegisterBits(&conf0reg, 1, pin); // # bits, bit_shift
   d5318:	463b      	mov	r3, r7
   d531a:	4622      	mov	r2, r4
   d531c:	a906      	add	r1, sp, #24
   d531e:	a802      	add	r0, sp, #8
   d5320:	f000 f956 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  // GPIO mode or LED mode?
  Adafruit_I2CRegister ledmodereg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_LEDMODE, 2, LSBFIRST);
   d5324:	f8d8 1000 	ldr.w	r1, [r8]
   d5328:	2302      	movs	r3, #2
   d532a:	2212      	movs	r2, #18
   d532c:	e9cd 6400 	strd	r6, r4, [sp]
   d5330:	a80c      	add	r0, sp, #48	; 0x30
   d5332:	f000 f87c 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  Adafruit_I2CRegisterBits modebit =
      Adafruit_I2CRegisterBits(&ledmodereg, 1, pin); // # bits, bit_shift
   d5336:	463b      	mov	r3, r7
   d5338:	4622      	mov	r2, r4
   d533a:	a90c      	add	r1, sp, #48	; 0x30
   d533c:	a804      	add	r0, sp, #16
   d533e:	f000 f947 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  if (mode == OUTPUT) {
   d5342:	42a5      	cmp	r5, r4
   d5344:	d10a      	bne.n	d535c <_ZN15Adafruit_AW95237pinModeEhh+0x64>
    confbit.write(0);
   d5346:	4631      	mov	r1, r6
   d5348:	a802      	add	r0, sp, #8
   d534a:	f000 f953 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   d534e:	4629      	mov	r1, r5
    modebit.write(1);
  }

  if (mode == AW9523_LED_MODE) {
    confbit.write(0);
    modebit.write(0);
   d5350:	a804      	add	r0, sp, #16
   d5352:	f000 f94f 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
  }
}
   d5356:	b012      	add	sp, #72	; 0x48
   d5358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (mode == INPUT) {
   d535c:	b13d      	cbz	r5, d536e <_ZN15Adafruit_AW95237pinModeEhh+0x76>
  if (mode == AW9523_LED_MODE) {
   d535e:	2d03      	cmp	r5, #3
   d5360:	d1f9      	bne.n	d5356 <_ZN15Adafruit_AW95237pinModeEhh+0x5e>
    confbit.write(0);
   d5362:	4631      	mov	r1, r6
   d5364:	a802      	add	r0, sp, #8
   d5366:	f000 f945 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(0);
   d536a:	4631      	mov	r1, r6
   d536c:	e7f0      	b.n	d5350 <_ZN15Adafruit_AW95237pinModeEhh+0x58>
    confbit.write(1);
   d536e:	4621      	mov	r1, r4
   d5370:	a802      	add	r0, sp, #8
   d5372:	f000 f93f 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
    modebit.write(1);
   d5376:	4621      	mov	r1, r4
   d5378:	e7ea      	b.n	d5350 <_ZN15Adafruit_AW95237pinModeEhh+0x58>

000d537a <_ZN15Adafruit_AW952314openDrainPort0Eb>:
/*!
 *    @brief  Turns on/off open drain output for ALL port 0 pins (GPIO 0-7)
 *    @param  od True to enable open drain, False for push-pull
 *    @return True I2C write command was acknowledged
 */
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d537a:	b530      	push	{r4, r5, lr}
  Adafruit_I2CRegister gcrreg =
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d537c:	2300      	movs	r3, #0
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d537e:	b08b      	sub	sp, #44	; 0x2c
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d5380:	2501      	movs	r5, #1
   d5382:	e9cd 3500 	strd	r3, r5, [sp]
bool Adafruit_AW9523::openDrainPort0(bool od) {
   d5386:	460c      	mov	r4, r1
      Adafruit_I2CRegister(i2c_dev, AW9523_REG_GCR, 1);
   d5388:	462b      	mov	r3, r5
   d538a:	6801      	ldr	r1, [r0, #0]
   d538c:	2211      	movs	r2, #17
   d538e:	a804      	add	r0, sp, #16
   d5390:	f000 f84d 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>

  Adafruit_I2CRegisterBits opendrain =
      Adafruit_I2CRegisterBits(&gcrreg, 1, 4); // # bits, bit_shift
   d5394:	2304      	movs	r3, #4
   d5396:	462a      	mov	r2, r5
   d5398:	a904      	add	r1, sp, #16
   d539a:	a802      	add	r0, sp, #8
   d539c:	f000 f918 	bl	d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>

  return opendrain.write(!od);
   d53a0:	ea84 0105 	eor.w	r1, r4, r5
   d53a4:	a802      	add	r0, sp, #8
   d53a6:	f000 f925 	bl	d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>
}
   d53aa:	b00b      	add	sp, #44	; 0x2c
   d53ac:	bd30      	pop	{r4, r5, pc}

000d53ae <_ZN15Adafruit_AW95235beginEhP7TwoWire>:
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   d53ae:	b5f0      	push	{r4, r5, r6, r7, lr}
   d53b0:	4604      	mov	r4, r0
  if (i2c_dev) {
   d53b2:	6800      	ldr	r0, [r0, #0]
bool Adafruit_AW9523::begin(uint8_t addr, TwoWire *wire) {
   d53b4:	b089      	sub	sp, #36	; 0x24
   d53b6:	460e      	mov	r6, r1
   d53b8:	4617      	mov	r7, r2
  if (i2c_dev) {
   d53ba:	b110      	cbz	r0, d53c2 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x14>
    delete i2c_dev; // remove old interface
   d53bc:	2110      	movs	r1, #16
   d53be:	f002 ffab 	bl	d8318 <_ZdlPvj>
  i2c_dev = new Adafruit_I2CDevice(addr, wire);
   d53c2:	2010      	movs	r0, #16
   d53c4:	f7fe fe67 	bl	d4096 <_Znwj>
   d53c8:	4605      	mov	r5, r0
   d53ca:	b118      	cbz	r0, d53d4 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x26>
   d53cc:	463a      	mov	r2, r7
   d53ce:	4631      	mov	r1, r6
   d53d0:	f000 f929 	bl	d5626 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d53d4:	6025      	str	r5, [r4, #0]
  if (!i2c_dev->begin()) {
   d53d6:	2101      	movs	r1, #1
   d53d8:	4628      	mov	r0, r5
   d53da:	f000 f940 	bl	d565e <_ZN18Adafruit_I2CDevice5beginEb>
   d53de:	b918      	cbnz	r0, d53e8 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x3a>
    return false;
   d53e0:	2500      	movs	r5, #0
}
   d53e2:	4628      	mov	r0, r5
   d53e4:	b009      	add	sp, #36	; 0x24
   d53e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!reset()) {
   d53e8:	4620      	mov	r0, r4
   d53ea:	f7ff ff27 	bl	d523c <_ZN15Adafruit_AW95235resetEv>
   d53ee:	4605      	mov	r5, r0
   d53f0:	2800      	cmp	r0, #0
   d53f2:	d0f5      	beq.n	d53e0 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x32>
  Adafruit_I2CRegister idreg = Adafruit_I2CRegister(i2c_dev, AW9523_REG_CHIPID);
   d53f4:	2301      	movs	r3, #1
   d53f6:	2600      	movs	r6, #0
   d53f8:	e9cd 6300 	strd	r6, r3, [sp]
   d53fc:	6821      	ldr	r1, [r4, #0]
   d53fe:	2210      	movs	r2, #16
   d5400:	a802      	add	r0, sp, #8
   d5402:	f000 f814 	bl	d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>
  if (idreg.read() != 0x23) {
   d5406:	a802      	add	r0, sp, #8
   d5408:	f000 f8c6 	bl	d5598 <_ZN23Adafruit_BusIO_Register4readEv>
   d540c:	2823      	cmp	r0, #35	; 0x23
   d540e:	d10c      	bne.n	d542a <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x7c>
  configureDirection(0x0); // all inputs!
   d5410:	4631      	mov	r1, r6
   d5412:	4620      	mov	r0, r4
   d5414:	f7ff ff38 	bl	d5288 <_ZN15Adafruit_AW952318configureDirectionEt>
  openDrainPort0(false);   // push pull default
   d5418:	4631      	mov	r1, r6
   d541a:	4620      	mov	r0, r4
   d541c:	f7ff ffad 	bl	d537a <_ZN15Adafruit_AW952314openDrainPort0Eb>
  interruptEnableGPIO(0);  // no interrupt
   d5420:	4631      	mov	r1, r6
   d5422:	4620      	mov	r0, r4
   d5424:	f7ff ff1c 	bl	d5260 <_ZN15Adafruit_AW952319interruptEnableGPIOEt>
  return true;
   d5428:	e7db      	b.n	d53e2 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>
    return false;
   d542a:	4635      	mov	r5, r6
   d542c:	e7d9      	b.n	d53e2 <_ZN15Adafruit_AW95235beginEhP7TwoWire+0x34>

000d542e <_ZN23Adafruit_BusIO_RegisterC1EP18Adafruit_I2CDevicethhh>:
 *    @param  byteorder The byte order of the register (used when width is > 1),
 * defaults to LSBFIRST
 *    @param  address_width The width of the register address itself, defaults
 * to 1 byte
 */
Adafruit_BusIO_Register::Adafruit_BusIO_Register(Adafruit_I2CDevice *i2cdevice,
   d542e:	b530      	push	{r4, r5, lr}
                                                 uint16_t reg_addr,
                                                 uint8_t width,
                                                 uint8_t byteorder,
                                                 uint8_t address_width) {
   d5430:	2500      	movs	r5, #0
  _i2cdevice = i2cdevice;
  _spidevice = NULL;
   d5432:	e9c0 1500 	strd	r1, r5, [r0]
  _addrwidth = address_width;
  _address = reg_addr;
   d5436:	8142      	strh	r2, [r0, #10]
  _addrwidth = address_width;
   d5438:	f89d 1010 	ldrb.w	r1, [sp, #16]
  _byteorder = byteorder;
   d543c:	f89d 200c 	ldrb.w	r2, [sp, #12]
                                                 uint8_t address_width) {
   d5440:	6145      	str	r5, [r0, #20]
  _addrwidth = address_width;
   d5442:	7341      	strb	r1, [r0, #13]
  _byteorder = byteorder;
   d5444:	7382      	strb	r2, [r0, #14]
  _width = width;
   d5446:	7303      	strb	r3, [r0, #12]
}
   d5448:	bd30      	pop	{r4, r5, pc}

000d544a <_ZN23Adafruit_BusIO_Register5writeEPhh>:
 *    @param  buffer Pointer to data to write
 *    @param  len Number of bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d544a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d544c:	4603      	mov	r3, r0
   d544e:	b085      	sub	sp, #20

  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d5450:	8940      	ldrh	r0, [r0, #10]
                           (uint8_t)(_address >> 8)};
   d5452:	f8ad 000c 	strh.w	r0, [sp, #12]
   d5456:	ea4f 2e10 	mov.w	lr, r0, lsr #8

  if (_i2cdevice) {
   d545a:	6818      	ldr	r0, [r3, #0]
                           (uint8_t)(_address >> 8)};
   d545c:	7a9c      	ldrb	r4, [r3, #10]
bool Adafruit_BusIO_Register::write(uint8_t *buffer, uint8_t len) {
   d545e:	460e      	mov	r6, r1
   d5460:	4617      	mov	r7, r2
  if (_i2cdevice) {
   d5462:	b140      	cbz	r0, d5476 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x2c>
    return _i2cdevice->write(buffer, len, true, addrbuffer, _addrwidth);
   d5464:	7b5b      	ldrb	r3, [r3, #13]
   d5466:	9301      	str	r3, [sp, #4]
   d5468:	ab03      	add	r3, sp, #12
   d546a:	9300      	str	r3, [sp, #0]
   d546c:	2301      	movs	r3, #1
   d546e:	f000 f905 	bl	d567c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
      addrbuffer[0] |= 0x40;
    }
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
  }
  return false;
}
   d5472:	b005      	add	sp, #20
   d5474:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_spidevice) {
   d5476:	6858      	ldr	r0, [r3, #4]
   d5478:	2800      	cmp	r0, #0
   d547a:	d0fa      	beq.n	d5472 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d547c:	f893 c008 	ldrb.w	ip, [r3, #8]
   d5480:	7b5d      	ldrb	r5, [r3, #13]
   d5482:	f1bc 0f03 	cmp.w	ip, #3
   d5486:	d10b      	bne.n	d54a0 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x56>
          (uint8_t)(_address >> 8) & ~0x01; // set bottom bit low to write
   d5488:	f02e 0e01 	bic.w	lr, lr, #1
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d548c:	3501      	adds	r5, #1
      addrbuffer[0] =
   d548e:	f88d e00c 	strb.w	lr, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d5492:	f88d 400d 	strb.w	r4, [sp, #13]
      return _spidevice->write(buffer, len, addrbuffer, _addrwidth + 1);
   d5496:	9500      	str	r5, [sp, #0]
   d5498:	ab03      	add	r3, sp, #12
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d549a:	f000 fa28 	bl	d58ee <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>
   d549e:	e7e8      	b.n	d5472 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x28>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d54a0:	f1bc 0f00 	cmp.w	ip, #0
   d54a4:	d108      	bne.n	d54b8 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d54a6:	f004 047f 	and.w	r4, r4, #127	; 0x7f
      addrbuffer[0] |= 0x80;
   d54aa:	f88d 400c 	strb.w	r4, [sp, #12]
    return _spidevice->write(buffer, len, addrbuffer, _addrwidth);
   d54ae:	9500      	str	r5, [sp, #0]
   d54b0:	ab03      	add	r3, sp, #12
   d54b2:	463a      	mov	r2, r7
   d54b4:	4631      	mov	r1, r6
   d54b6:	e7f0      	b.n	d549a <_ZN23Adafruit_BusIO_Register5writeEPhh+0x50>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d54b8:	f1bc 0f02 	cmp.w	ip, #2
   d54bc:	d102      	bne.n	d54c4 <_ZN23Adafruit_BusIO_Register5writeEPhh+0x7a>
      addrbuffer[0] |= 0x80;
   d54be:	f064 047f 	orn	r4, r4, #127	; 0x7f
   d54c2:	e7f2      	b.n	d54aa <_ZN23Adafruit_BusIO_Register5writeEPhh+0x60>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d54c4:	f1bc 0f01 	cmp.w	ip, #1
      addrbuffer[0] &= ~0x80;
   d54c8:	bf01      	itttt	eq
   d54ca:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
   d54ce:	f003 037f 	andeq.w	r3, r3, #127	; 0x7f
      addrbuffer[0] |= 0x40;
   d54d2:	f043 0340 	orreq.w	r3, r3, #64	; 0x40
   d54d6:	f88d 300c 	strbeq.w	r3, [sp, #12]
   d54da:	e7e8      	b.n	d54ae <_ZN23Adafruit_BusIO_Register5writeEPhh+0x64>

000d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>:
 *    @param  value Data to write
 *    @param  numbytes How many bytes from 'value' to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::write(uint32_t value, uint8_t numbytes) {
   d54dc:	b4f0      	push	{r4, r5, r6, r7}
   d54de:	460b      	mov	r3, r1
  if (numbytes == 0) {
   d54e0:	b902      	cbnz	r2, d54e4 <_ZN23Adafruit_BusIO_Register5writeEmh+0x8>
    numbytes = _width;
   d54e2:	7b02      	ldrb	r2, [r0, #12]
  }
  if (numbytes > 4) {
   d54e4:	2a04      	cmp	r2, #4
   d54e6:	d814      	bhi.n	d5512 <_ZN23Adafruit_BusIO_Register5writeEmh+0x36>
    return false;
  }

  // store a copy
  _cached = value;
   d54e8:	f100 050f 	add.w	r5, r0, #15
   d54ec:	6143      	str	r3, [r0, #20]

  for (int i = 0; i < numbytes; i++) {
   d54ee:	1884      	adds	r4, r0, r2
   d54f0:	4629      	mov	r1, r5
   d54f2:	4284      	cmp	r4, r0
   d54f4:	d009      	beq.n	d550a <_ZN23Adafruit_BusIO_Register5writeEmh+0x2e>
    if (_byteorder == LSBFIRST) {
   d54f6:	7b87      	ldrb	r7, [r0, #14]
   d54f8:	b2de      	uxtb	r6, r3
   d54fa:	b927      	cbnz	r7, d5506 <_ZN23Adafruit_BusIO_Register5writeEmh+0x2a>
      _buffer[i] = value & 0xFF;
   d54fc:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes - i - 1] = value & 0xFF;
    }
    value >>= 8;
   d54fe:	0a1b      	lsrs	r3, r3, #8
  for (int i = 0; i < numbytes; i++) {
   d5500:	3501      	adds	r5, #1
   d5502:	3c01      	subs	r4, #1
   d5504:	e7f5      	b.n	d54f2 <_ZN23Adafruit_BusIO_Register5writeEmh+0x16>
      _buffer[numbytes - i - 1] = value & 0xFF;
   d5506:	73a6      	strb	r6, [r4, #14]
   d5508:	e7f9      	b.n	d54fe <_ZN23Adafruit_BusIO_Register5writeEmh+0x22>
  }
  return write(_buffer, numbytes);
   d550a:	4620      	mov	r0, r4
}
   d550c:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d550e:	f7ff bf9c 	b.w	d544a <_ZN23Adafruit_BusIO_Register5writeEPhh>
}
   d5512:	2000      	movs	r0, #0
   d5514:	bcf0      	pop	{r4, r5, r6, r7}
   d5516:	4770      	bx	lr

000d5518 <_ZN23Adafruit_BusIO_Register4readEPhh>:
 *    @param  buffer Pointer to data to read into
 *    @param  len Number of bytes to read
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d5518:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d551a:	4604      	mov	r4, r0
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
                           (uint8_t)(_address >> 8)};
   d551c:	7a85      	ldrb	r5, [r0, #10]
bool Adafruit_BusIO_Register::read(uint8_t *buffer, uint8_t len) {
   d551e:	460b      	mov	r3, r1
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF),
   d5520:	8941      	ldrh	r1, [r0, #10]

  if (_i2cdevice) {
   d5522:	6800      	ldr	r0, [r0, #0]
                           (uint8_t)(_address >> 8)};
   d5524:	f8ad 100c 	strh.w	r1, [sp, #12]
   d5528:	0a0e      	lsrs	r6, r1, #8
  if (_i2cdevice) {
   d552a:	b140      	cbz	r0, d553e <_ZN23Adafruit_BusIO_Register4readEPhh+0x26>
    return _i2cdevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d552c:	2100      	movs	r1, #0
   d552e:	e9cd 2100 	strd	r2, r1, [sp]
   d5532:	a903      	add	r1, sp, #12
   d5534:	7b62      	ldrb	r2, [r4, #13]
   d5536:	f000 f90f 	bl	d5758 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>
      addrbuffer[0] |= 0x80 | 0x40;
    }
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
  }
  return false;
}
   d553a:	b004      	add	sp, #16
   d553c:	bd70      	pop	{r4, r5, r6, pc}
  if (_spidevice) {
   d553e:	6860      	ldr	r0, [r4, #4]
   d5540:	2800      	cmp	r0, #0
   d5542:	d0fa      	beq.n	d553a <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRESSED_OPCODE_BIT0_LOW_TO_WRITE) {
   d5544:	7a21      	ldrb	r1, [r4, #8]
   d5546:	7b64      	ldrb	r4, [r4, #13]
   d5548:	2903      	cmp	r1, #3
   d554a:	d10d      	bne.n	d5568 <_ZN23Adafruit_BusIO_Register4readEPhh+0x50>
          (uint8_t)(_address >> 8) | 0x01; // set bottom bit high to read
   d554c:	f046 0601 	orr.w	r6, r6, #1
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d5550:	21ff      	movs	r1, #255	; 0xff
   d5552:	e9cd 2100 	strd	r2, r1, [sp]
      addrbuffer[0] =
   d5556:	f88d 600c 	strb.w	r6, [sp, #12]
      addrbuffer[1] = (uint8_t)(_address & 0xFF);
   d555a:	f88d 500d 	strb.w	r5, [sp, #13]
      return _spidevice->write_then_read(addrbuffer, _addrwidth + 1, buffer,
   d555e:	1c62      	adds	r2, r4, #1
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d5560:	a903      	add	r1, sp, #12
   d5562:	f000 f9f6 	bl	d5952 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>
   d5566:	e7e8      	b.n	d553a <_ZN23Adafruit_BusIO_Register4readEPhh+0x22>
    if (_spiregtype == ADDRBIT8_HIGH_TOREAD) {
   d5568:	b941      	cbnz	r1, d557c <_ZN23Adafruit_BusIO_Register4readEPhh+0x64>
      addrbuffer[0] |= 0x80;
   d556a:	f065 057f 	orn	r5, r5, #127	; 0x7f
      addrbuffer[0] &= ~0x80;
   d556e:	f88d 500c 	strb.w	r5, [sp, #12]
    return _spidevice->write_then_read(addrbuffer, _addrwidth, buffer, len);
   d5572:	21ff      	movs	r1, #255	; 0xff
   d5574:	e9cd 2100 	strd	r2, r1, [sp]
   d5578:	4622      	mov	r2, r4
   d557a:	e7f1      	b.n	d5560 <_ZN23Adafruit_BusIO_Register4readEPhh+0x48>
    if (_spiregtype == ADDRBIT8_HIGH_TOWRITE) {
   d557c:	2902      	cmp	r1, #2
   d557e:	d102      	bne.n	d5586 <_ZN23Adafruit_BusIO_Register4readEPhh+0x6e>
      addrbuffer[0] &= ~0x80;
   d5580:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   d5584:	e7f3      	b.n	d556e <_ZN23Adafruit_BusIO_Register4readEPhh+0x56>
    if (_spiregtype == AD8_HIGH_TOREAD_AD7_HIGH_TOINC) {
   d5586:	2901      	cmp	r1, #1
      addrbuffer[0] |= 0x80 | 0x40;
   d5588:	bf02      	ittt	eq
   d558a:	f89d 100c 	ldrbeq.w	r1, [sp, #12]
   d558e:	f061 013f 	orneq	r1, r1, #63	; 0x3f
   d5592:	f88d 100c 	strbeq.w	r1, [sp, #12]
   d5596:	e7ec      	b.n	d5572 <_ZN23Adafruit_BusIO_Register4readEPhh+0x5a>

000d5598 <_ZN23Adafruit_BusIO_Register4readEv>:
uint32_t Adafruit_BusIO_Register::read(void) {
   d5598:	b538      	push	{r3, r4, r5, lr}
  if (!read(_buffer, _width)) {
   d559a:	f100 050f 	add.w	r5, r0, #15
   d559e:	7b02      	ldrb	r2, [r0, #12]
   d55a0:	4629      	mov	r1, r5
uint32_t Adafruit_BusIO_Register::read(void) {
   d55a2:	4604      	mov	r4, r0
  if (!read(_buffer, _width)) {
   d55a4:	f7ff ffb8 	bl	d5518 <_ZN23Adafruit_BusIO_Register4readEPhh>
   d55a8:	b178      	cbz	r0, d55ca <_ZN23Adafruit_BusIO_Register4readEv+0x32>
   d55aa:	7b22      	ldrb	r2, [r4, #12]
   d55ac:	4629      	mov	r1, r5
   d55ae:	4422      	add	r2, r4
  uint32_t value = 0;
   d55b0:	2000      	movs	r0, #0
  for (int i = 0; i < _width; i++) {
   d55b2:	42a2      	cmp	r2, r4
   d55b4:	d00b      	beq.n	d55ce <_ZN23Adafruit_BusIO_Register4readEv+0x36>
    value <<= 8;
   d55b6:	0203      	lsls	r3, r0, #8
    if (_byteorder == LSBFIRST) {
   d55b8:	7ba0      	ldrb	r0, [r4, #14]
   d55ba:	b920      	cbnz	r0, d55c6 <_ZN23Adafruit_BusIO_Register4readEv+0x2e>
      value |= _buffer[_width - i - 1];
   d55bc:	7b90      	ldrb	r0, [r2, #14]
      value |= _buffer[i];
   d55be:	4318      	orrs	r0, r3
  for (int i = 0; i < _width; i++) {
   d55c0:	3a01      	subs	r2, #1
   d55c2:	3101      	adds	r1, #1
   d55c4:	e7f5      	b.n	d55b2 <_ZN23Adafruit_BusIO_Register4readEv+0x1a>
      value |= _buffer[i];
   d55c6:	7808      	ldrb	r0, [r1, #0]
   d55c8:	e7f9      	b.n	d55be <_ZN23Adafruit_BusIO_Register4readEv+0x26>
    return -1;
   d55ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d55ce:	bd38      	pop	{r3, r4, r5, pc}

000d55d0 <_ZN27Adafruit_BusIO_RegisterBitsC1EP23Adafruit_BusIO_Registerhh>:
 * touching other bits
 *    @param  reg The Adafruit_BusIO_Register which defines the bus/register
 *    @param  bits The number of bits wide we are slicing
 *    @param  shift The number of bits that our bit-slice is shifted from LSB
 */
Adafruit_BusIO_RegisterBits::Adafruit_BusIO_RegisterBits(
   d55d0:	b510      	push	{r4, lr}
    Adafruit_BusIO_Register *reg, uint8_t bits, uint8_t shift) {
  _register = reg;
   d55d2:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d55d4:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d55d6:	7143      	strb	r3, [r0, #5]
}
   d55d8:	bd10      	pop	{r4, pc}

000d55da <_ZN27Adafruit_BusIO_RegisterBits4readEv>:

/*!
 *    @brief  Read 4 bytes of data from the register
 *    @return  data The 4 bytes to read
 */
uint32_t Adafruit_BusIO_RegisterBits::read(void) {
   d55da:	b510      	push	{r4, lr}
   d55dc:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d55de:	6800      	ldr	r0, [r0, #0]
   d55e0:	f7ff ffda 	bl	d5598 <_ZN23Adafruit_BusIO_Register4readEv>
  val >>= _shift;
  return val & ((1 << (_bits)) - 1);
   d55e4:	7922      	ldrb	r2, [r4, #4]
   d55e6:	2301      	movs	r3, #1
   d55e8:	4093      	lsls	r3, r2
  val >>= _shift;
   d55ea:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits)) - 1);
   d55ec:	3b01      	subs	r3, #1
  val >>= _shift;
   d55ee:	40d0      	lsrs	r0, r2
}
   d55f0:	4018      	ands	r0, r3
   d55f2:	bd10      	pop	{r4, pc}

000d55f4 <_ZN27Adafruit_BusIO_RegisterBits5writeEm>:
 *    @brief  Write 4 bytes of data to the register
 *    @param  data The 4 bytes to write
 *    @return True on successful write (only really useful for I2C as SPI is
 * uncheckable)
 */
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d55f4:	b570      	push	{r4, r5, r6, lr}
   d55f6:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d55f8:	6800      	ldr	r0, [r0, #0]
bool Adafruit_BusIO_RegisterBits::write(uint32_t data) {
   d55fa:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d55fc:	f7ff ffcc 	bl	d5598 <_ZN23Adafruit_BusIO_Register4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits)) - 1;
   d5600:	7923      	ldrb	r3, [r4, #4]
   d5602:	2201      	movs	r2, #1
   d5604:	409a      	lsls	r2, r3
   d5606:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d5608:	7962      	ldrb	r2, [r4, #5]
   d560a:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;          // remove the current data at that spot
   d560e:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d5612:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data

  return _register->write(val, _register->width());
   d5616:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d5618:	4091      	lsls	r1, r2
  return _register->write(val, _register->width());
   d561a:	4329      	orrs	r1, r5
   d561c:	7b02      	ldrb	r2, [r0, #12]
}
   d561e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return _register->write(val, _register->width());
   d5622:	f7ff bf5b 	b.w	d54dc <_ZN23Adafruit_BusIO_Register5writeEmh>

000d5626 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:
 *    @param  addr The 7-bit I2C address for the device
 *    @param  theWire The I2C bus to use, defaults to &Wire
 */
Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d5626:	6042      	str	r2, [r0, #4]
  _begun = false;
   d5628:	2200      	movs	r2, #0
   d562a:	7202      	strb	r2, [r0, #8]
#ifdef ARDUINO_ARCH_SAMD
  _maxBufferSize = 250; // as defined in Wire.h's RingBuffer
#else
  _maxBufferSize = 32;
   d562c:	2220      	movs	r2, #32
  _addr = addr;
   d562e:	7001      	strb	r1, [r0, #0]
  _maxBufferSize = 32;
   d5630:	60c2      	str	r2, [r0, #12]
#endif
}
   d5632:	4770      	bx	lr

000d5634 <_ZN18Adafruit_I2CDevice8detectedEv>:
/*!
 *    @brief  Scans I2C for the address - note will give a false-positive
 *    if there's no pullups on I2C
 *    @return True if I2C initialized and a device with the addr found
 */
bool Adafruit_I2CDevice::detected(void) {
   d5634:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d5636:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d5638:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d563a:	b153      	cbz	r3, d5652 <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d563c:	7821      	ldrb	r1, [r4, #0]
   d563e:	6860      	ldr	r0, [r4, #4]
   d5640:	f002 f86e 	bl	d7720 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission() == 0) {
   d5644:	6860      	ldr	r0, [r4, #4]
   d5646:	f002 f876 	bl	d7736 <_ZN7TwoWire15endTransmissionEv>
   d564a:	fab0 f080 	clz	r0, r0
   d564e:	0940      	lsrs	r0, r0, #5
  }
#ifdef DEBUG_SERIAL
  DEBUG_SERIAL.println(F("Not detected"));
#endif
  return false;
}
   d5650:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d5652:	2101      	movs	r1, #1
   d5654:	f000 f803 	bl	d565e <_ZN18Adafruit_I2CDevice5beginEb>
   d5658:	2800      	cmp	r0, #0
   d565a:	d1ef      	bne.n	d563c <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d565c:	e7f8      	b.n	d5650 <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d565e <_ZN18Adafruit_I2CDevice5beginEb>:
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d565e:	b538      	push	{r3, r4, r5, lr}
   d5660:	4604      	mov	r4, r0
  _wire->begin();
   d5662:	6840      	ldr	r0, [r0, #4]
bool Adafruit_I2CDevice::begin(bool addr_detect) {
   d5664:	460d      	mov	r5, r1
  _wire->begin();
   d5666:	f002 f829 	bl	d76bc <_ZN7TwoWire5beginEv>
  _begun = true;
   d566a:	2001      	movs	r0, #1
   d566c:	7220      	strb	r0, [r4, #8]
  if (addr_detect) {
   d566e:	b125      	cbz	r5, d567a <_ZN18Adafruit_I2CDevice5beginEb+0x1c>
    return detected();
   d5670:	4620      	mov	r0, r4
}
   d5672:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return detected();
   d5676:	f7ff bfdd 	b.w	d5634 <_ZN18Adafruit_I2CDevice8detectedEv>
}
   d567a:	bd38      	pop	{r3, r4, r5, pc}

000d567c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>:
 *    @param  stop Whether to send an I2C STOP signal on write
 *    @return True if write was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write(const uint8_t *buffer, size_t len, bool stop,
                               const uint8_t *prefix_buffer,
                               size_t prefix_len) {
   d567c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5680:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d5684:	461f      	mov	r7, r3
  if ((len + prefix_len) > maxBufferSize()) {
   d5686:	68c3      	ldr	r3, [r0, #12]
                               size_t prefix_len) {
   d5688:	4615      	mov	r5, r2
  if ((len + prefix_len) > maxBufferSize()) {
   d568a:	4432      	add	r2, r6
   d568c:	429a      	cmp	r2, r3
                               size_t prefix_len) {
   d568e:	4604      	mov	r4, r0
   d5690:	4688      	mov	r8, r1
  if ((len + prefix_len) > maxBufferSize()) {
   d5692:	d902      	bls.n	d569a <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1e>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d5694:	2000      	movs	r0, #0
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println("\tFailed to send!");
#endif
    return false;
  }
}
   d5696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d569a:	7801      	ldrb	r1, [r0, #0]
   d569c:	6840      	ldr	r0, [r0, #4]
   d569e:	f002 f83f 	bl	d7720 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d56a2:	b97e      	cbnz	r6, d56c4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x48>
  if (_wire->write(buffer, len) != len) {
   d56a4:	6860      	ldr	r0, [r4, #4]
   d56a6:	6803      	ldr	r3, [r0, #0]
   d56a8:	462a      	mov	r2, r5
   d56aa:	68db      	ldr	r3, [r3, #12]
   d56ac:	4641      	mov	r1, r8
   d56ae:	4798      	blx	r3
   d56b0:	4285      	cmp	r5, r0
   d56b2:	d1ef      	bne.n	d5694 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
  if (_wire->endTransmission(stop) == 0) {
   d56b4:	6860      	ldr	r0, [r4, #4]
   d56b6:	4639      	mov	r1, r7
   d56b8:	f002 f839 	bl	d772e <_ZN7TwoWire15endTransmissionEh>
   d56bc:	fab0 f080 	clz	r0, r0
   d56c0:	0940      	lsrs	r0, r0, #5
   d56c2:	e7e8      	b.n	d5696 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x1a>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d56c4:	f1b9 0f00 	cmp.w	r9, #0
   d56c8:	d0ec      	beq.n	d56a4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>
   d56ca:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d56cc:	6803      	ldr	r3, [r0, #0]
   d56ce:	4632      	mov	r2, r6
   d56d0:	68db      	ldr	r3, [r3, #12]
   d56d2:	4649      	mov	r1, r9
   d56d4:	4798      	blx	r3
   d56d6:	42b0      	cmp	r0, r6
   d56d8:	d1dc      	bne.n	d5694 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x18>
   d56da:	e7e3      	b.n	d56a4 <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j+0x28>

000d56dc <_ZN18Adafruit_I2CDevice5_readEPhjb>:
    pos += read_len;
  }
  return true;
}

bool Adafruit_I2CDevice::_read(uint8_t *buffer, size_t len, bool stop) {
   d56dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d56e0:	4615      	mov	r5, r2
   d56e2:	4604      	mov	r4, r0
   d56e4:	460e      	mov	r6, r1
#if defined(TinyWireM_h)
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len);
#else
  size_t recv = _wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop);
   d56e6:	b2d2      	uxtb	r2, r2
   d56e8:	7801      	ldrb	r1, [r0, #0]
   d56ea:	6840      	ldr	r0, [r0, #4]
   d56ec:	f002 f803 	bl	d76f6 <_ZN7TwoWire11requestFromEhjh>
#endif

  if (recv != len) {
   d56f0:	4285      	cmp	r5, r0
   d56f2:	d10d      	bne.n	d5710 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x34>
   d56f4:	2700      	movs	r7, #0
    DEBUG_SERIAL.println(recv);
#endif
    return false;
  }

  for (uint16_t i = 0; i < len; i++) {
   d56f6:	fa1f f887 	uxth.w	r8, r7
   d56fa:	45a8      	cmp	r8, r5
   d56fc:	f107 0701 	add.w	r7, r7, #1
   d5700:	d209      	bcs.n	d5716 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x3a>
    buffer[i] = _wire->read();
   d5702:	6860      	ldr	r0, [r4, #4]
   d5704:	6803      	ldr	r3, [r0, #0]
   d5706:	695b      	ldr	r3, [r3, #20]
   d5708:	4798      	blx	r3
   d570a:	f806 0008 	strb.w	r0, [r6, r8]
  for (uint16_t i = 0; i < len; i++) {
   d570e:	e7f2      	b.n	d56f6 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x1a>
    return false;
   d5710:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d5712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5716:	2001      	movs	r0, #1
   d5718:	e7fb      	b.n	d5712 <_ZN18Adafruit_I2CDevice5_readEPhjb+0x36>

000d571a <_ZN18Adafruit_I2CDevice4readEPhjb>:
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d571a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d571e:	4607      	mov	r7, r0
   d5720:	4688      	mov	r8, r1
   d5722:	4616      	mov	r6, r2
   d5724:	4699      	mov	r9, r3
  size_t pos = 0;
   d5726:	2500      	movs	r5, #0
  while (pos < len) {
   d5728:	42b5      	cmp	r5, r6
   d572a:	d212      	bcs.n	d5752 <_ZN18Adafruit_I2CDevice4readEPhjb+0x38>
                       bool stop = false);
  bool setSpeed(uint32_t desiredclk);

  /*!   @brief  How many bytes we can read in a transaction
   *    @return The size of the Wire receive/transmit buffer */
  size_t maxBufferSize() { return _maxBufferSize; }
   d572c:	68fa      	ldr	r2, [r7, #12]
        ((len - pos) > maxBufferSize()) ? maxBufferSize() : (len - pos);
   d572e:	1b74      	subs	r4, r6, r5
   d5730:	4294      	cmp	r4, r2
   d5732:	bf28      	it	cs
   d5734:	4614      	movcs	r4, r2
    bool read_stop = (pos < (len - read_len)) ? false : stop;
   d5736:	1b33      	subs	r3, r6, r4
    if (!_read(buffer + pos, read_len, read_stop))
   d5738:	42ab      	cmp	r3, r5
   d573a:	bf94      	ite	ls
   d573c:	464b      	movls	r3, r9
   d573e:	2300      	movhi	r3, #0
   d5740:	4622      	mov	r2, r4
   d5742:	eb08 0105 	add.w	r1, r8, r5
   d5746:	4638      	mov	r0, r7
   d5748:	f7ff ffc8 	bl	d56dc <_ZN18Adafruit_I2CDevice5_readEPhjb>
   d574c:	b110      	cbz	r0, d5754 <_ZN18Adafruit_I2CDevice4readEPhjb+0x3a>
    pos += read_len;
   d574e:	4425      	add	r5, r4
  while (pos < len) {
   d5750:	e7ea      	b.n	d5728 <_ZN18Adafruit_I2CDevice4readEPhjb+0xe>
  return true;
   d5752:	2001      	movs	r0, #1
}
   d5754:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5758 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb>:
 *    @param  stop Whether to send an I2C STOP signal between the write and read
 *    @return True if write & read was successful, otherwise false.
 */
bool Adafruit_I2CDevice::write_then_read(const uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, bool stop) {
   d5758:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d575a:	461d      	mov	r5, r3
  if (!write(write_buffer, write_len, stop)) {
   d575c:	2300      	movs	r3, #0
   d575e:	e9cd 3300 	strd	r3, r3, [sp]
   d5762:	f89d 301c 	ldrb.w	r3, [sp, #28]
                                         size_t read_len, bool stop) {
   d5766:	9e06      	ldr	r6, [sp, #24]
   d5768:	4604      	mov	r4, r0
  if (!write(write_buffer, write_len, stop)) {
   d576a:	f7ff ff87 	bl	d567c <_ZN18Adafruit_I2CDevice5writeEPKhjbS1_j>
   d576e:	b140      	cbz	r0, d5782 <_ZN18Adafruit_I2CDevice15write_then_readEPKhjPhjb+0x2a>
    return false;
  }

  return read(read_buffer, read_len);
   d5770:	2301      	movs	r3, #1
   d5772:	4632      	mov	r2, r6
   d5774:	4629      	mov	r1, r5
   d5776:	4620      	mov	r0, r4
}
   d5778:	b002      	add	sp, #8
   d577a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d577e:	f7ff bfcc 	b.w	d571a <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d5782:	b002      	add	sp, #8
   d5784:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5788 <_ZN18Adafruit_SPIDevice8transferEPhj>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  buffer The buffer to send and receive at the same time
 *    @param  len    The number of bytes to transfer
 */
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d5788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d578c:	4604      	mov	r4, r0
  if (_spi) {
   d578e:	6800      	ldr	r0, [r0, #0]
void Adafruit_SPIDevice::transfer(uint8_t *buffer, size_t len) {
   d5790:	b085      	sub	sp, #20
   d5792:	460d      	mov	r5, r1
  if (_spi) {
   d5794:	b140      	cbz	r0, d57a8 <_ZN18Adafruit_SPIDevice8transferEPhj+0x20>
    // hardware SPI is easy

#if defined(SPARK)
    _spi->transfer(buffer, buffer, len, NULL);
   d5796:	2300      	movs	r3, #0
   d5798:	9300      	str	r3, [sp, #0]
   d579a:	4613      	mov	r3, r2
   d579c:	460a      	mov	r2, r1
   d579e:	f002 fb07 	bl	d7db0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
        buffer[i] = reply;
      }
    }
  }
  return;
}
   d57a2:	b005      	add	sp, #20
   d57a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (_dataOrder == SPI_BITORDER_LSBFIRST) {
   d57a8:	7b23      	ldrb	r3, [r4, #12]
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d57aa:	68a0      	ldr	r0, [r4, #8]
   d57ac:	4f48      	ldr	r7, [pc, #288]	; (d58d0 <_ZN18Adafruit_SPIDevice8transferEPhj+0x148>)
   d57ae:	fbb7 f7f0 	udiv	r7, r7, r0
    startbit = 0x80;
   d57b2:	2b00      	cmp	r3, #0
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d57b4:	780b      	ldrb	r3, [r1, #0]
    startbit = 0x80;
   d57b6:	bf0c      	ite	eq
   d57b8:	f04f 0b01 	moveq.w	fp, #1
   d57bc:	f04f 0b80 	movne.w	fp, #128	; 0x80
  bool towrite, lastmosi = !(buffer[0] & startbit);
   d57c0:	ea1b 0f03 	tst.w	fp, r3
   d57c4:	eb01 0302 	add.w	r3, r1, r2
   d57c8:	bf0c      	ite	eq
   d57ca:	f04f 0901 	moveq.w	r9, #1
   d57ce:	f04f 0900 	movne.w	r9, #0
  uint8_t bitdelay_us = (1000000 / _freq) / 2;
   d57d2:	b2ff      	uxtb	r7, r7
  for (size_t i = 0; i < len; i++) {
   d57d4:	9303      	str	r3, [sp, #12]
   d57d6:	9b03      	ldr	r3, [sp, #12]
   d57d8:	42ab      	cmp	r3, r5
   d57da:	d0e2      	beq.n	d57a2 <_ZN18Adafruit_SPIDevice8transferEPhj+0x1a>
    uint8_t send = buffer[i];
   d57dc:	f895 a000 	ldrb.w	sl, [r5]
    for (uint8_t b = startbit; b != 0;
   d57e0:	465e      	mov	r6, fp
    uint8_t reply = 0;
   d57e2:	f04f 0800 	mov.w	r8, #0
      if (bitdelay_us) {
   d57e6:	b117      	cbz	r7, d57ee <_ZN18Adafruit_SPIDevice8transferEPhj+0x66>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   d57e8:	4638      	mov	r0, r7
   d57ea:	f001 fcb3 	bl	d7154 <HAL_Delay_Microseconds>
      if (_dataMode == SPI_MODE0 || _dataMode == SPI_MODE2) {
   d57ee:	7b63      	ldrb	r3, [r4, #13]
   d57f0:	f013 0ffd 	tst.w	r3, #253	; 0xfd
   d57f4:	d141      	bne.n	d587a <_ZN18Adafruit_SPIDevice8transferEPhj+0xf2>
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d57f6:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d57fa:	1c5a      	adds	r2, r3, #1
   d57fc:	d00f      	beq.n	d581e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        towrite = send & b;
   d57fe:	ea1a 0106 	ands.w	r1, sl, r6
        if ((_mosi != -1) && (lastmosi != towrite)) {
   d5802:	bf14      	ite	ne
   d5804:	2301      	movne	r3, #1
   d5806:	2300      	moveq	r3, #0
   d5808:	454b      	cmp	r3, r9
   d580a:	d008      	beq.n	d581e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
          if (towrite)
   d580c:	6963      	ldr	r3, [r4, #20]
   d580e:	6a60      	ldr	r0, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5810:	681a      	ldr	r2, [r3, #0]
          if (towrite)
   d5812:	2900      	cmp	r1, #0
   d5814:	d02c      	beq.n	d5870 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe8>
            *mosiPort |= mosiPinMask;
   d5816:	4302      	orrs	r2, r0
   d5818:	601a      	str	r2, [r3, #0]
   d581a:	f04f 0901 	mov.w	r9, #1
        *clkPort |= clkPinMask; // Clock high
   d581e:	69a1      	ldr	r1, [r4, #24]
   d5820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d5822:	680a      	ldr	r2, [r1, #0]
   d5824:	4313      	orrs	r3, r2
   d5826:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d5828:	b117      	cbz	r7, d5830 <_ZN18Adafruit_SPIDevice8transferEPhj+0xa8>
   d582a:	4638      	mov	r0, r7
   d582c:	f001 fc92 	bl	d7154 <HAL_Delay_Microseconds>
        if (_miso != -1) {
   d5830:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d5834:	3301      	adds	r3, #1
   d5836:	d006      	beq.n	d5846 <_ZN18Adafruit_SPIDevice8transferEPhj+0xbe>
          if (*misoPort & misoPinMask) {
   d5838:	69e3      	ldr	r3, [r4, #28]
   d583a:	681a      	ldr	r2, [r3, #0]
   d583c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d583e:	421a      	tst	r2, r3
            reply |= b;
   d5840:	bf18      	it	ne
   d5842:	ea46 0808 	orrne.w	r8, r6, r8
        *clkPort &= ~clkPinMask; // Clock low
   d5846:	69a1      	ldr	r1, [r4, #24]
   d5848:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d584a:	680a      	ldr	r2, [r1, #0]
   d584c:	ea22 0303 	bic.w	r3, r2, r3
   d5850:	600b      	str	r3, [r1, #0]
      if (_miso != -1) {
   d5852:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d5856:	3301      	adds	r3, #1
        buffer[i] = reply;
   d5858:	bf18      	it	ne
   d585a:	f885 8000 	strbne.w	r8, [r5]
    for (uint8_t b = startbit; b != 0;
   d585e:	7b23      	ldrb	r3, [r4, #12]
   d5860:	2b00      	cmp	r3, #0
   d5862:	d132      	bne.n	d58ca <_ZN18Adafruit_SPIDevice8transferEPhj+0x142>
   d5864:	0076      	lsls	r6, r6, #1
   d5866:	b2f6      	uxtb	r6, r6
   d5868:	2e00      	cmp	r6, #0
   d586a:	d1bc      	bne.n	d57e6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x5e>
  for (size_t i = 0; i < len; i++) {
   d586c:	3501      	adds	r5, #1
   d586e:	e7b2      	b.n	d57d6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x4e>
            *mosiPort &= ~mosiPinMask;
   d5870:	ea22 0200 	bic.w	r2, r2, r0
   d5874:	601a      	str	r2, [r3, #0]
   d5876:	4689      	mov	r9, r1
   d5878:	e7d1      	b.n	d581e <_ZN18Adafruit_SPIDevice8transferEPhj+0x96>
        *clkPort |= clkPinMask; // Clock high
   d587a:	69a1      	ldr	r1, [r4, #24]
   d587c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d587e:	680a      	ldr	r2, [r1, #0]
   d5880:	4313      	orrs	r3, r2
   d5882:	600b      	str	r3, [r1, #0]
        if (bitdelay_us) {
   d5884:	b117      	cbz	r7, d588c <_ZN18Adafruit_SPIDevice8transferEPhj+0x104>
   d5886:	4638      	mov	r0, r7
   d5888:	f001 fc64 	bl	d7154 <HAL_Delay_Microseconds>
        if (_mosi != -1) {
   d588c:	f994 3010 	ldrsb.w	r3, [r4, #16]
   d5890:	3301      	adds	r3, #1
   d5892:	d008      	beq.n	d58a6 <_ZN18Adafruit_SPIDevice8transferEPhj+0x11e>
          if (send & b)
   d5894:	6963      	ldr	r3, [r4, #20]
   d5896:	6a61      	ldr	r1, [r4, #36]	; 0x24
            *mosiPort |= mosiPinMask;
   d5898:	681a      	ldr	r2, [r3, #0]
          if (send & b)
   d589a:	ea1a 0f06 	tst.w	sl, r6
            *mosiPort |= mosiPinMask;
   d589e:	bf14      	ite	ne
   d58a0:	430a      	orrne	r2, r1
            *mosiPort &= ~mosiPinMask;
   d58a2:	438a      	biceq	r2, r1
   d58a4:	601a      	str	r2, [r3, #0]
        *clkPort &= ~clkPinMask; // Clock low
   d58a6:	69a1      	ldr	r1, [r4, #24]
   d58a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d58aa:	680a      	ldr	r2, [r1, #0]
   d58ac:	ea22 0303 	bic.w	r3, r2, r3
   d58b0:	600b      	str	r3, [r1, #0]
        if (_miso != -1) {
   d58b2:	f994 3011 	ldrsb.w	r3, [r4, #17]
   d58b6:	3301      	adds	r3, #1
   d58b8:	d0cb      	beq.n	d5852 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
          if (*misoPort & misoPinMask) {
   d58ba:	69e3      	ldr	r3, [r4, #28]
   d58bc:	681a      	ldr	r2, [r3, #0]
   d58be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d58c0:	421a      	tst	r2, r3
            reply |= b;
   d58c2:	bf18      	it	ne
   d58c4:	ea46 0808 	orrne.w	r8, r6, r8
   d58c8:	e7c3      	b.n	d5852 <_ZN18Adafruit_SPIDevice8transferEPhj+0xca>
    for (uint8_t b = startbit; b != 0;
   d58ca:	0876      	lsrs	r6, r6, #1
   d58cc:	e7cc      	b.n	d5868 <_ZN18Adafruit_SPIDevice8transferEPhj+0xe0>
   d58ce:	bf00      	nop
   d58d0:	0007a120 	.word	0x0007a120

000d58d4 <_ZN18Adafruit_SPIDevice8transferEh>:
/*!
 *    @brief  Transfer (send/receive) one byte over hard/soft SPI
 *    @param  send The byte to send
 *    @return The byte received while transmitting
 */
uint8_t Adafruit_SPIDevice::transfer(uint8_t send) {
   d58d4:	b507      	push	{r0, r1, r2, lr}
  uint8_t data = send;
  transfer(&data, 1);
   d58d6:	2201      	movs	r2, #1
  uint8_t data = send;
   d58d8:	f88d 1007 	strb.w	r1, [sp, #7]
  transfer(&data, 1);
   d58dc:	f10d 0107 	add.w	r1, sp, #7
   d58e0:	f7ff ff52 	bl	d5788 <_ZN18Adafruit_SPIDevice8transferEPhj>
  return data;
}
   d58e4:	f89d 0007 	ldrb.w	r0, [sp, #7]
   d58e8:	b003      	add	sp, #12
   d58ea:	f85d fb04 	ldr.w	pc, [sp], #4

000d58ee <_ZN18Adafruit_SPIDevice5writeEPhjS0_j>:
 *    @param  prefix_len Number of bytes from prefix buffer to write
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write(uint8_t *buffer, size_t len,
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d58ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d58f2:	4604      	mov	r4, r0
  if (_spi) {
   d58f4:	6800      	ldr	r0, [r0, #0]
                               uint8_t *prefix_buffer, size_t prefix_len) {
   d58f6:	460e      	mov	r6, r1
   d58f8:	4617      	mov	r7, r2
   d58fa:	461d      	mov	r5, r3
  if (_spi) {
   d58fc:	b110      	cbz	r0, d5904 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x16>
    _spi->beginTransaction(*_spiSetting);
   d58fe:	6861      	ldr	r1, [r4, #4]
   d5900:	f002 f9e2 	bl	d7cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d5904:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5908:	2100      	movs	r1, #0
   d590a:	b280      	uxth	r0, r0
   d590c:	f002 fcad 	bl	d826a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < prefix_len; i++) {
   d5910:	9b06      	ldr	r3, [sp, #24]
   d5912:	eb05 0803 	add.w	r8, r5, r3
   d5916:	4545      	cmp	r5, r8
   d5918:	d108      	bne.n	d592c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x3e>
   d591a:	4437      	add	r7, r6
    transfer(prefix_buffer[i]);
  }
  for (size_t i = 0; i < len; i++) {
   d591c:	42b7      	cmp	r7, r6
   d591e:	d00b      	beq.n	d5938 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x4a>
    transfer(buffer[i]);
   d5920:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5924:	4620      	mov	r0, r4
   d5926:	f7ff ffd5 	bl	d58d4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < len; i++) {
   d592a:	e7f7      	b.n	d591c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x2e>
    transfer(prefix_buffer[i]);
   d592c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5930:	4620      	mov	r0, r4
   d5932:	f7ff ffcf 	bl	d58d4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < prefix_len; i++) {
   d5936:	e7ee      	b.n	d5916 <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x28>
  }
  digitalWrite(_cs, HIGH);
   d5938:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d593c:	2101      	movs	r1, #1
   d593e:	b280      	uxth	r0, r0
   d5940:	f002 fc93 	bl	d826a <digitalWrite>

  if (_spi) {
   d5944:	6820      	ldr	r0, [r4, #0]
   d5946:	b108      	cbz	r0, d594c <_ZN18Adafruit_SPIDevice5writeEPhjS0_j+0x5e>
    _spi->endTransaction();
   d5948:	f002 f9a5 	bl	d7c96 <_ZN8SPIClass14endTransactionEv>
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d594c:	2001      	movs	r0, #1
   d594e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5952 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh>:
 *    @return Always returns true because there's no way to test success of SPI
 * writes
 */
bool Adafruit_SPIDevice::write_then_read(uint8_t *write_buffer,
                                         size_t write_len, uint8_t *read_buffer,
                                         size_t read_len, uint8_t sendvalue) {
   d5952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5956:	4604      	mov	r4, r0
  if (_spi) {
   d5958:	6800      	ldr	r0, [r0, #0]
                                         size_t read_len, uint8_t sendvalue) {
   d595a:	f89d 801c 	ldrb.w	r8, [sp, #28]
   d595e:	460e      	mov	r6, r1
   d5960:	4617      	mov	r7, r2
   d5962:	461d      	mov	r5, r3
  if (_spi) {
   d5964:	b110      	cbz	r0, d596c <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x1a>
    _spi->beginTransaction(*_spiSetting);
   d5966:	6861      	ldr	r1, [r4, #4]
   d5968:	f002 f9ae 	bl	d7cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
  }

  digitalWrite(_cs, LOW);
   d596c:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d5970:	2100      	movs	r1, #0
   d5972:	b280      	uxth	r0, r0
   d5974:	f002 fc79 	bl	d826a <digitalWrite>
  // do the writing
  for (size_t i = 0; i < write_len; i++) {
   d5978:	4437      	add	r7, r6
   d597a:	42be      	cmp	r6, r7
   d597c:	d10a      	bne.n	d5994 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x42>
   d597e:	9b06      	ldr	r3, [sp, #24]
   d5980:	18ee      	adds	r6, r5, r3
  }
  DEBUG_SERIAL.println();
#endif

  // do the reading
  for (size_t i = 0; i < read_len; i++) {
   d5982:	42ae      	cmp	r6, r5
   d5984:	d00c      	beq.n	d59a0 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x4e>
    read_buffer[i] = transfer(sendvalue);
   d5986:	4641      	mov	r1, r8
   d5988:	4620      	mov	r0, r4
   d598a:	f7ff ffa3 	bl	d58d4 <_ZN18Adafruit_SPIDevice8transferEh>
   d598e:	f805 0b01 	strb.w	r0, [r5], #1
  for (size_t i = 0; i < read_len; i++) {
   d5992:	e7f6      	b.n	d5982 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x30>
    transfer(write_buffer[i]);
   d5994:	f816 1b01 	ldrb.w	r1, [r6], #1
   d5998:	4620      	mov	r0, r4
   d599a:	f7ff ff9b 	bl	d58d4 <_ZN18Adafruit_SPIDevice8transferEh>
  for (size_t i = 0; i < write_len; i++) {
   d599e:	e7ec      	b.n	d597a <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x28>
    }
  }
  DEBUG_SERIAL.println();
#endif

  digitalWrite(_cs, HIGH);
   d59a0:	f994 000e 	ldrsb.w	r0, [r4, #14]
   d59a4:	2101      	movs	r1, #1
   d59a6:	b280      	uxth	r0, r0
   d59a8:	f002 fc5f 	bl	d826a <digitalWrite>

  if (_spi) {
   d59ac:	6820      	ldr	r0, [r4, #0]
   d59ae:	b108      	cbz	r0, d59b4 <_ZN18Adafruit_SPIDevice15write_then_readEPhjS0_jh+0x62>
    _spi->endTransaction();
   d59b0:	f002 f971 	bl	d7c96 <_ZN8SPIClass14endTransactionEv>
  }

  return true;
}
   d59b4:	2001      	movs	r0, #1
   d59b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d59bc <_ZL9date2daysthh>:
// utility code, some of this could be exposed in the DateTime API if needed

const uint8_t daysInMonth [] PROGMEM = { 31,28,31,30,31,30,31,31,30,31,30,31 };

// number of days since 2000/01/01, valid for 2001..2099
static uint16_t date2days(uint16_t y, uint8_t m, uint8_t d) {
   d59bc:	b530      	push	{r4, r5, lr}
   d59be:	4c0f      	ldr	r4, [pc, #60]	; (d59fc <_ZL9date2daysthh+0x40>)
    if (y >= 2000)
        y -= 2000;
    uint16_t days = d;
   d59c0:	2300      	movs	r3, #0
    for (uint8_t i = 1; i < m; ++i)
   d59c2:	3301      	adds	r3, #1
   d59c4:	b2dd      	uxtb	r5, r3
   d59c6:	42a9      	cmp	r1, r5
   d59c8:	d904      	bls.n	d59d4 <_ZL9date2daysthh+0x18>
        days += pgm_read_byte(daysInMonth + i - 1);
   d59ca:	f814 5b01 	ldrb.w	r5, [r4], #1
   d59ce:	442a      	add	r2, r5
   d59d0:	b292      	uxth	r2, r2
    for (uint8_t i = 1; i < m; ++i)
   d59d2:	e7f6      	b.n	d59c2 <_ZL9date2daysthh+0x6>
    if (m > 2 && y % 4 == 0)
   d59d4:	2902      	cmp	r1, #2
   d59d6:	d903      	bls.n	d59e0 <_ZL9date2daysthh+0x24>
   d59d8:	0783      	lsls	r3, r0, #30
        ++days;
   d59da:	bf04      	itt	eq
   d59dc:	3201      	addeq	r2, #1
   d59de:	b292      	uxtheq	r2, r2
    return days + 365 * y + (y + 3) / 4 - 1;
   d59e0:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
   d59e4:	1cc3      	adds	r3, r0, #3
   d59e6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   d59ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d59ee:	3801      	subs	r0, #1
   d59f0:	eb00 0093 	add.w	r0, r0, r3, lsr #2
   d59f4:	4410      	add	r0, r2
}
   d59f6:	b280      	uxth	r0, r0
   d59f8:	bd30      	pop	{r4, r5, pc}
   d59fa:	bf00      	nop
   d59fc:	000d9298 	.word	0x000d9298

000d5a00 <_ZNK8DateTime12dayOfTheWeekEv>:
    hh = conv2d(buff);
    mm = conv2d(buff + 3);
    ss = conv2d(buff + 6);
}

uint8_t DateTime::dayOfTheWeek() const {    
   d5a00:	b508      	push	{r3, lr}
    uint16_t day = date2days(yOff, m, d);
   d5a02:	7882      	ldrb	r2, [r0, #2]
   d5a04:	7841      	ldrb	r1, [r0, #1]
   d5a06:	7800      	ldrb	r0, [r0, #0]
   d5a08:	f7ff ffd8 	bl	d59bc <_ZL9date2daysthh>
    return (day + 6) % 7; // Jan 1, 2000 is a Saturday, i.e. returns 6
   d5a0c:	2307      	movs	r3, #7
   d5a0e:	3006      	adds	r0, #6
   d5a10:	fbb0 f3f3 	udiv	r3, r0, r3
   d5a14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d5a18:	1ac0      	subs	r0, r0, r3
}
   d5a1a:	b2c0      	uxtb	r0, r0
   d5a1c:	bd08      	pop	{r3, pc}

000d5a1e <_ZN10RTC_DS13075beginEv>:
// RTC_DS1307 implementation

static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
static uint8_t bin2bcd (uint8_t val) { return val + 6 * (val / 10); }

boolean RTC_DS1307::begin(void) {
   d5a1e:	b508      	push	{r3, lr}
  Wire.begin();
   d5a20:	f002 fc56 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a24:	f001 fe4a 	bl	d76bc <_ZN7TwoWire5beginEv>
  return true;
}
   d5a28:	2001      	movs	r0, #1
   d5a2a:	bd08      	pop	{r3, pc}

000d5a2c <_ZN11RTC_PCF85235beginEv>:
   d5a2c:	f7ff bff7 	b.w	d5a1e <_ZN10RTC_DS13075beginEv>

000d5a30 <_ZN11RTC_PCF852311initializedEv>:
boolean RTC_PCF8523::begin(void) {
  Wire.begin();
  return true;
}

boolean RTC_PCF8523::initialized(void) {
   d5a30:	b508      	push	{r3, lr}
  Wire.beginTransmission(PCF8523_ADDRESS);
   d5a32:	f002 fc4d 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a36:	2168      	movs	r1, #104	; 0x68
   d5a38:	f001 fe76 	bl	d7728 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
   d5a3c:	f002 fc48 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a40:	6803      	ldr	r3, [r0, #0]
   d5a42:	2102      	movs	r1, #2
   d5a44:	689b      	ldr	r3, [r3, #8]
   d5a46:	4798      	blx	r3
  Wire.endTransmission();
   d5a48:	f002 fc42 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a4c:	f001 fe73 	bl	d7736 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 1);
   d5a50:	f002 fc3e 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a54:	2201      	movs	r2, #1
   d5a56:	2168      	movs	r1, #104	; 0x68
   d5a58:	f001 fe5f 	bl	d771a <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = Wire._I2C_READ();
   d5a5c:	f002 fc38 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a60:	6803      	ldr	r3, [r0, #0]
   d5a62:	695b      	ldr	r3, [r3, #20]
   d5a64:	4798      	blx	r3
  return ((ss & 0xE0) != 0xE0);
   d5a66:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
}
   d5a6a:	38e0      	subs	r0, #224	; 0xe0
   d5a6c:	bf18      	it	ne
   d5a6e:	2001      	movne	r0, #1
   d5a70:	bd08      	pop	{r3, pc}

000d5a72 <_ZN11RTC_PCF85233nowEv>:
  Wire._I2C_WRITE((byte)PCF8523_CONTROL_3);
  Wire._I2C_WRITE((byte)0x00);
  Wire.endTransmission();
}

DateTime RTC_PCF8523::now() {
   d5a72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5a76:	4604      	mov	r4, r0
  Wire.beginTransmission(PCF8523_ADDRESS);
   d5a78:	f002 fc2a 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a7c:	2168      	movs	r1, #104	; 0x68
   d5a7e:	f001 fe53 	bl	d7728 <_ZN7TwoWire17beginTransmissionEi>
  Wire._I2C_WRITE((byte)3);	
   d5a82:	f002 fc25 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a86:	6803      	ldr	r3, [r0, #0]
   d5a88:	2103      	movs	r1, #3
   d5a8a:	689b      	ldr	r3, [r3, #8]
   d5a8c:	4798      	blx	r3
  Wire.endTransmission();
   d5a8e:	f002 fc1f 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a92:	f001 fe50 	bl	d7736 <_ZN7TwoWire15endTransmissionEv>

  Wire.requestFrom(PCF8523_ADDRESS, 7);
   d5a96:	f002 fc1b 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5a9a:	2207      	movs	r2, #7
   d5a9c:	2168      	movs	r1, #104	; 0x68
   d5a9e:	f001 fe3c 	bl	d771a <_ZN7TwoWire11requestFromEhj>
  uint8_t ss = bcd2bin(Wire._I2C_READ() & 0x7F);
   d5aa2:	f002 fc15 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5aa6:	6803      	ldr	r3, [r0, #0]
   d5aa8:	695b      	ldr	r3, [r3, #20]
   d5aaa:	4798      	blx	r3
   d5aac:	f000 097f 	and.w	r9, r0, #127	; 0x7f
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5ab0:	f3c0 1002 	ubfx	r0, r0, #4, #3
   d5ab4:	eba0 0080 	sub.w	r0, r0, r0, lsl #2
   d5ab8:	eb09 0040 	add.w	r0, r9, r0, lsl #1
   d5abc:	fa5f f980 	uxtb.w	r9, r0
  uint8_t mm = bcd2bin(Wire._I2C_READ());
   d5ac0:	f002 fc06 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5ac4:	6803      	ldr	r3, [r0, #0]
   d5ac6:	695b      	ldr	r3, [r3, #20]
   d5ac8:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5aca:	f3c0 1503 	ubfx	r5, r0, #4, #4
   d5ace:	eba5 0585 	sub.w	r5, r5, r5, lsl #2
   d5ad2:	eb00 0045 	add.w	r0, r0, r5, lsl #1
   d5ad6:	b2c5      	uxtb	r5, r0
  uint8_t hh = bcd2bin(Wire._I2C_READ());
   d5ad8:	f002 fbfa 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5adc:	6803      	ldr	r3, [r0, #0]
   d5ade:	695b      	ldr	r3, [r3, #20]
   d5ae0:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5ae2:	f3c0 1603 	ubfx	r6, r0, #4, #4
   d5ae6:	eba6 0686 	sub.w	r6, r6, r6, lsl #2
   d5aea:	eb00 0046 	add.w	r0, r0, r6, lsl #1
   d5aee:	b2c6      	uxtb	r6, r0
  uint8_t d = bcd2bin(Wire._I2C_READ());
   d5af0:	f002 fbee 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5af4:	6803      	ldr	r3, [r0, #0]
   d5af6:	695b      	ldr	r3, [r3, #20]
   d5af8:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5afa:	f3c0 1703 	ubfx	r7, r0, #4, #4
   d5afe:	eba7 0787 	sub.w	r7, r7, r7, lsl #2
   d5b02:	eb00 0047 	add.w	r0, r0, r7, lsl #1
   d5b06:	b2c7      	uxtb	r7, r0
  Wire._I2C_READ();  // skip 'weekdays'
   d5b08:	f002 fbe2 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5b0c:	6803      	ldr	r3, [r0, #0]
   d5b0e:	695b      	ldr	r3, [r3, #20]
   d5b10:	4798      	blx	r3
  uint8_t m = bcd2bin(Wire._I2C_READ());
   d5b12:	f002 fbdd 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5b16:	6803      	ldr	r3, [r0, #0]
   d5b18:	695b      	ldr	r3, [r3, #20]
   d5b1a:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5b1c:	f3c0 1803 	ubfx	r8, r0, #4, #4
   d5b20:	eba8 0888 	sub.w	r8, r8, r8, lsl #2
   d5b24:	eb00 0048 	add.w	r0, r0, r8, lsl #1
   d5b28:	fa5f f880 	uxtb.w	r8, r0
  uint16_t y = bcd2bin(Wire._I2C_READ()) + 2000;
   d5b2c:	f002 fbd0 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d5b30:	6803      	ldr	r3, [r0, #0]
   d5b32:	695b      	ldr	r3, [r3, #20]
   d5b34:	4798      	blx	r3
static uint8_t bcd2bin (uint8_t val) { return val - 6 * (val >> 4); }
   d5b36:	f3c0 1303 	ubfx	r3, r0, #4, #4
   d5b3a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
   d5b3e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
    yOff = year;
   d5b42:	7020      	strb	r0, [r4, #0]
    m = month;
   d5b44:	f884 8001 	strb.w	r8, [r4, #1]
    d = day;
   d5b48:	70a7      	strb	r7, [r4, #2]
    hh = hour;
   d5b4a:	70e6      	strb	r6, [r4, #3]
    mm = min;
   d5b4c:	7125      	strb	r5, [r4, #4]
    ss = sec;
   d5b4e:	f884 9005 	strb.w	r9, [r4, #5]
  
  return DateTime (y, m, d, hh, mm, ss);
}
   d5b52:	4620      	mov	r0, r4
   d5b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000d5b58 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
   d5b58:	b510      	push	{r4, lr}
   d5b5a:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5b5c:	3024      	adds	r0, #36	; 0x24
   d5b5e:	f000 fe77 	bl	d6850 <_ZN8FatCache4syncEv>
   d5b62:	b128      	cbz	r0, d5b70 <_ZN9FatVolume9cacheSyncEv+0x18>
   d5b64:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
   d5b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
   d5b6c:	f000 be70 	b.w	d6850 <_ZN8FatCache4syncEv>
  }
   d5b70:	bd10      	pop	{r4, pc}

000d5b72 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
   d5b72:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b74:	6901      	ldr	r1, [r0, #16]
  m_flags |= F_FILE_DIR_DIRTY;
   d5b76:	f043 0304 	orr.w	r3, r3, #4
   d5b7a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
   d5b7c:	f100 0210 	add.w	r2, r0, #16
   d5b80:	6880      	ldr	r0, [r0, #8]
   d5b82:	f000 bf1b 	b.w	d69bc <_ZN9FatVolume15allocateClusterEmPm>
	...

000d5b88 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
   d5b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
   d5b8c:	7801      	ldrb	r1, [r0, #0]
   d5b8e:	f011 0520 	ands.w	r5, r1, #32
bool FatFile::addDirCluster() {
   d5b92:	4604      	mov	r4, r0
  if (isRootFixed()) {
   d5b94:	d003      	beq.n	d5b9e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
   d5b96:	2600      	movs	r6, #0
}
   d5b98:	4630      	mov	r0, r6
   d5b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curPosition >= 512UL*4095) {
   d5b9e:	6942      	ldr	r2, [r0, #20]
   d5ba0:	4b17      	ldr	r3, [pc, #92]	; (d5c00 <_ZN7FatFile13addDirClusterEv+0x78>)
   d5ba2:	429a      	cmp	r2, r3
   d5ba4:	d2f7      	bcs.n	d5b96 <_ZN7FatFile13addDirClusterEv+0xe>
  if (!addCluster()) {
   d5ba6:	f7ff ffe4 	bl	d5b72 <_ZN7FatFile10addClusterEv>
   d5baa:	4606      	mov	r6, r0
   d5bac:	2800      	cmp	r0, #0
   d5bae:	d0f2      	beq.n	d5b96 <_ZN7FatFile13addDirClusterEv+0xe>
  block = m_vol->clusterFirstBlock(m_curCluster);
   d5bb0:	6921      	ldr	r1, [r4, #16]
   d5bb2:	68a0      	ldr	r0, [r4, #8]
   d5bb4:	f000 fe97 	bl	d68e6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5bb8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
   d5bba:	68a0      	ldr	r0, [r4, #8]
   d5bbc:	2205      	movs	r2, #5
   d5bbe:	4639      	mov	r1, r7
   d5bc0:	3024      	adds	r0, #36	; 0x24
   d5bc2:	f000 fe6d 	bl	d68a0 <_ZN8FatCache4readEmh>
  if (!pc) {
   d5bc6:	4680      	mov	r8, r0
   d5bc8:	2800      	cmp	r0, #0
   d5bca:	d0e4      	beq.n	d5b96 <_ZN7FatFile13addDirClusterEv+0xe>
  memset(pc, 0, 512);
   d5bcc:	4629      	mov	r1, r5
   d5bce:	f44f 7200 	mov.w	r2, #512	; 0x200
   d5bd2:	f003 f8cb 	bl	d8d6c <memset>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5bd6:	2501      	movs	r5, #1
   d5bd8:	68a3      	ldr	r3, [r4, #8]
   d5bda:	791a      	ldrb	r2, [r3, #4]
   d5bdc:	42aa      	cmp	r2, r5
   d5bde:	d909      	bls.n	d5bf4 <_ZN7FatFile13addDirClusterEv+0x6c>
    return m_blockDev->writeBlock(block, src);
   d5be0:	6818      	ldr	r0, [r3, #0]
   d5be2:	4642      	mov	r2, r8
   d5be4:	19e9      	adds	r1, r5, r7
   d5be6:	f001 f9c4 	bl	d6f72 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
   d5bea:	2800      	cmp	r0, #0
   d5bec:	d0d3      	beq.n	d5b96 <_ZN7FatFile13addDirClusterEv+0xe>
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
   d5bee:	3501      	adds	r5, #1
   d5bf0:	b2ed      	uxtb	r5, r5
   d5bf2:	e7f1      	b.n	d5bd8 <_ZN7FatFile13addDirClusterEv+0x50>
  m_curPosition += 512UL*m_vol->blocksPerCluster();
   d5bf4:	6963      	ldr	r3, [r4, #20]
   d5bf6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
   d5bfa:	6163      	str	r3, [r4, #20]
  return true;
   d5bfc:	e7cc      	b.n	d5b98 <_ZN7FatFile13addDirClusterEv+0x10>
   d5bfe:	bf00      	nop
   d5c00:	001ffe00 	.word	0x001ffe00

000d5c04 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
   d5c04:	b510      	push	{r4, lr}
   d5c06:	4604      	mov	r4, r0
    return m_cache.read(blockNumber, options);
   d5c08:	6880      	ldr	r0, [r0, #8]
   d5c0a:	460a      	mov	r2, r1
   d5c0c:	3024      	adds	r0, #36	; 0x24
   d5c0e:	69a1      	ldr	r1, [r4, #24]
   d5c10:	f000 fe46 	bl	d68a0 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
   d5c14:	b120      	cbz	r0, d5c20 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
   d5c16:	88a3      	ldrh	r3, [r4, #4]
   d5c18:	f003 030f 	and.w	r3, r3, #15
   d5c1c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
   d5c20:	bd10      	pop	{r4, pc}

000d5c22 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
   d5c22:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
   d5c24:	7804      	ldrb	r4, [r0, #0]
bool FatFile::openRoot(FatVolume* vol) {
   d5c26:	4605      	mov	r5, r0
   d5c28:	460e      	mov	r6, r1
  if (isOpen()) {
   d5c2a:	b94c      	cbnz	r4, d5c40 <_ZN7FatFile8openRootEP9FatVolume+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
   d5c2c:	2224      	movs	r2, #36	; 0x24
   d5c2e:	4621      	mov	r1, r4
   d5c30:	f003 f89c 	bl	d8d6c <memset>

  m_vol = vol;
   d5c34:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
   d5c36:	79f3      	ldrb	r3, [r6, #7]
   d5c38:	2b10      	cmp	r3, #16
   d5c3a:	d003      	beq.n	d5c44 <_ZN7FatFile8openRootEP9FatVolume+0x22>
   d5c3c:	2b20      	cmp	r3, #32
   d5c3e:	d007      	beq.n	d5c50 <_ZN7FatFile8openRootEP9FatVolume+0x2e>
  // read only
  m_flags = F_READ;
  return true;

fail:
  return false;
   d5c40:	2000      	movs	r0, #0
   d5c42:	e004      	b.n	d5c4e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    m_attr = FILE_ATTR_ROOT_FIXED;
   d5c44:	2320      	movs	r3, #32
  m_flags = F_READ;
   d5c46:	2401      	movs	r4, #1
    m_attr = FILE_ATTR_ROOT32;
   d5c48:	702b      	strb	r3, [r5, #0]
  m_flags = F_READ;
   d5c4a:	70ac      	strb	r4, [r5, #2]
  return true;
   d5c4c:	4620      	mov	r0, r4
}
   d5c4e:	bd70      	pop	{r4, r5, r6, pc}
    m_attr = FILE_ATTR_ROOT32;
   d5c50:	2340      	movs	r3, #64	; 0x40
   d5c52:	e7f8      	b.n	d5c46 <_ZN7FatFile8openRootEP9FatVolume+0x24>

000d5c54 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
   d5c54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
   d5c58:	7803      	ldrb	r3, [r0, #0]
int FatFile::read(void* buf, size_t nbyte) {
   d5c5a:	4604      	mov	r4, r0
   d5c5c:	4688      	mov	r8, r1
   d5c5e:	4615      	mov	r5, r2
  if (!isOpen() || !(m_flags & F_READ)) {
   d5c60:	2b00      	cmp	r3, #0
   d5c62:	d05d      	beq.n	d5d20 <_ZN7FatFile4readEPvj+0xcc>
   d5c64:	7882      	ldrb	r2, [r0, #2]
   d5c66:	07d1      	lsls	r1, r2, #31
   d5c68:	d55a      	bpl.n	d5d20 <_ZN7FatFile4readEPvj+0xcc>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
   d5c6a:	071a      	lsls	r2, r3, #28
   d5c6c:	d52d      	bpl.n	d5cca <_ZN7FatFile4readEPvj+0x76>
    uint32_t tmp32 = m_fileSize - m_curPosition;
   d5c6e:	69c3      	ldr	r3, [r0, #28]
   d5c70:	6942      	ldr	r2, [r0, #20]
   d5c72:	1a9b      	subs	r3, r3, r2
   d5c74:	429d      	cmp	r5, r3
   d5c76:	bf28      	it	cs
   d5c78:	461d      	movcs	r5, r3
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
   d5c7a:	462e      	mov	r6, r5
  uint8_t blockOfCluster = 0;
   d5c7c:	f04f 0900 	mov.w	r9, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5c80:	f104 0b10 	add.w	fp, r4, #16
  while (toRead) {
   d5c84:	2e00      	cmp	r6, #0
   d5c86:	f000 808f 	beq.w	d5da8 <_ZN7FatFile4readEPvj+0x154>
    if (isRootFixed()) {
   d5c8a:	7822      	ldrb	r2, [r4, #0]
    offset = m_curPosition & 0X1FF;  // offset in block
   d5c8c:	6963      	ldr	r3, [r4, #20]
   d5c8e:	68a0      	ldr	r0, [r4, #8]
    if (isRootFixed()) {
   d5c90:	0697      	lsls	r7, r2, #26
    offset = m_curPosition & 0X1FF;  // offset in block
   d5c92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
    return m_attr & FILE_ATTR_ROOT_FIXED;
   d5c96:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
   d5c9a:	d51f      	bpl.n	d5cdc <_ZN7FatFile4readEPvj+0x88>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
   d5c9c:	6a00      	ldr	r0, [r0, #32]
   d5c9e:	4401      	add	r1, r0
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
   d5ca0:	68a0      	ldr	r0, [r4, #8]
   d5ca2:	f1ba 0f00 	cmp.w	sl, #0
   d5ca6:	d142      	bne.n	d5d2e <_ZN7FatFile4readEPvj+0xda>
   d5ca8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5cac:	d33f      	bcc.n	d5d2e <_ZN7FatFile4readEPvj+0xda>
  }
  cache_t *cacheAddress() {
    return m_cache.block();
  }
  uint32_t cacheBlockNumber() {
    return m_cache.lbn();
   d5cae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   d5cb0:	4299      	cmp	r1, r3
   d5cb2:	d03c      	beq.n	d5d2e <_ZN7FatFile4readEPvj+0xda>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
   d5cb4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   d5cb8:	d252      	bcs.n	d5d60 <_ZN7FatFile4readEPvj+0x10c>
    return m_blockDev->readBlock(block, dst);
   d5cba:	6800      	ldr	r0, [r0, #0]
   d5cbc:	4642      	mov	r2, r8
   d5cbe:	f001 f8cf 	bl	d6e60 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
   d5cc2:	b368      	cbz	r0, d5d20 <_ZN7FatFile4readEPvj+0xcc>
      n = 512;
   d5cc4:	f44f 7700 	mov.w	r7, #512	; 0x200
   d5cc8:	e044      	b.n	d5d54 <_ZN7FatFile4readEPvj+0x100>
  } else if (isRootFixed()) {
   d5cca:	069b      	lsls	r3, r3, #26
   d5ccc:	d5d5      	bpl.n	d5c7a <_ZN7FatFile4readEPvj+0x26>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
   d5cce:	6883      	ldr	r3, [r0, #8]
   d5cd0:	891a      	ldrh	r2, [r3, #8]
   d5cd2:	6943      	ldr	r3, [r0, #20]
   d5cd4:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    if (nbyte > tmp16) {
   d5cd8:	b29b      	uxth	r3, r3
   d5cda:	e7cb      	b.n	d5c74 <_ZN7FatFile4readEPvj+0x20>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
   d5cdc:	f890 9005 	ldrb.w	r9, [r0, #5]
   d5ce0:	ea09 0901 	and.w	r9, r9, r1
      if (offset == 0 && blockOfCluster == 0) {
   d5ce4:	f1ba 0f00 	cmp.w	sl, #0
   d5ce8:	d108      	bne.n	d5cfc <_ZN7FatFile4readEPvj+0xa8>
   d5cea:	f1b9 0f00 	cmp.w	r9, #0
   d5cee:	d105      	bne.n	d5cfc <_ZN7FatFile4readEPvj+0xa8>
        if (m_curPosition == 0) {
   d5cf0:	b95b      	cbnz	r3, d5d0a <_ZN7FatFile4readEPvj+0xb6>
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5cf2:	0651      	lsls	r1, r2, #25
   d5cf4:	bf4c      	ite	mi
   d5cf6:	6a03      	ldrmi	r3, [r0, #32]
   d5cf8:	6a23      	ldrpl	r3, [r4, #32]
   d5cfa:	6123      	str	r3, [r4, #16]
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d5cfc:	6921      	ldr	r1, [r4, #16]
   d5cfe:	68a0      	ldr	r0, [r4, #8]
   d5d00:	f000 fdf1 	bl	d68e6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d5d04:	eb09 0100 	add.w	r1, r9, r0
   d5d08:	e7ca      	b.n	d5ca0 <_ZN7FatFile4readEPvj+0x4c>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d5d0a:	6921      	ldr	r1, [r4, #16]
   d5d0c:	465a      	mov	r2, fp
   d5d0e:	f000 fdf0 	bl	d68f2 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
   d5d12:	2800      	cmp	r0, #0
   d5d14:	db04      	blt.n	d5d20 <_ZN7FatFile4readEPvj+0xcc>
          if (fg == 0) {
   d5d16:	d1f1      	bne.n	d5cfc <_ZN7FatFile4readEPvj+0xa8>
            if (isDir()) {
   d5d18:	7823      	ldrb	r3, [r4, #0]
   d5d1a:	f013 0f70 	tst.w	r3, #112	; 0x70
   d5d1e:	d143      	bne.n	d5da8 <_ZN7FatFile4readEPvj+0x154>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
   d5d20:	7863      	ldrb	r3, [r4, #1]
   d5d22:	f043 0302 	orr.w	r3, r3, #2
   d5d26:	7063      	strb	r3, [r4, #1]
  return -1;
   d5d28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d5d2c:	e03d      	b.n	d5daa <_ZN7FatFile4readEPvj+0x156>
      n = 512 - offset;
   d5d2e:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
      if (n > toRead) {
   d5d32:	42b7      	cmp	r7, r6
    return m_cache.read(blockNumber, options);
   d5d34:	f04f 0200 	mov.w	r2, #0
   d5d38:	f100 0024 	add.w	r0, r0, #36	; 0x24
   d5d3c:	bf28      	it	cs
   d5d3e:	4637      	movcs	r7, r6
   d5d40:	f000 fdae 	bl	d68a0 <_ZN8FatCache4readEmh>
      if (!pc) {
   d5d44:	2800      	cmp	r0, #0
   d5d46:	d0eb      	beq.n	d5d20 <_ZN7FatFile4readEPvj+0xcc>
      memcpy(dst, src, n);
   d5d48:	eb00 010a 	add.w	r1, r0, sl
   d5d4c:	463a      	mov	r2, r7
   d5d4e:	4640      	mov	r0, r8
   d5d50:	f002 fffe 	bl	d8d50 <memcpy>
    m_curPosition += n;
   d5d54:	6963      	ldr	r3, [r4, #20]
   d5d56:	443b      	add	r3, r7
    dst += n;
   d5d58:	44b8      	add	r8, r7
    m_curPosition += n;
   d5d5a:	6163      	str	r3, [r4, #20]
    toRead -= n;
   d5d5c:	1bf6      	subs	r6, r6, r7
  while (toRead) {
   d5d5e:	e791      	b.n	d5c84 <_ZN7FatFile4readEPvj+0x30>
      if (!isRootFixed()) {
   d5d60:	7822      	ldrb	r2, [r4, #0]
   d5d62:	0692      	lsls	r2, r2, #26
      size_t nb = toRead >> 9;
   d5d64:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
   d5d68:	d406      	bmi.n	d5d78 <_ZN7FatFile4readEPvj+0x124>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
   d5d6a:	7902      	ldrb	r2, [r0, #4]
   d5d6c:	eba2 0209 	sub.w	r2, r2, r9
        if (mb < nb) {
   d5d70:	b2d2      	uxtb	r2, r2
   d5d72:	4592      	cmp	sl, r2
   d5d74:	bf28      	it	cs
   d5d76:	4692      	movcs	sl, r2
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d78:	4299      	cmp	r1, r3
      n = 512*nb;
   d5d7a:	ea4f 274a 	mov.w	r7, sl, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d7e:	d208      	bcs.n	d5d92 <_ZN7FatFile4readEPvj+0x13e>
    return m_blockDev->readBlocks(block, dst, nb);
   d5d80:	68a0      	ldr	r0, [r4, #8]
   d5d82:	4653      	mov	r3, sl
   d5d84:	6800      	ldr	r0, [r0, #0]
   d5d86:	4642      	mov	r2, r8
   d5d88:	f001 f8b2 	bl	d6ef0 <_ZN9SdSpiCard10readBlocksEmPhj>
      if (!m_vol->readBlocks(block, dst, nb)) {
   d5d8c:	2800      	cmp	r0, #0
   d5d8e:	d1e1      	bne.n	d5d54 <_ZN7FatFile4readEPvj+0x100>
   d5d90:	e7c6      	b.n	d5d20 <_ZN7FatFile4readEPvj+0xcc>
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d5d92:	4453      	add	r3, sl
   d5d94:	428b      	cmp	r3, r1
   d5d96:	d9f3      	bls.n	d5d80 <_ZN7FatFile4readEPvj+0x12c>
    return m_cache.sync();
   d5d98:	3024      	adds	r0, #36	; 0x24
   d5d9a:	9101      	str	r1, [sp, #4]
   d5d9c:	f000 fd58 	bl	d6850 <_ZN8FatCache4syncEv>
        if (!m_vol->cacheSyncData()) {
   d5da0:	9901      	ldr	r1, [sp, #4]
   d5da2:	2800      	cmp	r0, #0
   d5da4:	d1ec      	bne.n	d5d80 <_ZN7FatFile4readEPvj+0x12c>
   d5da6:	e7bb      	b.n	d5d20 <_ZN7FatFile4readEPvj+0xcc>
  return nbyte - toRead;
   d5da8:	1ba8      	subs	r0, r5, r6
}
   d5daa:	b003      	add	sp, #12
   d5dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5db0 <_ZN7FatFile4peekEv>:
int FatFile::peek() {
   d5db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return read(&b, 1) == 1 ? b : -1;
   d5db2:	2201      	movs	r2, #1
   d5db4:	f10d 0107 	add.w	r1, sp, #7
  pos->cluster = m_curCluster;
   d5db8:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
int FatFile::peek() {
   d5dbc:	4604      	mov	r4, r0
   d5dbe:	f7ff ff49 	bl	d5c54 <_ZN7FatFile4readEPvj>
   d5dc2:	2801      	cmp	r0, #1
   d5dc4:	bf0a      	itet	eq
   d5dc6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
   d5dca:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
   d5dce:	e9c4 5604 	strdeq	r5, r6, [r4, #16]
}
   d5dd2:	b002      	add	sp, #8
   d5dd4:	bd70      	pop	{r4, r5, r6, pc}

000d5dd6 <_ZN7FatFile12readDirCacheEb>:
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5dd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5dd8:	6943      	ldr	r3, [r0, #20]
  if (i == 0 || !skipReadOk) {
   d5dda:	f413 7ff0 	tst.w	r3, #480	; 0x1e0
dir_t* FatFile::readDirCache(bool skipReadOk) {
   d5dde:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;
   d5de0:	f3c3 1543 	ubfx	r5, r3, #5, #4
  if (i == 0 || !skipReadOk) {
   d5de4:	d000      	beq.n	d5de8 <_ZN7FatFile12readDirCacheEb+0x12>
   d5de6:	b999      	cbnz	r1, d5e10 <_ZN7FatFile12readDirCacheEb+0x3a>
    int8_t n = read(&n, 1);
   d5de8:	2201      	movs	r2, #1
   d5dea:	f10d 0107 	add.w	r1, sp, #7
   d5dee:	4620      	mov	r0, r4
   d5df0:	f7ff ff30 	bl	d5c54 <_ZN7FatFile4readEPvj>
    if  (n != 1) {
   d5df4:	b240      	sxtb	r0, r0
   d5df6:	2801      	cmp	r0, #1
   d5df8:	d002      	beq.n	d5e00 <_ZN7FatFile12readDirCacheEb+0x2a>
  return 0;
   d5dfa:	2000      	movs	r0, #0
}
   d5dfc:	b003      	add	sp, #12
   d5dfe:	bd30      	pop	{r4, r5, pc}
    m_curPosition += 31;
   d5e00:	6963      	ldr	r3, [r4, #20]
   d5e02:	331f      	adds	r3, #31
  return m_vol->cacheAddress()->dir + i;
   d5e04:	68a0      	ldr	r0, [r4, #8]
    m_curPosition += 32;
   d5e06:	6163      	str	r3, [r4, #20]
  return m_vol->cacheAddress()->dir + i;
   d5e08:	3030      	adds	r0, #48	; 0x30
   d5e0a:	eb00 1045 	add.w	r0, r0, r5, lsl #5
   d5e0e:	e7f5      	b.n	d5dfc <_ZN7FatFile12readDirCacheEb+0x26>
    m_curPosition += 32;
   d5e10:	3320      	adds	r3, #32
   d5e12:	e7f7      	b.n	d5e04 <_ZN7FatFile12readDirCacheEb+0x2e>

000d5e14 <_ZN7FatFile7seekSetEm>:
bool FatFile::seekSet(uint32_t pos) {
   d5e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isOpen()) {
   d5e18:	7802      	ldrb	r2, [r0, #0]
  uint32_t tmp = m_curCluster;
   d5e1a:	6907      	ldr	r7, [r0, #16]
bool FatFile::seekSet(uint32_t pos) {
   d5e1c:	4604      	mov	r4, r0
   d5e1e:	460d      	mov	r5, r1
  if (!isOpen()) {
   d5e20:	b162      	cbz	r2, d5e3c <_ZN7FatFile7seekSetEm+0x28>
  if (pos == m_curPosition) {
   d5e22:	6940      	ldr	r0, [r0, #20]
   d5e24:	4288      	cmp	r0, r1
   d5e26:	d002      	beq.n	d5e2e <_ZN7FatFile7seekSetEm+0x1a>
  if (pos == 0) {
   d5e28:	b919      	cbnz	r1, d5e32 <_ZN7FatFile7seekSetEm+0x1e>
    m_curCluster = 0;
   d5e2a:	6121      	str	r1, [r4, #16]
  m_curPosition = pos;
   d5e2c:	6165      	str	r5, [r4, #20]
    return true;
   d5e2e:	2001      	movs	r0, #1
   d5e30:	e006      	b.n	d5e40 <_ZN7FatFile7seekSetEm+0x2c>
  if (isFile()) {
   d5e32:	0716      	lsls	r6, r2, #28
   d5e34:	d506      	bpl.n	d5e44 <_ZN7FatFile7seekSetEm+0x30>
    if (pos > m_fileSize) {
   d5e36:	69e3      	ldr	r3, [r4, #28]
   d5e38:	428b      	cmp	r3, r1
   d5e3a:	d20b      	bcs.n	d5e54 <_ZN7FatFile7seekSetEm+0x40>
  m_curCluster = tmp;
   d5e3c:	6127      	str	r7, [r4, #16]
  return false;
   d5e3e:	2000      	movs	r0, #0
}
   d5e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (isRootFixed()) {
   d5e44:	0691      	lsls	r1, r2, #26
   d5e46:	d505      	bpl.n	d5e54 <_ZN7FatFile7seekSetEm+0x40>
    if (pos <= 32*m_vol->rootDirEntryCount()) {
   d5e48:	68a3      	ldr	r3, [r4, #8]
   d5e4a:	891b      	ldrh	r3, [r3, #8]
   d5e4c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
   d5e50:	d9ec      	bls.n	d5e2c <_ZN7FatFile7seekSetEm+0x18>
   d5e52:	e7f3      	b.n	d5e3c <_ZN7FatFile7seekSetEm+0x28>
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e54:	f8d4 c008 	ldr.w	ip, [r4, #8]
   d5e58:	f89c 6006 	ldrb.w	r6, [ip, #6]
   d5e5c:	1e43      	subs	r3, r0, #1
   d5e5e:	f106 0109 	add.w	r1, r6, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e62:	1e6e      	subs	r6, r5, #1
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e64:	40cb      	lsrs	r3, r1
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
   d5e66:	40ce      	lsrs	r6, r1
  if (nNew < nCur || m_curPosition == 0) {
   d5e68:	42b3      	cmp	r3, r6
   d5e6a:	d800      	bhi.n	d5e6e <_ZN7FatFile7seekSetEm+0x5a>
   d5e6c:	b998      	cbnz	r0, d5e96 <_ZN7FatFile7seekSetEm+0x82>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
   d5e6e:	0653      	lsls	r3, r2, #25
   d5e70:	bf4c      	ite	mi
   d5e72:	f8dc 3020 	ldrmi.w	r3, [ip, #32]
   d5e76:	6a23      	ldrpl	r3, [r4, #32]
   d5e78:	6123      	str	r3, [r4, #16]
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5e7a:	f104 0810 	add.w	r8, r4, #16
  while (nNew--) {
   d5e7e:	2e00      	cmp	r6, #0
   d5e80:	d0d4      	beq.n	d5e2c <_ZN7FatFile7seekSetEm+0x18>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
   d5e82:	6921      	ldr	r1, [r4, #16]
   d5e84:	68a0      	ldr	r0, [r4, #8]
   d5e86:	4642      	mov	r2, r8
   d5e88:	f000 fd33 	bl	d68f2 <_ZN9FatVolume6fatGetEmPm>
   d5e8c:	2800      	cmp	r0, #0
   d5e8e:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
   d5e92:	dcf4      	bgt.n	d5e7e <_ZN7FatFile7seekSetEm+0x6a>
   d5e94:	e7d2      	b.n	d5e3c <_ZN7FatFile7seekSetEm+0x28>
    nNew -= nCur;
   d5e96:	1af6      	subs	r6, r6, r3
   d5e98:	e7ef      	b.n	d5e7a <_ZN7FatFile7seekSetEm+0x66>

000d5e9a <_ZN7FatFile15openCachedEntryEPS_tih>:
                              oflag_t oflag, uint8_t lfnOrd) {
   d5e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e9c:	460f      	mov	r7, r1
   d5e9e:	4616      	mov	r6, r2
  memset(this, 0, sizeof(FatFile));
   d5ea0:	2100      	movs	r1, #0
   d5ea2:	2224      	movs	r2, #36	; 0x24
                              oflag_t oflag, uint8_t lfnOrd) {
   d5ea4:	4604      	mov	r4, r0
   d5ea6:	461d      	mov	r5, r3
  memset(this, 0, sizeof(FatFile));
   d5ea8:	f002 ff60 	bl	d8d6c <memset>
  m_vol = dirFile->m_vol;
   d5eac:	68b8      	ldr	r0, [r7, #8]
   d5eae:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
   d5eb0:	80a6      	strh	r6, [r4, #4]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5eb2:	f100 0230 	add.w	r2, r0, #48	; 0x30
   d5eb6:	f006 060f 	and.w	r6, r6, #15
  m_dirCluster = dirFile->m_firstCluster;
   d5eba:	6a3b      	ldr	r3, [r7, #32]
   d5ebc:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
   d5ebe:	0171      	lsls	r1, r6, #5
   d5ec0:	eb02 1646 	add.w	r6, r2, r6, lsl #5
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
   d5ec4:	7af3      	ldrb	r3, [r6, #11]
   d5ec6:	071f      	lsls	r7, r3, #28
   d5ec8:	d446      	bmi.n	d5f58 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_attr = dir->attributes & FILE_ATTR_COPY;
   d5eca:	1843      	adds	r3, r0, r1
   d5ecc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
   d5ed0:	f003 0317 	and.w	r3, r3, #23
   d5ed4:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
   d5ed6:	7af2      	ldrb	r2, [r6, #11]
   d5ed8:	f012 0f18 	tst.w	r2, #24
    m_attr |= FILE_ATTR_FILE;
   d5edc:	bf04      	itt	eq
   d5ede:	f043 0308 	orreq.w	r3, r3, #8
   d5ee2:	7023      	strbeq	r3, [r4, #0]
  m_lfnOrd = lfnOrd;
   d5ee4:	f89d 3018 	ldrb.w	r3, [sp, #24]
   d5ee8:	70e3      	strb	r3, [r4, #3]
  switch (oflag & O_ACCMODE) {
   d5eea:	f005 0303 	and.w	r3, r5, #3
   d5eee:	2b01      	cmp	r3, #1
   d5ef0:	d02c      	beq.n	d5f4c <_ZN7FatFile15openCachedEntryEPS_tih+0xb2>
   d5ef2:	2b02      	cmp	r3, #2
   d5ef4:	d028      	beq.n	d5f48 <_ZN7FatFile15openCachedEntryEPS_tih+0xae>
   d5ef6:	bb7b      	cbnz	r3, d5f58 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      if (oflag & O_TRUNC) {
   d5ef8:	056a      	lsls	r2, r5, #21
   d5efa:	d42d      	bmi.n	d5f58 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
      m_flags = F_READ;
   d5efc:	2301      	movs	r3, #1
      m_flags = F_WRITE;
   d5efe:	70a3      	strb	r3, [r4, #2]
  if (m_flags & F_WRITE) {
   d5f00:	78a2      	ldrb	r2, [r4, #2]
   d5f02:	0793      	lsls	r3, r2, #30
   d5f04:	d504      	bpl.n	d5f10 <_ZN7FatFile15openCachedEntryEPS_tih+0x76>
    if (isSubDir() || isReadOnly()) {
   d5f06:	7823      	ldrb	r3, [r4, #0]
   d5f08:	06df      	lsls	r7, r3, #27
   d5f0a:	d425      	bmi.n	d5f58 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
   d5f0c:	07de      	lsls	r6, r3, #31
   d5f0e:	d423      	bmi.n	d5f58 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>
  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
   d5f10:	11ab      	asrs	r3, r5, #6
   d5f12:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d5f16:	f005 0608 	and.w	r6, r5, #8
   d5f1a:	4333      	orrs	r3, r6
   d5f1c:	4313      	orrs	r3, r2
   d5f1e:	70a3      	strb	r3, [r4, #2]
    return m_cache.lbn();
   d5f20:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  m_dirBlock = m_vol->cacheBlockNumber();
   d5f22:	61a3      	str	r3, [r4, #24]
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5f24:	1843      	adds	r3, r0, r1
   d5f26:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
                 | dir->firstClusterLow;
   d5f2a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
   d5f2e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
  if (oflag & O_TRUNC) {
   d5f32:	056a      	lsls	r2, r5, #21
   d5f34:	d513      	bpl.n	d5f5e <_ZN7FatFile15openCachedEntryEPS_tih+0xc4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5f36:	b959      	cbnz	r1, d5f50 <_ZN7FatFile15openCachedEntryEPS_tih+0xb6>
    m_flags |= F_FILE_DIR_DIRTY;
   d5f38:	78a3      	ldrb	r3, [r4, #2]
   d5f3a:	f043 0304 	orr.w	r3, r3, #4
   d5f3e:	70a3      	strb	r3, [r4, #2]
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5f40:	046b      	lsls	r3, r5, #17
   d5f42:	d410      	bmi.n	d5f66 <_ZN7FatFile15openCachedEntryEPS_tih+0xcc>
  return true;
   d5f44:	2001      	movs	r0, #1
}
   d5f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      m_flags = F_READ | F_WRITE;
   d5f48:	2303      	movs	r3, #3
   d5f4a:	e7d8      	b.n	d5efe <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
      m_flags = F_WRITE;
   d5f4c:	2302      	movs	r3, #2
   d5f4e:	e7d6      	b.n	d5efe <_ZN7FatFile15openCachedEntryEPS_tih+0x64>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
   d5f50:	f000 fd6f 	bl	d6a32 <_ZN9FatVolume9freeChainEm>
   d5f54:	2800      	cmp	r0, #0
   d5f56:	d1ef      	bne.n	d5f38 <_ZN7FatFile15openCachedEntryEPS_tih+0x9e>
  m_attr = FILE_ATTR_CLOSED;
   d5f58:	2000      	movs	r0, #0
   d5f5a:	7020      	strb	r0, [r4, #0]
  return false;
   d5f5c:	e7f3      	b.n	d5f46 <_ZN7FatFile15openCachedEntryEPS_tih+0xac>
    m_firstCluster = firstCluster;
   d5f5e:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
   d5f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5f62:	61e3      	str	r3, [r4, #28]
   d5f64:	e7ec      	b.n	d5f40 <_ZN7FatFile15openCachedEntryEPS_tih+0xa6>
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
   d5f66:	69e1      	ldr	r1, [r4, #28]
   d5f68:	4620      	mov	r0, r4
   d5f6a:	f7ff ff53 	bl	d5e14 <_ZN7FatFile7seekSetEm>
   d5f6e:	2800      	cmp	r0, #0
   d5f70:	d1e8      	bne.n	d5f44 <_ZN7FatFile15openCachedEntryEPS_tih+0xaa>
   d5f72:	e7f1      	b.n	d5f58 <_ZN7FatFile15openCachedEntryEPS_tih+0xbe>

000d5f74 <_ZN7FatFile4syncEv>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
   d5f74:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
   d5f76:	7803      	ldrb	r3, [r0, #0]
bool FatFile::sync() {
   d5f78:	4604      	mov	r4, r0
  if (!isOpen()) {
   d5f7a:	b90b      	cbnz	r3, d5f80 <_ZN7FatFile4syncEv+0xc>
    return true;
   d5f7c:	2001      	movs	r0, #1
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
  return false;
}
   d5f7e:	bd38      	pop	{r3, r4, r5, pc}
  if (m_flags & F_FILE_DIR_DIRTY) {
   d5f80:	7883      	ldrb	r3, [r0, #2]
   d5f82:	075a      	lsls	r2, r3, #29
   d5f84:	d523      	bpl.n	d5fce <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
   d5f86:	2101      	movs	r1, #1
   d5f88:	f7ff fe3c 	bl	d5c04 <_ZN7FatFile13cacheDirEntryEh>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5f8c:	4605      	mov	r5, r0
   d5f8e:	b928      	cbnz	r0, d5f9c <_ZN7FatFile4syncEv+0x28>
  m_error |= WRITE_ERROR;
   d5f90:	7863      	ldrb	r3, [r4, #1]
   d5f92:	f043 0301 	orr.w	r3, r3, #1
   d5f96:	7063      	strb	r3, [r4, #1]
  return false;
   d5f98:	2000      	movs	r0, #0
   d5f9a:	e7f0      	b.n	d5f7e <_ZN7FatFile4syncEv+0xa>
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
   d5f9c:	7803      	ldrb	r3, [r0, #0]
   d5f9e:	2be5      	cmp	r3, #229	; 0xe5
   d5fa0:	d0f6      	beq.n	d5f90 <_ZN7FatFile4syncEv+0x1c>
    if (isFile()) {
   d5fa2:	7823      	ldrb	r3, [r4, #0]
   d5fa4:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
   d5fa6:	bf44      	itt	mi
   d5fa8:	69e3      	ldrmi	r3, [r4, #28]
   d5faa:	61c3      	strmi	r3, [r0, #28]
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
   d5fac:	8c23      	ldrh	r3, [r4, #32]
   d5fae:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
   d5fb0:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   d5fb2:	8283      	strh	r3, [r0, #20]
    if (m_dateTime) {
   d5fb4:	4b09      	ldr	r3, [pc, #36]	; (d5fdc <_ZN7FatFile4syncEv+0x68>)
   d5fb6:	681b      	ldr	r3, [r3, #0]
   d5fb8:	b12b      	cbz	r3, d5fc6 <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
   d5fba:	f100 0116 	add.w	r1, r0, #22
   d5fbe:	3018      	adds	r0, #24
   d5fc0:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
   d5fc2:	8b2b      	ldrh	r3, [r5, #24]
   d5fc4:	826b      	strh	r3, [r5, #18]
    m_flags &= ~F_FILE_DIR_DIRTY;
   d5fc6:	78a3      	ldrb	r3, [r4, #2]
   d5fc8:	f023 0304 	bic.w	r3, r3, #4
   d5fcc:	70a3      	strb	r3, [r4, #2]
  if (m_vol->cacheSync()) {
   d5fce:	68a0      	ldr	r0, [r4, #8]
   d5fd0:	f7ff fdc2 	bl	d5b58 <_ZN9FatVolume9cacheSyncEv>
   d5fd4:	2800      	cmp	r0, #0
   d5fd6:	d0db      	beq.n	d5f90 <_ZN7FatFile4syncEv+0x1c>
   d5fd8:	e7d0      	b.n	d5f7c <_ZN7FatFile4syncEv+0x8>
   d5fda:	bf00      	nop
   d5fdc:	2003e5a4 	.word	0x2003e5a4

000d5fe0 <_ZN7FatFile5closeEv>:
bool FatFile::close() {
   d5fe0:	b510      	push	{r4, lr}
   d5fe2:	4604      	mov	r4, r0
  bool rtn = sync();
   d5fe4:	f7ff ffc6 	bl	d5f74 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
   d5fe8:	2300      	movs	r3, #0
   d5fea:	7023      	strb	r3, [r4, #0]
}
   d5fec:	bd10      	pop	{r4, pc}

000d5fee <_ZN7FatFile4openEPS_PKci>:
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5fee:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ff0:	b093      	sub	sp, #76	; 0x4c
   d5ff2:	461f      	mov	r7, r3
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
   d5ff4:	2300      	movs	r3, #0
   d5ff6:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if (isOpen() || !dirFile->isDir()) {
   d5ffa:	7803      	ldrb	r3, [r0, #0]
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
   d5ffc:	9201      	str	r2, [sp, #4]
   d5ffe:	4606      	mov	r6, r0
   d6000:	460c      	mov	r4, r1
  if (isOpen() || !dirFile->isDir()) {
   d6002:	b113      	cbz	r3, d600a <_ZN7FatFile4openEPS_PKci+0x1c>
  return false;
   d6004:	2000      	movs	r0, #0
}
   d6006:	b013      	add	sp, #76	; 0x4c
   d6008:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (isOpen() || !dirFile->isDir()) {
   d600a:	780b      	ldrb	r3, [r1, #0]
   d600c:	f013 0f70 	tst.w	r3, #112	; 0x70
   d6010:	d0f8      	beq.n	d6004 <_ZN7FatFile4openEPS_PKci+0x16>
  if (isDirSeparator(*path)) {
   d6012:	7813      	ldrb	r3, [r2, #0]
   d6014:	2b2f      	cmp	r3, #47	; 0x2f
   d6016:	d112      	bne.n	d603e <_ZN7FatFile4openEPS_PKci+0x50>
    while (isDirSeparator(*path)) {
   d6018:	9a01      	ldr	r2, [sp, #4]
   d601a:	7813      	ldrb	r3, [r2, #0]
   d601c:	2b2f      	cmp	r3, #47	; 0x2f
   d601e:	d102      	bne.n	d6026 <_ZN7FatFile4openEPS_PKci+0x38>
      path++;
   d6020:	3201      	adds	r2, #1
   d6022:	9201      	str	r2, [sp, #4]
    while (isDirSeparator(*path)) {
   d6024:	e7f8      	b.n	d6018 <_ZN7FatFile4openEPS_PKci+0x2a>
    if (*path == 0) {
   d6026:	68a1      	ldr	r1, [r4, #8]
   d6028:	b91b      	cbnz	r3, d6032 <_ZN7FatFile4openEPS_PKci+0x44>
      return openRoot(dirFile->m_vol);
   d602a:	4630      	mov	r0, r6
   d602c:	f7ff fdf9 	bl	d5c22 <_ZN7FatFile8openRootEP9FatVolume>
   d6030:	e7e9      	b.n	d6006 <_ZN7FatFile4openEPS_PKci+0x18>
    if (!tmpDir.openRoot(dirFile->m_vol)) {
   d6032:	a809      	add	r0, sp, #36	; 0x24
   d6034:	f7ff fdf5 	bl	d5c22 <_ZN7FatFile8openRootEP9FatVolume>
   d6038:	2800      	cmp	r0, #0
   d603a:	d0e3      	beq.n	d6004 <_ZN7FatFile4openEPS_PKci+0x16>
    dirFile = &tmpDir;
   d603c:	ac09      	add	r4, sp, #36	; 0x24
    if (!parsePathName(path, &fname, &path)) {
   d603e:	9801      	ldr	r0, [sp, #4]
   d6040:	aa01      	add	r2, sp, #4
   d6042:	a903      	add	r1, sp, #12
   d6044:	f000 f8f6 	bl	d6234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
   d6048:	2800      	cmp	r0, #0
   d604a:	d0db      	beq.n	d6004 <_ZN7FatFile4openEPS_PKci+0x16>
    if (*path == 0) {
   d604c:	9b01      	ldr	r3, [sp, #4]
   d604e:	781b      	ldrb	r3, [r3, #0]
   d6050:	b19b      	cbz	r3, d607a <_ZN7FatFile4openEPS_PKci+0x8c>
    if (!open(dirFile, &fname, O_RDONLY)) {
   d6052:	2300      	movs	r3, #0
   d6054:	aa03      	add	r2, sp, #12
   d6056:	4621      	mov	r1, r4
   d6058:	4630      	mov	r0, r6
   d605a:	f000 fa1f 	bl	d649c <_ZN7FatFile4openEPS_P7fname_ti>
   d605e:	2800      	cmp	r0, #0
   d6060:	d0d0      	beq.n	d6004 <_ZN7FatFile4openEPS_PKci+0x16>
    tmpDir = *this;
   d6062:	4635      	mov	r5, r6
   d6064:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6066:	ac09      	add	r4, sp, #36	; 0x24
   d6068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d606a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d606c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d606e:	682b      	ldr	r3, [r5, #0]
   d6070:	6023      	str	r3, [r4, #0]
    close();
   d6072:	4630      	mov	r0, r6
   d6074:	f7ff ffb4 	bl	d5fe0 <_ZN7FatFile5closeEv>
  while (1) {
   d6078:	e7e0      	b.n	d603c <_ZN7FatFile4openEPS_PKci+0x4e>
  return open(dirFile, &fname, oflag);
   d607a:	463b      	mov	r3, r7
   d607c:	aa03      	add	r2, sp, #12
   d607e:	4621      	mov	r1, r4
   d6080:	4630      	mov	r0, r6
   d6082:	f000 fa0b 	bl	d649c <_ZN7FatFile4openEPS_P7fname_ti>
   d6086:	e7be      	b.n	d6006 <_ZN7FatFile4openEPS_PKci+0x18>

000d6088 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
   d6088:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
   d608c:	7803      	ldrb	r3, [r0, #0]
int FatFile::write(const void* buf, size_t nbyte) {
   d608e:	4689      	mov	r9, r1
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6090:	0719      	lsls	r1, r3, #28
int FatFile::write(const void* buf, size_t nbyte) {
   d6092:	4604      	mov	r4, r0
   d6094:	4617      	mov	r7, r2
  if (!isFile() || !(m_flags & F_WRITE)) {
   d6096:	d55b      	bpl.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
   d6098:	7883      	ldrb	r3, [r0, #2]
   d609a:	079a      	lsls	r2, r3, #30
   d609c:	d558      	bpl.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
   d609e:	071b      	lsls	r3, r3, #28
   d60a0:	d451      	bmi.n	d6146 <_ZN7FatFile5writeEPKvj+0xbe>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
   d60a2:	6963      	ldr	r3, [r4, #20]
   d60a4:	43db      	mvns	r3, r3
   d60a6:	42bb      	cmp	r3, r7
   d60a8:	d352      	bcc.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
   d60aa:	46b8      	mov	r8, r7
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
    uint16_t blockOffset = m_curPosition & 0X1FF;
    if (blockOfCluster == 0 && blockOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d60ac:	f104 0a10 	add.w	sl, r4, #16
  while (nToWrite) {
   d60b0:	6966      	ldr	r6, [r4, #20]
   d60b2:	f1b8 0f00 	cmp.w	r8, #0
   d60b6:	f000 8091 	beq.w	d61dc <_ZN7FatFile5writeEPKvj+0x154>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
   d60ba:	68a0      	ldr	r0, [r4, #8]
    return (position >> 9) & m_clusterBlockMask;
   d60bc:	7943      	ldrb	r3, [r0, #5]
    uint16_t blockOffset = m_curPosition & 0X1FF;
   d60be:	f3c6 0508 	ubfx	r5, r6, #0, #9
    if (blockOfCluster == 0 && blockOffset == 0) {
   d60c2:	ea13 2656 	ands.w	r6, r3, r6, lsr #9
   d60c6:	d10e      	bne.n	d60e6 <_ZN7FatFile5writeEPKvj+0x5e>
   d60c8:	b96d      	cbnz	r5, d60e6 <_ZN7FatFile5writeEPKvj+0x5e>
   d60ca:	6921      	ldr	r1, [r4, #16]
      if (m_curCluster != 0) {
   d60cc:	2900      	cmp	r1, #0
   d60ce:	d046      	beq.n	d615e <_ZN7FatFile5writeEPKvj+0xd6>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
   d60d0:	4652      	mov	r2, sl
   d60d2:	f000 fc0e 	bl	d68f2 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
   d60d6:	2800      	cmp	r0, #0
   d60d8:	db3a      	blt.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
   d60da:	d104      	bne.n	d60e6 <_ZN7FatFile5writeEPKvj+0x5e>
          // add cluster if at end of chain
          if (!addCluster()) {
   d60dc:	4620      	mov	r0, r4
   d60de:	f7ff fd48 	bl	d5b72 <_ZN7FatFile10addClusterEv>
   d60e2:	2800      	cmp	r0, #0
   d60e4:	d034      	beq.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
   d60e6:	6921      	ldr	r1, [r4, #16]
   d60e8:	68a0      	ldr	r0, [r4, #8]
   d60ea:	f000 fbfc 	bl	d68e6 <_ZNK9FatVolume17clusterFirstBlockEm>
   d60ee:	1831      	adds	r1, r6, r0

    if (blockOffset != 0 || nToWrite < 512) {
   d60f0:	68a0      	ldr	r0, [r4, #8]
   d60f2:	b915      	cbnz	r5, d60fa <_ZN7FatFile5writeEPKvj+0x72>
   d60f4:	f5b8 7f00 	cmp.w	r8, #512	; 0x200
   d60f8:	d23f      	bcs.n	d617a <_ZN7FatFile5writeEPKvj+0xf2>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
   d60fa:	f5c5 7600 	rsb	r6, r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
   d60fe:	4546      	cmp	r6, r8
   d6100:	bf28      	it	cs
   d6102:	4646      	movcs	r6, r8
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
   d6104:	2d00      	cmp	r5, #0
   d6106:	d136      	bne.n	d6176 <_ZN7FatFile5writeEPKvj+0xee>
   d6108:	6962      	ldr	r2, [r4, #20]
   d610a:	69e3      	ldr	r3, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
   d610c:	429a      	cmp	r2, r3
   d610e:	bf34      	ite	cc
   d6110:	2201      	movcc	r2, #1
   d6112:	2205      	movcs	r2, #5
    return m_cache.read(blockNumber, options);
   d6114:	3024      	adds	r0, #36	; 0x24
   d6116:	f000 fbc3 	bl	d68a0 <_ZN8FatCache4readEmh>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
   d611a:	b1c8      	cbz	r0, d6150 <_ZN7FatFile5writeEPKvj+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
   d611c:	4428      	add	r0, r5
   d611e:	4632      	mov	r2, r6
   d6120:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
   d6122:	4435      	add	r5, r6
      memcpy(dst, src, n);
   d6124:	f002 fe14 	bl	d8d50 <memcpy>
      if (512 == (n + blockOffset)) {
   d6128:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   d612c:	d104      	bne.n	d6138 <_ZN7FatFile5writeEPKvj+0xb0>
    return m_cache.sync();
   d612e:	68a0      	ldr	r0, [r4, #8]
   d6130:	3024      	adds	r0, #36	; 0x24
   d6132:	f000 fb8d 	bl	d6850 <_ZN8FatCache4syncEv>
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
   d6136:	b158      	cbz	r0, d6150 <_ZN7FatFile5writeEPKvj+0xc8>
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
   d6138:	6963      	ldr	r3, [r4, #20]
   d613a:	4433      	add	r3, r6
   d613c:	6163      	str	r3, [r4, #20]
    src += n;
   d613e:	44b1      	add	r9, r6
    nToWrite -= n;
   d6140:	eba8 0806 	sub.w	r8, r8, r6
  while (nToWrite) {
   d6144:	e7b4      	b.n	d60b0 <_ZN7FatFile5writeEPKvj+0x28>
    if (!seekSet(m_fileSize)) {
   d6146:	69c1      	ldr	r1, [r0, #28]
   d6148:	f7ff fe64 	bl	d5e14 <_ZN7FatFile7seekSetEm>
   d614c:	2800      	cmp	r0, #0
   d614e:	d1a8      	bne.n	d60a2 <_ZN7FatFile5writeEPKvj+0x1a>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
   d6150:	7863      	ldrb	r3, [r4, #1]
   d6152:	f043 0301 	orr.w	r3, r3, #1
   d6156:	7063      	strb	r3, [r4, #1]
  return -1;
   d6158:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d615c:	e050      	b.n	d6200 <_ZN7FatFile5writeEPKvj+0x178>
        if (m_firstCluster == 0) {
   d615e:	6a23      	ldr	r3, [r4, #32]
   d6160:	b93b      	cbnz	r3, d6172 <_ZN7FatFile5writeEPKvj+0xea>
          if (!addCluster()) {
   d6162:	4620      	mov	r0, r4
   d6164:	f7ff fd05 	bl	d5b72 <_ZN7FatFile10addClusterEv>
   d6168:	2800      	cmp	r0, #0
   d616a:	d0f1      	beq.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
          m_firstCluster = m_curCluster;
   d616c:	6923      	ldr	r3, [r4, #16]
   d616e:	6223      	str	r3, [r4, #32]
   d6170:	e7b9      	b.n	d60e6 <_ZN7FatFile5writeEPKvj+0x5e>
          m_curCluster = m_firstCluster;
   d6172:	6123      	str	r3, [r4, #16]
   d6174:	e7b7      	b.n	d60e6 <_ZN7FatFile5writeEPKvj+0x5e>
        cacheOption = FatCache::CACHE_FOR_WRITE;
   d6176:	2201      	movs	r2, #1
   d6178:	e7cc      	b.n	d6114 <_ZN7FatFile5writeEPKvj+0x8c>
    } else if (nToWrite >= 1024) {
   d617a:	f5b8 6f80 	cmp.w	r8, #1024	; 0x400
   d617e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   d6180:	d31b      	bcc.n	d61ba <_ZN7FatFile5writeEPKvj+0x132>
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
   d6182:	f890 c004 	ldrb.w	ip, [r0, #4]
   d6186:	ebac 0606 	sub.w	r6, ip, r6
      if (nb > maxBlocks) {
   d618a:	b2f3      	uxtb	r3, r6
      size_t nb = nToWrite >> 9;
   d618c:	ea4f 2e58 	mov.w	lr, r8, lsr #9
      if (nb > maxBlocks) {
   d6190:	4573      	cmp	r3, lr
   d6192:	bf28      	it	cs
   d6194:	4673      	movcs	r3, lr
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d6196:	4291      	cmp	r1, r2
      n = 512*nb;
   d6198:	ea4f 2643 	mov.w	r6, r3, lsl #9
          && block < (m_vol->cacheBlockNumber() + nb)) {
   d619c:	d307      	bcc.n	d61ae <_ZN7FatFile5writeEPKvj+0x126>
   d619e:	441a      	add	r2, r3
   d61a0:	428a      	cmp	r2, r1
    m_lbn = 0XFFFFFFFF;
   d61a2:	bf82      	ittt	hi
   d61a4:	f04f 32ff 	movhi.w	r2, #4294967295	; 0xffffffff
    m_status = 0;
   d61a8:	f880 5024 	strbhi.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61ac:	62c2      	strhi	r2, [r0, #44]	; 0x2c
      if (!m_vol->writeBlocks(block, src, nb)) {
   d61ae:	68a5      	ldr	r5, [r4, #8]
    return m_blockDev->writeBlocks(block, src, nb);
   d61b0:	464a      	mov	r2, r9
   d61b2:	6828      	ldr	r0, [r5, #0]
   d61b4:	f000 ff53 	bl	d705e <_ZN9SdSpiCard11writeBlocksEmPKhj>
   d61b8:	e7bd      	b.n	d6136 <_ZN7FatFile5writeEPKvj+0xae>
      if (m_vol->cacheBlockNumber() == block) {
   d61ba:	4291      	cmp	r1, r2
    m_lbn = 0XFFFFFFFF;
   d61bc:	bf02      	ittt	eq
   d61be:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    m_status = 0;
   d61c2:	f880 5024 	strbeq.w	r5, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d61c6:	62c3      	streq	r3, [r0, #44]	; 0x2c
      if (!m_vol->writeBlock(block, src)) {
   d61c8:	68a3      	ldr	r3, [r4, #8]
    return m_blockDev->writeBlock(block, src);
   d61ca:	464a      	mov	r2, r9
   d61cc:	6818      	ldr	r0, [r3, #0]
   d61ce:	f000 fed0 	bl	d6f72 <_ZN9SdSpiCard10writeBlockEmPKh>
   d61d2:	2800      	cmp	r0, #0
   d61d4:	d0bc      	beq.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
      n = 512;
   d61d6:	f44f 7600 	mov.w	r6, #512	; 0x200
   d61da:	e7ad      	b.n	d6138 <_ZN7FatFile5writeEPKvj+0xb0>
  if (m_curPosition > m_fileSize) {
   d61dc:	69e2      	ldr	r2, [r4, #28]
   d61de:	78a3      	ldrb	r3, [r4, #2]
   d61e0:	42b2      	cmp	r2, r6
   d61e2:	d204      	bcs.n	d61ee <_ZN7FatFile5writeEPKvj+0x166>
    m_fileSize = m_curPosition;
   d61e4:	61e6      	str	r6, [r4, #28]
    m_flags |= F_FILE_DIR_DIRTY;
   d61e6:	f043 0304 	orr.w	r3, r3, #4
   d61ea:	70a3      	strb	r3, [r4, #2]
   d61ec:	e003      	b.n	d61f6 <_ZN7FatFile5writeEPKvj+0x16e>
  } else if (m_dateTime) {
   d61ee:	4a08      	ldr	r2, [pc, #32]	; (d6210 <_ZN7FatFile5writeEPKvj+0x188>)
   d61f0:	6812      	ldr	r2, [r2, #0]
   d61f2:	2a00      	cmp	r2, #0
   d61f4:	d1f7      	bne.n	d61e6 <_ZN7FatFile5writeEPKvj+0x15e>
  if (m_flags & F_SYNC) {
   d61f6:	f994 3002 	ldrsb.w	r3, [r4, #2]
   d61fa:	2b00      	cmp	r3, #0
   d61fc:	db02      	blt.n	d6204 <_ZN7FatFile5writeEPKvj+0x17c>
  return nbyte;
   d61fe:	4638      	mov	r0, r7
}
   d6200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (!sync()) {
   d6204:	4620      	mov	r0, r4
   d6206:	f7ff feb5 	bl	d5f74 <_ZN7FatFile4syncEv>
   d620a:	2800      	cmp	r0, #0
   d620c:	d1f7      	bne.n	d61fe <_ZN7FatFile5writeEPKvj+0x176>
   d620e:	e79f      	b.n	d6150 <_ZN7FatFile5writeEPKvj+0xc8>
   d6210:	2003e5a4 	.word	0x2003e5a4

000d6214 <_ZN7FatFile11lfnChecksumEPh>:
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
   d6214:	1e41      	subs	r1, r0, #1
   d6216:	f100 030a 	add.w	r3, r0, #10
  uint8_t sum = 0;
   d621a:	2000      	movs	r0, #0
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d621c:	0842      	lsrs	r2, r0, #1
   d621e:	ea42 10c0 	orr.w	r0, r2, r0, lsl #7
   d6222:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d6226:	fa52 f080 	uxtab	r0, r2, r0
  for (uint8_t i = 0; i < 11; i++) {
   d622a:	428b      	cmp	r3, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
   d622c:	b2c0      	uxtb	r0, r0
  for (uint8_t i = 0; i < 11; i++) {
   d622e:	d1f5      	bne.n	d621c <_ZN7FatFile11lfnChecksumEPh+0x8>
  }
  return sum;
}
   d6230:	4770      	bx	lr
	...

000d6234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
   d6234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6238:	4606      	mov	r6, r0
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
   d623a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d623e:	2b20      	cmp	r3, #32
   d6240:	d0fa      	beq.n	d6238 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6242:	4d6b      	ldr	r5, [pc, #428]	; (d63f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1bc>)
    path++;
  }
  fname->lfn = path;
   d6244:	608e      	str	r6, [r1, #8]

  for (len = 0; ; len++) {
   d6246:	2400      	movs	r4, #0
    c = path[len];
   d6248:	5d33      	ldrb	r3, [r6, r4]
    if (c == 0 || isDirSeparator(c)) {
   d624a:	b1c3      	cbz	r3, d627e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
   d624c:	2b2f      	cmp	r3, #47	; 0x2f
   d624e:	d016      	beq.n	d627e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4a>
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d6250:	2b5c      	cmp	r3, #92	; 0x5c
   d6252:	d102      	bne.n	d625a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x26>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
   d6254:	2000      	movs	r0, #0
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
   d6256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
   d625a:	f1a3 0022 	sub.w	r0, r3, #34	; 0x22
   d625e:	b2c0      	uxtb	r0, r0
   d6260:	281d      	cmp	r0, #29
   d6262:	d803      	bhi.n	d626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x38>
   d6264:	fa25 f000 	lsr.w	r0, r5, r0
   d6268:	07c0      	lsls	r0, r0, #31
   d626a:	d4f3      	bmi.n	d6254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
   d626c:	f003 00bf 	and.w	r0, r3, #191	; 0xbf
   d6270:	283c      	cmp	r0, #60	; 0x3c
   d6272:	d0ef      	beq.n	d6254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
    if (!lfnLegalChar(c)) {
   d6274:	3b20      	subs	r3, #32
   d6276:	2b5e      	cmp	r3, #94	; 0x5e
   d6278:	d8ec      	bhi.n	d6254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  for (len = 0; ; len++) {
   d627a:	3401      	adds	r4, #1
    c = path[len];
   d627c:	e7e4      	b.n	d6248 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14>
   d627e:	1933      	adds	r3, r6, r4
  for (len = 0; ; len++) {
   d6280:	4618      	mov	r0, r3
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
   d6282:	4607      	mov	r7, r0
   d6284:	f810 5b01 	ldrb.w	r5, [r0], #1
   d6288:	2d20      	cmp	r5, #32
   d628a:	d0fa      	beq.n	d6282 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
   d628c:	2d2f      	cmp	r5, #47	; 0x2f
   d628e:	d0f8      	beq.n	d6282 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4e>
  *ptr = &path[end];
   d6290:	6017      	str	r7, [r2, #0]
  while (len) {
   d6292:	b14c      	cbz	r4, d62a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x74>
    c = path[len - 1];
   d6294:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
   d6298:	2a2e      	cmp	r2, #46	; 0x2e
   d629a:	d001      	beq.n	d62a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x6c>
   d629c:	2a20      	cmp	r2, #32
   d629e:	d101      	bne.n	d62a4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x70>
    len--;
   d62a0:	3c01      	subs	r4, #1
  while (len) {
   d62a2:	e7f6      	b.n	d6292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x5e>
  if (len > 255) {
   d62a4:	2cff      	cmp	r4, #255	; 0xff
   d62a6:	dcd5      	bgt.n	d6254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  fname->len = len;
   d62a8:	604c      	str	r4, [r1, #4]
  for (uint8_t k = 0; k < 11; k++) {
   d62aa:	f101 030d 	add.w	r3, r1, #13
   d62ae:	f101 0218 	add.w	r2, r1, #24
    fname->sfn[k] = ' ';
   d62b2:	2020      	movs	r0, #32
   d62b4:	f803 0b01 	strb.w	r0, [r3], #1
  for (uint8_t k = 0; k < 11; k++) {
   d62b8:	4293      	cmp	r3, r2
   d62ba:	d1fb      	bne.n	d62b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x80>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d62bc:	f04f 0800 	mov.w	r8, #0
   d62c0:	f816 3008 	ldrb.w	r3, [r6, r8]
   d62c4:	2b2e      	cmp	r3, #46	; 0x2e
   d62c6:	d001      	beq.n	d62cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x98>
   d62c8:	2b20      	cmp	r3, #32
   d62ca:	d102      	bne.n	d62d2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x9e>
   d62cc:	f108 0801 	add.w	r8, r8, #1
   d62d0:	e7f6      	b.n	d62c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x8c>
  is83 = !si;
   d62d2:	fab8 f088 	clz	r0, r8
   d62d6:	0940      	lsrs	r0, r0, #5
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d62d8:	1e65      	subs	r5, r4, #1
   d62da:	1c6b      	adds	r3, r5, #1
   d62dc:	d002      	beq.n	d62e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb0>
   d62de:	5d73      	ldrb	r3, [r6, r5]
   d62e0:	2b2e      	cmp	r3, #46	; 0x2e
   d62e2:	d114      	bne.n	d630e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xda>
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
   d62e4:	f04f 0900 	mov.w	r9, #0
   d62e8:	2707      	movs	r7, #7
   d62ea:	464a      	mov	r2, r9
   d62ec:	46ca      	mov	sl, r9
   d62ee:	f04f 0e08 	mov.w	lr, #8
  for (; si < len; si++) {
   d62f2:	45a0      	cmp	r8, r4
   d62f4:	da69      	bge.n	d63ca <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x196>
    c = path[si];
   d62f6:	f816 3008 	ldrb.w	r3, [r6, r8]
    if (c == ' ' || (c == '.' && dot != si)) {
   d62fa:	2b20      	cmp	r3, #32
   d62fc:	d003      	beq.n	d6306 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
   d62fe:	2b2e      	cmp	r3, #46	; 0x2e
   d6300:	d107      	bne.n	d6312 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
   d6302:	45a8      	cmp	r8, r5
   d6304:	d012      	beq.n	d632c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
      is83 = false;
   d6306:	2000      	movs	r0, #0
  for (; si < len; si++) {
   d6308:	f108 0801 	add.w	r8, r8, #1
   d630c:	e7f1      	b.n	d62f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbe>
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
   d630e:	3d01      	subs	r5, #1
   d6310:	e7e3      	b.n	d62da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa6>
    if (c == '"' || c == '|') {
   d6312:	2b22      	cmp	r3, #34	; 0x22
   d6314:	d008      	beq.n	d6328 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
   d6316:	2b7c      	cmp	r3, #124	; 0x7c
   d6318:	d006      	beq.n	d6328 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
   d631a:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
   d631e:	f1bc 0f05 	cmp.w	ip, #5
   d6322:	d80b      	bhi.n	d633c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x108>
   d6324:	2b2d      	cmp	r3, #45	; 0x2d
   d6326:	d013      	beq.n	d6350 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x11c>
    if (!legal83Char(c) && si != dot) {
   d6328:	45a8      	cmp	r8, r5
   d632a:	d15c      	bne.n	d63e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1b2>
      if (in == 10) {
   d632c:	2f0a      	cmp	r7, #10
   d632e:	d04b      	beq.n	d63c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6330:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6332:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d6334:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d6336:	f04f 0e10 	mov.w	lr, #16
   d633a:	e7e5      	b.n	d6308 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
    if (0X3A <= c && c <= 0X3F) {
   d633c:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
   d6340:	f1bc 0f05 	cmp.w	ip, #5
   d6344:	d9f0      	bls.n	d6328 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (0X5B <= c && c <= 0X5D) {
   d6346:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
   d634a:	f1bc 0f02 	cmp.w	ip, #2
   d634e:	d9eb      	bls.n	d6328 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (!legal83Char(c) && si != dot) {
   d6350:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
   d6354:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
   d6358:	d8e6      	bhi.n	d6328 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf4>
    if (si == dot || i > in) {
   d635a:	45a8      	cmp	r8, r5
   d635c:	d0e6      	beq.n	d632c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
   d635e:	42ba      	cmp	r2, r7
   d6360:	d830      	bhi.n	d63c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      if ('a' <= c && c <= 'z') {
   d6362:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
   d6366:	f1bc 0f19 	cmp.w	ip, #25
   d636a:	d81a      	bhi.n	d63a2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16e>
        c += 'A' - 'a';
   d636c:	3b20      	subs	r3, #32
        lc |= bit;
   d636e:	ea4e 0909 	orr.w	r9, lr, r9
        c += 'A' - 'a';
   d6372:	b2db      	uxtb	r3, r3
        lc |= bit;
   d6374:	fa5f f989 	uxtb.w	r9, r9
      fname->sfn[i++] = c;
   d6378:	f102 0c01 	add.w	ip, r2, #1
   d637c:	fa5f fc8c 	uxtb.w	ip, ip
   d6380:	440a      	add	r2, r1
      if (i < 7) {
   d6382:	f1bc 0f06 	cmp.w	ip, #6
      fname->sfn[i++] = c;
   d6386:	7353      	strb	r3, [r2, #13]
      if (i < 7) {
   d6388:	d801      	bhi.n	d638e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15a>
        fname->seqPos = i;
   d638a:	f881 c00c 	strb.w	ip, [r1, #12]
   d638e:	4662      	mov	r2, ip
   d6390:	e7ba      	b.n	d6308 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd4>
      if (si > dot) {
   d6392:	45a8      	cmp	r8, r5
   d6394:	dc18      	bgt.n	d63c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x194>
   d6396:	46a8      	mov	r8, r5
      in = 10;  // Max index for full 8.3 name.
   d6398:	270a      	movs	r7, #10
      i = 8;    // Place for extension.
   d639a:	2208      	movs	r2, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
   d639c:	f04f 0e10 	mov.w	lr, #16
   d63a0:	e7b1      	b.n	d6306 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd2>
      } else if ('A' <= c && c <= 'Z') {
   d63a2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
   d63a6:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
   d63aa:	bf98      	it	ls
   d63ac:	ea4e 0a0a 	orrls.w	sl, lr, sl
   d63b0:	e7e2      	b.n	d6378 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
    fname->sfn[fname->seqPos] = '~';
   d63b2:	7b0b      	ldrb	r3, [r1, #12]
    fname->flags = FNAME_FLAG_LOST_CHARS;
   d63b4:	2001      	movs	r0, #1
   d63b6:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
   d63b8:	4419      	add	r1, r3
   d63ba:	237e      	movs	r3, #126	; 0x7e
   d63bc:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
   d63be:	2331      	movs	r3, #49	; 0x31
   d63c0:	738b      	strb	r3, [r1, #14]
   d63c2:	e748      	b.n	d6256 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
      if (in == 10) {
   d63c4:	2f0a      	cmp	r7, #10
   d63c6:	d1e4      	bne.n	d6392 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15e>
        is83 = false;
   d63c8:	2000      	movs	r0, #0
  if (fname->sfn[0] == ' ') {
   d63ca:	7b4b      	ldrb	r3, [r1, #13]
   d63cc:	2b20      	cmp	r3, #32
   d63ce:	f43f af41 	beq.w	d6254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x20>
  if (is83) {
   d63d2:	2800      	cmp	r0, #0
   d63d4:	d0ed      	beq.n	d63b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
   d63d6:	ea1a 0f09 	tst.w	sl, r9
   d63da:	bf18      	it	ne
   d63dc:	f04f 0902 	movne.w	r9, #2
   d63e0:	f881 9000 	strb.w	r9, [r1]
   d63e4:	e737      	b.n	d6256 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x22>
    if (si == dot || i > in) {
   d63e6:	42ba      	cmp	r2, r7
   d63e8:	d8ec      	bhi.n	d63c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x190>
      c = '_';
   d63ea:	235f      	movs	r3, #95	; 0x5f
      is83 = false;
   d63ec:	2000      	movs	r0, #0
   d63ee:	e7c3      	b.n	d6378 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x144>
   d63f0:	31000101 	.word	0x31000101

000d63f4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d63f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
   d63f8:	f891 900c 	ldrb.w	r9, [r1, #12]
bool FatFile::lfnUniqueSfn(fname_t* fname) {
   d63fc:	4606      	mov	r6, r0
   d63fe:	460c      	mov	r4, r1
  uint8_t pos = fname->seqPos;;
   d6400:	2502      	movs	r5, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
   d6402:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d6404:	f101 080d 	add.w	r8, r1, #13
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
   d6408:	6861      	ldr	r1, [r4, #4]
   d640a:	68a2      	ldr	r2, [r4, #8]
   d640c:	186b      	adds	r3, r5, r1
   d640e:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6410:	4411      	add	r1, r2
   d6412:	4291      	cmp	r1, r2
   d6414:	d006      	beq.n	d6424 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    hash = ((hash << 5) + hash) ^ str[i];
   d6416:	f812 0b01 	ldrb.w	r0, [r2], #1
   d641a:	eb03 1343 	add.w	r3, r3, r3, lsl #5
   d641e:	4043      	eors	r3, r0
   d6420:	b29b      	uxth	r3, r3
  for (size_t i = 0; i < len; i++) {
   d6422:	e7f6      	b.n	d6412 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
      if (pos > 3) {
   d6424:	f1b9 0f03 	cmp.w	r9, #3
   d6428:	bf28      	it	cs
   d642a:	f04f 0903 	movcs.w	r9, #3
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d642e:	f109 0204 	add.w	r2, r9, #4
   d6432:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
   d6434:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6438:	18a0      	adds	r0, r4, r2
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d643a:	3a01      	subs	r2, #1
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d643c:	2909      	cmp	r1, #9
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d643e:	b2d2      	uxtb	r2, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6440:	bf94      	ite	ls
   d6442:	3130      	addls	r1, #48	; 0x30
   d6444:	3137      	addhi	r1, #55	; 0x37
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d6446:	4591      	cmp	r9, r2
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
   d6448:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
   d644a:	ea4f 1313 	mov.w	r3, r3, lsr #4
      for (uint8_t i = pos + 4 ; i > pos; i--) {
   d644e:	d1f1      	bne.n	d6434 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
    fname->sfn[pos] = '~';
   d6450:	eb04 0309 	add.w	r3, r4, r9
    seekSet(0);
   d6454:	2100      	movs	r1, #0
   d6456:	735f      	strb	r7, [r3, #13]
   d6458:	4630      	mov	r0, r6
   d645a:	f7ff fcdb 	bl	d5e14 <_ZN7FatFile7seekSetEm>
      dir = readDirCache(true);
   d645e:	2101      	movs	r1, #1
   d6460:	4630      	mov	r0, r6
   d6462:	f7ff fcb8 	bl	d5dd6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
   d6466:	4601      	mov	r1, r0
   d6468:	b928      	cbnz	r0, d6476 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
   d646a:	7870      	ldrb	r0, [r6, #1]
   d646c:	fab0 f080 	clz	r0, r0
   d6470:	0940      	lsrs	r0, r0, #5
fail:
  return false;

done:
  return true;
}
   d6472:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (dir->name[0] == DIR_NAME_FREE) {
   d6476:	7803      	ldrb	r3, [r0, #0]
   d6478:	b16b      	cbz	r3, d6496 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa2>
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
   d647a:	7ac3      	ldrb	r3, [r0, #11]
   d647c:	071b      	lsls	r3, r3, #28
   d647e:	d4ee      	bmi.n	d645e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
   d6480:	220b      	movs	r2, #11
   d6482:	4640      	mov	r0, r8
   d6484:	f002 fc56 	bl	d8d34 <memcmp>
   d6488:	2800      	cmp	r0, #0
   d648a:	d1e8      	bne.n	d645e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
  for (uint8_t seq = 2; seq < 100; seq++) {
   d648c:	3501      	adds	r5, #1
   d648e:	b2ad      	uxth	r5, r5
   d6490:	2d64      	cmp	r5, #100	; 0x64
   d6492:	d1b9      	bne.n	d6408 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
   d6494:	e7ed      	b.n	d6472 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
  return true;
   d6496:	2001      	movs	r0, #1
   d6498:	e7eb      	b.n	d6472 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x7e>
	...

000d649c <_ZN7FatFile4openEPS_P7fname_ti>:
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d649c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d64a0:	ed2d 8b02 	vpush	{d8}
   d64a4:	b089      	sub	sp, #36	; 0x24
   d64a6:	460d      	mov	r5, r1
   d64a8:	9305      	str	r3, [sp, #20]
  if (!dirFile->isDir() || isOpen()) {
   d64aa:	780b      	ldrb	r3, [r1, #0]
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d64ac:	9006      	str	r0, [sp, #24]
  if (!dirFile->isDir() || isOpen()) {
   d64ae:	f013 0f70 	tst.w	r3, #112	; 0x70
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
   d64b2:	4690      	mov	r8, r2
  if (!dirFile->isDir() || isOpen()) {
   d64b4:	d105      	bne.n	d64c2 <_ZN7FatFile4openEPS_P7fname_ti+0x26>
  return false;
   d64b6:	2000      	movs	r0, #0
}
   d64b8:	b009      	add	sp, #36	; 0x24
   d64ba:	ecbd 8b02 	vpop	{d8}
   d64be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
   d64c2:	9b06      	ldr	r3, [sp, #24]
   d64c4:	781b      	ldrb	r3, [r3, #0]
   d64c6:	2b00      	cmp	r3, #0
   d64c8:	d1f5      	bne.n	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  size_t len = fname->len;
   d64ca:	6853      	ldr	r3, [r2, #4]
   d64cc:	9304      	str	r3, [sp, #16]
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
   d64ce:	7813      	ldrb	r3, [r2, #0]
   d64d0:	0799      	lsls	r1, r3, #30
   d64d2:	bf1c      	itt	ne
   d64d4:	9b04      	ldrne	r3, [sp, #16]
   d64d6:	f103 070c 	addne.w	r7, r3, #12
   d64da:	f04f 0100 	mov.w	r1, #0
   d64de:	bf18      	it	ne
   d64e0:	230d      	movne	r3, #13
   d64e2:	4628      	mov	r0, r5
   d64e4:	bf1d      	ittte	ne
   d64e6:	fbb7 f7f3 	udivne	r7, r7, r3
   d64ea:	3701      	addne	r7, #1
   d64ec:	b2ff      	uxtbne	r7, r7
   d64ee:	2701      	moveq	r7, #1
   d64f0:	f7ff fc90 	bl	d5e14 <_ZN7FatFile7seekSetEm>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d64f4:	f108 020d 	add.w	r2, r8, #13
  }
   d64f8:	2300      	movs	r3, #0
   d64fa:	ee08 2a10 	vmov	s16, r2
   d64fe:	469b      	mov	fp, r3
   d6500:	461c      	mov	r4, r3
   d6502:	461e      	mov	r6, r3
   d6504:	9303      	str	r3, [sp, #12]
   d6506:	469a      	mov	sl, r3
    curIndex = dirFile->m_curPosition/32;
   d6508:	696a      	ldr	r2, [r5, #20]
   d650a:	9307      	str	r3, [sp, #28]
    dir = dirFile->readDirCache(true);
   d650c:	2101      	movs	r1, #1
   d650e:	4628      	mov	r0, r5
    curIndex = dirFile->m_curPosition/32;
   d6510:	f3c2 194f 	ubfx	r9, r2, #5, #16
    dir = dirFile->readDirCache(true);
   d6514:	f7ff fc5f 	bl	d5dd6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6518:	9b07      	ldr	r3, [sp, #28]
   d651a:	2800      	cmp	r0, #0
   d651c:	d16e      	bne.n	d65fc <_ZN7FatFile4openEPS_P7fname_ti+0x160>
      if (dirFile->getError()) {
   d651e:	786b      	ldrb	r3, [r5, #1]
   d6520:	2b00      	cmp	r3, #0
   d6522:	d1c8      	bne.n	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
   d6524:	9b05      	ldr	r3, [sp, #20]
   d6526:	059a      	lsls	r2, r3, #22
   d6528:	d5c5      	bpl.n	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>

#define O_READ    O_RDONLY
#define O_WRITE   O_WRONLY

inline bool isWriteMode(oflag_t oflag) {
  oflag &= O_ACCMODE;
   d652a:	f003 0303 	and.w	r3, r3, #3
  return oflag == O_WRONLY || oflag == O_RDWR;
   d652e:	3b01      	subs	r3, #1
   d6530:	2b01      	cmp	r3, #1
   d6532:	d8c0      	bhi.n	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (freeFound == 0) {
   d6534:	9b03      	ldr	r3, [sp, #12]
   d6536:	2c00      	cmp	r4, #0
   d6538:	bf08      	it	eq
   d653a:	464b      	moveq	r3, r9
   d653c:	9303      	str	r3, [sp, #12]
  while (freeFound < freeNeed) {
   d653e:	42bc      	cmp	r4, r7
   d6540:	f0c0 8103 	bcc.w	d674a <_ZN7FatFile4openEPS_P7fname_ti+0x2ae>
  if (fnameFound) {
   d6544:	f1ba 0f00 	cmp.w	sl, #0
   d6548:	f040 811b 	bne.w	d6782 <_ZN7FatFile4openEPS_P7fname_ti+0x2e6>
  if (!dirFile->seekSet(32UL*freeIndex)) {
   d654c:	9b03      	ldr	r3, [sp, #12]
   d654e:	4628      	mov	r0, r5
   d6550:	0159      	lsls	r1, r3, #5
   d6552:	f7ff fc5f 	bl	d5e14 <_ZN7FatFile7seekSetEm>
   d6556:	2800      	cmp	r0, #0
   d6558:	d0ad      	beq.n	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  lfnOrd = freeNeed - 1;
   d655a:	3f01      	subs	r7, #1
   d655c:	fa5f fa87 	uxtb.w	sl, r7
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6560:	4656      	mov	r6, sl
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d6562:	f04f 0900 	mov.w	r9, #0
    ldir->attr = DIR_ATT_LONG_NAME;
   d6566:	270f      	movs	r7, #15
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d6568:	2e00      	cmp	r6, #0
   d656a:	f000 8121 	beq.w	d67b0 <_ZN7FatFile4openEPS_P7fname_ti+0x314>
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
   d656e:	2100      	movs	r1, #0
   d6570:	4628      	mov	r0, r5
   d6572:	f7ff fc30 	bl	d5dd6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
   d6576:	4604      	mov	r4, r0
   d6578:	2800      	cmp	r0, #0
   d657a:	d09c      	beq.n	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    dirFile->m_vol->cacheDirty();
   d657c:	68aa      	ldr	r2, [r5, #8]
    m_status |= CACHE_STATUS_DIRTY;
   d657e:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
   d6582:	4556      	cmp	r6, sl
   d6584:	f043 0301 	orr.w	r3, r3, #1
   d6588:	bf0c      	ite	eq
   d658a:	f046 0b40 	orreq.w	fp, r6, #64	; 0x40
   d658e:	46b3      	movne	fp, r6
   d6590:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
   d6594:	f880 b000 	strb.w	fp, [r0]
    ldir->attr = DIR_ATT_LONG_NAME;
   d6598:	72c7      	strb	r7, [r0, #11]
    ldir->type = 0;
   d659a:	f880 900c 	strb.w	r9, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
   d659e:	f108 000d 	add.w	r0, r8, #13
   d65a2:	f7ff fe37 	bl	d6214 <_ZN7FatFile11lfnChecksumEPh>
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65a6:	f00b 0b1f 	and.w	fp, fp, #31
    ldir->chksum = lfnChecksum(fname->sfn);
   d65aa:	7360      	strb	r0, [r4, #13]
    ldir->mustBeZero = 0;
   d65ac:	f884 901a 	strb.w	r9, [r4, #26]
   d65b0:	f884 901b 	strb.w	r9, [r4, #27]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d65b8:	220d      	movs	r2, #13
    lfnPutName(ldir, fname->lfn, len);
   d65ba:	f8d8 c008 	ldr.w	ip, [r8, #8]
  size_t k = 13*((ldir->ord & 0X1F) - 1);
   d65be:	fb02 f20b 	mul.w	r2, r2, fp
   d65c2:	2300      	movs	r3, #0
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d65c4:	9904      	ldr	r1, [sp, #16]
   d65c6:	4291      	cmp	r1, r2
   d65c8:	f240 80e3 	bls.w	d6792 <_ZN7FatFile4openEPS_P7fname_ti+0x2f6>
   d65cc:	f81c 1002 	ldrb.w	r1, [ip, r2]
  if (i < LDIR_NAME1_DIM) {
   d65d0:	2b04      	cmp	r3, #4
   d65d2:	fa5f fe83 	uxtb.w	lr, r3
   d65d6:	f103 0001 	add.w	r0, r3, #1
   d65da:	f200 80e0 	bhi.w	d679e <_ZN7FatFile4openEPS_P7fname_ti+0x302>
    ldir->name1[i] = c;
   d65de:	eb04 0343 	add.w	r3, r4, r3, lsl #1
   d65e2:	f8a3 1001 	strh.w	r1, [r3, #1]
  for (uint8_t i = 0; i < 13; i++, k++) {
   d65e6:	280d      	cmp	r0, #13
   d65e8:	f102 0201 	add.w	r2, r2, #1
   d65ec:	4603      	mov	r3, r0
   d65ee:	d1e9      	bne.n	d65c4 <_ZN7FatFile4openEPS_P7fname_ti+0x128>
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
   d65f0:	3e01      	subs	r6, #1
   d65f2:	b2f6      	uxtb	r6, r6
   d65f4:	e7b8      	b.n	d6568 <_ZN7FatFile4openEPS_P7fname_ti+0xcc>
        fnameFound = true;
   d65f6:	f04f 0a01 	mov.w	sl, #1
   d65fa:	e785      	b.n	d6508 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
   d65fc:	7802      	ldrb	r2, [r0, #0]
   d65fe:	2ae5      	cmp	r2, #229	; 0xe5
   d6600:	d000      	beq.n	d6604 <_ZN7FatFile4openEPS_P7fname_ti+0x168>
   d6602:	b97a      	cbnz	r2, d6624 <_ZN7FatFile4openEPS_P7fname_ti+0x188>
    curIndex = dirFile->m_curPosition/32;
   d6604:	9903      	ldr	r1, [sp, #12]
   d6606:	2c00      	cmp	r4, #0
   d6608:	bf08      	it	eq
   d660a:	4649      	moveq	r1, r9
      if (freeFound < freeNeed) {
   d660c:	42bc      	cmp	r4, r7
        freeFound++;
   d660e:	bf38      	it	cc
   d6610:	3401      	addcc	r4, #1
    curIndex = dirFile->m_curPosition/32;
   d6612:	9103      	str	r1, [sp, #12]
        freeFound++;
   d6614:	bf38      	it	cc
   d6616:	b2e4      	uxtbcc	r4, r4
      if (dir->name[0] == DIR_NAME_FREE) {
   d6618:	2a00      	cmp	r2, #0
   d661a:	d083      	beq.n	d6524 <_ZN7FatFile4openEPS_P7fname_ti+0x88>
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d661c:	2ae5      	cmp	r2, #229	; 0xe5
   d661e:	d104      	bne.n	d662a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
      lfnOrd = 0;
   d6620:	2600      	movs	r6, #0
   d6622:	e771      	b.n	d6508 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        freeFound = 0;
   d6624:	42bc      	cmp	r4, r7
   d6626:	bf38      	it	cc
   d6628:	2400      	movcc	r4, #0
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
   d662a:	2a2e      	cmp	r2, #46	; 0x2e
   d662c:	d0f8      	beq.n	d6620 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
    } else if (DIR_IS_LONG_NAME(dir)) {
   d662e:	7ac1      	ldrb	r1, [r0, #11]
   d6630:	290f      	cmp	r1, #15
   d6632:	d15d      	bne.n	d66f0 <_ZN7FatFile4openEPS_P7fname_ti+0x254>
      if (!lfnOrd) {
   d6634:	bb3e      	cbnz	r6, d6686 <_ZN7FatFile4openEPS_P7fname_ti+0x1ea>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
   d6636:	f012 0640 	ands.w	r6, r2, #64	; 0x40
   d663a:	f43f af65 	beq.w	d6508 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        lfnOrd = ord = ldir->ord & 0X1F;
   d663e:	f002 061f 	and.w	r6, r2, #31
        chksum = ldir->chksum;
   d6642:	7b43      	ldrb	r3, [r0, #13]
        lfnOrd = ord = ldir->ord & 0X1F;
   d6644:	46b3      	mov	fp, r6
      size_t k = 13*(ord - 1);
   d6646:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
   d664a:	f04f 0e0d 	mov.w	lr, #13
   d664e:	fb0e fe02 	mul.w	lr, lr, r2
      if (k >= len) {
   d6652:	9a04      	ldr	r2, [sp, #16]
   d6654:	4572      	cmp	r2, lr
   d6656:	d9e3      	bls.n	d6620 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6658:	eba2 020e 	sub.w	r2, r2, lr
   d665c:	9207      	str	r2, [sp, #28]
   d665e:	f04f 0c00 	mov.w	ip, #0
  if (i < LDIR_NAME1_DIM) {
   d6662:	f1bc 0f04 	cmp.w	ip, #4
   d6666:	eb0c 090e 	add.w	r9, ip, lr
   d666a:	fa5f f28c 	uxtb.w	r2, ip
   d666e:	d814      	bhi.n	d669a <_ZN7FatFile4openEPS_P7fname_ti+0x1fe>
    return ldir->name1[i];
   d6670:	eb00 024c 	add.w	r2, r0, ip, lsl #1
   d6674:	f8b2 2001 	ldrh.w	r2, [r2, #1]
        if (k == len) {
   d6678:	9907      	ldr	r1, [sp, #28]
   d667a:	458c      	cmp	ip, r1
   d667c:	d11b      	bne.n	d66b6 <_ZN7FatFile4openEPS_P7fname_ti+0x21a>
            lfnOrd = 0;
   d667e:	2a00      	cmp	r2, #0
   d6680:	bf18      	it	ne
   d6682:	2600      	movne	r6, #0
   d6684:	e740      	b.n	d6508 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
   d6686:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
   d668a:	fa5f fb8b 	uxtb.w	fp, fp
   d668e:	455a      	cmp	r2, fp
   d6690:	d1c6      	bne.n	d6620 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d6692:	7b42      	ldrb	r2, [r0, #13]
   d6694:	429a      	cmp	r2, r3
   d6696:	d0d6      	beq.n	d6646 <_ZN7FatFile4openEPS_P7fname_ti+0x1aa>
   d6698:	e7c2      	b.n	d6620 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d669a:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
   d669c:	bf95      	itete	ls
   d669e:	f10c 32ff 	addls.w	r2, ip, #4294967295	; 0xffffffff
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d66a2:	f10c 0201 	addhi.w	r2, ip, #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d66a6:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d66aa:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
    return ldir->name2[i - LDIR_NAME1_DIM];
   d66ae:	bf94      	ite	ls
   d66b0:	88d2      	ldrhls	r2, [r2, #6]
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
   d66b2:	8892      	ldrhhi	r2, [r2, #4]
   d66b4:	e7e0      	b.n	d6678 <_ZN7FatFile4openEPS_P7fname_ti+0x1dc>
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66b6:	2aff      	cmp	r2, #255	; 0xff
   d66b8:	d8b2      	bhi.n	d6620 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
   d66ba:	b2d2      	uxtb	r2, r2
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d66bc:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   d66c0:	2919      	cmp	r1, #25
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66c2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   d66c6:	f811 1009 	ldrb.w	r1, [r1, r9]
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
   d66ca:	bf98      	it	ls
   d66cc:	3220      	addls	r2, #32
   d66ce:	f1a1 0941 	sub.w	r9, r1, #65	; 0x41
   d66d2:	bf98      	it	ls
   d66d4:	b2d2      	uxtbls	r2, r2
   d66d6:	f1b9 0f19 	cmp.w	r9, #25
   d66da:	bf9c      	itt	ls
   d66dc:	3120      	addls	r1, #32
   d66de:	b2c9      	uxtbls	r1, r1
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
   d66e0:	4291      	cmp	r1, r2
   d66e2:	d19d      	bne.n	d6620 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      for (uint8_t i = 0; i < 13; i++) {
   d66e4:	f10c 0c01 	add.w	ip, ip, #1
   d66e8:	f1bc 0f0d 	cmp.w	ip, #13
   d66ec:	d1b9      	bne.n	d6662 <_ZN7FatFile4openEPS_P7fname_ti+0x1c6>
   d66ee:	e70b      	b.n	d6508 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
   d66f0:	070a      	lsls	r2, r1, #28
   d66f2:	d495      	bmi.n	d6620 <_ZN7FatFile4openEPS_P7fname_ti+0x184>
      if (lfnOrd) {
   d66f4:	b166      	cbz	r6, d6710 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
   d66f6:	f1bb 0f01 	cmp.w	fp, #1
   d66fa:	9303      	str	r3, [sp, #12]
   d66fc:	f47f aedb 	bne.w	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d6700:	f7ff fd88 	bl	d6214 <_ZN7FatFile11lfnChecksumEPh>
   d6704:	9b03      	ldr	r3, [sp, #12]
   d6706:	4298      	cmp	r0, r3
   d6708:	f47f aed5 	bne.w	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
   d670c:	46b2      	mov	sl, r6
   d670e:	e00f      	b.n	d6730 <_ZN7FatFile4openEPS_P7fname_ti+0x294>
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
   d6710:	ee18 1a10 	vmov	r1, s16
   d6714:	220b      	movs	r2, #11
   d6716:	9307      	str	r3, [sp, #28]
   d6718:	f002 fb0c 	bl	d8d34 <memcmp>
   d671c:	9b07      	ldr	r3, [sp, #28]
   d671e:	2800      	cmp	r0, #0
   d6720:	f47f aef2 	bne.w	d6508 <_ZN7FatFile4openEPS_P7fname_ti+0x6c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
   d6724:	f898 a000 	ldrb.w	sl, [r8]
   d6728:	f01a 0a01 	ands.w	sl, sl, #1
   d672c:	f47f af63 	bne.w	d65f6 <_ZN7FatFile4openEPS_P7fname_ti+0x15a>
  if (oflag & O_EXCL) {
   d6730:	9b05      	ldr	r3, [sp, #20]
   d6732:	0519      	lsls	r1, r3, #20
   d6734:	f53f aebf 	bmi.w	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
   d6738:	9b05      	ldr	r3, [sp, #20]
   d673a:	9806      	ldr	r0, [sp, #24]
   d673c:	f8cd a000 	str.w	sl, [sp]
   d6740:	464a      	mov	r2, r9
   d6742:	4629      	mov	r1, r5
   d6744:	f7ff fba9 	bl	d5e9a <_ZN7FatFile15openCachedEntryEPS_tih>
   d6748:	e6b6      	b.n	d64b8 <_ZN7FatFile4openEPS_P7fname_ti+0x1c>
    dir = dirFile->readDirCache();
   d674a:	2100      	movs	r1, #0
   d674c:	4628      	mov	r0, r5
   d674e:	f7ff fb42 	bl	d5dd6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
   d6752:	b998      	cbnz	r0, d677c <_ZN7FatFile4openEPS_P7fname_ti+0x2e0>
      if (dirFile->getError()) {
   d6754:	786b      	ldrb	r3, [r5, #1]
   d6756:	2b00      	cmp	r3, #0
   d6758:	f47f aead 	bne.w	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (!dirFile->addDirCluster()) {
   d675c:	4628      	mov	r0, r5
   d675e:	f7ff fa13 	bl	d5b88 <_ZN7FatFile13addDirClusterEv>
   d6762:	2800      	cmp	r0, #0
   d6764:	f43f aea7 	beq.w	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
   d6768:	68ab      	ldr	r3, [r5, #8]
   d676a:	791b      	ldrb	r3, [r3, #4]
   d676c:	2b01      	cmp	r3, #1
   d676e:	f63f aee9 	bhi.w	d6544 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound += 16;
   d6772:	3410      	adds	r4, #16
   d6774:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d6776:	42a7      	cmp	r7, r4
   d6778:	d8f0      	bhi.n	d675c <_ZN7FatFile4openEPS_P7fname_ti+0x2c0>
   d677a:	e6e3      	b.n	d6544 <_ZN7FatFile4openEPS_P7fname_ti+0xa8>
    freeFound++;
   d677c:	3401      	adds	r4, #1
   d677e:	b2e4      	uxtb	r4, r4
  while (freeFound < freeNeed) {
   d6780:	e6dd      	b.n	d653e <_ZN7FatFile4openEPS_P7fname_ti+0xa2>
    if (!dirFile->lfnUniqueSfn(fname)) {
   d6782:	4641      	mov	r1, r8
   d6784:	4628      	mov	r0, r5
   d6786:	f7ff fe35 	bl	d63f4 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
   d678a:	2800      	cmp	r0, #0
   d678c:	f47f aede 	bne.w	d654c <_ZN7FatFile4openEPS_P7fname_ti+0xb0>
   d6790:	e691      	b.n	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
   d6792:	bf14      	ite	ne
   d6794:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d6798:	2100      	moveq	r1, #0
   d679a:	b289      	uxth	r1, r1
   d679c:	e718      	b.n	d65d0 <_ZN7FatFile4openEPS_P7fname_ti+0x134>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
   d679e:	f1be 0f0a 	cmp.w	lr, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
   d67a2:	bf94      	ite	ls
   d67a4:	eb04 0343 	addls.w	r3, r4, r3, lsl #1
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
   d67a8:	eb04 0340 	addhi.w	r3, r4, r0, lsl #1
   d67ac:	8099      	strh	r1, [r3, #4]
   d67ae:	e71a      	b.n	d65e6 <_ZN7FatFile4openEPS_P7fname_ti+0x14a>
  dir = dirFile->readDirCache();
   d67b0:	4631      	mov	r1, r6
   d67b2:	4628      	mov	r0, r5
  curIndex = dirFile->m_curPosition/32;
   d67b4:	696f      	ldr	r7, [r5, #20]
  dir = dirFile->readDirCache();
   d67b6:	f7ff fb0e 	bl	d5dd6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
   d67ba:	4604      	mov	r4, r0
   d67bc:	2800      	cmp	r0, #0
   d67be:	f43f ae7a 	beq.w	d64b6 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
  memset(dir, 0, sizeof(dir_t));
   d67c2:	2220      	movs	r2, #32
   d67c4:	4631      	mov	r1, r6
   d67c6:	f002 fad1 	bl	d8d6c <memset>
  memcpy(dir->name, fname->sfn, 11);
   d67ca:	4643      	mov	r3, r8
   d67cc:	f853 2f0d 	ldr.w	r2, [r3, #13]!
   d67d0:	6022      	str	r2, [r4, #0]
   d67d2:	685a      	ldr	r2, [r3, #4]
   d67d4:	6062      	str	r2, [r4, #4]
   d67d6:	891a      	ldrh	r2, [r3, #8]
   d67d8:	8122      	strh	r2, [r4, #8]
   d67da:	7a9b      	ldrb	r3, [r3, #10]
   d67dc:	72a3      	strb	r3, [r4, #10]
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
   d67de:	f898 3000 	ldrb.w	r3, [r8]
   d67e2:	f003 0318 	and.w	r3, r3, #24
   d67e6:	7323      	strb	r3, [r4, #12]
  if (m_dateTime) {
   d67e8:	4b0f      	ldr	r3, [pc, #60]	; (d6828 <_ZN7FatFile4openEPS_P7fname_ti+0x38c>)
   d67ea:	681b      	ldr	r3, [r3, #0]
   d67ec:	b19b      	cbz	r3, d6816 <_ZN7FatFile4openEPS_P7fname_ti+0x37a>
    m_dateTime(&dir->creationDate, &dir->creationTime);
   d67ee:	f104 010e 	add.w	r1, r4, #14
   d67f2:	f104 0010 	add.w	r0, r4, #16
   d67f6:	4798      	blx	r3
  dir->lastAccessDate = dir->creationDate;
   d67f8:	8a23      	ldrh	r3, [r4, #16]
   d67fa:	8263      	strh	r3, [r4, #18]
  dir->lastWriteDate = dir->creationDate;
   d67fc:	8323      	strh	r3, [r4, #24]
  dir->lastWriteTime = dir->creationTime;
   d67fe:	89e3      	ldrh	r3, [r4, #14]
   d6800:	82e3      	strh	r3, [r4, #22]
  dirFile->m_vol->cacheDirty();
   d6802:	68aa      	ldr	r2, [r5, #8]
   d6804:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
   d6808:	f043 0301 	orr.w	r3, r3, #1
  curIndex = dirFile->m_curPosition/32;
   d680c:	f3c7 194f 	ubfx	r9, r7, #5, #16
   d6810:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  }
   d6814:	e790      	b.n	d6738 <_ZN7FatFile4openEPS_P7fname_ti+0x29c>
    dir->creationDate = FAT_DEFAULT_DATE;
   d6816:	2321      	movs	r3, #33	; 0x21
   d6818:	7423      	strb	r3, [r4, #16]
   d681a:	2328      	movs	r3, #40	; 0x28
   d681c:	7463      	strb	r3, [r4, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
   d681e:	2308      	movs	r3, #8
   d6820:	73a6      	strb	r6, [r4, #14]
   d6822:	73e3      	strb	r3, [r4, #15]
   d6824:	e7e8      	b.n	d67f8 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
   d6826:	bf00      	nop
   d6828:	2003e5a4 	.word	0x2003e5a4

000d682c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d682c:	b513      	push	{r0, r1, r4, lr}
   d682e:	4604      	mov	r4, r0
    }
   d6830:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6832:	b159      	cbz	r1, d684c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6834:	9101      	str	r1, [sp, #4]
   d6836:	f002 fac5 	bl	d8dc4 <strlen>
   d683a:	6823      	ldr	r3, [r4, #0]
   d683c:	9901      	ldr	r1, [sp, #4]
   d683e:	68db      	ldr	r3, [r3, #12]
   d6840:	4602      	mov	r2, r0
   d6842:	4620      	mov	r0, r4
    }
   d6844:	b002      	add	sp, #8
   d6846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d684a:	4718      	bx	r3
    }
   d684c:	b002      	add	sp, #8
   d684e:	bd10      	pop	{r4, pc}

000d6850 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
   d6850:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
   d6852:	7803      	ldrb	r3, [r0, #0]
   d6854:	07da      	lsls	r2, r3, #31
bool FatCache::sync() {
   d6856:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
   d6858:	d520      	bpl.n	d689c <_ZN8FatCache4syncEv+0x4c>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
   d685a:	6843      	ldr	r3, [r0, #4]
    return m_blockDev->writeBlock(block, src);
   d685c:	6881      	ldr	r1, [r0, #8]
   d685e:	f100 020c 	add.w	r2, r0, #12
   d6862:	6818      	ldr	r0, [r3, #0]
   d6864:	9201      	str	r2, [sp, #4]
   d6866:	f000 fb84 	bl	d6f72 <_ZN9SdSpiCard10writeBlockEmPKh>
   d686a:	9a01      	ldr	r2, [sp, #4]
   d686c:	4605      	mov	r5, r0
   d686e:	b918      	cbnz	r0, d6878 <_ZN8FatCache4syncEv+0x28>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
   d6870:	2500      	movs	r5, #0
}
   d6872:	4628      	mov	r0, r5
   d6874:	b003      	add	sp, #12
   d6876:	bd30      	pop	{r4, r5, pc}
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
   d6878:	7823      	ldrb	r3, [r4, #0]
   d687a:	079b      	lsls	r3, r3, #30
   d687c:	d404      	bmi.n	d6888 <_ZN8FatCache4syncEv+0x38>
    m_status &= ~CACHE_STATUS_DIRTY;
   d687e:	7823      	ldrb	r3, [r4, #0]
   d6880:	f023 0301 	bic.w	r3, r3, #1
   d6884:	7023      	strb	r3, [r4, #0]
   d6886:	e7f4      	b.n	d6872 <_ZN8FatCache4syncEv+0x22>
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
   d6888:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
   d688c:	6919      	ldr	r1, [r3, #16]
   d688e:	4401      	add	r1, r0
   d6890:	6818      	ldr	r0, [r3, #0]
   d6892:	f000 fb6e 	bl	d6f72 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
   d6896:	2800      	cmp	r0, #0
   d6898:	d1f1      	bne.n	d687e <_ZN8FatCache4syncEv+0x2e>
   d689a:	e7e9      	b.n	d6870 <_ZN8FatCache4syncEv+0x20>
  return true;
   d689c:	2501      	movs	r5, #1
   d689e:	e7e8      	b.n	d6872 <_ZN8FatCache4syncEv+0x22>

000d68a0 <_ZN8FatCache4readEmh>:
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d68a0:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
   d68a2:	6883      	ldr	r3, [r0, #8]
   d68a4:	428b      	cmp	r3, r1
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
   d68a6:	4604      	mov	r4, r0
   d68a8:	460e      	mov	r6, r1
   d68aa:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
   d68ac:	d009      	beq.n	d68c2 <_ZN8FatCache4readEmh+0x22>
    if (!sync()) {
   d68ae:	f7ff ffcf 	bl	d6850 <_ZN8FatCache4syncEv>
   d68b2:	b908      	cbnz	r0, d68b8 <_ZN8FatCache4readEmh+0x18>
  return 0;
   d68b4:	2000      	movs	r0, #0
}
   d68b6:	bd70      	pop	{r4, r5, r6, pc}
    if (!(option & CACHE_OPTION_NO_READ)) {
   d68b8:	076b      	lsls	r3, r5, #29
   d68ba:	d50a      	bpl.n	d68d2 <_ZN8FatCache4readEmh+0x32>
    m_status = 0;
   d68bc:	2300      	movs	r3, #0
   d68be:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
   d68c0:	60a6      	str	r6, [r4, #8]
  m_status |= option & CACHE_STATUS_MASK;
   d68c2:	7822      	ldrb	r2, [r4, #0]
   d68c4:	f005 0503 	and.w	r5, r5, #3
   d68c8:	4620      	mov	r0, r4
   d68ca:	4315      	orrs	r5, r2
   d68cc:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;
   d68d0:	e7f1      	b.n	d68b6 <_ZN8FatCache4readEmh+0x16>
      if (!m_vol->readBlock(lbn, m_block.data)) {
   d68d2:	6863      	ldr	r3, [r4, #4]
    return m_blockDev->readBlock(block, dst);
   d68d4:	f104 020c 	add.w	r2, r4, #12
   d68d8:	6818      	ldr	r0, [r3, #0]
   d68da:	4631      	mov	r1, r6
   d68dc:	f000 fac0 	bl	d6e60 <_ZN9SdSpiCard9readBlockEmPh>
   d68e0:	2800      	cmp	r0, #0
   d68e2:	d1eb      	bne.n	d68bc <_ZN8FatCache4readEmh+0x1c>
   d68e4:	e7e6      	b.n	d68b4 <_ZN8FatCache4readEmh+0x14>

000d68e6 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
   d68e6:	7983      	ldrb	r3, [r0, #6]
   d68e8:	6940      	ldr	r0, [r0, #20]
   d68ea:	3902      	subs	r1, #2
   d68ec:	4099      	lsls	r1, r3
}
   d68ee:	4408      	add	r0, r1
   d68f0:	4770      	bx	lr

000d68f2 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d68f2:	2901      	cmp	r1, #1
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
   d68f4:	b570      	push	{r4, r5, r6, lr}
   d68f6:	4605      	mov	r5, r0
   d68f8:	460c      	mov	r4, r1
   d68fa:	4616      	mov	r6, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d68fc:	d802      	bhi.n	d6904 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
   d68fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d6902:	bd70      	pop	{r4, r5, r6, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d6904:	69c3      	ldr	r3, [r0, #28]
   d6906:	428b      	cmp	r3, r1
   d6908:	d3f9      	bcc.n	d68fe <_ZN9FatVolume6fatGetEmPm+0xc>
  if (fatType() == 32) {
   d690a:	79c3      	ldrb	r3, [r0, #7]
   d690c:	2b20      	cmp	r3, #32
   d690e:	d116      	bne.n	d693e <_ZN9FatVolume6fatGetEmPm+0x4c>
    lba = m_fatStartBlock + (cluster >> 7);
   d6910:	6981      	ldr	r1, [r0, #24]
    return m_fatCache.read(blockNumber,
   d6912:	2202      	movs	r2, #2
   d6914:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6918:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d691c:	f7ff ffc0 	bl	d68a0 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6920:	2800      	cmp	r0, #0
   d6922:	d0ec      	beq.n	d68fe <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
   d6924:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6928:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
   d692c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
  if (isEOC(next)) {
   d6930:	69ea      	ldr	r2, [r5, #28]
   d6932:	429a      	cmp	r2, r3
  *value = next;
   d6934:	bf26      	itte	cs
   d6936:	6033      	strcs	r3, [r6, #0]
  return 1;
   d6938:	2001      	movcs	r0, #1
    return 0;
   d693a:	2000      	movcc	r0, #0
   d693c:	e7e1      	b.n	d6902 <_ZN9FatVolume6fatGetEmPm+0x10>
  if (fatType() == 16) {
   d693e:	2b10      	cmp	r3, #16
   d6940:	d1dd      	bne.n	d68fe <_ZN9FatVolume6fatGetEmPm+0xc>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d6942:	6983      	ldr	r3, [r0, #24]
   d6944:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d6948:	2202      	movs	r2, #2
   d694a:	4419      	add	r1, r3
   d694c:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6950:	f7ff ffa6 	bl	d68a0 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6954:	2800      	cmp	r0, #0
   d6956:	d0d2      	beq.n	d68fe <_ZN9FatVolume6fatGetEmPm+0xc>
    next = pc->fat16[cluster & 0XFF];
   d6958:	b2e4      	uxtb	r4, r4
   d695a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
    goto done;
   d695e:	e7e7      	b.n	d6930 <_ZN9FatVolume6fatGetEmPm+0x3e>

000d6960 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
   d6960:	2901      	cmp	r1, #1
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
   d6962:	b538      	push	{r3, r4, r5, lr}
   d6964:	460c      	mov	r4, r1
   d6966:	4615      	mov	r5, r2
  if (cluster < 2 || cluster > m_lastCluster) {
   d6968:	d801      	bhi.n	d696e <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
   d696a:	2000      	movs	r0, #0
}
   d696c:	bd38      	pop	{r3, r4, r5, pc}
  if (cluster < 2 || cluster > m_lastCluster) {
   d696e:	69c3      	ldr	r3, [r0, #28]
   d6970:	428b      	cmp	r3, r1
   d6972:	d3fa      	bcc.n	d696a <_ZN9FatVolume6fatPutEmm+0xa>
  if (fatType() == 32) {
   d6974:	79c3      	ldrb	r3, [r0, #7]
   d6976:	2b20      	cmp	r3, #32
   d6978:	d10f      	bne.n	d699a <_ZN9FatVolume6fatPutEmm+0x3a>
    lba = m_fatStartBlock + (cluster >> 7);
   d697a:	6981      	ldr	r1, [r0, #24]
   d697c:	2203      	movs	r2, #3
   d697e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
   d6982:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d6986:	f7ff ff8b 	bl	d68a0 <_ZN8FatCache4readEmh>
    if (!pc) {
   d698a:	2800      	cmp	r0, #0
   d698c:	d0ed      	beq.n	d696a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat32[cluster & 0X7F] = value;
   d698e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
   d6992:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
    return true;
   d6996:	2001      	movs	r0, #1
   d6998:	e7e8      	b.n	d696c <_ZN9FatVolume6fatPutEmm+0xc>
  if (fatType() == 16) {
   d699a:	2b10      	cmp	r3, #16
   d699c:	d1e5      	bne.n	d696a <_ZN9FatVolume6fatPutEmm+0xa>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
   d699e:	6983      	ldr	r3, [r0, #24]
   d69a0:	f3c1 2107 	ubfx	r1, r1, #8, #8
   d69a4:	2203      	movs	r2, #3
   d69a6:	4419      	add	r1, r3
   d69a8:	f500 700c 	add.w	r0, r0, #560	; 0x230
   d69ac:	f7ff ff78 	bl	d68a0 <_ZN8FatCache4readEmh>
    if (!pc) {
   d69b0:	2800      	cmp	r0, #0
   d69b2:	d0da      	beq.n	d696a <_ZN9FatVolume6fatPutEmm+0xa>
    pc->fat16[cluster & 0XFF] = value;
   d69b4:	b2e4      	uxtb	r4, r4
   d69b6:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
   d69ba:	e7ec      	b.n	d6996 <_ZN9FatVolume6fatPutEmm+0x36>

000d69bc <_ZN9FatVolume15allocateClusterEmPm>:
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d69bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if (m_allocSearchStart < current) {
   d69c0:	68c4      	ldr	r4, [r0, #12]
   d69c2:	428c      	cmp	r4, r1
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
   d69c4:	4605      	mov	r5, r0
   d69c6:	460e      	mov	r6, r1
   d69c8:	4690      	mov	r8, r2
  if (m_allocSearchStart < current) {
   d69ca:	d301      	bcc.n	d69d0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      setStart = true;
   d69cc:	2701      	movs	r7, #1
   d69ce:	e001      	b.n	d69d4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d69d0:	460c      	mov	r4, r1
    setStart = false;
   d69d2:	2700      	movs	r7, #0
    if (find > m_lastCluster) {
   d69d4:	69eb      	ldr	r3, [r5, #28]
    find++;
   d69d6:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
   d69d8:	42a3      	cmp	r3, r4
   d69da:	d202      	bcs.n	d69e2 <_ZN9FatVolume15allocateClusterEmPm+0x26>
      if (setStart) {
   d69dc:	b9c7      	cbnz	r7, d6a10 <_ZN9FatVolume15allocateClusterEmPm+0x54>
      find = m_allocSearchStart;
   d69de:	68ec      	ldr	r4, [r5, #12]
   d69e0:	e7f4      	b.n	d69cc <_ZN9FatVolume15allocateClusterEmPm+0x10>
    if (find == current) {
   d69e2:	42a6      	cmp	r6, r4
   d69e4:	d014      	beq.n	d6a10 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    int8_t fg = fatGet(find, &f);
   d69e6:	aa01      	add	r2, sp, #4
   d69e8:	4621      	mov	r1, r4
   d69ea:	4628      	mov	r0, r5
   d69ec:	f7ff ff81 	bl	d68f2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d69f0:	2800      	cmp	r0, #0
   d69f2:	db0d      	blt.n	d6a10 <_ZN9FatVolume15allocateClusterEmPm+0x54>
    if (fg && f == 0) {
   d69f4:	d0ee      	beq.n	d69d4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
   d69f6:	9b01      	ldr	r3, [sp, #4]
   d69f8:	2b00      	cmp	r3, #0
   d69fa:	d1eb      	bne.n	d69d4 <_ZN9FatVolume15allocateClusterEmPm+0x18>
  if (setStart) {
   d69fc:	b107      	cbz	r7, d6a00 <_ZN9FatVolume15allocateClusterEmPm+0x44>
    m_allocSearchStart = find;
   d69fe:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
   d6a00:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
   d6a04:	4621      	mov	r1, r4
   d6a06:	4628      	mov	r0, r5
   d6a08:	f7ff ffaa 	bl	d6960 <_ZN9FatVolume6fatPutEmm>
  if (!fatPutEOC(find)) {
   d6a0c:	4607      	mov	r7, r0
   d6a0e:	b920      	cbnz	r0, d6a1a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
  return false;
   d6a10:	2700      	movs	r7, #0
}
   d6a12:	4638      	mov	r0, r7
   d6a14:	b002      	add	sp, #8
   d6a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (current) {
   d6a1a:	b916      	cbnz	r6, d6a22 <_ZN9FatVolume15allocateClusterEmPm+0x66>
  *next = find;
   d6a1c:	f8c8 4000 	str.w	r4, [r8]
  return true;
   d6a20:	e7f7      	b.n	d6a12 <_ZN9FatVolume15allocateClusterEmPm+0x56>
    if (!fatPut(current, find)) {
   d6a22:	4622      	mov	r2, r4
   d6a24:	4631      	mov	r1, r6
   d6a26:	4628      	mov	r0, r5
   d6a28:	f7ff ff9a 	bl	d6960 <_ZN9FatVolume6fatPutEmm>
   d6a2c:	2800      	cmp	r0, #0
   d6a2e:	d1f5      	bne.n	d6a1c <_ZN9FatVolume15allocateClusterEmPm+0x60>
   d6a30:	e7ee      	b.n	d6a10 <_ZN9FatVolume15allocateClusterEmPm+0x54>

000d6a32 <_ZN9FatVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
   d6a32:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6a34:	4605      	mov	r5, r0
   d6a36:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
   d6a38:	aa01      	add	r2, sp, #4
   d6a3a:	4621      	mov	r1, r4
   d6a3c:	4628      	mov	r0, r5
   d6a3e:	f7ff ff58 	bl	d68f2 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
   d6a42:	1e06      	subs	r6, r0, #0
   d6a44:	db10      	blt.n	d6a68 <_ZN9FatVolume9freeChainEm+0x36>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
   d6a46:	2200      	movs	r2, #0
   d6a48:	4621      	mov	r1, r4
   d6a4a:	4628      	mov	r0, r5
   d6a4c:	f7ff ff88 	bl	d6960 <_ZN9FatVolume6fatPutEmm>
   d6a50:	b150      	cbz	r0, d6a68 <_ZN9FatVolume9freeChainEm+0x36>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
   d6a52:	68eb      	ldr	r3, [r5, #12]
   d6a54:	42a3      	cmp	r3, r4
      m_allocSearchStart = cluster - 1;
   d6a56:	bf24      	itt	cs
   d6a58:	f104 34ff 	addcs.w	r4, r4, #4294967295	; 0xffffffff
   d6a5c:	60ec      	strcs	r4, [r5, #12]
    }
    cluster = next;
   d6a5e:	9c01      	ldr	r4, [sp, #4]
  } while (fg);
   d6a60:	2e00      	cmp	r6, #0
   d6a62:	d1e9      	bne.n	d6a38 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
   d6a64:	b002      	add	sp, #8
   d6a66:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d6a68:	2000      	movs	r0, #0
   d6a6a:	e7fb      	b.n	d6a64 <_ZN9FatVolume9freeChainEm+0x32>

000d6a6c <_ZN9FatVolume4initEh>:
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
   d6a6c:	2301      	movs	r3, #1
bool FatVolume::init(uint8_t part) {
   d6a6e:	b570      	push	{r4, r5, r6, lr}
  m_fatType = 0;
   d6a70:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
   d6a72:	60c3      	str	r3, [r0, #12]
    m_lbn = 0XFFFFFFFF;
   d6a74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
bool FatVolume::init(uint8_t part) {
   d6a78:	4604      	mov	r4, r0
  m_fatType = 0;
   d6a7a:	71c2      	strb	r2, [r0, #7]
  m_cache.init(this);
   d6a7c:	f100 0624 	add.w	r6, r0, #36	; 0x24
    m_vol = vol;
   d6a80:	6280      	str	r0, [r0, #40]	; 0x28
    m_status = 0;
   d6a82:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
   d6a86:	62c3      	str	r3, [r0, #44]	; 0x2c
    m_vol = vol;
   d6a88:	f8c0 0234 	str.w	r0, [r0, #564]	; 0x234
    m_status = 0;
   d6a8c:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
   d6a90:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
   d6a94:	460d      	mov	r5, r1
   d6a96:	b1b9      	cbz	r1, d6ac8 <_ZN9FatVolume4initEh+0x5c>
    if (part > 4) {
   d6a98:	2904      	cmp	r1, #4
   d6a9a:	d901      	bls.n	d6aa0 <_ZN9FatVolume4initEh+0x34>
    m_fatType = 32;
  }
  return true;

fail:
  return false;
   d6a9c:	2000      	movs	r0, #0
}
   d6a9e:	bd70      	pop	{r4, r5, r6, pc}
    return m_cache.read(blockNumber, options);
   d6aa0:	4611      	mov	r1, r2
   d6aa2:	4630      	mov	r0, r6
   d6aa4:	f7ff fefc 	bl	d68a0 <_ZN8FatCache4readEmh>
    if (!pc) {
   d6aa8:	2800      	cmp	r0, #0
   d6aaa:	d0f7      	beq.n	d6a9c <_ZN9FatVolume4initEh+0x30>
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
   d6aac:	eb00 1305 	add.w	r3, r0, r5, lsl #4
   d6ab0:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
   d6ab4:	065b      	lsls	r3, r3, #25
   d6ab6:	d1f1      	bne.n	d6a9c <_ZN9FatVolume4initEh+0x30>
   d6ab8:	f105 011b 	add.w	r1, r5, #27
   d6abc:	eb00 1101 	add.w	r1, r0, r1, lsl #4
   d6ac0:	f8d1 5006 	ldr.w	r5, [r1, #6]
   d6ac4:	2d00      	cmp	r5, #0
   d6ac6:	d0e9      	beq.n	d6a9c <_ZN9FatVolume4initEh+0x30>
   d6ac8:	2200      	movs	r2, #0
   d6aca:	4629      	mov	r1, r5
   d6acc:	4630      	mov	r0, r6
   d6ace:	f7ff fee7 	bl	d68a0 <_ZN8FatCache4readEmh>
  if (!pc) {
   d6ad2:	2800      	cmp	r0, #0
   d6ad4:	d0e2      	beq.n	d6a9c <_ZN9FatVolume4initEh+0x30>
  if (fbs->bytesPerSector != 512 ||
   d6ad6:	f8b0 300b 	ldrh.w	r3, [r0, #11]
   d6ada:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   d6ade:	d1dd      	bne.n	d6a9c <_ZN9FatVolume4initEh+0x30>
   d6ae0:	7c03      	ldrb	r3, [r0, #16]
   d6ae2:	2b02      	cmp	r3, #2
   d6ae4:	d1da      	bne.n	d6a9c <_ZN9FatVolume4initEh+0x30>
      fbs->fatCount != 2 ||
   d6ae6:	89c3      	ldrh	r3, [r0, #14]
   d6ae8:	2b00      	cmp	r3, #0
   d6aea:	d0d7      	beq.n	d6a9c <_ZN9FatVolume4initEh+0x30>
  m_blocksPerCluster = fbs->sectorsPerCluster;
   d6aec:	7b41      	ldrb	r1, [r0, #13]
   d6aee:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
   d6af0:	1e4b      	subs	r3, r1, #1
   d6af2:	7163      	strb	r3, [r4, #5]
  m_clusterSizeShift = 0;
   d6af4:	2300      	movs	r3, #0
   d6af6:	71a3      	strb	r3, [r4, #6]
   d6af8:	2609      	movs	r6, #9
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6afa:	2301      	movs	r3, #1
   d6afc:	4299      	cmp	r1, r3
   d6afe:	d007      	beq.n	d6b10 <_ZN9FatVolume4initEh+0xa4>
    if (tmp == 0) {
   d6b00:	3e01      	subs	r6, #1
   d6b02:	d0cb      	beq.n	d6a9c <_ZN9FatVolume4initEh+0x30>
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
   d6b04:	79a2      	ldrb	r2, [r4, #6]
   d6b06:	005b      	lsls	r3, r3, #1
   d6b08:	3201      	adds	r2, #1
   d6b0a:	b2db      	uxtb	r3, r3
   d6b0c:	71a2      	strb	r2, [r4, #6]
   d6b0e:	e7f5      	b.n	d6afc <_ZN9FatVolume4initEh+0x90>
  m_blocksPerFat = fbs->sectorsPerFat16 ?
   d6b10:	8ac1      	ldrh	r1, [r0, #22]
   d6b12:	b901      	cbnz	r1, d6b16 <_ZN9FatVolume4initEh+0xaa>
   d6b14:	6a41      	ldr	r1, [r0, #36]	; 0x24
   d6b16:	6121      	str	r1, [r4, #16]
  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
   d6b18:	89c3      	ldrh	r3, [r0, #14]
   d6b1a:	442b      	add	r3, r5
   d6b1c:	61a3      	str	r3, [r4, #24]
  m_rootDirEntryCount = fbs->rootDirEntryCount;
   d6b1e:	f8b0 2011 	ldrh.w	r2, [r0, #17]
   d6b22:	8122      	strh	r2, [r4, #8]
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
   d6b24:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d6b28:	6223      	str	r3, [r4, #32]
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
   d6b2a:	f8b0 1011 	ldrh.w	r1, [r0, #17]
   d6b2e:	0149      	lsls	r1, r1, #5
   d6b30:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
   d6b34:	eb03 2351 	add.w	r3, r3, r1, lsr #9
   d6b38:	6163      	str	r3, [r4, #20]
  totalBlocks = fbs->totalSectors16 ?
   d6b3a:	f8b0 2013 	ldrh.w	r2, [r0, #19]
   d6b3e:	b902      	cbnz	r2, d6b42 <_ZN9FatVolume4initEh+0xd6>
   d6b40:	6a02      	ldr	r2, [r0, #32]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6b42:	1ae9      	subs	r1, r5, r3
  clusterCount >>= m_clusterSizeShift;
   d6b44:	79a3      	ldrb	r3, [r4, #6]
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
   d6b46:	4411      	add	r1, r2
  clusterCount >>= m_clusterSizeShift;
   d6b48:	40d9      	lsrs	r1, r3
  m_lastCluster = clusterCount + 1;
   d6b4a:	1c4b      	adds	r3, r1, #1
   d6b4c:	61e3      	str	r3, [r4, #28]
  if (clusterCount < 4085) {
   d6b4e:	f640 73f4 	movw	r3, #4084	; 0xff4
   d6b52:	4299      	cmp	r1, r3
   d6b54:	d802      	bhi.n	d6b5c <_ZN9FatVolume4initEh+0xf0>
    m_fatType = 12;
   d6b56:	230c      	movs	r3, #12
   d6b58:	71e3      	strb	r3, [r4, #7]
   d6b5a:	e79f      	b.n	d6a9c <_ZN9FatVolume4initEh+0x30>
  } else if (clusterCount < 65525) {
   d6b5c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
   d6b60:	4299      	cmp	r1, r3
    m_rootDirStart = fbs->fat32RootCluster;
   d6b62:	bf85      	ittet	hi
   d6b64:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
   d6b66:	6223      	strhi	r3, [r4, #32]
    m_fatType = 16;
   d6b68:	2310      	movls	r3, #16
    m_fatType = 32;
   d6b6a:	2320      	movhi	r3, #32
   d6b6c:	71e3      	strb	r3, [r4, #7]
  return true;
   d6b6e:	2001      	movs	r0, #1
   d6b70:	e795      	b.n	d6a9e <_ZN9FatVolume4initEh+0x32>
	...

000d6b74 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6b74:	b570      	push	{r4, r5, r6, lr}
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6b76:	4e0e      	ldr	r6, [pc, #56]	; (d6bb0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
   d6b78:	460d      	mov	r5, r1
   d6b7a:	4614      	mov	r4, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   d6b7c:	f000 faf2 	bl	d7164 <HAL_Timer_Get_Micro_Seconds>
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
   d6b80:	6833      	ldr	r3, [r6, #0]
   d6b82:	1ac0      	subs	r0, r0, r3
   d6b84:	4b0b      	ldr	r3, [pc, #44]	; (d6bb4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
   d6b86:	4298      	cmp	r0, r3
   d6b88:	d908      	bls.n	d6b9c <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6b8a:	f000 faf3 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6b8e:	4b0a      	ldr	r3, [pc, #40]	; (d6bb8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
   d6b90:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d6b92:	f000 fc7b 	bl	d748c <spark_process>
   d6b96:	f000 fae5 	bl	d7164 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
   d6b9a:	6030      	str	r0, [r6, #0]
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6b9c:	f000 faea 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
   d6ba0:	b280      	uxth	r0, r0
   d6ba2:	1b40      	subs	r0, r0, r5
}
   d6ba4:	42a0      	cmp	r0, r4
   d6ba6:	bfd4      	ite	le
   d6ba8:	2000      	movle	r0, #0
   d6baa:	2001      	movgt	r0, #1
   d6bac:	bd70      	pop	{r4, r5, r6, pc}
   d6bae:	bf00      	nop
   d6bb0:	2003e5ac 	.word	0x2003e5ac
   d6bb4:	000186a0 	.word	0x000186a0
   d6bb8:	2003e738 	.word	0x2003e738

000d6bbc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
   d6bbc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
   d6bbe:	7a05      	ldrb	r5, [r0, #8]
void SdSpiCard::spiStart() {
   d6bc0:	4604      	mov	r4, r0
  if (!m_spiActive) {
   d6bc2:	b94d      	cbnz	r5, d6bd8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
   d6bc4:	6840      	ldr	r0, [r0, #4]
   d6bc6:	f000 fa6b 	bl	d70a0 <_ZN14SdSpiAltDriver8activateEv>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
  }
  void spiSelect() {
    m_spiDriver->select();
   d6bca:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6bcc:	4629      	mov	r1, r5
   d6bce:	7d18      	ldrb	r0, [r3, #20]
   d6bd0:	f001 fb4b 	bl	d826a <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
   d6bd4:	2301      	movs	r3, #1
   d6bd6:	7223      	strb	r3, [r4, #8]
  }
}
   d6bd8:	bd38      	pop	{r3, r4, r5, pc}

000d6bda <_ZN9SdSpiCard7spiStopEv>:
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
   d6bda:	b510      	push	{r4, lr}
  if (m_spiActive) {
   d6bdc:	7a03      	ldrb	r3, [r0, #8]
void SdSpiCard::spiStop() {
   d6bde:	4604      	mov	r4, r0
  if (m_spiActive) {
   d6be0:	b16b      	cbz	r3, d6bfe <_ZN9SdSpiCard7spiStopEv+0x24>
  }
  void spiUnselect() {
    m_spiDriver->unselect();
   d6be2:	6843      	ldr	r3, [r0, #4]
    digitalWrite(m_csPin, HIGH);
   d6be4:	2101      	movs	r1, #1
   d6be6:	7d18      	ldrb	r0, [r3, #20]
   d6be8:	f001 fb3f 	bl	d826a <digitalWrite>
     m_spiDriver->send(data);
   d6bec:	6860      	ldr	r0, [r4, #4]
   d6bee:	21ff      	movs	r1, #255	; 0xff
   d6bf0:	f000 fa88 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->deactivate();
   d6bf4:	6860      	ldr	r0, [r4, #4]
   d6bf6:	f000 fa67 	bl	d70c8 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
   d6bfa:	2300      	movs	r3, #0
   d6bfc:	7223      	strb	r3, [r4, #8]
  }
}
   d6bfe:	bd10      	pop	{r4, pc}

000d6c00 <_ZN9SdSpiCard8readDataEPhj>:
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
   d6c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c02:	4604      	mov	r4, r0
   d6c04:	460d      	mov	r5, r1
   d6c06:	4616      	mov	r6, r2
   d6c08:	f000 fab4 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
   d6c0c:	b287      	uxth	r7, r0
    return m_spiDriver->receive();
   d6c0e:	6860      	ldr	r0, [r4, #4]
   d6c10:	f000 fa5d 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
  while ((m_status = spiReceive()) == 0XFF) {
   d6c14:	28ff      	cmp	r0, #255	; 0xff
   d6c16:	7260      	strb	r0, [r4, #9]
   d6c18:	d10e      	bne.n	d6c38 <_ZN9SdSpiCard8readDataEPhj+0x38>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
   d6c1a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6c1e:	4639      	mov	r1, r7
   d6c20:	4620      	mov	r0, r4
   d6c22:	f7ff ffa7 	bl	d6b74 <_ZN9SdSpiCard10isTimedOutEtt>
   d6c26:	2800      	cmp	r0, #0
   d6c28:	d0f1      	beq.n	d6c0e <_ZN9SdSpiCard8readDataEPhj+0xe>
    m_errorCode = code;
   d6c2a:	2355      	movs	r3, #85	; 0x55
  spiStop();
   d6c2c:	4620      	mov	r0, r4
   d6c2e:	7023      	strb	r3, [r4, #0]
   d6c30:	f7ff ffd3 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6c34:	2000      	movs	r0, #0
}
   d6c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (m_status != DATA_START_BLOCK) {
   d6c38:	28fe      	cmp	r0, #254	; 0xfe
   d6c3a:	d001      	beq.n	d6c40 <_ZN9SdSpiCard8readDataEPhj+0x40>
   d6c3c:	2350      	movs	r3, #80	; 0x50
   d6c3e:	e7f5      	b.n	d6c2c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return  m_spiDriver->receive(buf, n);
   d6c40:	6860      	ldr	r0, [r4, #4]
   d6c42:	4632      	mov	r2, r6
   d6c44:	4629      	mov	r1, r5
   d6c46:	f000 fa47 	bl	d70d8 <_ZN14SdSpiAltDriver7receiveEPhj>
  if ((m_status = spiReceive(dst, count))) {
   d6c4a:	7260      	strb	r0, [r4, #9]
   d6c4c:	b108      	cbz	r0, d6c52 <_ZN9SdSpiCard8readDataEPhj+0x52>
    m_errorCode = code;
   d6c4e:	2360      	movs	r3, #96	; 0x60
   d6c50:	e7ec      	b.n	d6c2c <_ZN9SdSpiCard8readDataEPhj+0x2c>
    return m_spiDriver->receive();
   d6c52:	6860      	ldr	r0, [r4, #4]
   d6c54:	f000 fa3b 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
   d6c58:	6860      	ldr	r0, [r4, #4]
   d6c5a:	f000 fa38 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
   d6c5e:	2001      	movs	r0, #1
   d6c60:	e7e9      	b.n	d6c36 <_ZN9SdSpiCard8readDataEPhj+0x36>

000d6c62 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
   d6c62:	b570      	push	{r4, r5, r6, lr}
   d6c64:	4604      	mov	r4, r0
   d6c66:	460e      	mov	r6, r1
   d6c68:	f000 fa84 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
   d6c6c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
   d6c6e:	4632      	mov	r2, r6
   d6c70:	4629      	mov	r1, r5
   d6c72:	4620      	mov	r0, r4
   d6c74:	f7ff ff7e 	bl	d6b74 <_ZN9SdSpiCard10isTimedOutEtt>
   d6c78:	b930      	cbnz	r0, d6c88 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
   d6c7a:	6860      	ldr	r0, [r4, #4]
   d6c7c:	f000 fa27 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
   d6c80:	28ff      	cmp	r0, #255	; 0xff
   d6c82:	d1f4      	bne.n	d6c6e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
   d6c84:	2001      	movs	r0, #1
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
   d6c86:	bd70      	pop	{r4, r5, r6, pc}
  return false;
   d6c88:	2000      	movs	r0, #0
   d6c8a:	e7fc      	b.n	d6c86 <_ZN9SdSpiCard11waitNotBusyEt+0x24>

000d6c8c <_ZN9SdSpiCard11cardCommandEhm>:
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6c8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if (!m_spiActive) {
   d6c8e:	7a03      	ldrb	r3, [r0, #8]
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
   d6c90:	9201      	str	r2, [sp, #4]
   d6c92:	4604      	mov	r4, r0
   d6c94:	460d      	mov	r5, r1
  if (!m_spiActive) {
   d6c96:	b90b      	cbnz	r3, d6c9c <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
   d6c98:	f7ff ff90 	bl	d6bbc <_ZN9SdSpiCard8spiStartEv>
  if (cmd != CMD0) {
   d6c9c:	b125      	cbz	r5, d6ca8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    waitNotBusy(SD_CMD_TIMEOUT);
   d6c9e:	f44f 7196 	mov.w	r1, #300	; 0x12c
   d6ca2:	4620      	mov	r0, r4
   d6ca4:	f7ff ffdd 	bl	d6c62 <_ZN9SdSpiCard11waitNotBusyEt>
     m_spiDriver->send(data);
   d6ca8:	6860      	ldr	r0, [r4, #4]
   d6caa:	f045 0140 	orr.w	r1, r5, #64	; 0x40
   d6cae:	f000 fa29 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
   d6cb2:	2603      	movs	r6, #3
    spiSend(pa[i]);
   d6cb4:	af01      	add	r7, sp, #4
   d6cb6:	5db9      	ldrb	r1, [r7, r6]
   d6cb8:	6860      	ldr	r0, [r4, #4]
   d6cba:	f000 fa23 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
  for (int8_t i = 3; i >= 0; i--) {
   d6cbe:	3e01      	subs	r6, #1
   d6cc0:	d2f9      	bcs.n	d6cb6 <_ZN9SdSpiCard11cardCommandEhm+0x2a>
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
   d6cc2:	2d00      	cmp	r5, #0
   d6cc4:	6860      	ldr	r0, [r4, #4]
   d6cc6:	bf0c      	ite	eq
   d6cc8:	2195      	moveq	r1, #149	; 0x95
   d6cca:	2187      	movne	r1, #135	; 0x87
   d6ccc:	f000 fa1a 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6cd0:	6860      	ldr	r0, [r4, #4]
   d6cd2:	f000 f9fc 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
   d6cd6:	250b      	movs	r5, #11
   d6cd8:	6860      	ldr	r0, [r4, #4]
   d6cda:	f000 f9f8 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
   d6cde:	0603      	lsls	r3, r0, #24
   d6ce0:	7260      	strb	r0, [r4, #9]
   d6ce2:	d503      	bpl.n	d6cec <_ZN9SdSpiCard11cardCommandEhm+0x60>
   d6ce4:	3d01      	subs	r5, #1
   d6ce6:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6cea:	d1f5      	bne.n	d6cd8 <_ZN9SdSpiCard11cardCommandEhm+0x4c>
}
   d6cec:	b003      	add	sp, #12
   d6cee:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6cf0 <_ZN9SdSpiCard8cardAcmdEhm>:
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
   d6cf0:	b570      	push	{r4, r5, r6, lr}
   d6cf2:	4604      	mov	r4, r0
   d6cf4:	460d      	mov	r5, r1
   d6cf6:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
   d6cf8:	2137      	movs	r1, #55	; 0x37
   d6cfa:	2200      	movs	r2, #0
   d6cfc:	f7ff ffc6 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
   d6d00:	4632      	mov	r2, r6
   d6d02:	4629      	mov	r1, r5
   d6d04:	4620      	mov	r0, r4
  }
   d6d06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return cardCommand(cmd, arg);
   d6d0a:	f7ff bfbf 	b.w	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
	...

000d6d10 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE>:
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
   d6d14:	2500      	movs	r5, #0
   d6d16:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
   d6d18:	7005      	strb	r5, [r0, #0]
  m_type = 0;
   d6d1a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
   d6d1c:	6041      	str	r1, [r0, #4]
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
   d6d1e:	4604      	mov	r4, r0
   d6d20:	4690      	mov	r8, r2
   d6d22:	461e      	mov	r6, r3
   d6d24:	f000 fa26 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
  m_spiDriver->begin(csPin);
   d6d28:	4641      	mov	r1, r8
   d6d2a:	4607      	mov	r7, r0
   d6d2c:	6860      	ldr	r0, [r4, #4]
   d6d2e:	f000 f9bb 	bl	d70a8 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
   d6d32:	6863      	ldr	r3, [r4, #4]
class SPISettings : public Printable {
   d6d34:	4a49      	ldr	r2, [pc, #292]	; (d6e5c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x14c>)
   d6d36:	721d      	strb	r5, [r3, #8]
   d6d38:	2501      	movs	r5, #1
   d6d3a:	60da      	str	r2, [r3, #12]
   d6d3c:	821d      	strh	r5, [r3, #16]
  spiStart();
   d6d3e:	4620      	mov	r0, r4
   d6d40:	f7ff ff3c 	bl	d6bbc <_ZN9SdSpiCard8spiStartEv>
    m_spiDriver->unselect();
   d6d44:	6863      	ldr	r3, [r4, #4]
   d6d46:	4629      	mov	r1, r5
   d6d48:	7d18      	ldrb	r0, [r3, #20]
   d6d4a:	f001 fa8e 	bl	d826a <digitalWrite>
   d6d4e:	250a      	movs	r5, #10
     m_spiDriver->send(data);
   d6d50:	6860      	ldr	r0, [r4, #4]
   d6d52:	21ff      	movs	r1, #255	; 0xff
   d6d54:	3d01      	subs	r5, #1
   d6d56:	f000 f9d5 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
  for (uint8_t i = 0; i < 10; i++) {
   d6d5a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6d5e:	d1f7      	bne.n	d6d50 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x40>
    m_spiDriver->select();
   d6d60:	6863      	ldr	r3, [r4, #4]
     digitalWrite(m_csPin, LOW);
   d6d62:	4629      	mov	r1, r5
   d6d64:	7d18      	ldrb	r0, [r3, #20]
   d6d66:	f001 fa80 	bl	d826a <digitalWrite>
  }
   d6d6a:	250a      	movs	r5, #10
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
   d6d6c:	2200      	movs	r2, #0
   d6d6e:	4611      	mov	r1, r2
   d6d70:	4620      	mov	r0, r4
   d6d72:	f7ff ff8b 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6d76:	2801      	cmp	r0, #1
   d6d78:	4680      	mov	r8, r0
   d6d7a:	d018      	beq.n	d6dae <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x9e>
    if (i == SD_CMD0_RETRY) {
   d6d7c:	3d01      	subs	r5, #1
   d6d7e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d6d82:	d107      	bne.n	d6d94 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x84>
    m_errorCode = code;
   d6d84:	2320      	movs	r3, #32
  spiStop();
   d6d86:	4620      	mov	r0, r4
   d6d88:	7023      	strb	r3, [r4, #0]
   d6d8a:	f7ff ff26 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6d8e:	2000      	movs	r0, #0
}
   d6d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     m_spiDriver->send(data);
   d6d94:	6860      	ldr	r0, [r4, #4]
   d6d96:	21fd      	movs	r1, #253	; 0xfd
   d6d98:	f000 f9b4 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
   d6d9c:	f44f 7802 	mov.w	r8, #520	; 0x208
    return m_spiDriver->receive();
   d6da0:	6860      	ldr	r0, [r4, #4]
   d6da2:	f000 f994 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
    for (int i = 0; i < 520; i++) {
   d6da6:	f1b8 0801 	subs.w	r8, r8, #1
   d6daa:	d1f9      	bne.n	d6da0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x90>
   d6dac:	e7de      	b.n	d6d6c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x5c>
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
   d6dae:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
   d6db2:	2108      	movs	r1, #8
   d6db4:	4620      	mov	r0, r4
   d6db6:	f7ff ff69 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6dba:	2805      	cmp	r0, #5
   d6dbc:	d114      	bne.n	d6de8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xd8>
    m_type = value;
   d6dbe:	f884 800a 	strb.w	r8, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6dc2:	2500      	movs	r5, #0
   d6dc4:	b2bf      	uxth	r7, r7
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
   d6dc6:	462a      	mov	r2, r5
   d6dc8:	2129      	movs	r1, #41	; 0x29
   d6dca:	4620      	mov	r0, r4
   d6dcc:	f7ff ff90 	bl	d6cf0 <_ZN9SdSpiCard8cardAcmdEhm>
   d6dd0:	4602      	mov	r2, r0
   d6dd2:	b1d8      	cbz	r0, d6e0c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xfc>
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
   d6dd4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   d6dd8:	4639      	mov	r1, r7
   d6dda:	4620      	mov	r0, r4
   d6ddc:	f7ff feca 	bl	d6b74 <_ZN9SdSpiCard10isTimedOutEtt>
   d6de0:	2800      	cmp	r0, #0
   d6de2:	d0f0      	beq.n	d6dc6 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb6>
    m_errorCode = code;
   d6de4:	2343      	movs	r3, #67	; 0x43
   d6de6:	e7ce      	b.n	d6d86 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
   d6de8:	2504      	movs	r5, #4
    return m_spiDriver->receive();
   d6dea:	6860      	ldr	r0, [r4, #4]
   d6dec:	f000 f96f 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
   d6df0:	3d01      	subs	r5, #1
    for (uint8_t i = 0; i < 4; i++) {
   d6df2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
   d6df6:	7260      	strb	r0, [r4, #9]
    for (uint8_t i = 0; i < 4; i++) {
   d6df8:	d1f7      	bne.n	d6dea <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xda>
    if (m_status == 0XAA) {
   d6dfa:	28aa      	cmp	r0, #170	; 0xaa
   d6dfc:	d104      	bne.n	d6e08 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xf8>
    m_type = value;
   d6dfe:	2302      	movs	r3, #2
   d6e00:	72a3      	strb	r3, [r4, #10]
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
   d6e02:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
   d6e06:	e7dd      	b.n	d6dc4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0xb4>
    m_errorCode = code;
   d6e08:	2325      	movs	r3, #37	; 0x25
   d6e0a:	e7bc      	b.n	d6d86 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
  if (type() == SD_CARD_TYPE_SD2) {
   d6e0c:	7aa3      	ldrb	r3, [r4, #10]
   d6e0e:	2b02      	cmp	r3, #2
   d6e10:	d118      	bne.n	d6e44 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x134>
    if (cardCommand(CMD58, 0)) {
   d6e12:	213a      	movs	r1, #58	; 0x3a
   d6e14:	4620      	mov	r0, r4
   d6e16:	f7ff ff39 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6e1a:	b108      	cbz	r0, d6e20 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x110>
   d6e1c:	2337      	movs	r3, #55	; 0x37
   d6e1e:	e7b2      	b.n	d6d86 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x76>
    return m_spiDriver->receive();
   d6e20:	6860      	ldr	r0, [r4, #4]
   d6e22:	f000 f954 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
    if ((spiReceive() & 0XC0) == 0XC0) {
   d6e26:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   d6e2a:	28c0      	cmp	r0, #192	; 0xc0
    m_type = value;
   d6e2c:	bf04      	itt	eq
   d6e2e:	2303      	moveq	r3, #3
   d6e30:	72a3      	strbeq	r3, [r4, #10]
    return m_spiDriver->receive();
   d6e32:	6860      	ldr	r0, [r4, #4]
   d6e34:	f000 f94b 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
   d6e38:	6860      	ldr	r0, [r4, #4]
   d6e3a:	f000 f948 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
   d6e3e:	6860      	ldr	r0, [r4, #4]
   d6e40:	f000 f945 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
  spiStop();
   d6e44:	4620      	mov	r0, r4
   d6e46:	f7ff fec8 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
   d6e4a:	6863      	ldr	r3, [r4, #4]
   d6e4c:	7930      	ldrb	r0, [r6, #4]
   d6e4e:	68b1      	ldr	r1, [r6, #8]
   d6e50:	89b2      	ldrh	r2, [r6, #12]
   d6e52:	821a      	strh	r2, [r3, #16]
   d6e54:	7218      	strb	r0, [r3, #8]
   d6e56:	60d9      	str	r1, [r3, #12]
  return true;
   d6e58:	2001      	movs	r0, #1
   d6e5a:	e799      	b.n	d6d90 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle11SPISettingsE+0x80>
   d6e5c:	0003d090 	.word	0x0003d090

000d6e60 <_ZN9SdSpiCard9readBlockEmPh>:
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6e60:	b538      	push	{r3, r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6e62:	7a83      	ldrb	r3, [r0, #10]
   d6e64:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6e66:	bf18      	it	ne
   d6e68:	0249      	lslne	r1, r1, #9
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6e6a:	4615      	mov	r5, r2
  if (cardCommand(CMD17, blockNumber)) {
   d6e6c:	460a      	mov	r2, r1
   d6e6e:	2111      	movs	r1, #17
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
   d6e70:	4604      	mov	r4, r0
  if (cardCommand(CMD17, blockNumber)) {
   d6e72:	f7ff ff0b 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6e76:	b130      	cbz	r0, d6e86 <_ZN9SdSpiCard9readBlockEmPh+0x26>
    m_errorCode = code;
   d6e78:	2330      	movs	r3, #48	; 0x30
   d6e7a:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6e7c:	4620      	mov	r0, r4
   d6e7e:	f7ff feac 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6e82:	2500      	movs	r5, #0
   d6e84:	e00b      	b.n	d6e9e <_ZN9SdSpiCard9readBlockEmPh+0x3e>
  if (!readData(dst, 512)) {
   d6e86:	4629      	mov	r1, r5
   d6e88:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	f7ff feb7 	bl	d6c00 <_ZN9SdSpiCard8readDataEPhj>
   d6e92:	4605      	mov	r5, r0
   d6e94:	2800      	cmp	r0, #0
   d6e96:	d0f1      	beq.n	d6e7c <_ZN9SdSpiCard9readBlockEmPh+0x1c>
  spiStop();
   d6e98:	4620      	mov	r0, r4
   d6e9a:	f7ff fe9e 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
}
   d6e9e:	4628      	mov	r0, r5
   d6ea0:	bd38      	pop	{r3, r4, r5, pc}

000d6ea2 <_ZN9SdSpiCard9readStartEm>:
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6ea2:	b510      	push	{r4, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6ea4:	7a83      	ldrb	r3, [r0, #10]
   d6ea6:	2b03      	cmp	r3, #3
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6ea8:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d6eaa:	bf18      	it	ne
   d6eac:	024a      	lslne	r2, r1, #9
  if (cardCommand(CMD18, blockNumber)) {
   d6eae:	2112      	movs	r1, #18
bool SdSpiCard::readStart(uint32_t blockNumber) {
   d6eb0:	4604      	mov	r4, r0
  if (cardCommand(CMD18, blockNumber)) {
   d6eb2:	f7ff feeb 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6eb6:	b130      	cbz	r0, d6ec6 <_ZN9SdSpiCard9readStartEm+0x24>
   d6eb8:	2331      	movs	r3, #49	; 0x31
  spiStop();
   d6eba:	4620      	mov	r0, r4
   d6ebc:	7023      	strb	r3, [r4, #0]
   d6ebe:	f7ff fe8c 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6ec2:	2000      	movs	r0, #0
}
   d6ec4:	bd10      	pop	{r4, pc}
  return true;
   d6ec6:	2001      	movs	r0, #1
   d6ec8:	e7fc      	b.n	d6ec4 <_ZN9SdSpiCard9readStartEm+0x22>

000d6eca <_ZN9SdSpiCard8readStopEv>:
bool SdSpiCard::readStop() {
   d6eca:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
   d6ecc:	2200      	movs	r2, #0
   d6ece:	210c      	movs	r1, #12
bool SdSpiCard::readStop() {
   d6ed0:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
   d6ed2:	f7ff fedb 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6ed6:	b130      	cbz	r0, d6ee6 <_ZN9SdSpiCard8readStopEv+0x1c>
   d6ed8:	2328      	movs	r3, #40	; 0x28
  spiStop();
   d6eda:	4620      	mov	r0, r4
   d6edc:	7023      	strb	r3, [r4, #0]
   d6ede:	f7ff fe7c 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6ee2:	2000      	movs	r0, #0
}
   d6ee4:	bd10      	pop	{r4, pc}
  spiStop();
   d6ee6:	4620      	mov	r0, r4
   d6ee8:	f7ff fe77 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return true;
   d6eec:	2001      	movs	r0, #1
   d6eee:	e7f9      	b.n	d6ee4 <_ZN9SdSpiCard8readStopEv+0x1a>

000d6ef0 <_ZN9SdSpiCard10readBlocksEmPhj>:
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
   d6ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6ef2:	4604      	mov	r4, r0
   d6ef4:	4616      	mov	r6, r2
   d6ef6:	461f      	mov	r7, r3
  if (!readStart(block)) {
   d6ef8:	f7ff ffd3 	bl	d6ea2 <_ZN9SdSpiCard9readStartEm>
   d6efc:	b168      	cbz	r0, d6f1a <_ZN9SdSpiCard10readBlocksEmPhj+0x2a>
   d6efe:	2500      	movs	r5, #0
  for (uint16_t b = 0; b < count; b++, dst += 512) {
   d6f00:	b2ab      	uxth	r3, r5
   d6f02:	429f      	cmp	r7, r3
   d6f04:	eb06 2145 	add.w	r1, r6, r5, lsl #9
   d6f08:	d909      	bls.n	d6f1e <_ZN9SdSpiCard10readBlocksEmPhj+0x2e>
    if (!readData(dst, 512)) {
   d6f0a:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6f0e:	4620      	mov	r0, r4
   d6f10:	f7ff fe76 	bl	d6c00 <_ZN9SdSpiCard8readDataEPhj>
   d6f14:	3501      	adds	r5, #1
   d6f16:	2800      	cmp	r0, #0
   d6f18:	d1f2      	bne.n	d6f00 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
}
   d6f1a:	2000      	movs	r0, #0
   d6f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return readStop();
   d6f1e:	4620      	mov	r0, r4
}
   d6f20:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return readStop();
   d6f24:	f7ff bfd1 	b.w	d6eca <_ZN9SdSpiCard8readStopEv>

000d6f28 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
   d6f28:	b538      	push	{r3, r4, r5, lr}
   d6f2a:	4604      	mov	r4, r0
   d6f2c:	4615      	mov	r5, r2
     m_spiDriver->send(data);
   d6f2e:	6840      	ldr	r0, [r0, #4]
   d6f30:	f000 f8e8 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
    m_spiDriver->send(buf, n);
   d6f34:	f44f 7200 	mov.w	r2, #512	; 0x200
   d6f38:	6860      	ldr	r0, [r4, #4]
   d6f3a:	4629      	mov	r1, r5
   d6f3c:	f000 f8e6 	bl	d710c <_ZN14SdSpiAltDriver4sendEPKhj>
     m_spiDriver->send(data);
   d6f40:	6860      	ldr	r0, [r4, #4]
   d6f42:	21ff      	movs	r1, #255	; 0xff
   d6f44:	f000 f8de 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
   d6f48:	6860      	ldr	r0, [r4, #4]
   d6f4a:	21ff      	movs	r1, #255	; 0xff
   d6f4c:	f000 f8da 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
    return m_spiDriver->receive();
   d6f50:	6860      	ldr	r0, [r4, #4]
   d6f52:	f000 f8bc 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
   d6f56:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
   d6f58:	f000 001f 	and.w	r0, r0, #31
   d6f5c:	2805      	cmp	r0, #5
   d6f5e:	d006      	beq.n	d6f6e <_ZN9SdSpiCard9writeDataEhPKh+0x46>
    m_errorCode = code;
   d6f60:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
   d6f62:	4620      	mov	r0, r4
   d6f64:	7023      	strb	r3, [r4, #0]
   d6f66:	f7ff fe38 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6f6a:	2000      	movs	r0, #0
}
   d6f6c:	bd38      	pop	{r3, r4, r5, pc}
  return true;
   d6f6e:	2001      	movs	r0, #1
   d6f70:	e7fc      	b.n	d6f6c <_ZN9SdSpiCard9writeDataEhPKh+0x44>

000d6f72 <_ZN9SdSpiCard10writeBlockEmPKh>:
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6f72:	b570      	push	{r4, r5, r6, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
   d6f74:	7a83      	ldrb	r3, [r0, #10]
   d6f76:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
   d6f78:	bf18      	it	ne
   d6f7a:	0249      	lslne	r1, r1, #9
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6f7c:	4615      	mov	r5, r2
  if (cardCommand(CMD24, blockNumber)) {
   d6f7e:	460a      	mov	r2, r1
   d6f80:	2118      	movs	r1, #24
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
   d6f82:	4604      	mov	r4, r0
  if (cardCommand(CMD24, blockNumber)) {
   d6f84:	f7ff fe82 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6f88:	4606      	mov	r6, r0
   d6f8a:	b130      	cbz	r0, d6f9a <_ZN9SdSpiCard10writeBlockEmPKh+0x28>
   d6f8c:	2332      	movs	r3, #50	; 0x32
   d6f8e:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6f90:	4620      	mov	r0, r4
   d6f92:	f7ff fe22 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6f96:	2500      	movs	r5, #0
   d6f98:	e01f      	b.n	d6fda <_ZN9SdSpiCard10writeBlockEmPKh+0x68>
  if (!writeData(DATA_START_BLOCK, src)) {
   d6f9a:	462a      	mov	r2, r5
   d6f9c:	21fe      	movs	r1, #254	; 0xfe
   d6f9e:	4620      	mov	r0, r4
   d6fa0:	f7ff ffc2 	bl	d6f28 <_ZN9SdSpiCard9writeDataEhPKh>
   d6fa4:	2800      	cmp	r0, #0
   d6fa6:	d0f3      	beq.n	d6f90 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6fa8:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   d6fac:	4620      	mov	r0, r4
   d6fae:	f7ff fe58 	bl	d6c62 <_ZN9SdSpiCard11waitNotBusyEt>
   d6fb2:	4605      	mov	r5, r0
   d6fb4:	b908      	cbnz	r0, d6fba <_ZN9SdSpiCard10writeBlockEmPKh+0x48>
   d6fb6:	235a      	movs	r3, #90	; 0x5a
   d6fb8:	e7e9      	b.n	d6f8e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
  if (cardCommand(CMD13, 0) || spiReceive()) {
   d6fba:	4632      	mov	r2, r6
   d6fbc:	210d      	movs	r1, #13
   d6fbe:	4620      	mov	r0, r4
   d6fc0:	f7ff fe64 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d6fc4:	b108      	cbz	r0, d6fca <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
   d6fc6:	2329      	movs	r3, #41	; 0x29
   d6fc8:	e7e1      	b.n	d6f8e <_ZN9SdSpiCard10writeBlockEmPKh+0x1c>
    return m_spiDriver->receive();
   d6fca:	6860      	ldr	r0, [r4, #4]
   d6fcc:	f000 f87f 	bl	d70ce <_ZN14SdSpiAltDriver7receiveEv>
   d6fd0:	2800      	cmp	r0, #0
   d6fd2:	d1f8      	bne.n	d6fc6 <_ZN9SdSpiCard10writeBlockEmPKh+0x54>
  spiStop();
   d6fd4:	4620      	mov	r0, r4
   d6fd6:	f7ff fe00 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
}
   d6fda:	4628      	mov	r0, r5
   d6fdc:	bd70      	pop	{r4, r5, r6, pc}

000d6fde <_ZN9SdSpiCard9writeDataEPKh>:
bool SdSpiCard::writeData(const uint8_t* src) {
   d6fde:	b513      	push	{r0, r1, r4, lr}
   d6fe0:	9101      	str	r1, [sp, #4]
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6fe2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeData(const uint8_t* src) {
   d6fe6:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d6fe8:	f7ff fe3b 	bl	d6c62 <_ZN9SdSpiCard11waitNotBusyEt>
   d6fec:	9a01      	ldr	r2, [sp, #4]
   d6fee:	b930      	cbnz	r0, d6ffe <_ZN9SdSpiCard9writeDataEPKh+0x20>
    m_errorCode = code;
   d6ff0:	235b      	movs	r3, #91	; 0x5b
   d6ff2:	7023      	strb	r3, [r4, #0]
  spiStop();
   d6ff4:	4620      	mov	r0, r4
   d6ff6:	f7ff fdf0 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d6ffa:	2000      	movs	r0, #0
   d6ffc:	e005      	b.n	d700a <_ZN9SdSpiCard9writeDataEPKh+0x2c>
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
   d6ffe:	21fc      	movs	r1, #252	; 0xfc
   d7000:	4620      	mov	r0, r4
   d7002:	f7ff ff91 	bl	d6f28 <_ZN9SdSpiCard9writeDataEhPKh>
   d7006:	2800      	cmp	r0, #0
   d7008:	d0f4      	beq.n	d6ff4 <_ZN9SdSpiCard9writeDataEPKh+0x16>
}
   d700a:	b002      	add	sp, #8
   d700c:	bd10      	pop	{r4, pc}

000d700e <_ZN9SdSpiCard10writeStartEm>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d700e:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
   d7010:	7a83      	ldrb	r3, [r0, #10]
   d7012:	2b03      	cmp	r3, #3
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d7014:	460a      	mov	r2, r1
    blockNumber <<= 9;
   d7016:	bf18      	it	ne
   d7018:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
   d701a:	2119      	movs	r1, #25
bool SdSpiCard::writeStart(uint32_t blockNumber) {
   d701c:	4604      	mov	r4, r0
  if (cardCommand(CMD25, blockNumber)) {
   d701e:	f7ff fe35 	bl	d6c8c <_ZN9SdSpiCard11cardCommandEhm>
   d7022:	b130      	cbz	r0, d7032 <_ZN9SdSpiCard10writeStartEm+0x24>
   d7024:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
   d7026:	4620      	mov	r0, r4
   d7028:	7023      	strb	r3, [r4, #0]
   d702a:	f7ff fdd6 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
  return false;
   d702e:	2000      	movs	r0, #0
}
   d7030:	bd10      	pop	{r4, pc}
  return true;
   d7032:	2001      	movs	r0, #1
   d7034:	e7fc      	b.n	d7030 <_ZN9SdSpiCard10writeStartEm+0x22>

000d7036 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
   d7036:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d7038:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
bool SdSpiCard::writeStop() {
   d703c:	4604      	mov	r4, r0
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
   d703e:	f7ff fe10 	bl	d6c62 <_ZN9SdSpiCard11waitNotBusyEt>
   d7042:	4605      	mov	r5, r0
   d7044:	b930      	cbnz	r0, d7054 <_ZN9SdSpiCard9writeStopEv+0x1e>
   d7046:	2356      	movs	r3, #86	; 0x56
   d7048:	7023      	strb	r3, [r4, #0]
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_STOP);
  spiSend(STOP_TRAN_TOKEN);
  spiStop();
   d704a:	4620      	mov	r0, r4
   d704c:	f7ff fdc5 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
   d7050:	4628      	mov	r0, r5
   d7052:	bd38      	pop	{r3, r4, r5, pc}
     m_spiDriver->send(data);
   d7054:	6860      	ldr	r0, [r4, #4]
   d7056:	21fd      	movs	r1, #253	; 0xfd
   d7058:	f000 f854 	bl	d7104 <_ZN14SdSpiAltDriver4sendEh>
   d705c:	e7f5      	b.n	d704a <_ZN9SdSpiCard9writeStopEv+0x14>

000d705e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
   d705e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7060:	4604      	mov	r4, r0
   d7062:	4616      	mov	r6, r2
   d7064:	461f      	mov	r7, r3
  if (!writeStart(block)) {
   d7066:	f7ff ffd2 	bl	d700e <_ZN9SdSpiCard10writeStartEm>
   d706a:	b170      	cbz	r0, d708a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d706c:	2500      	movs	r5, #0
   d706e:	42bd      	cmp	r5, r7
   d7070:	eb06 2145 	add.w	r1, r6, r5, lsl #9
  return writeStop();
   d7074:	4620      	mov	r0, r4
  for (size_t b = 0; b < count; b++, src += 512) {
   d7076:	d004      	beq.n	d7082 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
   d7078:	f7ff ffb1 	bl	d6fde <_ZN9SdSpiCard9writeDataEPKh>
   d707c:	b128      	cbz	r0, d708a <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
  for (size_t b = 0; b < count; b++, src += 512) {
   d707e:	3501      	adds	r5, #1
   d7080:	e7f5      	b.n	d706e <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
}
   d7082:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return writeStop();
   d7086:	f7ff bfd6 	b.w	d7036 <_ZN9SdSpiCard9writeStopEv>
  spiStop();
   d708a:	4620      	mov	r0, r4
   d708c:	f7ff fda5 	bl	d6bda <_ZN9SdSpiCard7spiStopEv>
}
   d7090:	2000      	movs	r0, #0
   d7092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7094 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
   d7094:	4b01      	ldr	r3, [pc, #4]	; (d709c <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
   d7096:	2201      	movs	r2, #1
   d7098:	701a      	strb	r2, [r3, #0]
}
   d709a:	4770      	bx	lr
   d709c:	2003e5b0 	.word	0x2003e5b0

000d70a0 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
   d70a0:	1d01      	adds	r1, r0, #4
   d70a2:	6800      	ldr	r0, [r0, #0]
   d70a4:	f000 be10 	b.w	d7cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>

000d70a8 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
   d70a8:	b510      	push	{r4, lr}
   d70aa:	4604      	mov	r4, r0
  m_csPin = csPin;
   d70ac:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
   d70ae:	6800      	ldr	r0, [r0, #0]
   d70b0:	f000 fde0 	bl	d7c74 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
   d70b4:	7d20      	ldrb	r0, [r4, #20]
   d70b6:	2101      	movs	r1, #1
   d70b8:	f001 f8c6 	bl	d8248 <pinMode>
  digitalWrite(m_csPin, HIGH);
   d70bc:	7d20      	ldrb	r0, [r4, #20]
   d70be:	2101      	movs	r1, #1
}
   d70c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  digitalWrite(m_csPin, HIGH);
   d70c4:	f001 b8d1 	b.w	d826a <digitalWrite>

000d70c8 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
   d70c8:	6800      	ldr	r0, [r0, #0]
   d70ca:	f000 bde4 	b.w	d7c96 <_ZN8SPIClass14endTransactionEv>

000d70ce <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
   d70ce:	6800      	ldr	r0, [r0, #0]
   d70d0:	21ff      	movs	r1, #255	; 0xff
   d70d2:	f000 be67 	b.w	d7da4 <_ZN8SPIClass8transferEh>
	...

000d70d8 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
   d70d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d70da:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d70dc:	4a07      	ldr	r2, [pc, #28]	; (d70fc <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
   d70de:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d70e0:	2500      	movs	r5, #0
   d70e2:	4c07      	ldr	r4, [pc, #28]	; (d7100 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d70e4:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d70e6:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
   d70e8:	460a      	mov	r2, r1
   d70ea:	4629      	mov	r1, r5
   d70ec:	f000 fe60 	bl	d7db0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
   d70f0:	7823      	ldrb	r3, [r4, #0]
   d70f2:	2b00      	cmp	r3, #0
   d70f4:	d0fc      	beq.n	d70f0 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
   d70f6:	2000      	movs	r0, #0
   d70f8:	b003      	add	sp, #12
   d70fa:	bd30      	pop	{r4, r5, pc}
   d70fc:	000d7095 	.word	0x000d7095
   d7100:	2003e5b0 	.word	0x2003e5b0

000d7104 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
   d7104:	6800      	ldr	r0, [r0, #0]
   d7106:	f000 be4d 	b.w	d7da4 <_ZN8SPIClass8transferEh>
	...

000d710c <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
   d710c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d710e:	4613      	mov	r3, r2
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7110:	4a06      	ldr	r2, [pc, #24]	; (d712c <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
   d7112:	9200      	str	r2, [sp, #0]
  SPI_DMA_TransferCompleted = false;
   d7114:	2500      	movs	r5, #0
   d7116:	4c06      	ldr	r4, [pc, #24]	; (d7130 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d7118:	6800      	ldr	r0, [r0, #0]
  SPI_DMA_TransferCompleted = false;
   d711a:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
   d711c:	462a      	mov	r2, r5
   d711e:	f000 fe47 	bl	d7db0 <_ZN8SPIClass8transferEPvS0_jPFvvE>
                            SD_SPI_DMA_TransferComplete_Callback);

  while (!SPI_DMA_TransferCompleted) {}
   d7122:	7823      	ldrb	r3, [r4, #0]
   d7124:	2b00      	cmp	r3, #0
   d7126:	d0fc      	beq.n	d7122 <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
   d7128:	b003      	add	sp, #12
   d712a:	bd30      	pop	{r4, r5, pc}
   d712c:	000d7095 	.word	0x000d7095
   d7130:	2003e5b0 	.word	0x2003e5b0

000d7134 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d7134:	b508      	push	{r3, lr}
   d7136:	4b02      	ldr	r3, [pc, #8]	; (d7140 <os_mutex_recursive_create+0xc>)
   d7138:	681b      	ldr	r3, [r3, #0]
   d713a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d713c:	9301      	str	r3, [sp, #4]
   d713e:	bd08      	pop	{r3, pc}
   d7140:	00030248 	.word	0x00030248

000d7144 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d7144:	b508      	push	{r3, lr}
   d7146:	4b02      	ldr	r3, [pc, #8]	; (d7150 <HAL_RNG_GetRandomNumber+0xc>)
   d7148:	681b      	ldr	r3, [r3, #0]
   d714a:	685b      	ldr	r3, [r3, #4]
   d714c:	9301      	str	r3, [sp, #4]
   d714e:	bd08      	pop	{r3, pc}
   d7150:	00030218 	.word	0x00030218

000d7154 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d7154:	b508      	push	{r3, lr}
   d7156:	4b02      	ldr	r3, [pc, #8]	; (d7160 <HAL_Delay_Microseconds+0xc>)
   d7158:	681b      	ldr	r3, [r3, #0]
   d715a:	68db      	ldr	r3, [r3, #12]
   d715c:	9301      	str	r3, [sp, #4]
   d715e:	bd08      	pop	{r3, pc}
   d7160:	00030218 	.word	0x00030218

000d7164 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   d7164:	b508      	push	{r3, lr}
   d7166:	4b02      	ldr	r3, [pc, #8]	; (d7170 <HAL_Timer_Get_Micro_Seconds+0xc>)
   d7168:	681b      	ldr	r3, [r3, #0]
   d716a:	691b      	ldr	r3, [r3, #16]
   d716c:	9301      	str	r3, [sp, #4]
   d716e:	bd08      	pop	{r3, pc}
   d7170:	00030218 	.word	0x00030218

000d7174 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d7174:	b508      	push	{r3, lr}
   d7176:	4b02      	ldr	r3, [pc, #8]	; (d7180 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d7178:	681b      	ldr	r3, [r3, #0]
   d717a:	695b      	ldr	r3, [r3, #20]
   d717c:	9301      	str	r3, [sp, #4]
   d717e:	bd08      	pop	{r3, pc}
   d7180:	00030218 	.word	0x00030218

000d7184 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d7184:	b508      	push	{r3, lr}
   d7186:	4b02      	ldr	r3, [pc, #8]	; (d7190 <HAL_Pin_Mode+0xc>)
   d7188:	681b      	ldr	r3, [r3, #0]
   d718a:	689b      	ldr	r3, [r3, #8]
   d718c:	9301      	str	r3, [sp, #4]
   d718e:	bd08      	pop	{r3, pc}
   d7190:	0003022c 	.word	0x0003022c

000d7194 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d7194:	b508      	push	{r3, lr}
   d7196:	4b02      	ldr	r3, [pc, #8]	; (d71a0 <HAL_Get_Pin_Mode+0xc>)
   d7198:	681b      	ldr	r3, [r3, #0]
   d719a:	68db      	ldr	r3, [r3, #12]
   d719c:	9301      	str	r3, [sp, #4]
   d719e:	bd08      	pop	{r3, pc}
   d71a0:	0003022c 	.word	0x0003022c

000d71a4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d71a4:	b508      	push	{r3, lr}
   d71a6:	4b02      	ldr	r3, [pc, #8]	; (d71b0 <HAL_GPIO_Write+0xc>)
   d71a8:	681b      	ldr	r3, [r3, #0]
   d71aa:	691b      	ldr	r3, [r3, #16]
   d71ac:	9301      	str	r3, [sp, #4]
   d71ae:	bd08      	pop	{r3, pc}
   d71b0:	0003022c 	.word	0x0003022c

000d71b4 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d71b4:	b508      	push	{r3, lr}
   d71b6:	4b02      	ldr	r3, [pc, #8]	; (d71c0 <hal_i2c_begin+0xc>)
   d71b8:	681b      	ldr	r3, [r3, #0]
   d71ba:	68db      	ldr	r3, [r3, #12]
   d71bc:	9301      	str	r3, [sp, #4]
   d71be:	bd08      	pop	{r3, pc}
   d71c0:	00030228 	.word	0x00030228

000d71c4 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d71c4:	b508      	push	{r3, lr}
   d71c6:	4b02      	ldr	r3, [pc, #8]	; (d71d0 <hal_i2c_begin_transmission+0xc>)
   d71c8:	681b      	ldr	r3, [r3, #0]
   d71ca:	699b      	ldr	r3, [r3, #24]
   d71cc:	9301      	str	r3, [sp, #4]
   d71ce:	bd08      	pop	{r3, pc}
   d71d0:	00030228 	.word	0x00030228

000d71d4 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d71d4:	b508      	push	{r3, lr}
   d71d6:	4b02      	ldr	r3, [pc, #8]	; (d71e0 <hal_i2c_end_transmission+0xc>)
   d71d8:	681b      	ldr	r3, [r3, #0]
   d71da:	69db      	ldr	r3, [r3, #28]
   d71dc:	9301      	str	r3, [sp, #4]
   d71de:	bd08      	pop	{r3, pc}
   d71e0:	00030228 	.word	0x00030228

000d71e4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d71e4:	b508      	push	{r3, lr}
   d71e6:	4b02      	ldr	r3, [pc, #8]	; (d71f0 <hal_i2c_write+0xc>)
   d71e8:	681b      	ldr	r3, [r3, #0]
   d71ea:	6a1b      	ldr	r3, [r3, #32]
   d71ec:	9301      	str	r3, [sp, #4]
   d71ee:	bd08      	pop	{r3, pc}
   d71f0:	00030228 	.word	0x00030228

000d71f4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d71f4:	b508      	push	{r3, lr}
   d71f6:	4b02      	ldr	r3, [pc, #8]	; (d7200 <hal_i2c_available+0xc>)
   d71f8:	681b      	ldr	r3, [r3, #0]
   d71fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d71fc:	9301      	str	r3, [sp, #4]
   d71fe:	bd08      	pop	{r3, pc}
   d7200:	00030228 	.word	0x00030228

000d7204 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d7204:	b508      	push	{r3, lr}
   d7206:	4b02      	ldr	r3, [pc, #8]	; (d7210 <hal_i2c_read+0xc>)
   d7208:	681b      	ldr	r3, [r3, #0]
   d720a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d720c:	9301      	str	r3, [sp, #4]
   d720e:	bd08      	pop	{r3, pc}
   d7210:	00030228 	.word	0x00030228

000d7214 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d7214:	b508      	push	{r3, lr}
   d7216:	4b02      	ldr	r3, [pc, #8]	; (d7220 <hal_i2c_peek+0xc>)
   d7218:	681b      	ldr	r3, [r3, #0]
   d721a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d721c:	9301      	str	r3, [sp, #4]
   d721e:	bd08      	pop	{r3, pc}
   d7220:	00030228 	.word	0x00030228

000d7224 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d7224:	b508      	push	{r3, lr}
   d7226:	4b02      	ldr	r3, [pc, #8]	; (d7230 <hal_i2c_flush+0xc>)
   d7228:	681b      	ldr	r3, [r3, #0]
   d722a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d722c:	9301      	str	r3, [sp, #4]
   d722e:	bd08      	pop	{r3, pc}
   d7230:	00030228 	.word	0x00030228

000d7234 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d7234:	b508      	push	{r3, lr}
   d7236:	4b02      	ldr	r3, [pc, #8]	; (d7240 <hal_i2c_is_enabled+0xc>)
   d7238:	681b      	ldr	r3, [r3, #0]
   d723a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d723c:	9301      	str	r3, [sp, #4]
   d723e:	bd08      	pop	{r3, pc}
   d7240:	00030228 	.word	0x00030228

000d7244 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d7244:	b508      	push	{r3, lr}
   d7246:	4b02      	ldr	r3, [pc, #8]	; (d7250 <hal_i2c_init+0xc>)
   d7248:	681b      	ldr	r3, [r3, #0]
   d724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d724c:	9301      	str	r3, [sp, #4]
   d724e:	bd08      	pop	{r3, pc}
   d7250:	00030228 	.word	0x00030228

000d7254 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d7254:	b508      	push	{r3, lr}
   d7256:	4b02      	ldr	r3, [pc, #8]	; (d7260 <hal_i2c_request_ex+0xc>)
   d7258:	681b      	ldr	r3, [r3, #0]
   d725a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d725c:	9301      	str	r3, [sp, #4]
   d725e:	bd08      	pop	{r3, pc}
   d7260:	00030228 	.word	0x00030228

000d7264 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d7264:	b508      	push	{r3, lr}
   d7266:	4b02      	ldr	r3, [pc, #8]	; (d7270 <inet_inet_ntop+0xc>)
   d7268:	681b      	ldr	r3, [r3, #0]
   d726a:	695b      	ldr	r3, [r3, #20]
   d726c:	9301      	str	r3, [sp, #4]
   d726e:	bd08      	pop	{r3, pc}
   d7270:	00030264 	.word	0x00030264

000d7274 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d7274:	b508      	push	{r3, lr}
   d7276:	4b02      	ldr	r3, [pc, #8]	; (d7280 <netdb_freeaddrinfo+0xc>)
   d7278:	681b      	ldr	r3, [r3, #0]
   d727a:	689b      	ldr	r3, [r3, #8]
   d727c:	9301      	str	r3, [sp, #4]
   d727e:	bd08      	pop	{r3, pc}
   d7280:	00030268 	.word	0x00030268

000d7284 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d7284:	b508      	push	{r3, lr}
   d7286:	4b02      	ldr	r3, [pc, #8]	; (d7290 <netdb_getaddrinfo+0xc>)
   d7288:	681b      	ldr	r3, [r3, #0]
   d728a:	68db      	ldr	r3, [r3, #12]
   d728c:	9301      	str	r3, [sp, #4]
   d728e:	bd08      	pop	{r3, pc}
   d7290:	00030268 	.word	0x00030268

000d7294 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d7294:	b508      	push	{r3, lr}
   d7296:	4b02      	ldr	r3, [pc, #8]	; (d72a0 <hal_spi_begin+0xc>)
   d7298:	681b      	ldr	r3, [r3, #0]
   d729a:	681b      	ldr	r3, [r3, #0]
   d729c:	9301      	str	r3, [sp, #4]
   d729e:	bd08      	pop	{r3, pc}
   d72a0:	00030230 	.word	0x00030230

000d72a4 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d72a4:	b508      	push	{r3, lr}
   d72a6:	4b02      	ldr	r3, [pc, #8]	; (d72b0 <hal_spi_transfer+0xc>)
   d72a8:	681b      	ldr	r3, [r3, #0]
   d72aa:	695b      	ldr	r3, [r3, #20]
   d72ac:	9301      	str	r3, [sp, #4]
   d72ae:	bd08      	pop	{r3, pc}
   d72b0:	00030230 	.word	0x00030230

000d72b4 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d72b4:	b508      	push	{r3, lr}
   d72b6:	4b02      	ldr	r3, [pc, #8]	; (d72c0 <hal_spi_init+0xc>)
   d72b8:	681b      	ldr	r3, [r3, #0]
   d72ba:	69db      	ldr	r3, [r3, #28]
   d72bc:	9301      	str	r3, [sp, #4]
   d72be:	bd08      	pop	{r3, pc}
   d72c0:	00030230 	.word	0x00030230

000d72c4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d72c4:	b508      	push	{r3, lr}
   d72c6:	4b02      	ldr	r3, [pc, #8]	; (d72d0 <hal_spi_is_enabled+0xc>)
   d72c8:	681b      	ldr	r3, [r3, #0]
   d72ca:	6a1b      	ldr	r3, [r3, #32]
   d72cc:	9301      	str	r3, [sp, #4]
   d72ce:	bd08      	pop	{r3, pc}
   d72d0:	00030230 	.word	0x00030230

000d72d4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d72d4:	b508      	push	{r3, lr}
   d72d6:	4b02      	ldr	r3, [pc, #8]	; (d72e0 <hal_spi_info+0xc>)
   d72d8:	681b      	ldr	r3, [r3, #0]
   d72da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d72dc:	9301      	str	r3, [sp, #4]
   d72de:	bd08      	pop	{r3, pc}
   d72e0:	00030230 	.word	0x00030230

000d72e4 <hal_spi_transfer_dma>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
   d72e4:	b508      	push	{r3, lr}
   d72e6:	4b02      	ldr	r3, [pc, #8]	; (d72f0 <hal_spi_transfer_dma+0xc>)
   d72e8:	681b      	ldr	r3, [r3, #0]
   d72ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d72ec:	9301      	str	r3, [sp, #4]
   d72ee:	bd08      	pop	{r3, pc}
   d72f0:	00030230 	.word	0x00030230

000d72f4 <hal_spi_transfer_dma_status>:
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
   d72f4:	b508      	push	{r3, lr}
   d72f6:	4b02      	ldr	r3, [pc, #8]	; (d7300 <hal_spi_transfer_dma_status+0xc>)
   d72f8:	681b      	ldr	r3, [r3, #0]
   d72fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d72fc:	9301      	str	r3, [sp, #4]
   d72fe:	bd08      	pop	{r3, pc}
   d7300:	00030230 	.word	0x00030230

000d7304 <hal_spi_set_settings>:
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d7304:	b508      	push	{r3, lr}
   d7306:	4b02      	ldr	r3, [pc, #8]	; (d7310 <hal_spi_set_settings+0xc>)
   d7308:	681b      	ldr	r3, [r3, #0]
   d730a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d730c:	9301      	str	r3, [sp, #4]
   d730e:	bd08      	pop	{r3, pc}
   d7310:	00030230 	.word	0x00030230

000d7314 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d7314:	b508      	push	{r3, lr}
   d7316:	4b02      	ldr	r3, [pc, #8]	; (d7320 <hal_spi_acquire+0xc>)
   d7318:	681b      	ldr	r3, [r3, #0]
   d731a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d731c:	9301      	str	r3, [sp, #4]
   d731e:	bd08      	pop	{r3, pc}
   d7320:	00030230 	.word	0x00030230

000d7324 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d7324:	b508      	push	{r3, lr}
   d7326:	4b02      	ldr	r3, [pc, #8]	; (d7330 <hal_spi_release+0xc>)
   d7328:	681b      	ldr	r3, [r3, #0]
   d732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d732c:	9301      	str	r3, [sp, #4]
   d732e:	bd08      	pop	{r3, pc}
   d7330:	00030230 	.word	0x00030230

000d7334 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d7334:	b508      	push	{r3, lr}
   d7336:	4b02      	ldr	r3, [pc, #8]	; (d7340 <hal_usart_init+0xc>)
   d7338:	681b      	ldr	r3, [r3, #0]
   d733a:	681b      	ldr	r3, [r3, #0]
   d733c:	9301      	str	r3, [sp, #4]
   d733e:	bd08      	pop	{r3, pc}
   d7340:	0003023c 	.word	0x0003023c

000d7344 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d7344:	b508      	push	{r3, lr}
   d7346:	4b02      	ldr	r3, [pc, #8]	; (d7350 <hal_usart_write+0xc>)
   d7348:	681b      	ldr	r3, [r3, #0]
   d734a:	68db      	ldr	r3, [r3, #12]
   d734c:	9301      	str	r3, [sp, #4]
   d734e:	bd08      	pop	{r3, pc}
   d7350:	0003023c 	.word	0x0003023c

000d7354 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d7354:	b508      	push	{r3, lr}
   d7356:	4b02      	ldr	r3, [pc, #8]	; (d7360 <hal_usart_available+0xc>)
   d7358:	681b      	ldr	r3, [r3, #0]
   d735a:	691b      	ldr	r3, [r3, #16]
   d735c:	9301      	str	r3, [sp, #4]
   d735e:	bd08      	pop	{r3, pc}
   d7360:	0003023c 	.word	0x0003023c

000d7364 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d7364:	b508      	push	{r3, lr}
   d7366:	4b02      	ldr	r3, [pc, #8]	; (d7370 <hal_usart_read+0xc>)
   d7368:	681b      	ldr	r3, [r3, #0]
   d736a:	695b      	ldr	r3, [r3, #20]
   d736c:	9301      	str	r3, [sp, #4]
   d736e:	bd08      	pop	{r3, pc}
   d7370:	0003023c 	.word	0x0003023c

000d7374 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d7374:	b508      	push	{r3, lr}
   d7376:	4b02      	ldr	r3, [pc, #8]	; (d7380 <hal_usart_peek+0xc>)
   d7378:	681b      	ldr	r3, [r3, #0]
   d737a:	699b      	ldr	r3, [r3, #24]
   d737c:	9301      	str	r3, [sp, #4]
   d737e:	bd08      	pop	{r3, pc}
   d7380:	0003023c 	.word	0x0003023c

000d7384 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d7384:	b508      	push	{r3, lr}
   d7386:	4b02      	ldr	r3, [pc, #8]	; (d7390 <hal_usart_flush+0xc>)
   d7388:	681b      	ldr	r3, [r3, #0]
   d738a:	69db      	ldr	r3, [r3, #28]
   d738c:	9301      	str	r3, [sp, #4]
   d738e:	bd08      	pop	{r3, pc}
   d7390:	0003023c 	.word	0x0003023c

000d7394 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d7394:	b508      	push	{r3, lr}
   d7396:	4b02      	ldr	r3, [pc, #8]	; (d73a0 <hal_usart_is_enabled+0xc>)
   d7398:	681b      	ldr	r3, [r3, #0]
   d739a:	6a1b      	ldr	r3, [r3, #32]
   d739c:	9301      	str	r3, [sp, #4]
   d739e:	bd08      	pop	{r3, pc}
   d73a0:	0003023c 	.word	0x0003023c

000d73a4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d73a4:	b508      	push	{r3, lr}
   d73a6:	4b02      	ldr	r3, [pc, #8]	; (d73b0 <hal_usart_available_data_for_write+0xc>)
   d73a8:	681b      	ldr	r3, [r3, #0]
   d73aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d73ac:	9301      	str	r3, [sp, #4]
   d73ae:	bd08      	pop	{r3, pc}
   d73b0:	0003023c 	.word	0x0003023c

000d73b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d73b4:	b508      	push	{r3, lr}
   d73b6:	4b02      	ldr	r3, [pc, #8]	; (d73c0 <HAL_USB_USART_Init+0xc>)
   d73b8:	681b      	ldr	r3, [r3, #0]
   d73ba:	681b      	ldr	r3, [r3, #0]
   d73bc:	9301      	str	r3, [sp, #4]
   d73be:	bd08      	pop	{r3, pc}
   d73c0:	0003024c 	.word	0x0003024c

000d73c4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d73c4:	b508      	push	{r3, lr}
   d73c6:	4b02      	ldr	r3, [pc, #8]	; (d73d0 <HAL_USB_USART_Begin+0xc>)
   d73c8:	681b      	ldr	r3, [r3, #0]
   d73ca:	685b      	ldr	r3, [r3, #4]
   d73cc:	9301      	str	r3, [sp, #4]
   d73ce:	bd08      	pop	{r3, pc}
   d73d0:	0003024c 	.word	0x0003024c

000d73d4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d73d4:	b508      	push	{r3, lr}
   d73d6:	4b02      	ldr	r3, [pc, #8]	; (d73e0 <HAL_USB_USART_Available_Data+0xc>)
   d73d8:	681b      	ldr	r3, [r3, #0]
   d73da:	691b      	ldr	r3, [r3, #16]
   d73dc:	9301      	str	r3, [sp, #4]
   d73de:	bd08      	pop	{r3, pc}
   d73e0:	0003024c 	.word	0x0003024c

000d73e4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d73e4:	b508      	push	{r3, lr}
   d73e6:	4b02      	ldr	r3, [pc, #8]	; (d73f0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d73e8:	681b      	ldr	r3, [r3, #0]
   d73ea:	695b      	ldr	r3, [r3, #20]
   d73ec:	9301      	str	r3, [sp, #4]
   d73ee:	bd08      	pop	{r3, pc}
   d73f0:	0003024c 	.word	0x0003024c

000d73f4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d73f4:	b508      	push	{r3, lr}
   d73f6:	4b02      	ldr	r3, [pc, #8]	; (d7400 <HAL_USB_USART_Receive_Data+0xc>)
   d73f8:	681b      	ldr	r3, [r3, #0]
   d73fa:	699b      	ldr	r3, [r3, #24]
   d73fc:	9301      	str	r3, [sp, #4]
   d73fe:	bd08      	pop	{r3, pc}
   d7400:	0003024c 	.word	0x0003024c

000d7404 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d7404:	b508      	push	{r3, lr}
   d7406:	4b02      	ldr	r3, [pc, #8]	; (d7410 <HAL_USB_USART_Send_Data+0xc>)
   d7408:	681b      	ldr	r3, [r3, #0]
   d740a:	69db      	ldr	r3, [r3, #28]
   d740c:	9301      	str	r3, [sp, #4]
   d740e:	bd08      	pop	{r3, pc}
   d7410:	0003024c 	.word	0x0003024c

000d7414 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d7414:	b508      	push	{r3, lr}
   d7416:	4b02      	ldr	r3, [pc, #8]	; (d7420 <HAL_USB_USART_Flush_Data+0xc>)
   d7418:	681b      	ldr	r3, [r3, #0]
   d741a:	6a1b      	ldr	r3, [r3, #32]
   d741c:	9301      	str	r3, [sp, #4]
   d741e:	bd08      	pop	{r3, pc}
   d7420:	0003024c 	.word	0x0003024c

000d7424 <HAL_USB_USART_Is_Enabled>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
   d7424:	b508      	push	{r3, lr}
   d7426:	4b02      	ldr	r3, [pc, #8]	; (d7430 <HAL_USB_USART_Is_Enabled+0xc>)
   d7428:	681b      	ldr	r3, [r3, #0]
   d742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d742c:	9301      	str	r3, [sp, #4]
   d742e:	bd08      	pop	{r3, pc}
   d7430:	0003024c 	.word	0x0003024c

000d7434 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d7434:	b508      	push	{r3, lr}
   d7436:	4b02      	ldr	r3, [pc, #8]	; (d7440 <set_system_mode+0xc>)
   d7438:	681b      	ldr	r3, [r3, #0]
   d743a:	685b      	ldr	r3, [r3, #4]
   d743c:	9301      	str	r3, [sp, #4]
   d743e:	bd08      	pop	{r3, pc}
   d7440:	00030220 	.word	0x00030220

000d7444 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d7444:	b508      	push	{r3, lr}
   d7446:	4b02      	ldr	r3, [pc, #8]	; (d7450 <system_delay_ms+0xc>)
   d7448:	681b      	ldr	r3, [r3, #0]
   d744a:	695b      	ldr	r3, [r3, #20]
   d744c:	9301      	str	r3, [sp, #4]
   d744e:	bd08      	pop	{r3, pc}
   d7450:	00030220 	.word	0x00030220

000d7454 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d7454:	b508      	push	{r3, lr}
   d7456:	4b02      	ldr	r3, [pc, #8]	; (d7460 <system_thread_set_state+0xc>)
   d7458:	681b      	ldr	r3, [r3, #0]
   d745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d745c:	9301      	str	r3, [sp, #4]
   d745e:	bd08      	pop	{r3, pc}
   d7460:	00030220 	.word	0x00030220

000d7464 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d7464:	b508      	push	{r3, lr}
   d7466:	4b03      	ldr	r3, [pc, #12]	; (d7474 <system_ctrl_set_app_request_handler+0x10>)
   d7468:	681b      	ldr	r3, [r3, #0]
   d746a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d746e:	9301      	str	r3, [sp, #4]
   d7470:	bd08      	pop	{r3, pc}
   d7472:	0000      	.short	0x0000
   d7474:	00030220 	.word	0x00030220

000d7478 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d7478:	b508      	push	{r3, lr}
   d747a:	4b03      	ldr	r3, [pc, #12]	; (d7488 <system_ctrl_set_result+0x10>)
   d747c:	681b      	ldr	r3, [r3, #0]
   d747e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d7482:	9301      	str	r3, [sp, #4]
   d7484:	bd08      	pop	{r3, pc}
   d7486:	0000      	.short	0x0000
   d7488:	00030220 	.word	0x00030220

000d748c <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d748c:	b508      	push	{r3, lr}
   d748e:	4b02      	ldr	r3, [pc, #8]	; (d7498 <spark_process+0xc>)
   d7490:	681b      	ldr	r3, [r3, #0]
   d7492:	689b      	ldr	r3, [r3, #8]
   d7494:	9301      	str	r3, [sp, #4]
   d7496:	bd08      	pop	{r3, pc}
   d7498:	00030244 	.word	0x00030244

000d749c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d749c:	b508      	push	{r3, lr}
   d749e:	4b02      	ldr	r3, [pc, #8]	; (d74a8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d74a0:	681b      	ldr	r3, [r3, #0]
   d74a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d74a4:	9301      	str	r3, [sp, #4]
   d74a6:	bd08      	pop	{r3, pc}
   d74a8:	00030244 	.word	0x00030244

000d74ac <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d74ac:	b508      	push	{r3, lr}
   d74ae:	4b02      	ldr	r3, [pc, #8]	; (d74b8 <network_connect+0xc>)
   d74b0:	681b      	ldr	r3, [r3, #0]
   d74b2:	685b      	ldr	r3, [r3, #4]
   d74b4:	9301      	str	r3, [sp, #4]
   d74b6:	bd08      	pop	{r3, pc}
   d74b8:	00030240 	.word	0x00030240

000d74bc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d74bc:	b508      	push	{r3, lr}
   d74be:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <network_connecting+0xc>)
   d74c0:	681b      	ldr	r3, [r3, #0]
   d74c2:	689b      	ldr	r3, [r3, #8]
   d74c4:	9301      	str	r3, [sp, #4]
   d74c6:	bd08      	pop	{r3, pc}
   d74c8:	00030240 	.word	0x00030240

000d74cc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d74cc:	b508      	push	{r3, lr}
   d74ce:	4b02      	ldr	r3, [pc, #8]	; (d74d8 <network_disconnect+0xc>)
   d74d0:	681b      	ldr	r3, [r3, #0]
   d74d2:	68db      	ldr	r3, [r3, #12]
   d74d4:	9301      	str	r3, [sp, #4]
   d74d6:	bd08      	pop	{r3, pc}
   d74d8:	00030240 	.word	0x00030240

000d74dc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d74dc:	b508      	push	{r3, lr}
   d74de:	4b02      	ldr	r3, [pc, #8]	; (d74e8 <network_ready+0xc>)
   d74e0:	681b      	ldr	r3, [r3, #0]
   d74e2:	691b      	ldr	r3, [r3, #16]
   d74e4:	9301      	str	r3, [sp, #4]
   d74e6:	bd08      	pop	{r3, pc}
   d74e8:	00030240 	.word	0x00030240

000d74ec <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d74ec:	b508      	push	{r3, lr}
   d74ee:	4b02      	ldr	r3, [pc, #8]	; (d74f8 <network_on+0xc>)
   d74f0:	681b      	ldr	r3, [r3, #0]
   d74f2:	695b      	ldr	r3, [r3, #20]
   d74f4:	9301      	str	r3, [sp, #4]
   d74f6:	bd08      	pop	{r3, pc}
   d74f8:	00030240 	.word	0x00030240

000d74fc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d74fc:	b508      	push	{r3, lr}
   d74fe:	4b02      	ldr	r3, [pc, #8]	; (d7508 <network_off+0xc>)
   d7500:	681b      	ldr	r3, [r3, #0]
   d7502:	699b      	ldr	r3, [r3, #24]
   d7504:	9301      	str	r3, [sp, #4]
   d7506:	bd08      	pop	{r3, pc}
   d7508:	00030240 	.word	0x00030240

000d750c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d750c:	b508      	push	{r3, lr}
   d750e:	4b02      	ldr	r3, [pc, #8]	; (d7518 <network_listen+0xc>)
   d7510:	681b      	ldr	r3, [r3, #0]
   d7512:	69db      	ldr	r3, [r3, #28]
   d7514:	9301      	str	r3, [sp, #4]
   d7516:	bd08      	pop	{r3, pc}
   d7518:	00030240 	.word	0x00030240

000d751c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d751c:	b508      	push	{r3, lr}
   d751e:	4b02      	ldr	r3, [pc, #8]	; (d7528 <network_listening+0xc>)
   d7520:	681b      	ldr	r3, [r3, #0]
   d7522:	6a1b      	ldr	r3, [r3, #32]
   d7524:	9301      	str	r3, [sp, #4]
   d7526:	bd08      	pop	{r3, pc}
   d7528:	00030240 	.word	0x00030240

000d752c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d752c:	b508      	push	{r3, lr}
   d752e:	4b02      	ldr	r3, [pc, #8]	; (d7538 <network_set_listen_timeout+0xc>)
   d7530:	681b      	ldr	r3, [r3, #0]
   d7532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d7534:	9301      	str	r3, [sp, #4]
   d7536:	bd08      	pop	{r3, pc}
   d7538:	00030240 	.word	0x00030240

000d753c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d753c:	b508      	push	{r3, lr}
   d753e:	4b02      	ldr	r3, [pc, #8]	; (d7548 <network_get_listen_timeout+0xc>)
   d7540:	681b      	ldr	r3, [r3, #0]
   d7542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d7544:	9301      	str	r3, [sp, #4]
   d7546:	bd08      	pop	{r3, pc}
   d7548:	00030240 	.word	0x00030240

000d754c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d754c:	b508      	push	{r3, lr}
   d754e:	4b02      	ldr	r3, [pc, #8]	; (d7558 <network_is_on+0xc>)
   d7550:	681b      	ldr	r3, [r3, #0]
   d7552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d7554:	9301      	str	r3, [sp, #4]
   d7556:	bd08      	pop	{r3, pc}
   d7558:	00030240 	.word	0x00030240

000d755c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d755c:	b508      	push	{r3, lr}
   d755e:	4b02      	ldr	r3, [pc, #8]	; (d7568 <network_is_off+0xc>)
   d7560:	681b      	ldr	r3, [r3, #0]
   d7562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7564:	9301      	str	r3, [sp, #4]
   d7566:	bd08      	pop	{r3, pc}
   d7568:	00030240 	.word	0x00030240

000d756c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d756c:	b508      	push	{r3, lr}
   d756e:	4b02      	ldr	r3, [pc, #8]	; (d7578 <malloc+0xc>)
   d7570:	681b      	ldr	r3, [r3, #0]
   d7572:	681b      	ldr	r3, [r3, #0]
   d7574:	9301      	str	r3, [sp, #4]
   d7576:	bd08      	pop	{r3, pc}
   d7578:	0003021c 	.word	0x0003021c

000d757c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d757c:	b508      	push	{r3, lr}
   d757e:	4b02      	ldr	r3, [pc, #8]	; (d7588 <free+0xc>)
   d7580:	681b      	ldr	r3, [r3, #0]
   d7582:	685b      	ldr	r3, [r3, #4]
   d7584:	9301      	str	r3, [sp, #4]
   d7586:	bd08      	pop	{r3, pc}
   d7588:	0003021c 	.word	0x0003021c

000d758c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d758c:	b508      	push	{r3, lr}
   d758e:	4b02      	ldr	r3, [pc, #8]	; (d7598 <vsnprintf+0xc>)
   d7590:	681b      	ldr	r3, [r3, #0]
   d7592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7594:	9301      	str	r3, [sp, #4]
   d7596:	bd08      	pop	{r3, pc}
   d7598:	0003021c 	.word	0x0003021c

000d759c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d759c:	b508      	push	{r3, lr}
   d759e:	4b02      	ldr	r3, [pc, #8]	; (d75a8 <newlib_impure_ptr_callback+0xc>)
   d75a0:	681b      	ldr	r3, [r3, #0]
   d75a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d75a4:	9301      	str	r3, [sp, #4]
   d75a6:	bd08      	pop	{r3, pc}
   d75a8:	0003021c 	.word	0x0003021c

000d75ac <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d75ac:	2100      	movs	r1, #0
   d75ae:	f7ff bf49 	b.w	d7444 <system_delay_ms>
	...

000d75b4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d75b4:	4802      	ldr	r0, [pc, #8]	; (d75c0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d75b6:	2300      	movs	r3, #0
   d75b8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d75ba:	f7ff bdbb 	b.w	d7134 <os_mutex_recursive_create>
   d75be:	bf00      	nop
   d75c0:	2003e5b4 	.word	0x2003e5b4

000d75c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d75c4:	2200      	movs	r2, #0
   d75c6:	6840      	ldr	r0, [r0, #4]
   d75c8:	4611      	mov	r1, r2
   d75ca:	f7ff bfa7 	b.w	d751c <network_listening>

000d75ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d75ce:	2200      	movs	r2, #0
   d75d0:	6840      	ldr	r0, [r0, #4]
   d75d2:	4611      	mov	r1, r2
   d75d4:	f7ff bfb2 	b.w	d753c <network_get_listen_timeout>

000d75d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d75d8:	6840      	ldr	r0, [r0, #4]
   d75da:	2200      	movs	r2, #0
   d75dc:	f7ff bfa6 	b.w	d752c <network_set_listen_timeout>

000d75e0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d75e0:	6840      	ldr	r0, [r0, #4]
   d75e2:	2200      	movs	r2, #0
   d75e4:	f081 0101 	eor.w	r1, r1, #1
   d75e8:	f7ff bf90 	b.w	d750c <network_listen>

000d75ec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d75ec:	2300      	movs	r3, #0
   d75ee:	6840      	ldr	r0, [r0, #4]
   d75f0:	461a      	mov	r2, r3
   d75f2:	4619      	mov	r1, r3
   d75f4:	f7ff bf82 	b.w	d74fc <network_off>

000d75f8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d75f8:	2300      	movs	r3, #0
   d75fa:	6840      	ldr	r0, [r0, #4]
   d75fc:	461a      	mov	r2, r3
   d75fe:	4619      	mov	r1, r3
   d7600:	f7ff bf74 	b.w	d74ec <network_on>

000d7604 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d7604:	2200      	movs	r2, #0
   d7606:	6840      	ldr	r0, [r0, #4]
   d7608:	4611      	mov	r1, r2
   d760a:	f7ff bf67 	b.w	d74dc <network_ready>

000d760e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d760e:	2200      	movs	r2, #0
   d7610:	6840      	ldr	r0, [r0, #4]
   d7612:	4611      	mov	r1, r2
   d7614:	f7ff bf52 	b.w	d74bc <network_connecting>

000d7618 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7618:	6840      	ldr	r0, [r0, #4]
   d761a:	2200      	movs	r2, #0
   d761c:	2102      	movs	r1, #2
   d761e:	f7ff bf55 	b.w	d74cc <network_disconnect>

000d7622 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7622:	2300      	movs	r3, #0
   d7624:	6840      	ldr	r0, [r0, #4]
   d7626:	461a      	mov	r2, r3
   d7628:	f7ff bf40 	b.w	d74ac <network_connect>

000d762c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d762c:	4b02      	ldr	r3, [pc, #8]	; (d7638 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d762e:	2203      	movs	r2, #3
   d7630:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d7632:	4a02      	ldr	r2, [pc, #8]	; (d763c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d7634:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d7636:	4770      	bx	lr
   d7638:	2003e5b8 	.word	0x2003e5b8
   d763c:	000d92ac 	.word	0x000d92ac

000d7640 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7640:	4770      	bx	lr

000d7642 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7644:	4606      	mov	r6, r0
   d7646:	4615      	mov	r5, r2
   d7648:	460c      	mov	r4, r1
   d764a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d764c:	42bc      	cmp	r4, r7
   d764e:	d006      	beq.n	d765e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7650:	6833      	ldr	r3, [r6, #0]
   d7652:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7656:	689b      	ldr	r3, [r3, #8]
   d7658:	4630      	mov	r0, r6
   d765a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d765c:	e7f6      	b.n	d764c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d765e:	4628      	mov	r0, r5
   d7660:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7662 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7662:	7c00      	ldrb	r0, [r0, #16]
   d7664:	2200      	movs	r2, #0
   d7666:	f7ff bdbd 	b.w	d71e4 <hal_i2c_write>

000d766a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d766a:	7c00      	ldrb	r0, [r0, #16]
   d766c:	2100      	movs	r1, #0
   d766e:	f7ff bdc1 	b.w	d71f4 <hal_i2c_available>

000d7672 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7672:	7c00      	ldrb	r0, [r0, #16]
   d7674:	2100      	movs	r1, #0
   d7676:	f7ff bdc5 	b.w	d7204 <hal_i2c_read>

000d767a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d767a:	7c00      	ldrb	r0, [r0, #16]
   d767c:	2100      	movs	r1, #0
   d767e:	f7ff bdc9 	b.w	d7214 <hal_i2c_peek>

000d7682 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7682:	7c00      	ldrb	r0, [r0, #16]
   d7684:	2100      	movs	r1, #0
   d7686:	f7ff bdcd 	b.w	d7224 <hal_i2c_flush>

000d768a <_ZN7TwoWireD0Ev>:
   d768a:	b510      	push	{r4, lr}
   d768c:	2114      	movs	r1, #20
   d768e:	4604      	mov	r4, r0
   d7690:	f000 fe42 	bl	d8318 <_ZdlPvj>
   d7694:	4620      	mov	r0, r4
   d7696:	bd10      	pop	{r4, pc}

000d7698 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7698:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d769a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d769e:	4604      	mov	r4, r0
   d76a0:	4608      	mov	r0, r1
   d76a2:	2100      	movs	r1, #0
   d76a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d76a8:	4b03      	ldr	r3, [pc, #12]	; (d76b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d76aa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d76ac:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d76ae:	4611      	mov	r1, r2
   d76b0:	f7ff fdc8 	bl	d7244 <hal_i2c_init>
}
   d76b4:	4620      	mov	r0, r4
   d76b6:	bd10      	pop	{r4, pc}
   d76b8:	000d92e8 	.word	0x000d92e8

000d76bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d76bc:	2300      	movs	r3, #0
   d76be:	7c00      	ldrb	r0, [r0, #16]
   d76c0:	461a      	mov	r2, r3
   d76c2:	4619      	mov	r1, r3
   d76c4:	f7ff bd76 	b.w	d71b4 <hal_i2c_begin>

000d76c8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d76c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d76ca:	2200      	movs	r2, #0
   d76cc:	2314      	movs	r3, #20
   d76ce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d76d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d76d6:	780b      	ldrb	r3, [r1, #0]
   d76d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d76dc:	684b      	ldr	r3, [r1, #4]
   d76de:	9303      	str	r3, [sp, #12]
   d76e0:	68cb      	ldr	r3, [r1, #12]
   d76e2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d76e4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d76e6:	7a0b      	ldrb	r3, [r1, #8]
   d76e8:	9305      	str	r3, [sp, #20]
   d76ea:	a901      	add	r1, sp, #4
   d76ec:	f7ff fdb2 	bl	d7254 <hal_i2c_request_ex>
}
   d76f0:	b007      	add	sp, #28
   d76f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d76f6 <_ZN7TwoWire11requestFromEhjh>:
{
   d76f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d76f8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d76fa:	f88d 1000 	strb.w	r1, [sp]
   d76fe:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7702:	9103      	str	r1, [sp, #12]
   d7704:	bf18      	it	ne
   d7706:	2301      	movne	r3, #1
   d7708:	4669      	mov	r1, sp
    size_ = size;
   d770a:	9201      	str	r2, [sp, #4]
   d770c:	f88d 3008 	strb.w	r3, [sp, #8]
   d7710:	f7ff ffda 	bl	d76c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7714:	b005      	add	sp, #20
   d7716:	f85d fb04 	ldr.w	pc, [sp], #4

000d771a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d771a:	2301      	movs	r3, #1
   d771c:	f7ff bfeb 	b.w	d76f6 <_ZN7TwoWire11requestFromEhjh>

000d7720 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7720:	7c00      	ldrb	r0, [r0, #16]
   d7722:	2200      	movs	r2, #0
   d7724:	f7ff bd4e 	b.w	d71c4 <hal_i2c_begin_transmission>

000d7728 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7728:	b2c9      	uxtb	r1, r1
   d772a:	f7ff bff9 	b.w	d7720 <_ZN7TwoWire17beginTransmissionEh>

000d772e <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d772e:	7c00      	ldrb	r0, [r0, #16]
   d7730:	2200      	movs	r2, #0
   d7732:	f7ff bd4f 	b.w	d71d4 <hal_i2c_end_transmission>

000d7736 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7736:	2101      	movs	r1, #1
   d7738:	f7ff bff9 	b.w	d772e <_ZN7TwoWire15endTransmissionEh>

000d773c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d773c:	4770      	bx	lr

000d773e <_ZN9IPAddressD0Ev>:
   d773e:	b510      	push	{r4, lr}
   d7740:	2118      	movs	r1, #24
   d7742:	4604      	mov	r4, r0
   d7744:	f000 fde8 	bl	d8318 <_ZdlPvj>
   d7748:	4620      	mov	r0, r4
   d774a:	bd10      	pop	{r4, pc}

000d774c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d774c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d774e:	7d03      	ldrb	r3, [r0, #20]
   d7750:	2b06      	cmp	r3, #6
{
   d7752:	b08d      	sub	sp, #52	; 0x34
   d7754:	460e      	mov	r6, r1
   d7756:	f100 0704 	add.w	r7, r0, #4
   d775a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d775e:	d012      	beq.n	d7786 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7760:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7764:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7768:	220a      	movs	r2, #10
   d776a:	4630      	mov	r0, r6
   d776c:	f000 f945 	bl	d79fa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7770:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7772:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7774:	d019      	beq.n	d77aa <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7776:	2c00      	cmp	r4, #0
   d7778:	d0f4      	beq.n	d7764 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d777a:	212e      	movs	r1, #46	; 0x2e
   d777c:	4630      	mov	r0, r6
   d777e:	f000 f921 	bl	d79c4 <_ZN5Print5printEc>
   d7782:	4404      	add	r4, r0
   d7784:	e7ee      	b.n	d7764 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7786:	232f      	movs	r3, #47	; 0x2f
   d7788:	466a      	mov	r2, sp
   d778a:	4639      	mov	r1, r7
   d778c:	200a      	movs	r0, #10
		buf[0] = 0;
   d778e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7792:	f7ff fd67 	bl	d7264 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7796:	4668      	mov	r0, sp
   d7798:	f001 fb14 	bl	d8dc4 <strlen>
   d779c:	6833      	ldr	r3, [r6, #0]
   d779e:	4602      	mov	r2, r0
   d77a0:	68db      	ldr	r3, [r3, #12]
   d77a2:	4669      	mov	r1, sp
   d77a4:	4630      	mov	r0, r6
   d77a6:	4798      	blx	r3
   d77a8:	4604      	mov	r4, r0
    }
    return n;
}
   d77aa:	4620      	mov	r0, r4
   d77ac:	b00d      	add	sp, #52	; 0x34
   d77ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d77b0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d77b0:	b510      	push	{r4, lr}
   d77b2:	4b05      	ldr	r3, [pc, #20]	; (d77c8 <_ZN9IPAddressC1Ev+0x18>)
   d77b4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d77b6:	2211      	movs	r2, #17
   d77b8:	f840 3b04 	str.w	r3, [r0], #4
   d77bc:	2100      	movs	r1, #0
   d77be:	f001 fad5 	bl	d8d6c <memset>
}
   d77c2:	4620      	mov	r0, r4
   d77c4:	bd10      	pop	{r4, pc}
   d77c6:	bf00      	nop
   d77c8:	000d9310 	.word	0x000d9310

000d77cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d77cc:	4603      	mov	r3, r0
   d77ce:	4a07      	ldr	r2, [pc, #28]	; (d77ec <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d77d0:	b510      	push	{r4, lr}
   d77d2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d77d6:	f101 0210 	add.w	r2, r1, #16
   d77da:	f851 4b04 	ldr.w	r4, [r1], #4
   d77de:	f843 4b04 	str.w	r4, [r3], #4
   d77e2:	4291      	cmp	r1, r2
   d77e4:	d1f9      	bne.n	d77da <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d77e6:	780a      	ldrb	r2, [r1, #0]
   d77e8:	701a      	strb	r2, [r3, #0]
}
   d77ea:	bd10      	pop	{r4, pc}
   d77ec:	000d9310 	.word	0x000d9310

000d77f0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d77f0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d77f2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d77f6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d77fa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d77fe:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7802:	2304      	movs	r3, #4
   d7804:	6041      	str	r1, [r0, #4]
   d7806:	7503      	strb	r3, [r0, #20]
}
   d7808:	bd10      	pop	{r4, pc}

000d780a <_ZN9IPAddressaSEPKh>:
{
   d780a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d780c:	78cb      	ldrb	r3, [r1, #3]
   d780e:	9300      	str	r3, [sp, #0]
   d7810:	788b      	ldrb	r3, [r1, #2]
   d7812:	784a      	ldrb	r2, [r1, #1]
   d7814:	7809      	ldrb	r1, [r1, #0]
   d7816:	f7ff ffeb 	bl	d77f0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d781a:	b002      	add	sp, #8
   d781c:	bd10      	pop	{r4, pc}
	...

000d7820 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7820:	4b01      	ldr	r3, [pc, #4]	; (d7828 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7822:	4a02      	ldr	r2, [pc, #8]	; (d782c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7824:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7826:	4770      	bx	lr
   d7828:	2003e5c0 	.word	0x2003e5c0
   d782c:	000d931c 	.word	0x000d931c

000d7830 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7830:	2300      	movs	r3, #0
   d7832:	6840      	ldr	r0, [r0, #4]
   d7834:	461a      	mov	r2, r3
   d7836:	f7ff be39 	b.w	d74ac <network_connect>

000d783a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d783a:	6840      	ldr	r0, [r0, #4]
   d783c:	2200      	movs	r2, #0
   d783e:	2102      	movs	r1, #2
   d7840:	f7ff be44 	b.w	d74cc <network_disconnect>

000d7844 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7844:	2200      	movs	r2, #0
   d7846:	6840      	ldr	r0, [r0, #4]
   d7848:	4611      	mov	r1, r2
   d784a:	f7ff be37 	b.w	d74bc <network_connecting>

000d784e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d784e:	2200      	movs	r2, #0
   d7850:	6840      	ldr	r0, [r0, #4]
   d7852:	4611      	mov	r1, r2
   d7854:	f7ff be42 	b.w	d74dc <network_ready>

000d7858 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7858:	2300      	movs	r3, #0
   d785a:	6840      	ldr	r0, [r0, #4]
   d785c:	461a      	mov	r2, r3
   d785e:	4619      	mov	r1, r3
   d7860:	f7ff be44 	b.w	d74ec <network_on>

000d7864 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7864:	2300      	movs	r3, #0
   d7866:	6840      	ldr	r0, [r0, #4]
   d7868:	461a      	mov	r2, r3
   d786a:	4619      	mov	r1, r3
   d786c:	f7ff be46 	b.w	d74fc <network_off>

000d7870 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d7870:	6840      	ldr	r0, [r0, #4]
   d7872:	2100      	movs	r1, #0
   d7874:	f7ff be6a 	b.w	d754c <network_is_on>

000d7878 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d7878:	6840      	ldr	r0, [r0, #4]
   d787a:	2100      	movs	r1, #0
   d787c:	f7ff be6e 	b.w	d755c <network_is_off>

000d7880 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7880:	6840      	ldr	r0, [r0, #4]
   d7882:	2200      	movs	r2, #0
   d7884:	f081 0101 	eor.w	r1, r1, #1
   d7888:	f7ff be40 	b.w	d750c <network_listen>

000d788c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d788c:	6840      	ldr	r0, [r0, #4]
   d788e:	2200      	movs	r2, #0
   d7890:	f7ff be4c 	b.w	d752c <network_set_listen_timeout>

000d7894 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7894:	2200      	movs	r2, #0
   d7896:	6840      	ldr	r0, [r0, #4]
   d7898:	4611      	mov	r1, r2
   d789a:	f7ff be4f 	b.w	d753c <network_get_listen_timeout>

000d789e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d789e:	2200      	movs	r2, #0
   d78a0:	6840      	ldr	r0, [r0, #4]
   d78a2:	4611      	mov	r1, r2
   d78a4:	f7ff be3a 	b.w	d751c <network_listening>

000d78a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d78a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d78ac:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d78ae:	b095      	sub	sp, #84	; 0x54
   d78b0:	4616      	mov	r6, r2
   d78b2:	460d      	mov	r5, r1
   d78b4:	4607      	mov	r7, r0
    IPAddress addr;
   d78b6:	f7ff ff7b 	bl	d77b0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d78ba:	4621      	mov	r1, r4
   d78bc:	2218      	movs	r2, #24
   d78be:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d78c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d78c2:	f001 fa53 	bl	d8d6c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d78c6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d78c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d78cc:	4621      	mov	r1, r4
   d78ce:	466b      	mov	r3, sp
   d78d0:	aa0c      	add	r2, sp, #48	; 0x30
   d78d2:	4630      	mov	r0, r6
   d78d4:	f7ff fcd6 	bl	d7284 <netdb_getaddrinfo>
    if (!r) {
   d78d8:	4604      	mov	r4, r0
   d78da:	2800      	cmp	r0, #0
   d78dc:	d146      	bne.n	d796c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d78de:	4602      	mov	r2, r0
   d78e0:	2101      	movs	r1, #1
   d78e2:	6868      	ldr	r0, [r5, #4]
   d78e4:	f7ff fdfa 	bl	d74dc <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d78e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d78ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d78ec:	4622      	mov	r2, r4
   d78ee:	6868      	ldr	r0, [r5, #4]
   d78f0:	f7ff fdf4 	bl	d74dc <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d78f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d78f6:	4681      	mov	r9, r0
        bool ok = false;
   d78f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d78fa:	2e00      	cmp	r6, #0
   d78fc:	d036      	beq.n	d796c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d78fe:	2900      	cmp	r1, #0
   d7900:	d134      	bne.n	d796c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7902:	6873      	ldr	r3, [r6, #4]
   d7904:	2b02      	cmp	r3, #2
   d7906:	d003      	beq.n	d7910 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7908:	2b0a      	cmp	r3, #10
   d790a:	d00b      	beq.n	d7924 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d790c:	69f6      	ldr	r6, [r6, #28]
   d790e:	e7f4      	b.n	d78fa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7910:	f1b8 0f00 	cmp.w	r8, #0
   d7914:	d004      	beq.n	d7920 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7916:	6971      	ldr	r1, [r6, #20]
   d7918:	4638      	mov	r0, r7
   d791a:	3104      	adds	r1, #4
   d791c:	f7ff ff75 	bl	d780a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7920:	4641      	mov	r1, r8
   d7922:	e7f3      	b.n	d790c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7924:	f1b9 0f00 	cmp.w	r9, #0
   d7928:	d101      	bne.n	d792e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d792a:	4649      	mov	r1, r9
   d792c:	e7ee      	b.n	d790c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d792e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7930:	2210      	movs	r2, #16
   d7932:	a801      	add	r0, sp, #4
   d7934:	f001 fa1a 	bl	d8d6c <memset>
                    a.v = 6;
   d7938:	2306      	movs	r3, #6
   d793a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d793e:	ad01      	add	r5, sp, #4
   d7940:	f104 0308 	add.w	r3, r4, #8
   d7944:	3418      	adds	r4, #24
   d7946:	6818      	ldr	r0, [r3, #0]
   d7948:	6859      	ldr	r1, [r3, #4]
   d794a:	462a      	mov	r2, r5
   d794c:	c203      	stmia	r2!, {r0, r1}
   d794e:	3308      	adds	r3, #8
   d7950:	42a3      	cmp	r3, r4
   d7952:	4615      	mov	r5, r2
   d7954:	d1f7      	bne.n	d7946 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7956:	a901      	add	r1, sp, #4
   d7958:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d795a:	ad07      	add	r5, sp, #28
   d795c:	f7ff ff36 	bl	d77cc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7960:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7962:	1d3c      	adds	r4, r7, #4
   d7964:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7966:	682b      	ldr	r3, [r5, #0]
   d7968:	7023      	strb	r3, [r4, #0]
   d796a:	e7de      	b.n	d792a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d796c:	9800      	ldr	r0, [sp, #0]
   d796e:	f7ff fc81 	bl	d7274 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7972:	4638      	mov	r0, r7
   d7974:	b015      	add	sp, #84	; 0x54
   d7976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d797c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d797c:	4b02      	ldr	r3, [pc, #8]	; (d7988 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d797e:	4a03      	ldr	r2, [pc, #12]	; (d798c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7980:	601a      	str	r2, [r3, #0]
   d7982:	2200      	movs	r2, #0
   d7984:	605a      	str	r2, [r3, #4]

} // spark
   d7986:	4770      	bx	lr
   d7988:	2003e5c4 	.word	0x2003e5c4
   d798c:	000d9328 	.word	0x000d9328

000d7990 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7992:	4606      	mov	r6, r0
   d7994:	460d      	mov	r5, r1
  size_t n = 0;
   d7996:	188f      	adds	r7, r1, r2
   d7998:	2400      	movs	r4, #0
  while (size--) {
   d799a:	42bd      	cmp	r5, r7
   d799c:	d00c      	beq.n	d79b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d799e:	6833      	ldr	r3, [r6, #0]
   d79a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d79a4:	689b      	ldr	r3, [r3, #8]
   d79a6:	4630      	mov	r0, r6
   d79a8:	4798      	blx	r3
     if (chunk>=0)
   d79aa:	1e03      	subs	r3, r0, #0
   d79ac:	db01      	blt.n	d79b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d79ae:	441c      	add	r4, r3
  while (size--) {
   d79b0:	e7f3      	b.n	d799a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d79b2:	2c00      	cmp	r4, #0
   d79b4:	bf08      	it	eq
   d79b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d79b8:	4620      	mov	r0, r4
   d79ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d79bc <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d79bc:	b508      	push	{r3, lr}
  return write(str);
   d79be:	f7fe ff35 	bl	d682c <_ZN5Print5writeEPKc>
}
   d79c2:	bd08      	pop	{r3, pc}

000d79c4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d79c4:	6803      	ldr	r3, [r0, #0]
   d79c6:	689b      	ldr	r3, [r3, #8]
   d79c8:	4718      	bx	r3

000d79ca <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d79ca:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d79cc:	210d      	movs	r1, #13
{
   d79ce:	4605      	mov	r5, r0
  size_t n = print('\r');
   d79d0:	f7ff fff8 	bl	d79c4 <_ZN5Print5printEc>
  n += print('\n');
   d79d4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d79d6:	4604      	mov	r4, r0
  n += print('\n');
   d79d8:	4628      	mov	r0, r5
   d79da:	f7ff fff3 	bl	d79c4 <_ZN5Print5printEc>
  return n;
}
   d79de:	4420      	add	r0, r4
   d79e0:	bd38      	pop	{r3, r4, r5, pc}

000d79e2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d79e2:	b538      	push	{r3, r4, r5, lr}
   d79e4:	4605      	mov	r5, r0
  return write(str);
   d79e6:	f7fe ff21 	bl	d682c <_ZN5Print5writeEPKc>
   d79ea:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d79ec:	4628      	mov	r0, r5
   d79ee:	f7ff ffec 	bl	d79ca <_ZN5Print7printlnEv>
  return n;
}
   d79f2:	4420      	add	r0, r4
   d79f4:	bd38      	pop	{r3, r4, r5, pc}

000d79f6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   d79f6:	f7ff bff4 	b.w	d79e2 <_ZN5Print7printlnEPKc>

000d79fa <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d79fa:	b530      	push	{r4, r5, lr}
   d79fc:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d79fe:	2300      	movs	r3, #0
   d7a00:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7a04:	2a01      	cmp	r2, #1
   d7a06:	bf98      	it	ls
   d7a08:	220a      	movls	r2, #10
   d7a0a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7a0c:	460d      	mov	r5, r1
   d7a0e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7a12:	fb01 5312 	mls	r3, r1, r2, r5
   d7a16:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7a1a:	2b09      	cmp	r3, #9
   d7a1c:	bf94      	ite	ls
   d7a1e:	3330      	addls	r3, #48	; 0x30
   d7a20:	3337      	addhi	r3, #55	; 0x37
   d7a22:	b2db      	uxtb	r3, r3
  } while(n);
   d7a24:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7a26:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7a2a:	d9ef      	bls.n	d7a0c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7a2c:	4621      	mov	r1, r4
   d7a2e:	f7fe fefd 	bl	d682c <_ZN5Print5writeEPKc>
}
   d7a32:	b00b      	add	sp, #44	; 0x2c
   d7a34:	bd30      	pop	{r4, r5, pc}
	...

000d7a38 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7a38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7a3c:	ec55 4b10 	vmov	r4, r5, d0
   d7a40:	4606      	mov	r6, r0
   d7a42:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7a44:	ee10 2a10 	vmov	r2, s0
   d7a48:	ee10 0a10 	vmov	r0, s0
   d7a4c:	462b      	mov	r3, r5
   d7a4e:	4629      	mov	r1, r5
   d7a50:	f001 f8bc 	bl	d8bcc <__aeabi_dcmpun>
   d7a54:	b140      	cbz	r0, d7a68 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7a56:	4953      	ldr	r1, [pc, #332]	; (d7ba4 <_ZN5Print10printFloatEdh+0x16c>)
   d7a58:	4630      	mov	r0, r6
   d7a5a:	f7fe fee7 	bl	d682c <_ZN5Print5writeEPKc>
   d7a5e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7a60:	4650      	mov	r0, sl
   d7a62:	b003      	add	sp, #12
   d7a64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7a68:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d7a6c:	4b4e      	ldr	r3, [pc, #312]	; (d7ba8 <_ZN5Print10printFloatEdh+0x170>)
   d7a6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7a72:	4620      	mov	r0, r4
   d7a74:	4649      	mov	r1, r9
   d7a76:	f001 f8a9 	bl	d8bcc <__aeabi_dcmpun>
   d7a7a:	b948      	cbnz	r0, d7a90 <_ZN5Print10printFloatEdh+0x58>
   d7a7c:	4b4a      	ldr	r3, [pc, #296]	; (d7ba8 <_ZN5Print10printFloatEdh+0x170>)
   d7a7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7a82:	4620      	mov	r0, r4
   d7a84:	4649      	mov	r1, r9
   d7a86:	f001 f883 	bl	d8b90 <__aeabi_dcmple>
   d7a8a:	b908      	cbnz	r0, d7a90 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d7a8c:	4947      	ldr	r1, [pc, #284]	; (d7bac <_ZN5Print10printFloatEdh+0x174>)
   d7a8e:	e7e3      	b.n	d7a58 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d7a90:	4b47      	ldr	r3, [pc, #284]	; (d7bb0 <_ZN5Print10printFloatEdh+0x178>)
   d7a92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7a96:	4620      	mov	r0, r4
   d7a98:	4629      	mov	r1, r5
   d7a9a:	f001 f88d 	bl	d8bb8 <__aeabi_dcmpgt>
   d7a9e:	b108      	cbz	r0, d7aa4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d7aa0:	4944      	ldr	r1, [pc, #272]	; (d7bb4 <_ZN5Print10printFloatEdh+0x17c>)
   d7aa2:	e7d9      	b.n	d7a58 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d7aa4:	4b44      	ldr	r3, [pc, #272]	; (d7bb8 <_ZN5Print10printFloatEdh+0x180>)
   d7aa6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d7aaa:	4620      	mov	r0, r4
   d7aac:	4629      	mov	r1, r5
   d7aae:	f001 f865 	bl	d8b7c <__aeabi_dcmplt>
   d7ab2:	2800      	cmp	r0, #0
   d7ab4:	d1f4      	bne.n	d7aa0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d7ab6:	2200      	movs	r2, #0
   d7ab8:	2300      	movs	r3, #0
   d7aba:	4620      	mov	r0, r4
   d7abc:	4629      	mov	r1, r5
   d7abe:	f001 f85d 	bl	d8b7c <__aeabi_dcmplt>
   d7ac2:	b1d0      	cbz	r0, d7afa <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d7ac4:	212d      	movs	r1, #45	; 0x2d
   d7ac6:	4630      	mov	r0, r6
   d7ac8:	f7ff ff7c 	bl	d79c4 <_ZN5Print5printEc>
     number = -number;
   d7acc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7ad0:	4682      	mov	sl, r0
     number = -number;
   d7ad2:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7ad4:	4939      	ldr	r1, [pc, #228]	; (d7bbc <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7ad6:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d7bc4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d7ada:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d7ade:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7ae0:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7ae4:	fa5f f38b 	uxtb.w	r3, fp
   d7ae8:	429f      	cmp	r7, r3
   d7aea:	d908      	bls.n	d7afe <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d7aec:	4642      	mov	r2, r8
   d7aee:	464b      	mov	r3, r9
   d7af0:	f000 fefc 	bl	d88ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7af4:	f10b 0b01 	add.w	fp, fp, #1
   d7af8:	e7f4      	b.n	d7ae4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d7afa:	4682      	mov	sl, r0
   d7afc:	e7ea      	b.n	d7ad4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d7afe:	4622      	mov	r2, r4
   d7b00:	462b      	mov	r3, r5
   d7b02:	f000 fc13 	bl	d832c <__adddf3>
   d7b06:	460d      	mov	r5, r1
   d7b08:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d7b0a:	f001 f89d 	bl	d8c48 <__aeabi_d2uiz>
   d7b0e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7b10:	f000 fd48 	bl	d85a4 <__aeabi_ui2d>
   d7b14:	4602      	mov	r2, r0
   d7b16:	460b      	mov	r3, r1
   d7b18:	4620      	mov	r0, r4
   d7b1a:	4629      	mov	r1, r5
   d7b1c:	f000 fc04 	bl	d8328 <__aeabi_dsub>
        return printNumber(val, base) + t;
   d7b20:	220a      	movs	r2, #10
   d7b22:	4604      	mov	r4, r0
   d7b24:	460d      	mov	r5, r1
   d7b26:	4630      	mov	r0, r6
   d7b28:	4641      	mov	r1, r8
   d7b2a:	f7ff ff66 	bl	d79fa <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d7b2e:	4482      	add	sl, r0
  if (digits > 0) {
   d7b30:	b127      	cbz	r7, d7b3c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7b32:	4923      	ldr	r1, [pc, #140]	; (d7bc0 <_ZN5Print10printFloatEdh+0x188>)
   d7b34:	4630      	mov	r0, r6
   d7b36:	f7fe fe79 	bl	d682c <_ZN5Print5writeEPKc>
    n += print(".");
   d7b3a:	4482      	add	sl, r0
    remainder *= 10.0;
   d7b3c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d7bc4 <_ZN5Print10printFloatEdh+0x18c>
   d7b40:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7b44:	3f01      	subs	r7, #1
   d7b46:	b2ff      	uxtb	r7, r7
   d7b48:	2fff      	cmp	r7, #255	; 0xff
   d7b4a:	d089      	beq.n	d7a60 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d7b4c:	4642      	mov	r2, r8
   d7b4e:	464b      	mov	r3, r9
   d7b50:	4620      	mov	r0, r4
   d7b52:	4629      	mov	r1, r5
   d7b54:	f000 fda0 	bl	d8698 <__aeabi_dmul>
   d7b58:	4604      	mov	r4, r0
   d7b5a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d7b5c:	f001 f84c 	bl	d8bf8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7b60:	f1b0 0b00 	subs.w	fp, r0, #0
   d7b64:	da1a      	bge.n	d7b9c <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7b66:	212d      	movs	r1, #45	; 0x2d
   d7b68:	4630      	mov	r0, r6
   d7b6a:	f7ff ff2b 	bl	d79c4 <_ZN5Print5printEc>
            val = -n;
   d7b6e:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d7b72:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d7b74:	220a      	movs	r2, #10
   d7b76:	4630      	mov	r0, r6
   d7b78:	9301      	str	r3, [sp, #4]
   d7b7a:	f7ff ff3e 	bl	d79fa <_ZN5Print11printNumberEmh>
   d7b7e:	9b01      	ldr	r3, [sp, #4]
   d7b80:	4418      	add	r0, r3
    n += print(toPrint);
   d7b82:	4482      	add	sl, r0
    remainder -= toPrint;
   d7b84:	4658      	mov	r0, fp
   d7b86:	f000 fd1d 	bl	d85c4 <__aeabi_i2d>
   d7b8a:	4602      	mov	r2, r0
   d7b8c:	460b      	mov	r3, r1
   d7b8e:	4620      	mov	r0, r4
   d7b90:	4629      	mov	r1, r5
   d7b92:	f000 fbc9 	bl	d8328 <__aeabi_dsub>
   d7b96:	4604      	mov	r4, r0
   d7b98:	460d      	mov	r5, r1
  while (digits-- > 0)
   d7b9a:	e7d3      	b.n	d7b44 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d7b9c:	4659      	mov	r1, fp
        size_t t = 0;
   d7b9e:	2300      	movs	r3, #0
   d7ba0:	e7e8      	b.n	d7b74 <_ZN5Print10printFloatEdh+0x13c>
   d7ba2:	bf00      	nop
   d7ba4:	000d935c 	.word	0x000d935c
   d7ba8:	7fefffff 	.word	0x7fefffff
   d7bac:	000d9360 	.word	0x000d9360
   d7bb0:	41efffff 	.word	0x41efffff
   d7bb4:	000d9364 	.word	0x000d9364
   d7bb8:	c1efffff 	.word	0xc1efffff
   d7bbc:	3fe00000 	.word	0x3fe00000
   d7bc0:	000d9368 	.word	0x000d9368
   d7bc4:	40240000 	.word	0x40240000

000d7bc8 <_ZN5Print5printEfi>:
{
   d7bc8:	b538      	push	{r3, r4, r5, lr}
   d7bca:	4604      	mov	r4, r0
   d7bcc:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d7bd0:	b2cd      	uxtb	r5, r1
   d7bd2:	f000 fd09 	bl	d85e8 <__aeabi_f2d>
   d7bd6:	ec41 0b10 	vmov	d0, r0, r1
   d7bda:	4629      	mov	r1, r5
   d7bdc:	4620      	mov	r0, r4
}
   d7bde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d7be2:	f7ff bf29 	b.w	d7a38 <_ZN5Print10printFloatEdh>

000d7be6 <_ZN5Print7vprintfEbPKcSt9__va_list>:

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d7be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7bea:	b086      	sub	sp, #24
   d7bec:	af00      	add	r7, sp, #0
   d7bee:	4605      	mov	r5, r0
   d7bf0:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d7bf2:	1d38      	adds	r0, r7, #4
   d7bf4:	2114      	movs	r1, #20
{
   d7bf6:	4614      	mov	r4, r2
    va_copy(args2, args);
   d7bf8:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d7bfa:	f7ff fcc7 	bl	d758c <vsnprintf>

    if (n<bufsize)
   d7bfe:	2813      	cmp	r0, #19
   d7c00:	d80e      	bhi.n	d7c20 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d7c02:	1d39      	adds	r1, r7, #4
   d7c04:	4628      	mov	r0, r5
   d7c06:	f7fe fe11 	bl	d682c <_ZN5Print5writeEPKc>
   d7c0a:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d7c0c:	b11e      	cbz	r6, d7c16 <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d7c0e:	4628      	mov	r0, r5
   d7c10:	f7ff fedb 	bl	d79ca <_ZN5Print7printlnEv>
   d7c14:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d7c16:	4620      	mov	r0, r4
   d7c18:	3718      	adds	r7, #24
   d7c1a:	46bd      	mov	sp, r7
   d7c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d7c20:	f100 0308 	add.w	r3, r0, #8
   d7c24:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d7c28:	46e8      	mov	r8, sp
        char bigger[n+1];
   d7c2a:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d7c2e:	4622      	mov	r2, r4
   d7c30:	1c41      	adds	r1, r0, #1
   d7c32:	683b      	ldr	r3, [r7, #0]
   d7c34:	4668      	mov	r0, sp
   d7c36:	f7ff fca9 	bl	d758c <vsnprintf>
  return write(str);
   d7c3a:	4669      	mov	r1, sp
   d7c3c:	4628      	mov	r0, r5
   d7c3e:	f7fe fdf5 	bl	d682c <_ZN5Print5writeEPKc>
   d7c42:	4604      	mov	r4, r0
   d7c44:	46c5      	mov	sp, r8
   d7c46:	e7e1      	b.n	d7c0c <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d7c48 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d7c48:	4b01      	ldr	r3, [pc, #4]	; (d7c50 <_GLOBAL__sub_I_RGB+0x8>)
   d7c4a:	2200      	movs	r2, #0
   d7c4c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d7c4e:	4770      	bx	lr
   d7c50:	2003e5cc 	.word	0x2003e5cc

000d7c54 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d7c54:	2100      	movs	r1, #0
   d7c56:	f7ff bb5d 	b.w	d7314 <hal_spi_acquire>

000d7c5a <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d7c5a:	2100      	movs	r1, #0
   d7c5c:	f7ff bb62 	b.w	d7324 <hal_spi_release>

000d7c60 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7c60:	b510      	push	{r4, lr}
   d7c62:	4604      	mov	r4, r0
   d7c64:	4608      	mov	r0, r1
{
    _spi = spi;
   d7c66:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7c68:	f7ff fb24 	bl	d72b4 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7c6c:	2300      	movs	r3, #0
   d7c6e:	6063      	str	r3, [r4, #4]
}
   d7c70:	4620      	mov	r0, r4
   d7c72:	bd10      	pop	{r4, pc}

000d7c74 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d7c74:	b510      	push	{r4, lr}
   d7c76:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d7c78:	7800      	ldrb	r0, [r0, #0]
   d7c7a:	f7ff ffeb 	bl	d7c54 <_ZN8SPIClass4lockEv.isra.0>
   d7c7e:	b948      	cbnz	r0, d7c94 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d7c80:	7820      	ldrb	r0, [r4, #0]
   d7c82:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d7c86:	f7ff fb05 	bl	d7294 <hal_spi_begin>
        unlock();
   d7c8a:	7820      	ldrb	r0, [r4, #0]
    }
}
   d7c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d7c90:	f7ff bfe3 	b.w	d7c5a <_ZN8SPIClass6unlockEv.isra.0>
}
   d7c94:	bd10      	pop	{r4, pc}

000d7c96 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d7c96:	7800      	ldrb	r0, [r0, #0]
   d7c98:	f7ff bfdf 	b.w	d7c5a <_ZN8SPIClass6unlockEv.isra.0>

000d7c9c <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d7c9c:	0840      	lsrs	r0, r0, #1
{
   d7c9e:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d7ca0:	6018      	str	r0, [r3, #0]
   d7ca2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d7ca4:	6818      	ldr	r0, [r3, #0]
   d7ca6:	4288      	cmp	r0, r1
   d7ca8:	b2e5      	uxtb	r5, r4
   d7caa:	d906      	bls.n	d7cba <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d7cac:	3401      	adds	r4, #1
   d7cae:	2c08      	cmp	r4, #8
   d7cb0:	d002      	beq.n	d7cb8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d7cb2:	0840      	lsrs	r0, r0, #1
   d7cb4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d7cb6:	e7f5      	b.n	d7ca4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d7cb8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d7cba:	4b02      	ldr	r3, [pc, #8]	; (d7cc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d7cbc:	5d5b      	ldrb	r3, [r3, r5]
   d7cbe:	7013      	strb	r3, [r2, #0]
}
   d7cc0:	bd30      	pop	{r4, r5, pc}
   d7cc2:	bf00      	nop
   d7cc4:	000d936a 	.word	0x000d936a

000d7cc8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d7cc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7ccc:	4606      	mov	r6, r0
   d7cce:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d7cd0:	7800      	ldrb	r0, [r0, #0]
{
   d7cd2:	460c      	mov	r4, r1
    CHECK(lock());
   d7cd4:	f7ff ffbe 	bl	d7c54 <_ZN8SPIClass4lockEv.isra.0>
   d7cd8:	2800      	cmp	r0, #0
   d7cda:	db1b      	blt.n	d7d14 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d7cdc:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d7cde:	2214      	movs	r2, #20
   d7ce0:	2100      	movs	r1, #0
   d7ce2:	a809      	add	r0, sp, #36	; 0x24
   d7ce4:	f001 f842 	bl	d8d6c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d7ce8:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d7cea:	2200      	movs	r2, #0
   d7cec:	a909      	add	r1, sp, #36	; 0x24
   d7cee:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   d7cf0:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d7cf4:	f7ff faee 	bl	d72d4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d7cf8:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d7cfc:	b113      	cbz	r3, d7d04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d7cfe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d7d02:	b155      	cbz	r5, d7d1a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d7d04:	2700      	movs	r7, #0
   d7d06:	46b9      	mov	r9, r7
   d7d08:	46b8      	mov	r8, r7
   d7d0a:	2501      	movs	r5, #1
    if (default_ && other.default_)
   d7d0c:	7923      	ldrb	r3, [r4, #4]
   d7d0e:	b15d      	cbz	r5, d7d28 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d7d10:	b1c3      	cbz	r3, d7d44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d7d12:	2000      	movs	r0, #0
}
   d7d14:	b00f      	add	sp, #60	; 0x3c
   d7d16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d7d1a:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d7d1e:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d7d22:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d7d26:	e7f1      	b.n	d7d0c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d7d28:	2b00      	cmp	r3, #0
   d7d2a:	d135      	bne.n	d7d98 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d7d2c:	68a3      	ldr	r3, [r4, #8]
   d7d2e:	4543      	cmp	r3, r8
   d7d30:	d108      	bne.n	d7d44 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d7d32:	f88d 9020 	strb.w	r9, [sp, #32]
   d7d36:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7d3a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7d3e:	89a3      	ldrh	r3, [r4, #12]
   d7d40:	429a      	cmp	r2, r3
   d7d42:	d0e6      	beq.n	d7d12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d7d44:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7d46:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   d7d48:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d7d4c:	980a      	ldr	r0, [sp, #40]	; 0x28
   d7d4e:	ab04      	add	r3, sp, #16
   d7d50:	f10d 020f 	add.w	r2, sp, #15
   d7d54:	f7ff ffa2 	bl	d7c9c <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d7d58:	7921      	ldrb	r1, [r4, #4]
   d7d5a:	b985      	cbnz	r5, d7d7e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d7d5c:	b989      	cbnz	r1, d7d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7d5e:	68a3      	ldr	r3, [r4, #8]
   d7d60:	4543      	cmp	r3, r8
   d7d62:	d30e      	bcc.n	d7d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d7d64:	f88d 9020 	strb.w	r9, [sp, #32]
   d7d68:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d7d6c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d7d70:	89a3      	ldrh	r3, [r4, #12]
   d7d72:	429a      	cmp	r2, r3
   d7d74:	d105      	bne.n	d7d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d7d76:	9b04      	ldr	r3, [sp, #16]
   d7d78:	4543      	cmp	r3, r8
   d7d7a:	d102      	bne.n	d7d82 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d7d7c:	e7c9      	b.n	d7d12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d7d7e:	2900      	cmp	r1, #0
   d7d80:	d1f9      	bne.n	d7d76 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d7d82:	2300      	movs	r3, #0
   d7d84:	9301      	str	r3, [sp, #4]
   d7d86:	7b63      	ldrb	r3, [r4, #13]
   d7d88:	9300      	str	r3, [sp, #0]
   d7d8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d7d8e:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d7d90:	7830      	ldrb	r0, [r6, #0]
   d7d92:	f7ff fab7 	bl	d7304 <hal_spi_set_settings>
   d7d96:	e7bc      	b.n	d7d12 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d7d98:	e9cd 5500 	strd	r5, r5, [sp]
   d7d9c:	462b      	mov	r3, r5
   d7d9e:	462a      	mov	r2, r5
   d7da0:	2101      	movs	r1, #1
   d7da2:	e7f5      	b.n	d7d90 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d7da4 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d7da4:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d7da6:	7800      	ldrb	r0, [r0, #0]
   d7da8:	f7ff fa7c 	bl	d72a4 <hal_spi_transfer>
}
   d7dac:	b2c0      	uxtb	r0, r0
   d7dae:	bd08      	pop	{r3, pc}

000d7db0 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length,
                        wiring_spi_dma_transfercomplete_callback_t user_callback)
{
   d7db0:	b530      	push	{r4, r5, lr}
   d7db2:	b087      	sub	sp, #28
   d7db4:	4604      	mov	r4, r0
   d7db6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    hal_spi_transfer_dma(_spi, tx_buffer, rx_buffer, length, user_callback);
   d7db8:	9500      	str	r5, [sp, #0]
   d7dba:	7800      	ldrb	r0, [r0, #0]
   d7dbc:	f7ff fa92 	bl	d72e4 <hal_spi_transfer_dma>
    if (user_callback == NULL)
   d7dc0:	b93d      	cbnz	r5, d7dd2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    {
        hal_spi_transfer_status_t st;
        do
        {
            hal_spi_transfer_dma_status(_spi, &st);
   d7dc2:	7820      	ldrb	r0, [r4, #0]
   d7dc4:	a902      	add	r1, sp, #8
   d7dc6:	f7ff fa95 	bl	d72f4 <hal_spi_transfer_dma_status>
        } while (st.transfer_ongoing);
   d7dca:	f89d 3014 	ldrb.w	r3, [sp, #20]
   d7dce:	07db      	lsls	r3, r3, #31
   d7dd0:	d4f7      	bmi.n	d7dc2 <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
    }
}
   d7dd2:	b007      	add	sp, #28
   d7dd4:	bd30      	pop	{r4, r5, pc}
	...

000d7dd8 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d7dd8:	4b05      	ldr	r3, [pc, #20]	; (d7df0 <_GLOBAL__sub_I_System+0x18>)
   d7dda:	2202      	movs	r2, #2
   d7ddc:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7dde:	4b05      	ldr	r3, [pc, #20]	; (d7df4 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d7de0:	4a05      	ldr	r2, [pc, #20]	; (d7df8 <_GLOBAL__sub_I_System+0x20>)
   d7de2:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d7de4:	2000      	movs	r0, #0
   d7de6:	6018      	str	r0, [r3, #0]
   d7de8:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d7dea:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d7dec:	f7ff bb22 	b.w	d7434 <set_system_mode>
   d7df0:	2003e5e8 	.word	0x2003e5e8
   d7df4:	2003e5dc 	.word	0x2003e5dc
   d7df8:	ffff0000 	.word	0xffff0000

000d7dfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7dfc:	4b02      	ldr	r3, [pc, #8]	; (d7e08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7dfe:	681a      	ldr	r2, [r3, #0]
   d7e00:	4b02      	ldr	r3, [pc, #8]	; (d7e0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7e02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7e04:	4770      	bx	lr
   d7e06:	bf00      	nop
   d7e08:	2003e034 	.word	0x2003e034
   d7e0c:	2003e5ec 	.word	0x2003e5ec

000d7e10 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7e10:	4770      	bx	lr

000d7e12 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7e12:	7441      	strb	r1, [r0, #17]
}
   d7e14:	4770      	bx	lr

000d7e16 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7e16:	4770      	bx	lr

000d7e18 <_ZN11USARTSerial17availableForWriteEv>:
{
   d7e18:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7e1a:	7c00      	ldrb	r0, [r0, #16]
   d7e1c:	f7ff fac2 	bl	d73a4 <hal_usart_available_data_for_write>
}
   d7e20:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e24:	bd08      	pop	{r3, pc}

000d7e26 <_ZN11USARTSerial9availableEv>:
{
   d7e26:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7e28:	7c00      	ldrb	r0, [r0, #16]
   d7e2a:	f7ff fa93 	bl	d7354 <hal_usart_available>
}
   d7e2e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7e32:	bd08      	pop	{r3, pc}

000d7e34 <_ZN11USARTSerial4peekEv>:
{
   d7e34:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7e36:	7c00      	ldrb	r0, [r0, #16]
   d7e38:	f7ff fa9c 	bl	d7374 <hal_usart_peek>
}
   d7e3c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e40:	bd08      	pop	{r3, pc}

000d7e42 <_ZN11USARTSerial4readEv>:
{
   d7e42:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7e44:	7c00      	ldrb	r0, [r0, #16]
   d7e46:	f7ff fa8d 	bl	d7364 <hal_usart_read>
}
   d7e4a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7e4e:	bd08      	pop	{r3, pc}

000d7e50 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d7e50:	7c00      	ldrb	r0, [r0, #16]
   d7e52:	f7ff ba97 	b.w	d7384 <hal_usart_flush>

000d7e56 <_ZN11USARTSerial5writeEh>:
{
   d7e56:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7e58:	7c45      	ldrb	r5, [r0, #17]
{
   d7e5a:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7e5c:	b12d      	cbz	r5, d7e6a <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d7e5e:	7c20      	ldrb	r0, [r4, #16]
}
   d7e60:	b003      	add	sp, #12
   d7e62:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7e66:	f7ff ba6d 	b.w	d7344 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7e6a:	7c00      	ldrb	r0, [r0, #16]
   d7e6c:	9101      	str	r1, [sp, #4]
   d7e6e:	f7ff fa99 	bl	d73a4 <hal_usart_available_data_for_write>
   d7e72:	2800      	cmp	r0, #0
   d7e74:	9901      	ldr	r1, [sp, #4]
   d7e76:	dcf2      	bgt.n	d7e5e <_ZN11USARTSerial5writeEh+0x8>
}
   d7e78:	4628      	mov	r0, r5
   d7e7a:	b003      	add	sp, #12
   d7e7c:	bd30      	pop	{r4, r5, pc}

000d7e7e <_ZN11USARTSerialD0Ev>:
   d7e7e:	b510      	push	{r4, lr}
   d7e80:	2114      	movs	r1, #20
   d7e82:	4604      	mov	r4, r0
   d7e84:	f000 fa48 	bl	d8318 <_ZdlPvj>
   d7e88:	4620      	mov	r0, r4
   d7e8a:	bd10      	pop	{r4, pc}

000d7e8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7e8c:	b510      	push	{r4, lr}
   d7e8e:	f04f 0c00 	mov.w	ip, #0
   d7e92:	4604      	mov	r4, r0
   d7e94:	4608      	mov	r0, r1
   d7e96:	4611      	mov	r1, r2
   d7e98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7e9c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7ea0:	4a04      	ldr	r2, [pc, #16]	; (d7eb4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7ea2:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7ea4:	2201      	movs	r2, #1
  _serial = serial;
   d7ea6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7ea8:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7eaa:	461a      	mov	r2, r3
   d7eac:	f7ff fa42 	bl	d7334 <hal_usart_init>
}
   d7eb0:	4620      	mov	r0, r4
   d7eb2:	bd10      	pop	{r4, pc}
   d7eb4:	000d9398 	.word	0x000d9398

000d7eb8 <_Z22__fetch_global_Serial1v>:
{
   d7eb8:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7eba:	4c0d      	ldr	r4, [pc, #52]	; (d7ef0 <_Z22__fetch_global_Serial1v+0x38>)
   d7ebc:	7821      	ldrb	r1, [r4, #0]
   d7ebe:	f3bf 8f5b 	dmb	ish
   d7ec2:	f011 0101 	ands.w	r1, r1, #1
   d7ec6:	d110      	bne.n	d7eea <_Z22__fetch_global_Serial1v+0x32>
   d7ec8:	4620      	mov	r0, r4
   d7eca:	9101      	str	r1, [sp, #4]
   d7ecc:	f7fc f8e9 	bl	d40a2 <__cxa_guard_acquire>
   d7ed0:	9901      	ldr	r1, [sp, #4]
   d7ed2:	b150      	cbz	r0, d7eea <_Z22__fetch_global_Serial1v+0x32>
   d7ed4:	4b07      	ldr	r3, [pc, #28]	; (d7ef4 <_Z22__fetch_global_Serial1v+0x3c>)
   d7ed6:	4a08      	ldr	r2, [pc, #32]	; (d7ef8 <_Z22__fetch_global_Serial1v+0x40>)
   d7ed8:	4808      	ldr	r0, [pc, #32]	; (d7efc <_Z22__fetch_global_Serial1v+0x44>)
   d7eda:	f7ff ffd7 	bl	d7e8c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7ede:	4620      	mov	r0, r4
   d7ee0:	f7fc f8e4 	bl	d40ac <__cxa_guard_release>
   d7ee4:	4806      	ldr	r0, [pc, #24]	; (d7f00 <_Z22__fetch_global_Serial1v+0x48>)
   d7ee6:	f000 ff1f 	bl	d8d28 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7eea:	4804      	ldr	r0, [pc, #16]	; (d7efc <_Z22__fetch_global_Serial1v+0x44>)
   d7eec:	b002      	add	sp, #8
   d7eee:	bd10      	pop	{r4, pc}
   d7ef0:	2003e5f0 	.word	0x2003e5f0
   d7ef4:	2003e678 	.word	0x2003e678
   d7ef8:	2003e5f4 	.word	0x2003e5f4
   d7efc:	2003e6fc 	.word	0x2003e6fc
   d7f00:	000d7e17 	.word	0x000d7e17

000d7f04 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7f04:	7441      	strb	r1, [r0, #17]
}
   d7f06:	4770      	bx	lr

000d7f08 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7f08:	4770      	bx	lr

000d7f0a <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7f0a:	4770      	bx	lr

000d7f0c <_ZN9USBSerial4readEv>:
{
   d7f0c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7f0e:	2100      	movs	r1, #0
   d7f10:	7c00      	ldrb	r0, [r0, #16]
   d7f12:	f7ff fa6f 	bl	d73f4 <HAL_USB_USART_Receive_Data>
}
   d7f16:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7f1a:	bd08      	pop	{r3, pc}

000d7f1c <_ZN9USBSerial4peekEv>:
{
   d7f1c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7f1e:	2101      	movs	r1, #1
   d7f20:	7c00      	ldrb	r0, [r0, #16]
   d7f22:	f7ff fa67 	bl	d73f4 <HAL_USB_USART_Receive_Data>
}
   d7f26:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7f2a:	bd08      	pop	{r3, pc}

000d7f2c <_ZN9USBSerial17availableForWriteEv>:
{
   d7f2c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7f2e:	7c00      	ldrb	r0, [r0, #16]
   d7f30:	f7ff fa58 	bl	d73e4 <HAL_USB_USART_Available_Data_For_Write>
}
   d7f34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f38:	bd08      	pop	{r3, pc}

000d7f3a <_ZN9USBSerial9availableEv>:
{
   d7f3a:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7f3c:	7c00      	ldrb	r0, [r0, #16]
   d7f3e:	f7ff fa49 	bl	d73d4 <HAL_USB_USART_Available_Data>
}
   d7f42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7f46:	bd08      	pop	{r3, pc}

000d7f48 <_ZN9USBSerial5writeEh>:
{
   d7f48:	b513      	push	{r0, r1, r4, lr}
   d7f4a:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f4c:	7c00      	ldrb	r0, [r0, #16]
{
   d7f4e:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7f50:	f7ff fa48 	bl	d73e4 <HAL_USB_USART_Available_Data_For_Write>
   d7f54:	2800      	cmp	r0, #0
   d7f56:	9901      	ldr	r1, [sp, #4]
   d7f58:	dc01      	bgt.n	d7f5e <_ZN9USBSerial5writeEh+0x16>
   d7f5a:	7c60      	ldrb	r0, [r4, #17]
   d7f5c:	b120      	cbz	r0, d7f68 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7f5e:	7c20      	ldrb	r0, [r4, #16]
   d7f60:	f7ff fa50 	bl	d7404 <HAL_USB_USART_Send_Data>
   d7f64:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7f68:	b002      	add	sp, #8
   d7f6a:	bd10      	pop	{r4, pc}

000d7f6c <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7f6c:	7c00      	ldrb	r0, [r0, #16]
   d7f6e:	f7ff ba51 	b.w	d7414 <HAL_USB_USART_Flush_Data>

000d7f72 <_ZN9USBSerialD0Ev>:
   d7f72:	b510      	push	{r4, lr}
   d7f74:	2114      	movs	r1, #20
   d7f76:	4604      	mov	r4, r0
   d7f78:	f000 f9ce 	bl	d8318 <_ZdlPvj>
   d7f7c:	4620      	mov	r0, r4
   d7f7e:	bd10      	pop	{r4, pc}

000d7f80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7f80:	b510      	push	{r4, lr}
   d7f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7f86:	4604      	mov	r4, r0
   d7f88:	4608      	mov	r0, r1
   d7f8a:	2100      	movs	r1, #0
   d7f8c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7f90:	4b04      	ldr	r3, [pc, #16]	; (d7fa4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7f92:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7f94:	2301      	movs	r3, #1
  _serial = serial;
   d7f96:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7f98:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7f9a:	4611      	mov	r1, r2
   d7f9c:	f7ff fa0a 	bl	d73b4 <HAL_USB_USART_Init>
}
   d7fa0:	4620      	mov	r0, r4
   d7fa2:	bd10      	pop	{r4, pc}
   d7fa4:	000d93c8 	.word	0x000d93c8

000d7fa8 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7fa8:	7c00      	ldrb	r0, [r0, #16]
   d7faa:	2200      	movs	r2, #0
   d7fac:	f7ff ba0a 	b.w	d73c4 <HAL_USB_USART_Begin>

000d7fb0 <_ZN9USBSerial9isEnabledEv>:
  return HAL_USB_USART_Is_Enabled(_serial);
   d7fb0:	7c00      	ldrb	r0, [r0, #16]
   d7fb2:	f7ff ba37 	b.w	d7424 <HAL_USB_USART_Is_Enabled>

000d7fb6 <_ZN9USBSerialcvbEv>:
  return isEnabled();
   d7fb6:	f7ff bffb 	b.w	d7fb0 <_ZN9USBSerial9isEnabledEv>

000d7fba <_Z19acquireSerialBufferv>:
{
   d7fba:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7fbc:	2214      	movs	r2, #20
{
   d7fbe:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7fc0:	2100      	movs	r1, #0
   d7fc2:	f000 fed3 	bl	d8d6c <memset>
}
   d7fc6:	4620      	mov	r0, r4
   d7fc8:	bd10      	pop	{r4, pc}
	...

000d7fcc <_Z16_fetch_usbserialv>:
{
   d7fcc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7fce:	4c0f      	ldr	r4, [pc, #60]	; (d800c <_Z16_fetch_usbserialv+0x40>)
{
   d7fd0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7fd2:	a803      	add	r0, sp, #12
   d7fd4:	f7ff fff1 	bl	d7fba <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7fd8:	7821      	ldrb	r1, [r4, #0]
   d7fda:	f3bf 8f5b 	dmb	ish
   d7fde:	f011 0101 	ands.w	r1, r1, #1
   d7fe2:	d10f      	bne.n	d8004 <_Z16_fetch_usbserialv+0x38>
   d7fe4:	4620      	mov	r0, r4
   d7fe6:	9101      	str	r1, [sp, #4]
   d7fe8:	f7fc f85b 	bl	d40a2 <__cxa_guard_acquire>
   d7fec:	9901      	ldr	r1, [sp, #4]
   d7fee:	b148      	cbz	r0, d8004 <_Z16_fetch_usbserialv+0x38>
   d7ff0:	aa03      	add	r2, sp, #12
   d7ff2:	4807      	ldr	r0, [pc, #28]	; (d8010 <_Z16_fetch_usbserialv+0x44>)
   d7ff4:	f7ff ffc4 	bl	d7f80 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7ff8:	4620      	mov	r0, r4
   d7ffa:	f7fc f857 	bl	d40ac <__cxa_guard_release>
   d7ffe:	4805      	ldr	r0, [pc, #20]	; (d8014 <_Z16_fetch_usbserialv+0x48>)
   d8000:	f000 fe92 	bl	d8d28 <atexit>
	return _usbserial;
}
   d8004:	4802      	ldr	r0, [pc, #8]	; (d8010 <_Z16_fetch_usbserialv+0x44>)
   d8006:	b008      	add	sp, #32
   d8008:	bd10      	pop	{r4, pc}
   d800a:	bf00      	nop
   d800c:	2003e710 	.word	0x2003e710
   d8010:	2003e714 	.word	0x2003e714
   d8014:	000d7f09 	.word	0x000d7f09

000d8018 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8018:	2200      	movs	r2, #0
   d801a:	6840      	ldr	r0, [r0, #4]
   d801c:	4611      	mov	r1, r2
   d801e:	f7ff ba5d 	b.w	d74dc <network_ready>

000d8022 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8022:	2200      	movs	r2, #0
   d8024:	6840      	ldr	r0, [r0, #4]
   d8026:	4611      	mov	r1, r2
   d8028:	f7ff ba78 	b.w	d751c <network_listening>

000d802c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d802c:	2200      	movs	r2, #0
   d802e:	6840      	ldr	r0, [r0, #4]
   d8030:	4611      	mov	r1, r2
   d8032:	f7ff ba83 	b.w	d753c <network_get_listen_timeout>

000d8036 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8036:	6840      	ldr	r0, [r0, #4]
   d8038:	2200      	movs	r2, #0
   d803a:	f7ff ba77 	b.w	d752c <network_set_listen_timeout>

000d803e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d803e:	6840      	ldr	r0, [r0, #4]
   d8040:	2200      	movs	r2, #0
   d8042:	f081 0101 	eor.w	r1, r1, #1
   d8046:	f7ff ba61 	b.w	d750c <network_listen>

000d804a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d804a:	2300      	movs	r3, #0
   d804c:	6840      	ldr	r0, [r0, #4]
   d804e:	461a      	mov	r2, r3
   d8050:	4619      	mov	r1, r3
   d8052:	f7ff ba53 	b.w	d74fc <network_off>

000d8056 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8056:	2300      	movs	r3, #0
   d8058:	6840      	ldr	r0, [r0, #4]
   d805a:	461a      	mov	r2, r3
   d805c:	4619      	mov	r1, r3
   d805e:	f7ff ba45 	b.w	d74ec <network_on>

000d8062 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8062:	2200      	movs	r2, #0
   d8064:	6840      	ldr	r0, [r0, #4]
   d8066:	4611      	mov	r1, r2
   d8068:	f7ff ba28 	b.w	d74bc <network_connecting>

000d806c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d806c:	6840      	ldr	r0, [r0, #4]
   d806e:	2200      	movs	r2, #0
   d8070:	2102      	movs	r1, #2
   d8072:	f7ff ba2b 	b.w	d74cc <network_disconnect>

000d8076 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8076:	2300      	movs	r3, #0
   d8078:	6840      	ldr	r0, [r0, #4]
   d807a:	461a      	mov	r2, r3
   d807c:	f7ff ba16 	b.w	d74ac <network_connect>

000d8080 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8080:	4b02      	ldr	r3, [pc, #8]	; (d808c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8082:	2204      	movs	r2, #4
   d8084:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8086:	4a02      	ldr	r2, [pc, #8]	; (d8090 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8088:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d808a:	4770      	bx	lr
   d808c:	2003e728 	.word	0x2003e728
   d8090:	000d93f8 	.word	0x000d93f8

000d8094 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8094:	4b01      	ldr	r3, [pc, #4]	; (d809c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8096:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8098:	4770      	bx	lr
   d809a:	bf00      	nop
   d809c:	2003e038 	.word	0x2003e038

000d80a0 <serialEventRun>:
{
   d80a0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d80a2:	4b0b      	ldr	r3, [pc, #44]	; (d80d0 <serialEventRun+0x30>)
   d80a4:	b143      	cbz	r3, d80b8 <serialEventRun+0x18>
   d80a6:	f7ff ff91 	bl	d7fcc <_Z16_fetch_usbserialv>
   d80aa:	6803      	ldr	r3, [r0, #0]
   d80ac:	691b      	ldr	r3, [r3, #16]
   d80ae:	4798      	blx	r3
   d80b0:	2800      	cmp	r0, #0
   d80b2:	dd01      	ble.n	d80b8 <serialEventRun+0x18>
        serialEvent();
   d80b4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d80b8:	4b06      	ldr	r3, [pc, #24]	; (d80d4 <serialEventRun+0x34>)
   d80ba:	b143      	cbz	r3, d80ce <serialEventRun+0x2e>
   d80bc:	f7ff fefc 	bl	d7eb8 <_Z22__fetch_global_Serial1v>
   d80c0:	6803      	ldr	r3, [r0, #0]
   d80c2:	691b      	ldr	r3, [r3, #16]
   d80c4:	4798      	blx	r3
   d80c6:	2800      	cmp	r0, #0
   d80c8:	dd01      	ble.n	d80ce <serialEventRun+0x2e>
        serialEvent1();
   d80ca:	f3af 8000 	nop.w
}
   d80ce:	bd08      	pop	{r3, pc}
	...

000d80d8 <_post_loop>:
{
   d80d8:	b508      	push	{r3, lr}
	serialEventRun();
   d80da:	f7ff ffe1 	bl	d80a0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d80de:	f7ff f849 	bl	d7174 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d80e2:	4b01      	ldr	r3, [pc, #4]	; (d80e8 <_post_loop+0x10>)
   d80e4:	6018      	str	r0, [r3, #0]
}
   d80e6:	bd08      	pop	{r3, pc}
   d80e8:	2003e738 	.word	0x2003e738

000d80ec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d80ec:	4805      	ldr	r0, [pc, #20]	; (d8104 <_Z33system_initialize_user_backup_ramv+0x18>)
   d80ee:	4a06      	ldr	r2, [pc, #24]	; (d8108 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d80f0:	4906      	ldr	r1, [pc, #24]	; (d810c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d80f2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d80f4:	1a12      	subs	r2, r2, r0
   d80f6:	f000 fe2b 	bl	d8d50 <memcpy>
    __backup_sram_signature = signature;
   d80fa:	4b05      	ldr	r3, [pc, #20]	; (d8110 <_Z33system_initialize_user_backup_ramv+0x24>)
   d80fc:	4a05      	ldr	r2, [pc, #20]	; (d8114 <_Z33system_initialize_user_backup_ramv+0x28>)
   d80fe:	601a      	str	r2, [r3, #0]
}
   d8100:	bd08      	pop	{r3, pc}
   d8102:	bf00      	nop
   d8104:	2003f400 	.word	0x2003f400
   d8108:	2003f404 	.word	0x2003f404
   d810c:	000d9460 	.word	0x000d9460
   d8110:	2003f400 	.word	0x2003f400
   d8114:	9a271c1e 	.word	0x9a271c1e

000d8118 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8118:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d811a:	2300      	movs	r3, #0
   d811c:	9300      	str	r3, [sp, #0]
   d811e:	461a      	mov	r2, r3
   d8120:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8124:	f7ff f9a8 	bl	d7478 <system_ctrl_set_result>
}
   d8128:	b003      	add	sp, #12
   d812a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8130 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8130:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8132:	8843      	ldrh	r3, [r0, #2]
   d8134:	2b0a      	cmp	r3, #10
   d8136:	d008      	beq.n	d814a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8138:	2b50      	cmp	r3, #80	; 0x50
   d813a:	d10b      	bne.n	d8154 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d813c:	4b09      	ldr	r3, [pc, #36]	; (d8164 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d813e:	681b      	ldr	r3, [r3, #0]
   d8140:	b14b      	cbz	r3, d8156 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8142:	b003      	add	sp, #12
   d8144:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8148:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d814a:	f7ff ffe5 	bl	d8118 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d814e:	b003      	add	sp, #12
   d8150:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8154:	2300      	movs	r3, #0
   d8156:	9300      	str	r3, [sp, #0]
   d8158:	461a      	mov	r2, r3
   d815a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d815e:	f7ff f98b 	bl	d7478 <system_ctrl_set_result>
}
   d8162:	e7f4      	b.n	d814e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8164:	2003e734 	.word	0x2003e734

000d8168 <module_user_init_hook>:
{
   d8168:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d816a:	4812      	ldr	r0, [pc, #72]	; (d81b4 <module_user_init_hook+0x4c>)
   d816c:	2100      	movs	r1, #0
   d816e:	f7ff fa15 	bl	d759c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d8172:	4b11      	ldr	r3, [pc, #68]	; (d81b8 <module_user_init_hook+0x50>)
   d8174:	681a      	ldr	r2, [r3, #0]
   d8176:	4b11      	ldr	r3, [pc, #68]	; (d81bc <module_user_init_hook+0x54>)
   d8178:	429a      	cmp	r2, r3
   d817a:	4b11      	ldr	r3, [pc, #68]	; (d81c0 <module_user_init_hook+0x58>)
   d817c:	bf0c      	ite	eq
   d817e:	2201      	moveq	r2, #1
   d8180:	2200      	movne	r2, #0
   d8182:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8184:	d001      	beq.n	d818a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d8186:	f7ff ffb1 	bl	d80ec <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d818a:	f7fe ffdb 	bl	d7144 <HAL_RNG_GetRandomNumber>
   d818e:	4604      	mov	r4, r0
    srand(seed);
   d8190:	f000 fdf4 	bl	d8d7c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8194:	4b0b      	ldr	r3, [pc, #44]	; (d81c4 <module_user_init_hook+0x5c>)
   d8196:	b113      	cbz	r3, d819e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d8198:	4620      	mov	r0, r4
   d819a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d819e:	2100      	movs	r1, #0
   d81a0:	4808      	ldr	r0, [pc, #32]	; (d81c4 <module_user_init_hook+0x5c>)
   d81a2:	f7ff f97b 	bl	d749c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d81a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d81aa:	4807      	ldr	r0, [pc, #28]	; (d81c8 <module_user_init_hook+0x60>)
   d81ac:	2100      	movs	r1, #0
   d81ae:	f7ff b959 	b.w	d7464 <system_ctrl_set_app_request_handler>
   d81b2:	bf00      	nop
   d81b4:	000d8095 	.word	0x000d8095
   d81b8:	2003f400 	.word	0x2003f400
   d81bc:	9a271c1e 	.word	0x9a271c1e
   d81c0:	2003e730 	.word	0x2003e730
   d81c4:	00000000 	.word	0x00000000
   d81c8:	000d8131 	.word	0x000d8131

000d81cc <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d81cc:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d81ce:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d81d0:	d902      	bls.n	d81d8 <pinAvailable+0xc>
    return false;
   d81d2:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d81d4:	b002      	add	sp, #8
   d81d6:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d81d8:	f1a0 030b 	sub.w	r3, r0, #11
   d81dc:	2b02      	cmp	r3, #2
   d81de:	d81a      	bhi.n	d8216 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d81e0:	4c17      	ldr	r4, [pc, #92]	; (d8240 <pinAvailable+0x74>)
   d81e2:	7821      	ldrb	r1, [r4, #0]
   d81e4:	f3bf 8f5b 	dmb	ish
   d81e8:	f011 0101 	ands.w	r1, r1, #1
   d81ec:	d10b      	bne.n	d8206 <pinAvailable+0x3a>
   d81ee:	4620      	mov	r0, r4
   d81f0:	9101      	str	r1, [sp, #4]
   d81f2:	f7fb ff56 	bl	d40a2 <__cxa_guard_acquire>
   d81f6:	9901      	ldr	r1, [sp, #4]
   d81f8:	b128      	cbz	r0, d8206 <pinAvailable+0x3a>
   d81fa:	4812      	ldr	r0, [pc, #72]	; (d8244 <pinAvailable+0x78>)
   d81fc:	f7ff fd30 	bl	d7c60 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8200:	4620      	mov	r0, r4
   d8202:	f7fb ff53 	bl	d40ac <__cxa_guard_release>
   d8206:	4b0f      	ldr	r3, [pc, #60]	; (d8244 <pinAvailable+0x78>)
   d8208:	7818      	ldrb	r0, [r3, #0]
   d820a:	f7ff f85b 	bl	d72c4 <hal_spi_is_enabled>
   d820e:	2800      	cmp	r0, #0
   d8210:	d1df      	bne.n	d81d2 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8212:	2001      	movs	r0, #1
   d8214:	e7de      	b.n	d81d4 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d8216:	2801      	cmp	r0, #1
   d8218:	d809      	bhi.n	d822e <pinAvailable+0x62>
   d821a:	f000 f859 	bl	d82d0 <_Z19__fetch_global_Wirev>
   d821e:	2100      	movs	r1, #0
   d8220:	7c00      	ldrb	r0, [r0, #16]
   d8222:	f7ff f807 	bl	d7234 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d8226:	f080 0001 	eor.w	r0, r0, #1
   d822a:	b2c0      	uxtb	r0, r0
   d822c:	e7d2      	b.n	d81d4 <pinAvailable+0x8>
   d822e:	3809      	subs	r0, #9
   d8230:	2801      	cmp	r0, #1
   d8232:	d8ee      	bhi.n	d8212 <pinAvailable+0x46>
   d8234:	f7ff fe40 	bl	d7eb8 <_Z22__fetch_global_Serial1v>
   d8238:	7c00      	ldrb	r0, [r0, #16]
   d823a:	f7ff f8ab 	bl	d7394 <hal_usart_is_enabled>
   d823e:	e7f2      	b.n	d8226 <pinAvailable+0x5a>
   d8240:	2003e0a0 	.word	0x2003e0a0
   d8244:	2003e0a4 	.word	0x2003e0a4

000d8248 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8248:	2823      	cmp	r0, #35	; 0x23
{
   d824a:	b538      	push	{r3, r4, r5, lr}
   d824c:	4604      	mov	r4, r0
   d824e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8250:	d80a      	bhi.n	d8268 <pinMode+0x20>
   d8252:	29ff      	cmp	r1, #255	; 0xff
   d8254:	d008      	beq.n	d8268 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d8256:	f7ff ffb9 	bl	d81cc <pinAvailable>
   d825a:	b128      	cbz	r0, d8268 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d825c:	4629      	mov	r1, r5
   d825e:	4620      	mov	r0, r4
}
   d8260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d8264:	f7fe bf8e 	b.w	d7184 <HAL_Pin_Mode>
}
   d8268:	bd38      	pop	{r3, r4, r5, pc}

000d826a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d826a:	b538      	push	{r3, r4, r5, lr}
   d826c:	4604      	mov	r4, r0
   d826e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d8270:	f7fe ff90 	bl	d7194 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d8274:	28ff      	cmp	r0, #255	; 0xff
   d8276:	d010      	beq.n	d829a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d8278:	2806      	cmp	r0, #6
   d827a:	d804      	bhi.n	d8286 <digitalWrite+0x1c>
   d827c:	234d      	movs	r3, #77	; 0x4d
   d827e:	fa23 f000 	lsr.w	r0, r3, r0
   d8282:	07c3      	lsls	r3, r0, #31
   d8284:	d409      	bmi.n	d829a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d8286:	4620      	mov	r0, r4
   d8288:	f7ff ffa0 	bl	d81cc <pinAvailable>
   d828c:	b128      	cbz	r0, d829a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d828e:	4629      	mov	r1, r5
   d8290:	4620      	mov	r0, r4
}
   d8292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d8296:	f7fe bf85 	b.w	d71a4 <HAL_GPIO_Write>
}
   d829a:	bd38      	pop	{r3, r4, r5, pc}

000d829c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d829c:	4770      	bx	lr
	...

000d82a0 <_Z17acquireWireBufferv>:
{
   d82a0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d82a2:	2300      	movs	r3, #0
   d82a4:	2520      	movs	r5, #32
   d82a6:	8043      	strh	r3, [r0, #2]
   d82a8:	2314      	movs	r3, #20
{
   d82aa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d82ac:	8003      	strh	r3, [r0, #0]
   d82ae:	6085      	str	r5, [r0, #8]
   d82b0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82b2:	4906      	ldr	r1, [pc, #24]	; (d82cc <_Z17acquireWireBufferv+0x2c>)
   d82b4:	4628      	mov	r0, r5
   d82b6:	f000 f831 	bl	d831c <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82ba:	4904      	ldr	r1, [pc, #16]	; (d82cc <_Z17acquireWireBufferv+0x2c>)
	};
   d82bc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d82be:	4628      	mov	r0, r5
   d82c0:	f000 f82c 	bl	d831c <_ZnajRKSt9nothrow_t>
	};
   d82c4:	60e0      	str	r0, [r4, #12]
}
   d82c6:	4620      	mov	r0, r4
   d82c8:	bd38      	pop	{r3, r4, r5, pc}
   d82ca:	bf00      	nop
   d82cc:	000d942c 	.word	0x000d942c

000d82d0 <_Z19__fetch_global_Wirev>:
{
   d82d0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82d2:	4d0e      	ldr	r5, [pc, #56]	; (d830c <_Z19__fetch_global_Wirev+0x3c>)
   d82d4:	7829      	ldrb	r1, [r5, #0]
   d82d6:	f3bf 8f5b 	dmb	ish
   d82da:	f011 0401 	ands.w	r4, r1, #1
{
   d82de:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d82e0:	d111      	bne.n	d8306 <_Z19__fetch_global_Wirev+0x36>
   d82e2:	4628      	mov	r0, r5
   d82e4:	f7fb fedd 	bl	d40a2 <__cxa_guard_acquire>
   d82e8:	b168      	cbz	r0, d8306 <_Z19__fetch_global_Wirev+0x36>
   d82ea:	a801      	add	r0, sp, #4
   d82ec:	f7ff ffd8 	bl	d82a0 <_Z17acquireWireBufferv>
   d82f0:	aa01      	add	r2, sp, #4
   d82f2:	4621      	mov	r1, r4
   d82f4:	4806      	ldr	r0, [pc, #24]	; (d8310 <_Z19__fetch_global_Wirev+0x40>)
   d82f6:	f7ff f9cf 	bl	d7698 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d82fa:	4628      	mov	r0, r5
   d82fc:	f7fb fed6 	bl	d40ac <__cxa_guard_release>
   d8300:	4804      	ldr	r0, [pc, #16]	; (d8314 <_Z19__fetch_global_Wirev+0x44>)
   d8302:	f000 fd11 	bl	d8d28 <atexit>
	return wire;
}
   d8306:	4802      	ldr	r0, [pc, #8]	; (d8310 <_Z19__fetch_global_Wirev+0x40>)
   d8308:	b007      	add	sp, #28
   d830a:	bd30      	pop	{r4, r5, pc}
   d830c:	2003e73c 	.word	0x2003e73c
   d8310:	2003e740 	.word	0x2003e740
   d8314:	000d829d 	.word	0x000d829d

000d8318 <_ZdlPvj>:
   d8318:	f7fb bec1 	b.w	d409e <_ZdlPv>

000d831c <_ZnajRKSt9nothrow_t>:
   d831c:	f7fb bebd 	b.w	d409a <_Znaj>

000d8320 <__aeabi_drsub>:
   d8320:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8324:	e002      	b.n	d832c <__adddf3>
   d8326:	bf00      	nop

000d8328 <__aeabi_dsub>:
   d8328:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d832c <__adddf3>:
   d832c:	b530      	push	{r4, r5, lr}
   d832e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8332:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8336:	ea94 0f05 	teq	r4, r5
   d833a:	bf08      	it	eq
   d833c:	ea90 0f02 	teqeq	r0, r2
   d8340:	bf1f      	itttt	ne
   d8342:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8346:	ea55 0c02 	orrsne.w	ip, r5, r2
   d834a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d834e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8352:	f000 80e2 	beq.w	d851a <__adddf3+0x1ee>
   d8356:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d835a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d835e:	bfb8      	it	lt
   d8360:	426d      	neglt	r5, r5
   d8362:	dd0c      	ble.n	d837e <__adddf3+0x52>
   d8364:	442c      	add	r4, r5
   d8366:	ea80 0202 	eor.w	r2, r0, r2
   d836a:	ea81 0303 	eor.w	r3, r1, r3
   d836e:	ea82 0000 	eor.w	r0, r2, r0
   d8372:	ea83 0101 	eor.w	r1, r3, r1
   d8376:	ea80 0202 	eor.w	r2, r0, r2
   d837a:	ea81 0303 	eor.w	r3, r1, r3
   d837e:	2d36      	cmp	r5, #54	; 0x36
   d8380:	bf88      	it	hi
   d8382:	bd30      	pophi	{r4, r5, pc}
   d8384:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8388:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d838c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8394:	d002      	beq.n	d839c <__adddf3+0x70>
   d8396:	4240      	negs	r0, r0
   d8398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d839c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d83a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d83a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d83a8:	d002      	beq.n	d83b0 <__adddf3+0x84>
   d83aa:	4252      	negs	r2, r2
   d83ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d83b0:	ea94 0f05 	teq	r4, r5
   d83b4:	f000 80a7 	beq.w	d8506 <__adddf3+0x1da>
   d83b8:	f1a4 0401 	sub.w	r4, r4, #1
   d83bc:	f1d5 0e20 	rsbs	lr, r5, #32
   d83c0:	db0d      	blt.n	d83de <__adddf3+0xb2>
   d83c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d83c6:	fa22 f205 	lsr.w	r2, r2, r5
   d83ca:	1880      	adds	r0, r0, r2
   d83cc:	f141 0100 	adc.w	r1, r1, #0
   d83d0:	fa03 f20e 	lsl.w	r2, r3, lr
   d83d4:	1880      	adds	r0, r0, r2
   d83d6:	fa43 f305 	asr.w	r3, r3, r5
   d83da:	4159      	adcs	r1, r3
   d83dc:	e00e      	b.n	d83fc <__adddf3+0xd0>
   d83de:	f1a5 0520 	sub.w	r5, r5, #32
   d83e2:	f10e 0e20 	add.w	lr, lr, #32
   d83e6:	2a01      	cmp	r2, #1
   d83e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d83ec:	bf28      	it	cs
   d83ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   d83f2:	fa43 f305 	asr.w	r3, r3, r5
   d83f6:	18c0      	adds	r0, r0, r3
   d83f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d83fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8400:	d507      	bpl.n	d8412 <__adddf3+0xe6>
   d8402:	f04f 0e00 	mov.w	lr, #0
   d8406:	f1dc 0c00 	rsbs	ip, ip, #0
   d840a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d840e:	eb6e 0101 	sbc.w	r1, lr, r1
   d8412:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8416:	d31b      	bcc.n	d8450 <__adddf3+0x124>
   d8418:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d841c:	d30c      	bcc.n	d8438 <__adddf3+0x10c>
   d841e:	0849      	lsrs	r1, r1, #1
   d8420:	ea5f 0030 	movs.w	r0, r0, rrx
   d8424:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8428:	f104 0401 	add.w	r4, r4, #1
   d842c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8430:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8434:	f080 809a 	bcs.w	d856c <__adddf3+0x240>
   d8438:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d843c:	bf08      	it	eq
   d843e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8442:	f150 0000 	adcs.w	r0, r0, #0
   d8446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d844a:	ea41 0105 	orr.w	r1, r1, r5
   d844e:	bd30      	pop	{r4, r5, pc}
   d8450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8454:	4140      	adcs	r0, r0
   d8456:	eb41 0101 	adc.w	r1, r1, r1
   d845a:	3c01      	subs	r4, #1
   d845c:	bf28      	it	cs
   d845e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8462:	d2e9      	bcs.n	d8438 <__adddf3+0x10c>
   d8464:	f091 0f00 	teq	r1, #0
   d8468:	bf04      	itt	eq
   d846a:	4601      	moveq	r1, r0
   d846c:	2000      	moveq	r0, #0
   d846e:	fab1 f381 	clz	r3, r1
   d8472:	bf08      	it	eq
   d8474:	3320      	addeq	r3, #32
   d8476:	f1a3 030b 	sub.w	r3, r3, #11
   d847a:	f1b3 0220 	subs.w	r2, r3, #32
   d847e:	da0c      	bge.n	d849a <__adddf3+0x16e>
   d8480:	320c      	adds	r2, #12
   d8482:	dd08      	ble.n	d8496 <__adddf3+0x16a>
   d8484:	f102 0c14 	add.w	ip, r2, #20
   d8488:	f1c2 020c 	rsb	r2, r2, #12
   d848c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8490:	fa21 f102 	lsr.w	r1, r1, r2
   d8494:	e00c      	b.n	d84b0 <__adddf3+0x184>
   d8496:	f102 0214 	add.w	r2, r2, #20
   d849a:	bfd8      	it	le
   d849c:	f1c2 0c20 	rsble	ip, r2, #32
   d84a0:	fa01 f102 	lsl.w	r1, r1, r2
   d84a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d84a8:	bfdc      	itt	le
   d84aa:	ea41 010c 	orrle.w	r1, r1, ip
   d84ae:	4090      	lslle	r0, r2
   d84b0:	1ae4      	subs	r4, r4, r3
   d84b2:	bfa2      	ittt	ge
   d84b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d84b8:	4329      	orrge	r1, r5
   d84ba:	bd30      	popge	{r4, r5, pc}
   d84bc:	ea6f 0404 	mvn.w	r4, r4
   d84c0:	3c1f      	subs	r4, #31
   d84c2:	da1c      	bge.n	d84fe <__adddf3+0x1d2>
   d84c4:	340c      	adds	r4, #12
   d84c6:	dc0e      	bgt.n	d84e6 <__adddf3+0x1ba>
   d84c8:	f104 0414 	add.w	r4, r4, #20
   d84cc:	f1c4 0220 	rsb	r2, r4, #32
   d84d0:	fa20 f004 	lsr.w	r0, r0, r4
   d84d4:	fa01 f302 	lsl.w	r3, r1, r2
   d84d8:	ea40 0003 	orr.w	r0, r0, r3
   d84dc:	fa21 f304 	lsr.w	r3, r1, r4
   d84e0:	ea45 0103 	orr.w	r1, r5, r3
   d84e4:	bd30      	pop	{r4, r5, pc}
   d84e6:	f1c4 040c 	rsb	r4, r4, #12
   d84ea:	f1c4 0220 	rsb	r2, r4, #32
   d84ee:	fa20 f002 	lsr.w	r0, r0, r2
   d84f2:	fa01 f304 	lsl.w	r3, r1, r4
   d84f6:	ea40 0003 	orr.w	r0, r0, r3
   d84fa:	4629      	mov	r1, r5
   d84fc:	bd30      	pop	{r4, r5, pc}
   d84fe:	fa21 f004 	lsr.w	r0, r1, r4
   d8502:	4629      	mov	r1, r5
   d8504:	bd30      	pop	{r4, r5, pc}
   d8506:	f094 0f00 	teq	r4, #0
   d850a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d850e:	bf06      	itte	eq
   d8510:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8514:	3401      	addeq	r4, #1
   d8516:	3d01      	subne	r5, #1
   d8518:	e74e      	b.n	d83b8 <__adddf3+0x8c>
   d851a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d851e:	bf18      	it	ne
   d8520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8524:	d029      	beq.n	d857a <__adddf3+0x24e>
   d8526:	ea94 0f05 	teq	r4, r5
   d852a:	bf08      	it	eq
   d852c:	ea90 0f02 	teqeq	r0, r2
   d8530:	d005      	beq.n	d853e <__adddf3+0x212>
   d8532:	ea54 0c00 	orrs.w	ip, r4, r0
   d8536:	bf04      	itt	eq
   d8538:	4619      	moveq	r1, r3
   d853a:	4610      	moveq	r0, r2
   d853c:	bd30      	pop	{r4, r5, pc}
   d853e:	ea91 0f03 	teq	r1, r3
   d8542:	bf1e      	ittt	ne
   d8544:	2100      	movne	r1, #0
   d8546:	2000      	movne	r0, #0
   d8548:	bd30      	popne	{r4, r5, pc}
   d854a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d854e:	d105      	bne.n	d855c <__adddf3+0x230>
   d8550:	0040      	lsls	r0, r0, #1
   d8552:	4149      	adcs	r1, r1
   d8554:	bf28      	it	cs
   d8556:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d855a:	bd30      	pop	{r4, r5, pc}
   d855c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8560:	bf3c      	itt	cc
   d8562:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8566:	bd30      	popcc	{r4, r5, pc}
   d8568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d856c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8570:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8574:	f04f 0000 	mov.w	r0, #0
   d8578:	bd30      	pop	{r4, r5, pc}
   d857a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d857e:	bf1a      	itte	ne
   d8580:	4619      	movne	r1, r3
   d8582:	4610      	movne	r0, r2
   d8584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8588:	bf1c      	itt	ne
   d858a:	460b      	movne	r3, r1
   d858c:	4602      	movne	r2, r0
   d858e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8592:	bf06      	itte	eq
   d8594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8598:	ea91 0f03 	teqeq	r1, r3
   d859c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d85a0:	bd30      	pop	{r4, r5, pc}
   d85a2:	bf00      	nop

000d85a4 <__aeabi_ui2d>:
   d85a4:	f090 0f00 	teq	r0, #0
   d85a8:	bf04      	itt	eq
   d85aa:	2100      	moveq	r1, #0
   d85ac:	4770      	bxeq	lr
   d85ae:	b530      	push	{r4, r5, lr}
   d85b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d85b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d85b8:	f04f 0500 	mov.w	r5, #0
   d85bc:	f04f 0100 	mov.w	r1, #0
   d85c0:	e750      	b.n	d8464 <__adddf3+0x138>
   d85c2:	bf00      	nop

000d85c4 <__aeabi_i2d>:
   d85c4:	f090 0f00 	teq	r0, #0
   d85c8:	bf04      	itt	eq
   d85ca:	2100      	moveq	r1, #0
   d85cc:	4770      	bxeq	lr
   d85ce:	b530      	push	{r4, r5, lr}
   d85d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d85d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d85d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d85dc:	bf48      	it	mi
   d85de:	4240      	negmi	r0, r0
   d85e0:	f04f 0100 	mov.w	r1, #0
   d85e4:	e73e      	b.n	d8464 <__adddf3+0x138>
   d85e6:	bf00      	nop

000d85e8 <__aeabi_f2d>:
   d85e8:	0042      	lsls	r2, r0, #1
   d85ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d85ee:	ea4f 0131 	mov.w	r1, r1, rrx
   d85f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d85f6:	bf1f      	itttt	ne
   d85f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d85fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8600:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8604:	4770      	bxne	lr
   d8606:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d860a:	bf08      	it	eq
   d860c:	4770      	bxeq	lr
   d860e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8612:	bf04      	itt	eq
   d8614:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8618:	4770      	bxeq	lr
   d861a:	b530      	push	{r4, r5, lr}
   d861c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8620:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8624:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8628:	e71c      	b.n	d8464 <__adddf3+0x138>
   d862a:	bf00      	nop

000d862c <__aeabi_ul2d>:
   d862c:	ea50 0201 	orrs.w	r2, r0, r1
   d8630:	bf08      	it	eq
   d8632:	4770      	bxeq	lr
   d8634:	b530      	push	{r4, r5, lr}
   d8636:	f04f 0500 	mov.w	r5, #0
   d863a:	e00a      	b.n	d8652 <__aeabi_l2d+0x16>

000d863c <__aeabi_l2d>:
   d863c:	ea50 0201 	orrs.w	r2, r0, r1
   d8640:	bf08      	it	eq
   d8642:	4770      	bxeq	lr
   d8644:	b530      	push	{r4, r5, lr}
   d8646:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d864a:	d502      	bpl.n	d8652 <__aeabi_l2d+0x16>
   d864c:	4240      	negs	r0, r0
   d864e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8652:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8656:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d865a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d865e:	f43f aed8 	beq.w	d8412 <__adddf3+0xe6>
   d8662:	f04f 0203 	mov.w	r2, #3
   d8666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d866a:	bf18      	it	ne
   d866c:	3203      	addne	r2, #3
   d866e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8672:	bf18      	it	ne
   d8674:	3203      	addne	r2, #3
   d8676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d867a:	f1c2 0320 	rsb	r3, r2, #32
   d867e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8682:	fa20 f002 	lsr.w	r0, r0, r2
   d8686:	fa01 fe03 	lsl.w	lr, r1, r3
   d868a:	ea40 000e 	orr.w	r0, r0, lr
   d868e:	fa21 f102 	lsr.w	r1, r1, r2
   d8692:	4414      	add	r4, r2
   d8694:	e6bd      	b.n	d8412 <__adddf3+0xe6>
   d8696:	bf00      	nop

000d8698 <__aeabi_dmul>:
   d8698:	b570      	push	{r4, r5, r6, lr}
   d869a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d869e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d86a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d86a6:	bf1d      	ittte	ne
   d86a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d86ac:	ea94 0f0c 	teqne	r4, ip
   d86b0:	ea95 0f0c 	teqne	r5, ip
   d86b4:	f000 f8de 	bleq	d8874 <__aeabi_dmul+0x1dc>
   d86b8:	442c      	add	r4, r5
   d86ba:	ea81 0603 	eor.w	r6, r1, r3
   d86be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d86c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d86c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d86ca:	bf18      	it	ne
   d86cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d86d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d86d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d86d8:	d038      	beq.n	d874c <__aeabi_dmul+0xb4>
   d86da:	fba0 ce02 	umull	ip, lr, r0, r2
   d86de:	f04f 0500 	mov.w	r5, #0
   d86e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d86e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d86ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   d86ee:	f04f 0600 	mov.w	r6, #0
   d86f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d86f6:	f09c 0f00 	teq	ip, #0
   d86fa:	bf18      	it	ne
   d86fc:	f04e 0e01 	orrne.w	lr, lr, #1
   d8700:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8704:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8708:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d870c:	d204      	bcs.n	d8718 <__aeabi_dmul+0x80>
   d870e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8712:	416d      	adcs	r5, r5
   d8714:	eb46 0606 	adc.w	r6, r6, r6
   d8718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d871c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d872c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8730:	bf88      	it	hi
   d8732:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8736:	d81e      	bhi.n	d8776 <__aeabi_dmul+0xde>
   d8738:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d873c:	bf08      	it	eq
   d873e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8742:	f150 0000 	adcs.w	r0, r0, #0
   d8746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d874a:	bd70      	pop	{r4, r5, r6, pc}
   d874c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8750:	ea46 0101 	orr.w	r1, r6, r1
   d8754:	ea40 0002 	orr.w	r0, r0, r2
   d8758:	ea81 0103 	eor.w	r1, r1, r3
   d875c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8760:	bfc2      	ittt	gt
   d8762:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d876a:	bd70      	popgt	{r4, r5, r6, pc}
   d876c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8770:	f04f 0e00 	mov.w	lr, #0
   d8774:	3c01      	subs	r4, #1
   d8776:	f300 80ab 	bgt.w	d88d0 <__aeabi_dmul+0x238>
   d877a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d877e:	bfde      	ittt	le
   d8780:	2000      	movle	r0, #0
   d8782:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8786:	bd70      	pople	{r4, r5, r6, pc}
   d8788:	f1c4 0400 	rsb	r4, r4, #0
   d878c:	3c20      	subs	r4, #32
   d878e:	da35      	bge.n	d87fc <__aeabi_dmul+0x164>
   d8790:	340c      	adds	r4, #12
   d8792:	dc1b      	bgt.n	d87cc <__aeabi_dmul+0x134>
   d8794:	f104 0414 	add.w	r4, r4, #20
   d8798:	f1c4 0520 	rsb	r5, r4, #32
   d879c:	fa00 f305 	lsl.w	r3, r0, r5
   d87a0:	fa20 f004 	lsr.w	r0, r0, r4
   d87a4:	fa01 f205 	lsl.w	r2, r1, r5
   d87a8:	ea40 0002 	orr.w	r0, r0, r2
   d87ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d87b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d87b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d87b8:	fa21 f604 	lsr.w	r6, r1, r4
   d87bc:	eb42 0106 	adc.w	r1, r2, r6
   d87c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d87c4:	bf08      	it	eq
   d87c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87ca:	bd70      	pop	{r4, r5, r6, pc}
   d87cc:	f1c4 040c 	rsb	r4, r4, #12
   d87d0:	f1c4 0520 	rsb	r5, r4, #32
   d87d4:	fa00 f304 	lsl.w	r3, r0, r4
   d87d8:	fa20 f005 	lsr.w	r0, r0, r5
   d87dc:	fa01 f204 	lsl.w	r2, r1, r4
   d87e0:	ea40 0002 	orr.w	r0, r0, r2
   d87e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d87e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d87ec:	f141 0100 	adc.w	r1, r1, #0
   d87f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d87f4:	bf08      	it	eq
   d87f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d87fa:	bd70      	pop	{r4, r5, r6, pc}
   d87fc:	f1c4 0520 	rsb	r5, r4, #32
   d8800:	fa00 f205 	lsl.w	r2, r0, r5
   d8804:	ea4e 0e02 	orr.w	lr, lr, r2
   d8808:	fa20 f304 	lsr.w	r3, r0, r4
   d880c:	fa01 f205 	lsl.w	r2, r1, r5
   d8810:	ea43 0302 	orr.w	r3, r3, r2
   d8814:	fa21 f004 	lsr.w	r0, r1, r4
   d8818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d881c:	fa21 f204 	lsr.w	r2, r1, r4
   d8820:	ea20 0002 	bic.w	r0, r0, r2
   d8824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d882c:	bf08      	it	eq
   d882e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8832:	bd70      	pop	{r4, r5, r6, pc}
   d8834:	f094 0f00 	teq	r4, #0
   d8838:	d10f      	bne.n	d885a <__aeabi_dmul+0x1c2>
   d883a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d883e:	0040      	lsls	r0, r0, #1
   d8840:	eb41 0101 	adc.w	r1, r1, r1
   d8844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8848:	bf08      	it	eq
   d884a:	3c01      	subeq	r4, #1
   d884c:	d0f7      	beq.n	d883e <__aeabi_dmul+0x1a6>
   d884e:	ea41 0106 	orr.w	r1, r1, r6
   d8852:	f095 0f00 	teq	r5, #0
   d8856:	bf18      	it	ne
   d8858:	4770      	bxne	lr
   d885a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d885e:	0052      	lsls	r2, r2, #1
   d8860:	eb43 0303 	adc.w	r3, r3, r3
   d8864:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8868:	bf08      	it	eq
   d886a:	3d01      	subeq	r5, #1
   d886c:	d0f7      	beq.n	d885e <__aeabi_dmul+0x1c6>
   d886e:	ea43 0306 	orr.w	r3, r3, r6
   d8872:	4770      	bx	lr
   d8874:	ea94 0f0c 	teq	r4, ip
   d8878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d887c:	bf18      	it	ne
   d887e:	ea95 0f0c 	teqne	r5, ip
   d8882:	d00c      	beq.n	d889e <__aeabi_dmul+0x206>
   d8884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8888:	bf18      	it	ne
   d888a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d888e:	d1d1      	bne.n	d8834 <__aeabi_dmul+0x19c>
   d8890:	ea81 0103 	eor.w	r1, r1, r3
   d8894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8898:	f04f 0000 	mov.w	r0, #0
   d889c:	bd70      	pop	{r4, r5, r6, pc}
   d889e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d88a2:	bf06      	itte	eq
   d88a4:	4610      	moveq	r0, r2
   d88a6:	4619      	moveq	r1, r3
   d88a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d88ac:	d019      	beq.n	d88e2 <__aeabi_dmul+0x24a>
   d88ae:	ea94 0f0c 	teq	r4, ip
   d88b2:	d102      	bne.n	d88ba <__aeabi_dmul+0x222>
   d88b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d88b8:	d113      	bne.n	d88e2 <__aeabi_dmul+0x24a>
   d88ba:	ea95 0f0c 	teq	r5, ip
   d88be:	d105      	bne.n	d88cc <__aeabi_dmul+0x234>
   d88c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d88c4:	bf1c      	itt	ne
   d88c6:	4610      	movne	r0, r2
   d88c8:	4619      	movne	r1, r3
   d88ca:	d10a      	bne.n	d88e2 <__aeabi_dmul+0x24a>
   d88cc:	ea81 0103 	eor.w	r1, r1, r3
   d88d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d88d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d88d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d88dc:	f04f 0000 	mov.w	r0, #0
   d88e0:	bd70      	pop	{r4, r5, r6, pc}
   d88e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d88e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d88ea:	bd70      	pop	{r4, r5, r6, pc}

000d88ec <__aeabi_ddiv>:
   d88ec:	b570      	push	{r4, r5, r6, lr}
   d88ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d88f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d88f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d88fa:	bf1d      	ittte	ne
   d88fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8900:	ea94 0f0c 	teqne	r4, ip
   d8904:	ea95 0f0c 	teqne	r5, ip
   d8908:	f000 f8a7 	bleq	d8a5a <__aeabi_ddiv+0x16e>
   d890c:	eba4 0405 	sub.w	r4, r4, r5
   d8910:	ea81 0e03 	eor.w	lr, r1, r3
   d8914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8918:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d891c:	f000 8088 	beq.w	d8a30 <__aeabi_ddiv+0x144>
   d8920:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8924:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d892c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8930:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d893c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8940:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8944:	429d      	cmp	r5, r3
   d8946:	bf08      	it	eq
   d8948:	4296      	cmpeq	r6, r2
   d894a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d894e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8952:	d202      	bcs.n	d895a <__aeabi_ddiv+0x6e>
   d8954:	085b      	lsrs	r3, r3, #1
   d8956:	ea4f 0232 	mov.w	r2, r2, rrx
   d895a:	1ab6      	subs	r6, r6, r2
   d895c:	eb65 0503 	sbc.w	r5, r5, r3
   d8960:	085b      	lsrs	r3, r3, #1
   d8962:	ea4f 0232 	mov.w	r2, r2, rrx
   d8966:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d896a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d896e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8972:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8976:	bf22      	ittt	cs
   d8978:	1ab6      	subcs	r6, r6, r2
   d897a:	4675      	movcs	r5, lr
   d897c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8980:	085b      	lsrs	r3, r3, #1
   d8982:	ea4f 0232 	mov.w	r2, r2, rrx
   d8986:	ebb6 0e02 	subs.w	lr, r6, r2
   d898a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d898e:	bf22      	ittt	cs
   d8990:	1ab6      	subcs	r6, r6, r2
   d8992:	4675      	movcs	r5, lr
   d8994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8998:	085b      	lsrs	r3, r3, #1
   d899a:	ea4f 0232 	mov.w	r2, r2, rrx
   d899e:	ebb6 0e02 	subs.w	lr, r6, r2
   d89a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89a6:	bf22      	ittt	cs
   d89a8:	1ab6      	subcs	r6, r6, r2
   d89aa:	4675      	movcs	r5, lr
   d89ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d89b0:	085b      	lsrs	r3, r3, #1
   d89b2:	ea4f 0232 	mov.w	r2, r2, rrx
   d89b6:	ebb6 0e02 	subs.w	lr, r6, r2
   d89ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   d89be:	bf22      	ittt	cs
   d89c0:	1ab6      	subcs	r6, r6, r2
   d89c2:	4675      	movcs	r5, lr
   d89c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d89c8:	ea55 0e06 	orrs.w	lr, r5, r6
   d89cc:	d018      	beq.n	d8a00 <__aeabi_ddiv+0x114>
   d89ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d89d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d89d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d89da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d89de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d89e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d89e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d89ea:	d1c0      	bne.n	d896e <__aeabi_ddiv+0x82>
   d89ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d89f0:	d10b      	bne.n	d8a0a <__aeabi_ddiv+0x11e>
   d89f2:	ea41 0100 	orr.w	r1, r1, r0
   d89f6:	f04f 0000 	mov.w	r0, #0
   d89fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d89fe:	e7b6      	b.n	d896e <__aeabi_ddiv+0x82>
   d8a00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8a04:	bf04      	itt	eq
   d8a06:	4301      	orreq	r1, r0
   d8a08:	2000      	moveq	r0, #0
   d8a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8a0e:	bf88      	it	hi
   d8a10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8a14:	f63f aeaf 	bhi.w	d8776 <__aeabi_dmul+0xde>
   d8a18:	ebb5 0c03 	subs.w	ip, r5, r3
   d8a1c:	bf04      	itt	eq
   d8a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d8a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a26:	f150 0000 	adcs.w	r0, r0, #0
   d8a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a2e:	bd70      	pop	{r4, r5, r6, pc}
   d8a30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d8a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d8a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d8a3c:	bfc2      	ittt	gt
   d8a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8a46:	bd70      	popgt	{r4, r5, r6, pc}
   d8a48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8a4c:	f04f 0e00 	mov.w	lr, #0
   d8a50:	3c01      	subs	r4, #1
   d8a52:	e690      	b.n	d8776 <__aeabi_dmul+0xde>
   d8a54:	ea45 0e06 	orr.w	lr, r5, r6
   d8a58:	e68d      	b.n	d8776 <__aeabi_dmul+0xde>
   d8a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8a5e:	ea94 0f0c 	teq	r4, ip
   d8a62:	bf08      	it	eq
   d8a64:	ea95 0f0c 	teqeq	r5, ip
   d8a68:	f43f af3b 	beq.w	d88e2 <__aeabi_dmul+0x24a>
   d8a6c:	ea94 0f0c 	teq	r4, ip
   d8a70:	d10a      	bne.n	d8a88 <__aeabi_ddiv+0x19c>
   d8a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8a76:	f47f af34 	bne.w	d88e2 <__aeabi_dmul+0x24a>
   d8a7a:	ea95 0f0c 	teq	r5, ip
   d8a7e:	f47f af25 	bne.w	d88cc <__aeabi_dmul+0x234>
   d8a82:	4610      	mov	r0, r2
   d8a84:	4619      	mov	r1, r3
   d8a86:	e72c      	b.n	d88e2 <__aeabi_dmul+0x24a>
   d8a88:	ea95 0f0c 	teq	r5, ip
   d8a8c:	d106      	bne.n	d8a9c <__aeabi_ddiv+0x1b0>
   d8a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8a92:	f43f aefd 	beq.w	d8890 <__aeabi_dmul+0x1f8>
   d8a96:	4610      	mov	r0, r2
   d8a98:	4619      	mov	r1, r3
   d8a9a:	e722      	b.n	d88e2 <__aeabi_dmul+0x24a>
   d8a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8aa0:	bf18      	it	ne
   d8aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8aa6:	f47f aec5 	bne.w	d8834 <__aeabi_dmul+0x19c>
   d8aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d8aae:	f47f af0d 	bne.w	d88cc <__aeabi_dmul+0x234>
   d8ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d8ab6:	f47f aeeb 	bne.w	d8890 <__aeabi_dmul+0x1f8>
   d8aba:	e712      	b.n	d88e2 <__aeabi_dmul+0x24a>

000d8abc <__gedf2>:
   d8abc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d8ac0:	e006      	b.n	d8ad0 <__cmpdf2+0x4>
   d8ac2:	bf00      	nop

000d8ac4 <__ledf2>:
   d8ac4:	f04f 0c01 	mov.w	ip, #1
   d8ac8:	e002      	b.n	d8ad0 <__cmpdf2+0x4>
   d8aca:	bf00      	nop

000d8acc <__cmpdf2>:
   d8acc:	f04f 0c01 	mov.w	ip, #1
   d8ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
   d8ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8ae0:	bf18      	it	ne
   d8ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d8ae6:	d01b      	beq.n	d8b20 <__cmpdf2+0x54>
   d8ae8:	b001      	add	sp, #4
   d8aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d8aee:	bf0c      	ite	eq
   d8af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d8af4:	ea91 0f03 	teqne	r1, r3
   d8af8:	bf02      	ittt	eq
   d8afa:	ea90 0f02 	teqeq	r0, r2
   d8afe:	2000      	moveq	r0, #0
   d8b00:	4770      	bxeq	lr
   d8b02:	f110 0f00 	cmn.w	r0, #0
   d8b06:	ea91 0f03 	teq	r1, r3
   d8b0a:	bf58      	it	pl
   d8b0c:	4299      	cmppl	r1, r3
   d8b0e:	bf08      	it	eq
   d8b10:	4290      	cmpeq	r0, r2
   d8b12:	bf2c      	ite	cs
   d8b14:	17d8      	asrcs	r0, r3, #31
   d8b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d8b1a:	f040 0001 	orr.w	r0, r0, #1
   d8b1e:	4770      	bx	lr
   d8b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b28:	d102      	bne.n	d8b30 <__cmpdf2+0x64>
   d8b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8b2e:	d107      	bne.n	d8b40 <__cmpdf2+0x74>
   d8b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8b38:	d1d6      	bne.n	d8ae8 <__cmpdf2+0x1c>
   d8b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8b3e:	d0d3      	beq.n	d8ae8 <__cmpdf2+0x1c>
   d8b40:	f85d 0b04 	ldr.w	r0, [sp], #4
   d8b44:	4770      	bx	lr
   d8b46:	bf00      	nop

000d8b48 <__aeabi_cdrcmple>:
   d8b48:	4684      	mov	ip, r0
   d8b4a:	4610      	mov	r0, r2
   d8b4c:	4662      	mov	r2, ip
   d8b4e:	468c      	mov	ip, r1
   d8b50:	4619      	mov	r1, r3
   d8b52:	4663      	mov	r3, ip
   d8b54:	e000      	b.n	d8b58 <__aeabi_cdcmpeq>
   d8b56:	bf00      	nop

000d8b58 <__aeabi_cdcmpeq>:
   d8b58:	b501      	push	{r0, lr}
   d8b5a:	f7ff ffb7 	bl	d8acc <__cmpdf2>
   d8b5e:	2800      	cmp	r0, #0
   d8b60:	bf48      	it	mi
   d8b62:	f110 0f00 	cmnmi.w	r0, #0
   d8b66:	bd01      	pop	{r0, pc}

000d8b68 <__aeabi_dcmpeq>:
   d8b68:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b6c:	f7ff fff4 	bl	d8b58 <__aeabi_cdcmpeq>
   d8b70:	bf0c      	ite	eq
   d8b72:	2001      	moveq	r0, #1
   d8b74:	2000      	movne	r0, #0
   d8b76:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b7a:	bf00      	nop

000d8b7c <__aeabi_dcmplt>:
   d8b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b80:	f7ff ffea 	bl	d8b58 <__aeabi_cdcmpeq>
   d8b84:	bf34      	ite	cc
   d8b86:	2001      	movcc	r0, #1
   d8b88:	2000      	movcs	r0, #0
   d8b8a:	f85d fb08 	ldr.w	pc, [sp], #8
   d8b8e:	bf00      	nop

000d8b90 <__aeabi_dcmple>:
   d8b90:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8b94:	f7ff ffe0 	bl	d8b58 <__aeabi_cdcmpeq>
   d8b98:	bf94      	ite	ls
   d8b9a:	2001      	movls	r0, #1
   d8b9c:	2000      	movhi	r0, #0
   d8b9e:	f85d fb08 	ldr.w	pc, [sp], #8
   d8ba2:	bf00      	nop

000d8ba4 <__aeabi_dcmpge>:
   d8ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8ba8:	f7ff ffce 	bl	d8b48 <__aeabi_cdrcmple>
   d8bac:	bf94      	ite	ls
   d8bae:	2001      	movls	r0, #1
   d8bb0:	2000      	movhi	r0, #0
   d8bb2:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bb6:	bf00      	nop

000d8bb8 <__aeabi_dcmpgt>:
   d8bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d8bbc:	f7ff ffc4 	bl	d8b48 <__aeabi_cdrcmple>
   d8bc0:	bf34      	ite	cc
   d8bc2:	2001      	movcc	r0, #1
   d8bc4:	2000      	movcs	r0, #0
   d8bc6:	f85d fb08 	ldr.w	pc, [sp], #8
   d8bca:	bf00      	nop

000d8bcc <__aeabi_dcmpun>:
   d8bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d8bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8bd4:	d102      	bne.n	d8bdc <__aeabi_dcmpun+0x10>
   d8bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d8bda:	d10a      	bne.n	d8bf2 <__aeabi_dcmpun+0x26>
   d8bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d8be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d8be4:	d102      	bne.n	d8bec <__aeabi_dcmpun+0x20>
   d8be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d8bea:	d102      	bne.n	d8bf2 <__aeabi_dcmpun+0x26>
   d8bec:	f04f 0000 	mov.w	r0, #0
   d8bf0:	4770      	bx	lr
   d8bf2:	f04f 0001 	mov.w	r0, #1
   d8bf6:	4770      	bx	lr

000d8bf8 <__aeabi_d2iz>:
   d8bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8c00:	d215      	bcs.n	d8c2e <__aeabi_d2iz+0x36>
   d8c02:	d511      	bpl.n	d8c28 <__aeabi_d2iz+0x30>
   d8c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8c0c:	d912      	bls.n	d8c34 <__aeabi_d2iz+0x3c>
   d8c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8c1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8c1e:	fa23 f002 	lsr.w	r0, r3, r2
   d8c22:	bf18      	it	ne
   d8c24:	4240      	negne	r0, r0
   d8c26:	4770      	bx	lr
   d8c28:	f04f 0000 	mov.w	r0, #0
   d8c2c:	4770      	bx	lr
   d8c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8c32:	d105      	bne.n	d8c40 <__aeabi_d2iz+0x48>
   d8c34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d8c38:	bf08      	it	eq
   d8c3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d8c3e:	4770      	bx	lr
   d8c40:	f04f 0000 	mov.w	r0, #0
   d8c44:	4770      	bx	lr
   d8c46:	bf00      	nop

000d8c48 <__aeabi_d2uiz>:
   d8c48:	004a      	lsls	r2, r1, #1
   d8c4a:	d211      	bcs.n	d8c70 <__aeabi_d2uiz+0x28>
   d8c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d8c50:	d211      	bcs.n	d8c76 <__aeabi_d2uiz+0x2e>
   d8c52:	d50d      	bpl.n	d8c70 <__aeabi_d2uiz+0x28>
   d8c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d8c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d8c5c:	d40e      	bmi.n	d8c7c <__aeabi_d2uiz+0x34>
   d8c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d8c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d8c6a:	fa23 f002 	lsr.w	r0, r3, r2
   d8c6e:	4770      	bx	lr
   d8c70:	f04f 0000 	mov.w	r0, #0
   d8c74:	4770      	bx	lr
   d8c76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d8c7a:	d102      	bne.n	d8c82 <__aeabi_d2uiz+0x3a>
   d8c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8c80:	4770      	bx	lr
   d8c82:	f04f 0000 	mov.w	r0, #0
   d8c86:	4770      	bx	lr

000d8c88 <__aeabi_d2f>:
   d8c88:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d8c8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d8c90:	bf24      	itt	cs
   d8c92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d8c96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d8c9a:	d90d      	bls.n	d8cb8 <__aeabi_d2f+0x30>
   d8c9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d8ca0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d8ca4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d8ca8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d8cac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d8cb0:	bf08      	it	eq
   d8cb2:	f020 0001 	biceq.w	r0, r0, #1
   d8cb6:	4770      	bx	lr
   d8cb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d8cbc:	d121      	bne.n	d8d02 <__aeabi_d2f+0x7a>
   d8cbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d8cc2:	bfbc      	itt	lt
   d8cc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d8cc8:	4770      	bxlt	lr
   d8cca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8cce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d8cd2:	f1c2 0218 	rsb	r2, r2, #24
   d8cd6:	f1c2 0c20 	rsb	ip, r2, #32
   d8cda:	fa10 f30c 	lsls.w	r3, r0, ip
   d8cde:	fa20 f002 	lsr.w	r0, r0, r2
   d8ce2:	bf18      	it	ne
   d8ce4:	f040 0001 	orrne.w	r0, r0, #1
   d8ce8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d8cec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d8cf0:	fa03 fc0c 	lsl.w	ip, r3, ip
   d8cf4:	ea40 000c 	orr.w	r0, r0, ip
   d8cf8:	fa23 f302 	lsr.w	r3, r3, r2
   d8cfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d8d00:	e7cc      	b.n	d8c9c <__aeabi_d2f+0x14>
   d8d02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d8d06:	d107      	bne.n	d8d18 <__aeabi_d2f+0x90>
   d8d08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d8d0c:	bf1e      	ittt	ne
   d8d0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d8d12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d8d16:	4770      	bxne	lr
   d8d18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d8d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d8d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d8d24:	4770      	bx	lr
   d8d26:	bf00      	nop

000d8d28 <atexit>:
   d8d28:	2300      	movs	r3, #0
   d8d2a:	4601      	mov	r1, r0
   d8d2c:	461a      	mov	r2, r3
   d8d2e:	4618      	mov	r0, r3
   d8d30:	f000 b850 	b.w	d8dd4 <__register_exitproc>

000d8d34 <memcmp>:
   d8d34:	b530      	push	{r4, r5, lr}
   d8d36:	3901      	subs	r1, #1
   d8d38:	2400      	movs	r4, #0
   d8d3a:	42a2      	cmp	r2, r4
   d8d3c:	d101      	bne.n	d8d42 <memcmp+0xe>
   d8d3e:	2000      	movs	r0, #0
   d8d40:	e005      	b.n	d8d4e <memcmp+0x1a>
   d8d42:	5d03      	ldrb	r3, [r0, r4]
   d8d44:	3401      	adds	r4, #1
   d8d46:	5d0d      	ldrb	r5, [r1, r4]
   d8d48:	42ab      	cmp	r3, r5
   d8d4a:	d0f6      	beq.n	d8d3a <memcmp+0x6>
   d8d4c:	1b58      	subs	r0, r3, r5
   d8d4e:	bd30      	pop	{r4, r5, pc}

000d8d50 <memcpy>:
   d8d50:	440a      	add	r2, r1
   d8d52:	4291      	cmp	r1, r2
   d8d54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8d58:	d100      	bne.n	d8d5c <memcpy+0xc>
   d8d5a:	4770      	bx	lr
   d8d5c:	b510      	push	{r4, lr}
   d8d5e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8d62:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8d66:	4291      	cmp	r1, r2
   d8d68:	d1f9      	bne.n	d8d5e <memcpy+0xe>
   d8d6a:	bd10      	pop	{r4, pc}

000d8d6c <memset>:
   d8d6c:	4402      	add	r2, r0
   d8d6e:	4603      	mov	r3, r0
   d8d70:	4293      	cmp	r3, r2
   d8d72:	d100      	bne.n	d8d76 <memset+0xa>
   d8d74:	4770      	bx	lr
   d8d76:	f803 1b01 	strb.w	r1, [r3], #1
   d8d7a:	e7f9      	b.n	d8d70 <memset+0x4>

000d8d7c <srand>:
   d8d7c:	b538      	push	{r3, r4, r5, lr}
   d8d7e:	4b0d      	ldr	r3, [pc, #52]	; (d8db4 <srand+0x38>)
   d8d80:	681d      	ldr	r5, [r3, #0]
   d8d82:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8d84:	4604      	mov	r4, r0
   d8d86:	b97b      	cbnz	r3, d8da8 <srand+0x2c>
   d8d88:	2018      	movs	r0, #24
   d8d8a:	f7fe fbef 	bl	d756c <malloc>
   d8d8e:	4a0a      	ldr	r2, [pc, #40]	; (d8db8 <srand+0x3c>)
   d8d90:	4b0a      	ldr	r3, [pc, #40]	; (d8dbc <srand+0x40>)
   d8d92:	63a8      	str	r0, [r5, #56]	; 0x38
   d8d94:	e9c0 2300 	strd	r2, r3, [r0]
   d8d98:	4b09      	ldr	r3, [pc, #36]	; (d8dc0 <srand+0x44>)
   d8d9a:	6083      	str	r3, [r0, #8]
   d8d9c:	230b      	movs	r3, #11
   d8d9e:	8183      	strh	r3, [r0, #12]
   d8da0:	2201      	movs	r2, #1
   d8da2:	2300      	movs	r3, #0
   d8da4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8da8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8daa:	2200      	movs	r2, #0
   d8dac:	611c      	str	r4, [r3, #16]
   d8dae:	615a      	str	r2, [r3, #20]
   d8db0:	bd38      	pop	{r3, r4, r5, pc}
   d8db2:	bf00      	nop
   d8db4:	2003e038 	.word	0x2003e038
   d8db8:	abcd330e 	.word	0xabcd330e
   d8dbc:	e66d1234 	.word	0xe66d1234
   d8dc0:	0005deec 	.word	0x0005deec

000d8dc4 <strlen>:
   d8dc4:	4603      	mov	r3, r0
   d8dc6:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8dca:	2a00      	cmp	r2, #0
   d8dcc:	d1fb      	bne.n	d8dc6 <strlen+0x2>
   d8dce:	1a18      	subs	r0, r3, r0
   d8dd0:	3801      	subs	r0, #1
   d8dd2:	4770      	bx	lr

000d8dd4 <__register_exitproc>:
   d8dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d8dd8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d8e94 <__register_exitproc+0xc0>
   d8ddc:	4606      	mov	r6, r0
   d8dde:	f8d8 0000 	ldr.w	r0, [r8]
   d8de2:	461f      	mov	r7, r3
   d8de4:	460d      	mov	r5, r1
   d8de6:	4691      	mov	r9, r2
   d8de8:	f000 f856 	bl	d8e98 <__retarget_lock_acquire_recursive>
   d8dec:	4b25      	ldr	r3, [pc, #148]	; (d8e84 <__register_exitproc+0xb0>)
   d8dee:	681c      	ldr	r4, [r3, #0]
   d8df0:	b934      	cbnz	r4, d8e00 <__register_exitproc+0x2c>
   d8df2:	4c25      	ldr	r4, [pc, #148]	; (d8e88 <__register_exitproc+0xb4>)
   d8df4:	601c      	str	r4, [r3, #0]
   d8df6:	4b25      	ldr	r3, [pc, #148]	; (d8e8c <__register_exitproc+0xb8>)
   d8df8:	b113      	cbz	r3, d8e00 <__register_exitproc+0x2c>
   d8dfa:	681b      	ldr	r3, [r3, #0]
   d8dfc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d8e00:	6863      	ldr	r3, [r4, #4]
   d8e02:	2b1f      	cmp	r3, #31
   d8e04:	dd07      	ble.n	d8e16 <__register_exitproc+0x42>
   d8e06:	f8d8 0000 	ldr.w	r0, [r8]
   d8e0a:	f000 f847 	bl	d8e9c <__retarget_lock_release_recursive>
   d8e0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8e12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8e16:	b34e      	cbz	r6, d8e6c <__register_exitproc+0x98>
   d8e18:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d8e1c:	b988      	cbnz	r0, d8e42 <__register_exitproc+0x6e>
   d8e1e:	4b1c      	ldr	r3, [pc, #112]	; (d8e90 <__register_exitproc+0xbc>)
   d8e20:	b923      	cbnz	r3, d8e2c <__register_exitproc+0x58>
   d8e22:	f8d8 0000 	ldr.w	r0, [r8]
   d8e26:	f000 f838 	bl	d8e9a <__retarget_lock_release>
   d8e2a:	e7f0      	b.n	d8e0e <__register_exitproc+0x3a>
   d8e2c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d8e30:	f7fe fb9c 	bl	d756c <malloc>
   d8e34:	2800      	cmp	r0, #0
   d8e36:	d0f4      	beq.n	d8e22 <__register_exitproc+0x4e>
   d8e38:	2300      	movs	r3, #0
   d8e3a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d8e3e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d8e42:	6863      	ldr	r3, [r4, #4]
   d8e44:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d8e48:	2201      	movs	r2, #1
   d8e4a:	409a      	lsls	r2, r3
   d8e4c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d8e50:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d8e54:	4313      	orrs	r3, r2
   d8e56:	2e02      	cmp	r6, #2
   d8e58:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d8e5c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d8e60:	bf02      	ittt	eq
   d8e62:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d8e66:	431a      	orreq	r2, r3
   d8e68:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d8e6c:	6863      	ldr	r3, [r4, #4]
   d8e6e:	f8d8 0000 	ldr.w	r0, [r8]
   d8e72:	1c5a      	adds	r2, r3, #1
   d8e74:	3302      	adds	r3, #2
   d8e76:	6062      	str	r2, [r4, #4]
   d8e78:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d8e7c:	f000 f80e 	bl	d8e9c <__retarget_lock_release_recursive>
   d8e80:	2000      	movs	r0, #0
   d8e82:	e7c6      	b.n	d8e12 <__register_exitproc+0x3e>
   d8e84:	2003e7e0 	.word	0x2003e7e0
   d8e88:	2003e754 	.word	0x2003e754
   d8e8c:	00000000 	.word	0x00000000
   d8e90:	000d756d 	.word	0x000d756d
   d8e94:	2003e09c 	.word	0x2003e09c

000d8e98 <__retarget_lock_acquire_recursive>:
   d8e98:	4770      	bx	lr

000d8e9a <__retarget_lock_release>:
   d8e9a:	4770      	bx	lr

000d8e9c <__retarget_lock_release_recursive>:
   d8e9c:	4770      	bx	lr

000d8e9e <link_code_end>:
	...

000d8ea0 <dynalib_user>:
   d8ea0:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   d8eb0:	0000 0000 6564 6166 6c75 2074 4d00 4253     ....default .MSB
   d8ec0:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d8ed0:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d8ee0:	7465 6974 676e 2073 7325 7525 2520 2073     ettings %s%u %s 
   d8ef0:	4f4d 4544 7525 003e 6f43 6c75 2064 6f6e     MODE%u>.Could no
   d8f00:	2074 6966 646e 4120 3753 3433 0031 6f43     t find AS7341.Co
   d8f10:	6c75 6e64 7427 6620 6e69 2064 5452 0043     uldn't find RTC.
   d8f20:	5452 2043 7369 4e20 544f 7220 6e75 696e     RTC is NOT runni
   d8f30:	676e 0021 5741 3539 3332 6e20 746f 6620     ng!.AW9523 not f
   d8f40:	756f 646e 203f 6843 6365 206b 6977 6972     ound? Check wiri
   d8f50:	676e 0021 5741 3539 3332 6620 756f 646e     ng!.AW9523 found
   d8f60:	0021 5f32 3531 325f 5f34 3037 6d30 5f73     !.2_15_24_700ms_
   d8f70:	3231 7838 745f 7268 756f 6867 685f 6c6f     128x_through_hol
   d8f80:	5f65 6964 756c 6974 6e6f 2e73 7363 0076     e_dilutions.csv.
   d8f90:	6144 6574 6120 646e 5420 6d69 2c65 5341     Date and Time,AS
   d8fa0:	4554 2c50 5441 4d49 2c45 4147 4e49 4c2c     TEP,ATIME,GAIN,L
   d8fb0:	4445 5320 6174 7574 2c73 454c 2044 6e49     ED Status,LED In
   d8fc0:	6574 736e 7469 2c79 6554 7473 532c 6365     tensity,Test,Sec
   d8fd0:	6e6f 7364 4d2c 6c69 696c 6573 6f63 646e     onds,Millisecond
   d8fe0:	2c73 7954 6570 462c 2031 4228 7361 6369     s,Type,F1 (Basic
   d8ff0:	2c29 3246 2820 6142 6973 2963 462c 2033     ),F2 (Basic),F3 
   d9000:	4228 7361 6369 2c29 3446 2820 6142 6973     (Basic),F4 (Basi
   d9010:	2963 462c 2035 4228 7361 6369 2c29 3646     c),F5 (Basic),F6
   d9020:	2820 6142 6973 2963 462c 2037 4228 7361      (Basic),F7 (Bas
   d9030:	6369 2c29 3846 2820 6142 6973 2963 432c     ic),F8 (Basic),C
   d9040:	656c 7261 2820 6142 6973 2963 4e2c 5249     lear (Basic),NIR
   d9050:	2820 6142 6973 2963 542c 7079 2c65 3146      (Basic),Type,F1
   d9060:	2820 6152 2977 462c 2032 5228 7761 2c29      (Raw),F2 (Raw),
   d9070:	3346 2820 6152 2977 462c 2034 5228 7761     F3 (Raw),F4 (Raw
   d9080:	2c29 3546 2820 6152 2977 462c 2036 5228     ),F5 (Raw),F6 (R
   d9090:	7761 2c29 3746 2820 6152 2977 462c 2038     aw),F7 (Raw),F8 
   d90a0:	5228 7761 2c29 6c43 6165 2072 5228 7761     (Raw),Clear (Raw
   d90b0:	2c29 494e 2052 5228 7761 0029 7245 6f72     ),NIR (Raw).Erro
   d90c0:	2072 706f 6e65 6e69 2067 6966 656c 0021     r opening file!.
   d90d0:	7245 6f72 2072 6572 6461 6e69 2067 6c61     Error reading al
   d90e0:	206c 6863 6e61 656e 736c 0021 2820 2900     l channels!. (.)
   d90f0:	0020 454c 2044 7453 7461 7375 4c00 4445      .LED Status.LED
   d9100:	4920 746e 6e65 6973 7974 3600 302e 4200      Intensity.6.0.B
   d9110:	5341 4349 4320 554f 544e 0053 4152 2057     ASIC COUNTS.RAW 
   d9120:	4156 554c 5345 4600 2031 3134 6e35 206d     VALUES.F1 415nm 
   d9130:	203a 2000 6172 2977 4600 2032 3434 6e35     : . raw).F2 445n
   d9140:	206d 203a 4600 2033 3834 6e30 206d 203a     m : .F3 480nm : 
   d9150:	4600 2034 3135 6e35 206d 203a 4600 2035     .F4 515nm : .F5 
   d9160:	3535 6e35 206d 203a 4600 2036 3935 6e30     555nm : .F6 590n
   d9170:	206d 203a 4600 2037 3336 6e30 206d 203a     m : .F7 630nm : 
   d9180:	4600 2038 3836 6e30 206d 203a 4300 656c     .F8 680nm : .Cle
   d9190:	7261 2020 2020 203a 4e00 5249 2020 2020     ar    : .NIR    
   d91a0:	2020 203a 6200 6765 6e69 6320 6c68 726f       : .begin chlor
   d91b0:	706f 7968 6c6c 6d20 6165 7573 6572 656d     ophyll measureme
   d91c0:	746e 0073 6e45 2064 6863 6f6c 6f72 6870     nts.End chloroph
   d91d0:	6c79 206c 656d 7361 7275 6d65 6e65 7374     yll measurements
   d91e0:	4200 6765 6e69 7420 7275 6962 6964 7974     .Begin turbidity
   d91f0:	6d20 6165 7573 6572 656d 746e 0073 6e45      measurements.En
   d9200:	2064 7574 6272 6469 7469 2079 656d 7361     d turbidity meas
   d9210:	7275 6d65 6e65 7374 0000 0000               urements....

000d921c <_ZTVN8particle11SPISettingsE>:
	...
   d9224:	4155 000d 40b3 000d 40d1 000d               UA...@...@..

000d9230 <_ZTV4File>:
	...
   d9238:	40cf 000d 40df 000d 411f 000d 4119 000d     .@...@...A...A..
   d9248:	40b5 000d 40f9 000d 40f3 000d 40ed 000d     .@...@...@...@..

000d9258 <_ZL7LedPins>:
   d9258:	0100 0a03 0005 0000                         ........

000d9260 <CSWTCH.61>:
   d9260:	0000 3f00 0000 3f80 0000 4000 0000 4080     ...?...?...@...@
   d9270:	0000 4100 0000 4180 0000 4200 0000 4280     ...A...A...B...B
   d9280:	0000 4300 0000 4380 0000 4400               ...C...C...D

000d928c <_ZTV15Adafruit_AS7341>:
	...
   d9294:	4d25 000d                                   %M..

000d9298 <_ZL11daysInMonth>:
   d9298:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e               ............

000d92a4 <_ZTVN5spark13EthernetClassE>:
	...
   d92ac:	7623 000d 7619 000d 760f 000d 7605 000d     #v...v...v...v..
   d92bc:	75f9 000d 75ed 000d 7871 000d 7879 000d     .u...u..qx..yx..
   d92cc:	75e1 000d 75d9 000d 75cf 000d 75c5 000d     .u...u...u...u..
   d92dc:	78a9 000d                                   .x..

000d92e0 <_ZTV7TwoWire>:
	...
   d92e8:	7641 000d 768b 000d 7663 000d 7643 000d     Av...v..cv..Cv..
   d92f8:	766b 000d 7673 000d 767b 000d 7683 000d     kv..sv..{v...v..

000d9308 <_ZTV9IPAddress>:
	...
   d9310:	774d 000d 773d 000d 773f 000d 7061 0070     Mw..=w..?w..app.

000d9320 <_ZTVN5spark12NetworkClassE>:
	...
   d9328:	7831 000d 783b 000d 7845 000d 784f 000d     1x..;x..Ex..Ox..
   d9338:	7859 000d 7865 000d 7871 000d 7879 000d     Yx..ex..qx..yx..
   d9348:	7881 000d 788d 000d 7895 000d 789f 000d     .x...x...x...x..
   d9358:	78a9 000d 616e 006e 6e69 0066 766f 0066     .x..nan.inf.ovf.
   d9368:	002e                                        ..

000d936a <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d936a:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
   d937a:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d938a:	6d69 0065 0000                              ime...

000d9390 <_ZTV11USARTSerial>:
	...
   d9398:	7e11 000d 7e7f 000d 7e57 000d 7991 000d     .~...~..W~...y..
   d93a8:	7e27 000d 7e43 000d 7e35 000d 7e51 000d     '~..C~..5~..Q~..
   d93b8:	7e13 000d 7e19 000d                         .~...~..

000d93c0 <_ZTV9USBSerial>:
	...
   d93c8:	7f0b 000d 7f73 000d 7f49 000d 7991 000d     ....s...I....y..
   d93d8:	7f3b 000d 7f0d 000d 7f1d 000d 7f6d 000d     ;...........m...
   d93e8:	7f2d 000d 7f05 000d                         -.......

000d93f0 <_ZTVN5spark9WiFiClassE>:
	...
   d93f8:	8077 000d 806d 000d 8063 000d 8019 000d     w...m...c.......
   d9408:	8057 000d 804b 000d 7871 000d 7879 000d     W...K...qx..yx..
   d9418:	803f 000d 8037 000d 802d 000d 8023 000d     ?...7...-...#...
   d9428:	78a9 000d                                   .x..

000d942c <_ZSt7nothrow>:
	...

000d942d <link_const_variable_data_end>:
   d942d:	00          	.byte	0x00
	...

000d9430 <link_constructors_location>:
   d9430:	000d4be1 	.word	0x000d4be1
   d9434:	000d75b5 	.word	0x000d75b5
   d9438:	000d762d 	.word	0x000d762d
   d943c:	000d7821 	.word	0x000d7821
   d9440:	000d797d 	.word	0x000d797d
   d9444:	000d7c49 	.word	0x000d7c49
   d9448:	000d7dd9 	.word	0x000d7dd9
   d944c:	000d7dfd 	.word	0x000d7dfd
   d9450:	000d8081 	.word	0x000d8081

000d9454 <link_constructors_end>:
	...
